
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20005ae0 	.word	0x20005ae0
}
   4:	000140d9 	.word	0x000140d9
   8:	0001db09 	.word	0x0001db09
   c:	00014109 	.word	0x00014109
  10:	00014109 	.word	0x00014109
  14:	00014109 	.word	0x00014109
  18:	00014109 	.word	0x00014109
	...
  2c:	00014035 	.word	0x00014035
  30:	00014109 	.word	0x00014109
  34:	00000000 	.word	0x00000000
  38:	00013fe1 	.word	0x00013fe1
  3c:	0001c955 	.word	0x0001c955

00000040 <_irq_vector_table>:
  40:	00014099 000208f1 00014099 00014099     .@.......@...@..
  50:	00014099 00014099 00014099 00014099     .@...@...@...@..
  60:	000208b9 00014099 00014099 000208d7     .....@...@......
  70:	00014099 00014099 00014099 00014099     .@...@...@...@..
  80:	00014099 00014099 00014099 00014099     .@...@...@...@..
  90:	00014099 00014099 00014099 00014099     .@...@...@...@..
  a0:	00014099 00014099 00014099 00014099     .@...@...@...@..
  b0:	00014099 00014099 00014099 00014099     .@...@...@...@..
  c0:	00014099 00014099 00014099 00014099     .@...@...@...@..
  d0:	00014099 00014099 00014099              .@...@...@..

Disassembly of section text:

000000e0 <__aeabi_frsub>:
      e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__addsf3>
      e6:	bf00      	nop

000000e8 <__aeabi_fsub>:
      e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000000ec <__addsf3>:
      ec:	0042      	lsls	r2, r0, #1
      ee:	bf1f      	itttt	ne
      f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
      f4:	ea92 0f03 	teqne	r2, r3
      f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
      fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     100:	d06a      	beq.n	1d8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x8e>
     102:	ea4f 6212 	mov.w	r2, r2, lsr #24
     106:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     10a:	bfc1      	itttt	gt
     10c:	18d2      	addgt	r2, r2, r3
     10e:	4041      	eorgt	r1, r0
     110:	4048      	eorgt	r0, r1
     112:	4041      	eorgt	r1, r0
     114:	bfb8      	it	lt
     116:	425b      	neglt	r3, r3
     118:	2b19      	cmp	r3, #25
     11a:	bf88      	it	hi
     11c:	4770      	bxhi	lr
     11e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     122:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     126:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     12a:	bf18      	it	ne
     12c:	4240      	negne	r0, r0
     12e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     132:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     136:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     13a:	bf18      	it	ne
     13c:	4249      	negne	r1, r1
     13e:	ea92 0f03 	teq	r2, r3
     142:	d03f      	beq.n	1c4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x7a>
     144:	f1a2 0201 	sub.w	r2, r2, #1
     148:	fa41 fc03 	asr.w	ip, r1, r3
     14c:	eb10 000c 	adds.w	r0, r0, ip
     150:	f1c3 0320 	rsb	r3, r3, #32
     154:	fa01 f103 	lsl.w	r1, r1, r3
     158:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     15c:	d502      	bpl.n	164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>
     15e:	4249      	negs	r1, r1
     160:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     164:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     168:	d313      	bcc.n	192 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x48>
     16a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     16e:	d306      	bcc.n	17e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x34>
     170:	0840      	lsrs	r0, r0, #1
     172:	ea4f 0131 	mov.w	r1, r1, rrx
     176:	f102 0201 	add.w	r2, r2, #1
     17a:	2afe      	cmp	r2, #254	; 0xfe
     17c:	d251      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     17e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     182:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     186:	bf08      	it	eq
     188:	f020 0001 	biceq.w	r0, r0, #1
     18c:	ea40 0003 	orr.w	r0, r0, r3
     190:	4770      	bx	lr
     192:	0049      	lsls	r1, r1, #1
     194:	eb40 0000 	adc.w	r0, r0, r0
     198:	3a01      	subs	r2, #1
     19a:	bf28      	it	cs
     19c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1a0:	d2ed      	bcs.n	17e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x34>
     1a2:	fab0 fc80 	clz	ip, r0
     1a6:	f1ac 0c08 	sub.w	ip, ip, #8
     1aa:	ebb2 020c 	subs.w	r2, r2, ip
     1ae:	fa00 f00c 	lsl.w	r0, r0, ip
     1b2:	bfaa      	itet	ge
     1b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1b8:	4252      	neglt	r2, r2
     1ba:	4318      	orrge	r0, r3
     1bc:	bfbc      	itt	lt
     1be:	40d0      	lsrlt	r0, r2
     1c0:	4318      	orrlt	r0, r3
     1c2:	4770      	bx	lr
     1c4:	f092 0f00 	teq	r2, #0
     1c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1cc:	bf06      	itte	eq
     1ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1d2:	3201      	addeq	r2, #1
     1d4:	3b01      	subne	r3, #1
     1d6:	e7b5      	b.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     1d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     1e0:	bf18      	it	ne
     1e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1e6:	d021      	beq.n	22c <CONFIG_FLASH_SIZE+0x2c>
     1e8:	ea92 0f03 	teq	r2, r3
     1ec:	d004      	beq.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1ee:	f092 0f00 	teq	r2, #0
     1f2:	bf08      	it	eq
     1f4:	4608      	moveq	r0, r1
     1f6:	4770      	bx	lr
     1f8:	ea90 0f01 	teq	r0, r1
     1fc:	bf1c      	itt	ne
     1fe:	2000      	movne	r0, #0
     200:	4770      	bxne	lr
     202:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     206:	d104      	bne.n	212 <CONFIG_FLASH_SIZE+0x12>
     208:	0040      	lsls	r0, r0, #1
     20a:	bf28      	it	cs
     20c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     210:	4770      	bx	lr
     212:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     216:	bf3c      	itt	cc
     218:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     21c:	4770      	bxcc	lr
     21e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     222:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     226:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     22a:	4770      	bx	lr
     22c:	ea7f 6222 	mvns.w	r2, r2, asr #24
     230:	bf16      	itet	ne
     232:	4608      	movne	r0, r1
     234:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     238:	4601      	movne	r1, r0
     23a:	0242      	lsls	r2, r0, #9
     23c:	bf06      	itte	eq
     23e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     242:	ea90 0f01 	teqeq	r0, r1
     246:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     24a:	4770      	bx	lr

0000024c <__aeabi_ui2f>:
     24c:	f04f 0300 	mov.w	r3, #0
     250:	e004      	b.n	25c <__aeabi_i2f+0x8>
     252:	bf00      	nop

00000254 <__aeabi_i2f>:
     254:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     258:	bf48      	it	mi
     25a:	4240      	negmi	r0, r0
     25c:	ea5f 0c00 	movs.w	ip, r0
     260:	bf08      	it	eq
     262:	4770      	bxeq	lr
     264:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     268:	4601      	mov	r1, r0
     26a:	f04f 0000 	mov.w	r0, #0
     26e:	e01c      	b.n	2aa <__aeabi_l2f+0x2a>

00000270 <__aeabi_ul2f>:
     270:	ea50 0201 	orrs.w	r2, r0, r1
     274:	bf08      	it	eq
     276:	4770      	bxeq	lr
     278:	f04f 0300 	mov.w	r3, #0
     27c:	e00a      	b.n	294 <__aeabi_l2f+0x14>
     27e:	bf00      	nop

00000280 <__aeabi_l2f>:
     280:	ea50 0201 	orrs.w	r2, r0, r1
     284:	bf08      	it	eq
     286:	4770      	bxeq	lr
     288:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     28c:	d502      	bpl.n	294 <__aeabi_l2f+0x14>
     28e:	4240      	negs	r0, r0
     290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     294:	ea5f 0c01 	movs.w	ip, r1
     298:	bf02      	ittt	eq
     29a:	4684      	moveq	ip, r0
     29c:	4601      	moveq	r1, r0
     29e:	2000      	moveq	r0, #0
     2a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2a4:	bf08      	it	eq
     2a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ae:	fabc f28c 	clz	r2, ip
     2b2:	3a08      	subs	r2, #8
     2b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2b8:	db10      	blt.n	2dc <__aeabi_l2f+0x5c>
     2ba:	fa01 fc02 	lsl.w	ip, r1, r2
     2be:	4463      	add	r3, ip
     2c0:	fa00 fc02 	lsl.w	ip, r0, r2
     2c4:	f1c2 0220 	rsb	r2, r2, #32
     2c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2cc:	fa20 f202 	lsr.w	r2, r0, r2
     2d0:	eb43 0002 	adc.w	r0, r3, r2
     2d4:	bf08      	it	eq
     2d6:	f020 0001 	biceq.w	r0, r0, #1
     2da:	4770      	bx	lr
     2dc:	f102 0220 	add.w	r2, r2, #32
     2e0:	fa01 fc02 	lsl.w	ip, r1, r2
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     2ec:	fa21 f202 	lsr.w	r2, r1, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     2fa:	4770      	bx	lr

000002fc <__aeabi_fmul>:
     2fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     300:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     304:	bf1e      	ittt	ne
     306:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     30a:	ea92 0f0c 	teqne	r2, ip
     30e:	ea93 0f0c 	teqne	r3, ip
     312:	d06f      	beq.n	3f4 <CONFIG_BT_DEVICE_APPEARANCE+0xf4>
     314:	441a      	add	r2, r3
     316:	ea80 0c01 	eor.w	ip, r0, r1
     31a:	0240      	lsls	r0, r0, #9
     31c:	bf18      	it	ne
     31e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     322:	d01e      	beq.n	362 <CONFIG_BT_DEVICE_APPEARANCE+0x62>
     324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     328:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     32c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     330:	fba0 3101 	umull	r3, r1, r0, r1
     334:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     338:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     33c:	bf3e      	ittt	cc
     33e:	0049      	lslcc	r1, r1, #1
     340:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     344:	005b      	lslcc	r3, r3, #1
     346:	ea40 0001 	orr.w	r0, r0, r1
     34a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     34e:	2afd      	cmp	r2, #253	; 0xfd
     350:	d81d      	bhi.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     35a:	bf08      	it	eq
     35c:	f020 0001 	biceq.w	r0, r0, #1
     360:	4770      	bx	lr
     362:	f090 0f00 	teq	r0, #0
     366:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     36a:	bf08      	it	eq
     36c:	0249      	lsleq	r1, r1, #9
     36e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     372:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     376:	3a7f      	subs	r2, #127	; 0x7f
     378:	bfc2      	ittt	gt
     37a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     37e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     382:	4770      	bxgt	lr
     384:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     388:	f04f 0300 	mov.w	r3, #0
     38c:	3a01      	subs	r2, #1
     38e:	dc5d      	bgt.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     390:	f112 0f19 	cmn.w	r2, #25
     394:	bfdc      	itt	le
     396:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     39a:	4770      	bxle	lr
     39c:	f1c2 0200 	rsb	r2, r2, #0
     3a0:	0041      	lsls	r1, r0, #1
     3a2:	fa21 f102 	lsr.w	r1, r1, r2
     3a6:	f1c2 0220 	rsb	r2, r2, #32
     3aa:	fa00 fc02 	lsl.w	ip, r0, r2
     3ae:	ea5f 0031 	movs.w	r0, r1, rrx
     3b2:	f140 0000 	adc.w	r0, r0, #0
     3b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3ba:	bf08      	it	eq
     3bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3c0:	4770      	bx	lr
     3c2:	f092 0f00 	teq	r2, #0
     3c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ca:	bf02      	ittt	eq
     3cc:	0040      	lsleq	r0, r0, #1
     3ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3d2:	3a01      	subeq	r2, #1
     3d4:	d0f9      	beq.n	3ca <CONFIG_BT_DEVICE_APPEARANCE+0xca>
     3d6:	ea40 000c 	orr.w	r0, r0, ip
     3da:	f093 0f00 	teq	r3, #0
     3de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     3e2:	bf02      	ittt	eq
     3e4:	0049      	lsleq	r1, r1, #1
     3e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     3ea:	3b01      	subeq	r3, #1
     3ec:	d0f9      	beq.n	3e2 <CONFIG_BT_DEVICE_APPEARANCE+0xe2>
     3ee:	ea41 010c 	orr.w	r1, r1, ip
     3f2:	e78f      	b.n	314 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     3f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     3f8:	ea92 0f0c 	teq	r2, ip
     3fc:	bf18      	it	ne
     3fe:	ea93 0f0c 	teqne	r3, ip
     402:	d00a      	beq.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     404:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     408:	bf18      	it	ne
     40a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     40e:	d1d8      	bne.n	3c2 <CONFIG_BT_DEVICE_APPEARANCE+0xc2>
     410:	ea80 0001 	eor.w	r0, r0, r1
     414:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     418:	4770      	bx	lr
     41a:	f090 0f00 	teq	r0, #0
     41e:	bf17      	itett	ne
     420:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     424:	4608      	moveq	r0, r1
     426:	f091 0f00 	teqne	r1, #0
     42a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     42e:	d014      	beq.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     430:	ea92 0f0c 	teq	r2, ip
     434:	d101      	bne.n	43a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     436:	0242      	lsls	r2, r0, #9
     438:	d10f      	bne.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     43a:	ea93 0f0c 	teq	r3, ip
     43e:	d103      	bne.n	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     440:	024b      	lsls	r3, r1, #9
     442:	bf18      	it	ne
     444:	4608      	movne	r0, r1
     446:	d108      	bne.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     448:	ea80 0001 	eor.w	r0, r0, r1
     44c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     450:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     454:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     458:	4770      	bx	lr
     45a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     45e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     462:	4770      	bx	lr

00000464 <__aeabi_fdiv>:
     464:	f04f 0cff 	mov.w	ip, #255	; 0xff
     468:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     46c:	bf1e      	ittt	ne
     46e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     472:	ea92 0f0c 	teqne	r2, ip
     476:	ea93 0f0c 	teqne	r3, ip
     47a:	d069      	beq.n	550 <__aeabi_fdiv+0xec>
     47c:	eba2 0203 	sub.w	r2, r2, r3
     480:	ea80 0c01 	eor.w	ip, r0, r1
     484:	0249      	lsls	r1, r1, #9
     486:	ea4f 2040 	mov.w	r0, r0, lsl #9
     48a:	d037      	beq.n	4fc <__aeabi_fdiv+0x98>
     48c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     490:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     494:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     498:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     49c:	428b      	cmp	r3, r1
     49e:	bf38      	it	cc
     4a0:	005b      	lslcc	r3, r3, #1
     4a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4aa:	428b      	cmp	r3, r1
     4ac:	bf24      	itt	cs
     4ae:	1a5b      	subcs	r3, r3, r1
     4b0:	ea40 000c 	orrcs.w	r0, r0, ip
     4b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4b8:	bf24      	itt	cs
     4ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4c6:	bf24      	itt	cs
     4c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4d4:	bf24      	itt	cs
     4d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4de:	011b      	lsls	r3, r3, #4
     4e0:	bf18      	it	ne
     4e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     4e6:	d1e0      	bne.n	4aa <__aeabi_fdiv+0x46>
     4e8:	2afd      	cmp	r2, #253	; 0xfd
     4ea:	f63f af50 	bhi.w	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     4ee:	428b      	cmp	r3, r1
     4f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     4f4:	bf08      	it	eq
     4f6:	f020 0001 	biceq.w	r0, r0, #1
     4fa:	4770      	bx	lr
     4fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     500:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     504:	327f      	adds	r2, #127	; 0x7f
     506:	bfc2      	ittt	gt
     508:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     50c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     510:	4770      	bxgt	lr
     512:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     516:	f04f 0300 	mov.w	r3, #0
     51a:	3a01      	subs	r2, #1
     51c:	e737      	b.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x8e>
     51e:	f092 0f00 	teq	r2, #0
     522:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     526:	bf02      	ittt	eq
     528:	0040      	lsleq	r0, r0, #1
     52a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     52e:	3a01      	subeq	r2, #1
     530:	d0f9      	beq.n	526 <__aeabi_fdiv+0xc2>
     532:	ea40 000c 	orr.w	r0, r0, ip
     536:	f093 0f00 	teq	r3, #0
     53a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     53e:	bf02      	ittt	eq
     540:	0049      	lsleq	r1, r1, #1
     542:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     546:	3b01      	subeq	r3, #1
     548:	d0f9      	beq.n	53e <__aeabi_fdiv+0xda>
     54a:	ea41 010c 	orr.w	r1, r1, ip
     54e:	e795      	b.n	47c <__aeabi_fdiv+0x18>
     550:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     554:	ea92 0f0c 	teq	r2, ip
     558:	d108      	bne.n	56c <__aeabi_fdiv+0x108>
     55a:	0242      	lsls	r2, r0, #9
     55c:	f47f af7d 	bne.w	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     560:	ea93 0f0c 	teq	r3, ip
     564:	f47f af70 	bne.w	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     568:	4608      	mov	r0, r1
     56a:	e776      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     56c:	ea93 0f0c 	teq	r3, ip
     570:	d104      	bne.n	57c <__aeabi_fdiv+0x118>
     572:	024b      	lsls	r3, r1, #9
     574:	f43f af4c 	beq.w	410 <CONFIG_BT_RX_STACK_SIZE+0x10>
     578:	4608      	mov	r0, r1
     57a:	e76e      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     57c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     580:	bf18      	it	ne
     582:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     586:	d1ca      	bne.n	51e <__aeabi_fdiv+0xba>
     588:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     58c:	f47f af5c 	bne.w	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     590:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     594:	f47f af3c 	bne.w	410 <CONFIG_BT_RX_STACK_SIZE+0x10>
     598:	e75f      	b.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     59a:	bf00      	nop

0000059c <__aeabi_f2iz>:
     59c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     5a4:	d30f      	bcc.n	5c6 <__aeabi_f2iz+0x2a>
     5a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     5aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     5ae:	d90d      	bls.n	5cc <__aeabi_f2iz+0x30>
     5b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     5b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5bc:	fa23 f002 	lsr.w	r0, r3, r2
     5c0:	bf18      	it	ne
     5c2:	4240      	negne	r0, r0
     5c4:	4770      	bx	lr
     5c6:	f04f 0000 	mov.w	r0, #0
     5ca:	4770      	bx	lr
     5cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5d0:	d101      	bne.n	5d6 <__aeabi_f2iz+0x3a>
     5d2:	0242      	lsls	r2, r0, #9
     5d4:	d105      	bne.n	5e2 <__aeabi_f2iz+0x46>
     5d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     5da:	bf08      	it	eq
     5dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     5e0:	4770      	bx	lr
     5e2:	f04f 0000 	mov.w	r0, #0
     5e6:	4770      	bx	lr

000005e8 <__aeabi_uldivmod>:
     5e8:	b953      	cbnz	r3, 600 <CONFIG_BT_HCI_TX_STACK_SIZE>
     5ea:	b94a      	cbnz	r2, 600 <CONFIG_BT_HCI_TX_STACK_SIZE>
     5ec:	2900      	cmp	r1, #0
     5ee:	bf08      	it	eq
     5f0:	2800      	cmpeq	r0, #0
     5f2:	bf1c      	itt	ne
     5f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     5f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     5fc:	f000 b96c 	b.w	8d8 <__aeabi_idiv0>
     600:	f1ad 0c08 	sub.w	ip, sp, #8
     604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     608:	f000 f806 	bl	618 <__udivmoddi4>
     60c:	f8dd e004 	ldr.w	lr, [sp, #4]
     610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     614:	b004      	add	sp, #16
     616:	4770      	bx	lr

00000618 <__udivmoddi4>:
     618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     61c:	9e08      	ldr	r6, [sp, #32]
     61e:	460d      	mov	r5, r1
     620:	4604      	mov	r4, r0
     622:	468e      	mov	lr, r1
     624:	2b00      	cmp	r3, #0
     626:	f040 8082 	bne.w	72e <__udivmoddi4+0x116>
     62a:	428a      	cmp	r2, r1
     62c:	4617      	mov	r7, r2
     62e:	d946      	bls.n	6be <__udivmoddi4+0xa6>
     630:	fab2 f282 	clz	r2, r2
     634:	b14a      	cbz	r2, 64a <__udivmoddi4+0x32>
     636:	f1c2 0120 	rsb	r1, r2, #32
     63a:	fa05 f302 	lsl.w	r3, r5, r2
     63e:	fa20 f101 	lsr.w	r1, r0, r1
     642:	4097      	lsls	r7, r2
     644:	ea41 0e03 	orr.w	lr, r1, r3
     648:	4094      	lsls	r4, r2
     64a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     64e:	0c23      	lsrs	r3, r4, #16
     650:	fbbe fcf8 	udiv	ip, lr, r8
     654:	b2b9      	uxth	r1, r7
     656:	fb08 ee1c 	mls	lr, r8, ip, lr
     65a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     65e:	fb0c f001 	mul.w	r0, ip, r1
     662:	4298      	cmp	r0, r3
     664:	d90a      	bls.n	67c <__udivmoddi4+0x64>
     666:	18fb      	adds	r3, r7, r3
     668:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     66c:	f080 8116 	bcs.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     670:	4298      	cmp	r0, r3
     672:	f240 8113 	bls.w	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     676:	f1ac 0c02 	sub.w	ip, ip, #2
     67a:	443b      	add	r3, r7
     67c:	1a1b      	subs	r3, r3, r0
     67e:	b2a4      	uxth	r4, r4
     680:	fbb3 f0f8 	udiv	r0, r3, r8
     684:	fb08 3310 	mls	r3, r8, r0, r3
     688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     68c:	fb00 f101 	mul.w	r1, r0, r1
     690:	42a1      	cmp	r1, r4
     692:	d909      	bls.n	6a8 <__udivmoddi4+0x90>
     694:	193c      	adds	r4, r7, r4
     696:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     69a:	f080 8101 	bcs.w	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     69e:	42a1      	cmp	r1, r4
     6a0:	f240 80fe 	bls.w	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     6a4:	3802      	subs	r0, #2
     6a6:	443c      	add	r4, r7
     6a8:	1a64      	subs	r4, r4, r1
     6aa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     6ae:	2100      	movs	r1, #0
     6b0:	b11e      	cbz	r6, 6ba <__udivmoddi4+0xa2>
     6b2:	40d4      	lsrs	r4, r2
     6b4:	2300      	movs	r3, #0
     6b6:	e9c6 4300 	strd	r4, r3, [r6]
     6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6be:	b902      	cbnz	r2, 6c2 <__udivmoddi4+0xaa>
     6c0:	deff      	udf	#255	; 0xff
     6c2:	fab2 f282 	clz	r2, r2
     6c6:	2a00      	cmp	r2, #0
     6c8:	d14f      	bne.n	76a <__udivmoddi4+0x152>
     6ca:	1bcb      	subs	r3, r1, r7
     6cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     6d0:	fa1f f887 	uxth.w	r8, r7
     6d4:	2101      	movs	r1, #1
     6d6:	fbb3 fcfe 	udiv	ip, r3, lr
     6da:	0c25      	lsrs	r5, r4, #16
     6dc:	fb0e 331c 	mls	r3, lr, ip, r3
     6e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     6e4:	fb08 f30c 	mul.w	r3, r8, ip
     6e8:	42ab      	cmp	r3, r5
     6ea:	d907      	bls.n	6fc <__udivmoddi4+0xe4>
     6ec:	197d      	adds	r5, r7, r5
     6ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     6f2:	d202      	bcs.n	6fa <__udivmoddi4+0xe2>
     6f4:	42ab      	cmp	r3, r5
     6f6:	f200 80e7 	bhi.w	8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
     6fa:	4684      	mov	ip, r0
     6fc:	1aed      	subs	r5, r5, r3
     6fe:	b2a3      	uxth	r3, r4
     700:	fbb5 f0fe 	udiv	r0, r5, lr
     704:	fb0e 5510 	mls	r5, lr, r0, r5
     708:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     70c:	fb08 f800 	mul.w	r8, r8, r0
     710:	45a0      	cmp	r8, r4
     712:	d907      	bls.n	724 <__udivmoddi4+0x10c>
     714:	193c      	adds	r4, r7, r4
     716:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     71a:	d202      	bcs.n	722 <__udivmoddi4+0x10a>
     71c:	45a0      	cmp	r8, r4
     71e:	f200 80d7 	bhi.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     722:	4618      	mov	r0, r3
     724:	eba4 0408 	sub.w	r4, r4, r8
     728:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     72c:	e7c0      	b.n	6b0 <__udivmoddi4+0x98>
     72e:	428b      	cmp	r3, r1
     730:	d908      	bls.n	744 <__udivmoddi4+0x12c>
     732:	2e00      	cmp	r6, #0
     734:	f000 80af 	beq.w	896 <CONFIG_ISR_STACK_SIZE+0x96>
     738:	2100      	movs	r1, #0
     73a:	e9c6 0500 	strd	r0, r5, [r6]
     73e:	4608      	mov	r0, r1
     740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     744:	fab3 f183 	clz	r1, r3
     748:	2900      	cmp	r1, #0
     74a:	d14b      	bne.n	7e4 <__udivmoddi4+0x1cc>
     74c:	42ab      	cmp	r3, r5
     74e:	d302      	bcc.n	756 <__udivmoddi4+0x13e>
     750:	4282      	cmp	r2, r0
     752:	f200 80b7 	bhi.w	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     756:	1a84      	subs	r4, r0, r2
     758:	eb65 0303 	sbc.w	r3, r5, r3
     75c:	2001      	movs	r0, #1
     75e:	469e      	mov	lr, r3
     760:	2e00      	cmp	r6, #0
     762:	d0aa      	beq.n	6ba <__udivmoddi4+0xa2>
     764:	e9c6 4e00 	strd	r4, lr, [r6]
     768:	e7a7      	b.n	6ba <__udivmoddi4+0xa2>
     76a:	f1c2 0c20 	rsb	ip, r2, #32
     76e:	fa01 f302 	lsl.w	r3, r1, r2
     772:	4097      	lsls	r7, r2
     774:	fa20 f00c 	lsr.w	r0, r0, ip
     778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     77c:	fa21 fc0c 	lsr.w	ip, r1, ip
     780:	4318      	orrs	r0, r3
     782:	fbbc f1fe 	udiv	r1, ip, lr
     786:	0c05      	lsrs	r5, r0, #16
     788:	fb0e cc11 	mls	ip, lr, r1, ip
     78c:	fa1f f887 	uxth.w	r8, r7
     790:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     794:	fb01 f308 	mul.w	r3, r1, r8
     798:	42ab      	cmp	r3, r5
     79a:	fa04 f402 	lsl.w	r4, r4, r2
     79e:	d909      	bls.n	7b4 <__udivmoddi4+0x19c>
     7a0:	197d      	adds	r5, r7, r5
     7a2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     7a6:	f080 808b 	bcs.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     7aa:	42ab      	cmp	r3, r5
     7ac:	f240 8088 	bls.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     7b0:	3902      	subs	r1, #2
     7b2:	443d      	add	r5, r7
     7b4:	1aeb      	subs	r3, r5, r3
     7b6:	b285      	uxth	r5, r0
     7b8:	fbb3 f0fe 	udiv	r0, r3, lr
     7bc:	fb0e 3310 	mls	r3, lr, r0, r3
     7c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     7c4:	fb00 f308 	mul.w	r3, r0, r8
     7c8:	42ab      	cmp	r3, r5
     7ca:	d907      	bls.n	7dc <__udivmoddi4+0x1c4>
     7cc:	197d      	adds	r5, r7, r5
     7ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     7d2:	d271      	bcs.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     7d4:	42ab      	cmp	r3, r5
     7d6:	d96f      	bls.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     7d8:	3802      	subs	r0, #2
     7da:	443d      	add	r5, r7
     7dc:	1aeb      	subs	r3, r5, r3
     7de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     7e2:	e778      	b.n	6d6 <__udivmoddi4+0xbe>
     7e4:	f1c1 0c20 	rsb	ip, r1, #32
     7e8:	408b      	lsls	r3, r1
     7ea:	fa22 f70c 	lsr.w	r7, r2, ip
     7ee:	431f      	orrs	r7, r3
     7f0:	fa20 f40c 	lsr.w	r4, r0, ip
     7f4:	fa05 f301 	lsl.w	r3, r5, r1
     7f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     7fc:	fa25 f50c 	lsr.w	r5, r5, ip
     800:	431c      	orrs	r4, r3
     802:	0c23      	lsrs	r3, r4, #16
     804:	fbb5 f9fe 	udiv	r9, r5, lr
     808:	fa1f f887 	uxth.w	r8, r7
     80c:	fb0e 5519 	mls	r5, lr, r9, r5
     810:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     814:	fb09 fa08 	mul.w	sl, r9, r8
     818:	45aa      	cmp	sl, r5
     81a:	fa02 f201 	lsl.w	r2, r2, r1
     81e:	fa00 f301 	lsl.w	r3, r0, r1
     822:	d908      	bls.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     824:	197d      	adds	r5, r7, r5
     826:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     82a:	d247      	bcs.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     82c:	45aa      	cmp	sl, r5
     82e:	d945      	bls.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     830:	f1a9 0902 	sub.w	r9, r9, #2
     834:	443d      	add	r5, r7
     836:	eba5 050a 	sub.w	r5, r5, sl
     83a:	b2a4      	uxth	r4, r4
     83c:	fbb5 f0fe 	udiv	r0, r5, lr
     840:	fb0e 5510 	mls	r5, lr, r0, r5
     844:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     848:	fb00 f808 	mul.w	r8, r0, r8
     84c:	45a0      	cmp	r8, r4
     84e:	d907      	bls.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     850:	193c      	adds	r4, r7, r4
     852:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     856:	d22d      	bcs.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     858:	45a0      	cmp	r8, r4
     85a:	d92b      	bls.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     85c:	3802      	subs	r0, #2
     85e:	443c      	add	r4, r7
     860:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     864:	eba4 0408 	sub.w	r4, r4, r8
     868:	fba0 8902 	umull	r8, r9, r0, r2
     86c:	454c      	cmp	r4, r9
     86e:	46c6      	mov	lr, r8
     870:	464d      	mov	r5, r9
     872:	d319      	bcc.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
     874:	d016      	beq.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     876:	b15e      	cbz	r6, 890 <CONFIG_ISR_STACK_SIZE+0x90>
     878:	ebb3 020e 	subs.w	r2, r3, lr
     87c:	eb64 0405 	sbc.w	r4, r4, r5
     880:	fa04 fc0c 	lsl.w	ip, r4, ip
     884:	40ca      	lsrs	r2, r1
     886:	ea4c 0202 	orr.w	r2, ip, r2
     88a:	40cc      	lsrs	r4, r1
     88c:	e9c6 2400 	strd	r2, r4, [r6]
     890:	2100      	movs	r1, #0
     892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     896:	4631      	mov	r1, r6
     898:	4630      	mov	r0, r6
     89a:	e70e      	b.n	6ba <__udivmoddi4+0xa2>
     89c:	46ac      	mov	ip, r5
     89e:	e6ed      	b.n	67c <__udivmoddi4+0x64>
     8a0:	4618      	mov	r0, r3
     8a2:	e701      	b.n	6a8 <__udivmoddi4+0x90>
     8a4:	4543      	cmp	r3, r8
     8a6:	d2e6      	bcs.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     8a8:	ebb8 0e02 	subs.w	lr, r8, r2
     8ac:	eb69 0507 	sbc.w	r5, r9, r7
     8b0:	3801      	subs	r0, #1
     8b2:	e7e0      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     8b4:	4628      	mov	r0, r5
     8b6:	e7d3      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     8b8:	4660      	mov	r0, ip
     8ba:	e78f      	b.n	7dc <__udivmoddi4+0x1c4>
     8bc:	4681      	mov	r9, r0
     8be:	e7ba      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     8c0:	4661      	mov	r1, ip
     8c2:	e777      	b.n	7b4 <__udivmoddi4+0x19c>
     8c4:	4608      	mov	r0, r1
     8c6:	e74b      	b.n	760 <__udivmoddi4+0x148>
     8c8:	f1ac 0c02 	sub.w	ip, ip, #2
     8cc:	443d      	add	r5, r7
     8ce:	e715      	b.n	6fc <__udivmoddi4+0xe4>
     8d0:	3802      	subs	r0, #2
     8d2:	443c      	add	r4, r7
     8d4:	e726      	b.n	724 <__udivmoddi4+0x10c>
     8d6:	bf00      	nop

000008d8 <__aeabi_idiv0>:
     8d8:	4770      	bx	lr
     8da:	bf00      	nop

000008dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8de:	4615      	mov	r5, r2
     8e0:	4a0a      	ldr	r2, [pc, #40]	; (90c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     8e2:	461c      	mov	r4, r3
     8e4:	6856      	ldr	r6, [r2, #4]
     8e6:	b12e      	cbz	r6, 8f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     8e8:	b001      	add	sp, #4
     8ea:	462a      	mov	r2, r5
     8ec:	46b4      	mov	ip, r6
     8ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     8f2:	4760      	bx	ip
     8f4:	2000      	movs	r0, #0
     8f6:	f88d 0000 	strb.w	r0, [sp]
     8fa:	4668      	mov	r0, sp
     8fc:	f00e f99a 	bl	ec34 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     900:	f89d 0000 	ldrb.w	r0, [sp]
     904:	1a28      	subs	r0, r5, r0
     906:	7020      	strb	r0, [r4, #0]
     908:	2000      	movs	r0, #0
     90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     90c:	20000000 	.word	0x20000000

00000910 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     910:	4801      	ldr	r0, [pc, #4]	; (918 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     912:	7800      	ldrb	r0, [r0, #0]
     914:	4770      	bx	lr
     916:	0000      	.short	0x0000
     918:	20000008 	.word	0x20000008

0000091c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     91c:	4904      	ldr	r1, [pc, #16]	; (930 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     91e:	780a      	ldrb	r2, [r1, #0]
     920:	4290      	cmp	r0, r2
     922:	d301      	bcc.n	928 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     924:	2000      	movs	r0, #0
     926:	4770      	bx	lr
     928:	6849      	ldr	r1, [r1, #4]
     92a:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     92e:	4770      	bx	lr
     930:	20000008 	.word	0x20000008
     934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     938:	4615      	mov	r5, r2
     93a:	4604      	mov	r4, r0
     93c:	f100 0208 	add.w	r2, r0, #8
     940:	1cc8      	adds	r0, r1, #3
     942:	4241      	negs	r1, r0
     944:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 9f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4>
     948:	461f      	mov	r7, r3
     94a:	1a28      	subs	r0, r5, r0
     94c:	2300      	movs	r3, #0
     94e:	9e08      	ldr	r6, [sp, #32]
     950:	ebbc 0c05 	subs.w	ip, ip, r5
     954:	419b      	sbcs	r3, r3
     956:	d204      	bcs.n	962 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x46>
     958:	f240 51f5 	movw	r1, #1525	; 0x5f5
     95c:	2070      	movs	r0, #112	; 0x70
     95e:	f003 f8b9 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     962:	4b24      	ldr	r3, [pc, #144]	; (9f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd8>)
     964:	4299      	cmp	r1, r3
     966:	dd04      	ble.n	972 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56>
     968:	f240 51f6 	movw	r1, #1526	; 0x5f6
     96c:	2070      	movs	r0, #112	; 0x70
     96e:	f003 f8b1 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     972:	4b21      	ldr	r3, [pc, #132]	; (9f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc>)
     974:	4299      	cmp	r1, r3
     976:	da04      	bge.n	982 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66>
     978:	f240 51f7 	movw	r1, #1527	; 0x5f7
     97c:	2070      	movs	r0, #112	; 0x70
     97e:	f003 f8a9 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     982:	491e      	ldr	r1, [pc, #120]	; (9fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe0>)
     984:	4288      	cmp	r0, r1
     986:	bfa8      	it	ge
     988:	491d      	ldrge	r1, [pc, #116]	; (a00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe4>)
     98a:	da03      	bge.n	994 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x78>
     98c:	2800      	cmp	r0, #0
     98e:	bfb8      	it	lt
     990:	491a      	ldrlt	r1, [pc, #104]	; (9fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe0>)
     992:	da00      	bge.n	996 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7a>
     994:	1840      	adds	r0, r0, r1
     996:	4621      	mov	r1, r4
     998:	f002 fd56 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     99c:	6820      	ldr	r0, [r4, #0]
     99e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     9a2:	6021      	str	r1, [r4, #0]
     9a4:	19e8      	adds	r0, r5, r7
     9a6:	4917      	ldr	r1, [pc, #92]	; (a04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>)
     9a8:	1cc0      	adds	r0, r0, #3
     9aa:	b136      	cbz	r6, 9ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9e>
     9ac:	2e01      	cmp	r6, #1
     9ae:	d00b      	beq.n	9c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xac>
     9b0:	f240 6199 	movw	r1, #1689	; 0x699
     9b4:	2070      	movs	r0, #112	; 0x70
     9b6:	f003 f88d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ba:	6809      	ldr	r1, [r1, #0]
     9bc:	7809      	ldrb	r1, [r1, #0]
     9be:	297a      	cmp	r1, #122	; 0x7a
     9c0:	bf98      	it	ls
     9c2:	217a      	movls	r1, #122	; 0x7a
     9c4:	4408      	add	r0, r1
     9c6:	e002      	b.n	9ce <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb2>
     9c8:	6809      	ldr	r1, [r1, #0]
     9ca:	7809      	ldrb	r1, [r1, #0]
     9cc:	4408      	add	r0, r1
     9ce:	466a      	mov	r2, sp
     9d0:	1d21      	adds	r1, r4, #4
     9d2:	f002 fd39 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     9d6:	f99d 0000 	ldrsb.w	r0, [sp]
     9da:	2800      	cmp	r0, #0
     9dc:	6860      	ldr	r0, [r4, #4]
     9de:	bfc4      	itt	gt
     9e0:	1c40      	addgt	r0, r0, #1
     9e2:	6060      	strgt	r0, [r4, #4]
     9e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e8:	6060      	str	r0, [r4, #4]
     9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     9ee:	0000      	.short	0x0000
     9f0:	1e847fff 	.word	0x1e847fff
     9f4:	07a12000 	.word	0x07a12000
     9f8:	f85ee000 	.word	0xf85ee000
     9fc:	1e848000 	.word	0x1e848000
     a00:	e17b8000 	.word	0xe17b8000
     a04:	20000f5c 	.word	0x20000f5c
     a08:	b570      	push	{r4, r5, r6, lr}
     a0a:	4605      	mov	r5, r0
     a0c:	2a20      	cmp	r2, #32
     a0e:	d027      	beq.n	a60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x144>
     a10:	4819      	ldr	r0, [pc, #100]	; (a78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x15c>)
     a12:	4c1a      	ldr	r4, [pc, #104]	; (a7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x160>)
     a14:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     a18:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     a1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     a20:	2920      	cmp	r1, #32
     a22:	d022      	beq.n	a6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14e>
     a24:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a28:	7840      	ldrb	r0, [r0, #1]
     a2a:	784c      	ldrb	r4, [r1, #1]
     a2c:	7048      	strb	r0, [r1, #1]
     a2e:	4620      	mov	r0, r4
     a30:	4601      	mov	r1, r0
     a32:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a36:	4291      	cmp	r1, r2
     a38:	7005      	strb	r5, [r0, #0]
     a3a:	7840      	ldrb	r0, [r0, #1]
     a3c:	d1f8      	bne.n	a30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x114>
     a3e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
     a42:	2a20      	cmp	r2, #32
     a44:	bf1a      	itte	ne
     a46:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a4a:	7054      	strbne	r4, [r2, #1]
     a4c:	f883 4025 	strbeq.w	r4, [r3, #37]	; 0x25
     a50:	2220      	movs	r2, #32
     a52:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a56:	f88c 2001 	strb.w	r2, [ip, #1]
     a5a:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
     a5e:	bd70      	pop	{r4, r5, r6, pc}
     a60:	f240 21aa 	movw	r1, #682	; 0x2aa
     a64:	2070      	movs	r0, #112	; 0x70
     a66:	f003 f835 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a6a:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
     a6e:	7840      	ldrb	r0, [r0, #1]
     a70:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
     a74:	e7db      	b.n	a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x112>
     a76:	0000      	.short	0x0000
     a78:	20000edc 	.word	0x20000edc
     a7c:	20000f5c 	.word	0x20000f5c
     a80:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a84:	b087      	sub	sp, #28
     a86:	4604      	mov	r4, r0
     a88:	2000      	movs	r0, #0
     a8a:	9002      	str	r0, [sp, #8]
     a8c:	489e      	ldr	r0, [pc, #632]	; (d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3ec>)
     a8e:	9f08      	ldr	r7, [sp, #32]
     a90:	4e9e      	ldr	r6, [pc, #632]	; (d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3f0>)
     a92:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     a96:	9003      	str	r0, [sp, #12]
     a98:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     a9c:	2020      	movs	r0, #32
     a9e:	46e9      	mov	r9, sp
     aa0:	f10d 0804 	add.w	r8, sp, #4
     aa4:	f88d 0000 	strb.w	r0, [sp]
     aa8:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     aac:	2d20      	cmp	r5, #32
     aae:	bf18      	it	ne
     ab0:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     ab4:	d032      	beq.n	b1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x200>
     ab6:	bf00      	nop
     ab8:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     abc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ac0:	1d01      	adds	r1, r0, #4
     ac2:	6880      	ldr	r0, [r0, #8]
     ac4:	6822      	ldr	r2, [r4, #0]
     ac6:	1a10      	subs	r0, r2, r0
     ac8:	0200      	lsls	r0, r0, #8
     aca:	17c2      	asrs	r2, r0, #31
     acc:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ad0:	1200      	asrs	r0, r0, #8
     ad2:	d423      	bmi.n	b1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x200>
     ad4:	8960      	ldrh	r0, [r4, #10]
     ad6:	b1d0      	cbz	r0, b0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
     ad8:	8948      	ldrh	r0, [r1, #10]
     ada:	b9c0      	cbnz	r0, b0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
     adc:	4608      	mov	r0, r1
     ade:	f000 fce7 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     ae2:	aa05      	add	r2, sp, #20
     ae4:	a904      	add	r1, sp, #16
     ae6:	f002 fcaf 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     aea:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     aee:	2800      	cmp	r0, #0
     af0:	bfcc      	ite	gt
     af2:	2001      	movgt	r0, #1
     af4:	2000      	movle	r0, #0
     af6:	f100 0133 	add.w	r1, r0, #51	; 0x33
     afa:	9804      	ldr	r0, [sp, #16]
     afc:	6822      	ldr	r2, [r4, #0]
     afe:	1a10      	subs	r0, r2, r0
     b00:	0200      	lsls	r0, r0, #8
     b02:	17c2      	asrs	r2, r0, #31
     b04:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b08:	1200      	asrs	r0, r0, #8
     b0a:	4288      	cmp	r0, r1
     b0c:	db06      	blt.n	b1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x200>
     b0e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b12:	f889 5000 	strb.w	r5, [r9]
     b16:	7845      	ldrb	r5, [r0, #1]
     b18:	2d20      	cmp	r5, #32
     b1a:	d1cd      	bne.n	ab8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
     b1c:	f899 0000 	ldrb.w	r0, [r9]
     b20:	f888 0000 	strb.w	r0, [r8]
     b24:	46a1      	mov	r9, r4
     b26:	2d20      	cmp	r5, #32
     b28:	bf1c      	itt	ne
     b2a:	4879      	ldrne	r0, [pc, #484]	; (d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3f4>)
     b2c:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     b30:	f000 80e5 	beq.w	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     b34:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     b38:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     b3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
     b40:	f8da 1004 	ldr.w	r1, [sl, #4]
     b44:	4648      	mov	r0, r9
     b46:	1a89      	subs	r1, r1, r2
     b48:	0209      	lsls	r1, r1, #8
     b4a:	17ca      	asrs	r2, r1, #31
     b4c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b50:	f10a 0704 	add.w	r7, sl, #4
     b54:	1209      	asrs	r1, r1, #8
     b56:	d41f      	bmi.n	b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x27c>
     b58:	8979      	ldrh	r1, [r7, #10]
     b5a:	2900      	cmp	r1, #0
     b5c:	f000 80cf 	beq.w	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     b60:	8941      	ldrh	r1, [r0, #10]
     b62:	2900      	cmp	r1, #0
     b64:	f040 80cb 	bne.w	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     b68:	f000 fca2 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     b6c:	aa05      	add	r2, sp, #20
     b6e:	a904      	add	r1, sp, #16
     b70:	f002 fc6a 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     b74:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     b78:	2800      	cmp	r0, #0
     b7a:	bfcc      	ite	gt
     b7c:	2001      	movgt	r0, #1
     b7e:	2000      	movle	r0, #0
     b80:	f100 0133 	add.w	r1, r0, #51	; 0x33
     b84:	9804      	ldr	r0, [sp, #16]
     b86:	683a      	ldr	r2, [r7, #0]
     b88:	1a10      	subs	r0, r2, r0
     b8a:	0200      	lsls	r0, r0, #8
     b8c:	17c2      	asrs	r2, r0, #31
     b8e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b92:	1200      	asrs	r0, r0, #8
     b94:	4288      	cmp	r0, r1
     b96:	da7d      	bge.n	c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>
     b98:	f888 5000 	strb.w	r5, [r8]
     b9c:	f89a 0010 	ldrb.w	r0, [sl, #16]
     ba0:	f899 100c 	ldrb.w	r1, [r9, #12]
     ba4:	4288      	cmp	r0, r1
     ba6:	d905      	bls.n	bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x298>
     ba8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bac:	7845      	ldrb	r5, [r0, #1]
     bae:	2d20      	cmp	r5, #32
     bb0:	d1c0      	bne.n	b34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x218>
     bb2:	e0a4      	b.n	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     bb4:	f89d 0004 	ldrb.w	r0, [sp, #4]
     bb8:	e9d4 2100 	ldrd	r2, r1, [r4]
     bbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     bc0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     bc4:	1a89      	subs	r1, r1, r2
     bc6:	6880      	ldr	r0, [r0, #8]
     bc8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     bcc:	4408      	add	r0, r1
     bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bd2:	e9c4 2000 	strd	r2, r0, [r4]
     bd6:	2001      	movs	r0, #1
     bd8:	9002      	str	r0, [sp, #8]
     bda:	484b      	ldr	r0, [pc, #300]	; (d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3ec>)
     bdc:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
     be0:	b118      	cbz	r0, bea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2ce>
     be2:	b009      	add	sp, #36	; 0x24
     be4:	2000      	movs	r0, #0
     be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bea:	9803      	ldr	r0, [sp, #12]
     bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
     bf0:	466f      	mov	r7, sp
     bf2:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     bf6:	2020      	movs	r0, #32
     bf8:	f10d 0a04 	add.w	sl, sp, #4
     bfc:	f88d 0000 	strb.w	r0, [sp]
     c00:	2d20      	cmp	r5, #32
     c02:	bf1c      	itt	ne
     c04:	4842      	ldrne	r0, [pc, #264]	; (d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3f4>)
     c06:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     c0a:	d030      	beq.n	c6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x352>
     c0c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     c10:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     c14:	1d01      	adds	r1, r0, #4
     c16:	6880      	ldr	r0, [r0, #8]
     c18:	6822      	ldr	r2, [r4, #0]
     c1a:	1a10      	subs	r0, r2, r0
     c1c:	0200      	lsls	r0, r0, #8
     c1e:	17c2      	asrs	r2, r0, #31
     c20:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c24:	1200      	asrs	r0, r0, #8
     c26:	d422      	bmi.n	c6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x352>
     c28:	8960      	ldrh	r0, [r4, #10]
     c2a:	b1d0      	cbz	r0, c62 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x346>
     c2c:	8948      	ldrh	r0, [r1, #10]
     c2e:	b9c0      	cbnz	r0, c62 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x346>
     c30:	4608      	mov	r0, r1
     c32:	f000 fc3d 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     c36:	aa05      	add	r2, sp, #20
     c38:	a904      	add	r1, sp, #16
     c3a:	f002 fc05 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     c3e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     c42:	2800      	cmp	r0, #0
     c44:	bfcc      	ite	gt
     c46:	2001      	movgt	r0, #1
     c48:	2000      	movle	r0, #0
     c4a:	f100 0133 	add.w	r1, r0, #51	; 0x33
     c4e:	9804      	ldr	r0, [sp, #16]
     c50:	6822      	ldr	r2, [r4, #0]
     c52:	1a10      	subs	r0, r2, r0
     c54:	0200      	lsls	r0, r0, #8
     c56:	17c2      	asrs	r2, r0, #31
     c58:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c5c:	1200      	asrs	r0, r0, #8
     c5e:	4288      	cmp	r0, r1
     c60:	db05      	blt.n	c6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x352>
     c62:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     c66:	703d      	strb	r5, [r7, #0]
     c68:	7845      	ldrb	r5, [r0, #1]
     c6a:	2d20      	cmp	r5, #32
     c6c:	d1ce      	bne.n	c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f0>
     c6e:	7838      	ldrb	r0, [r7, #0]
     c70:	f88a 0000 	strb.w	r0, [sl]
     c74:	4627      	mov	r7, r4
     c76:	2d20      	cmp	r5, #32
     c78:	bf1c      	itt	ne
     c7a:	4825      	ldrne	r0, [pc, #148]	; (d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3f4>)
     c7c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     c80:	d03d      	beq.n	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     c82:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     c86:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     c8a:	4638      	mov	r0, r7
     c8c:	f109 0804 	add.w	r8, r9, #4
     c90:	687a      	ldr	r2, [r7, #4]
     c92:	e000      	b.n	c96 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37a>
     c94:	e033      	b.n	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     c96:	f8d9 1004 	ldr.w	r1, [r9, #4]
     c9a:	1a89      	subs	r1, r1, r2
     c9c:	0209      	lsls	r1, r1, #8
     c9e:	17ca      	asrs	r2, r1, #31
     ca0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ca4:	1209      	asrs	r1, r1, #8
     ca6:	d41d      	bmi.n	ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3c8>
     ca8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     cac:	b339      	cbz	r1, cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     cae:	8941      	ldrh	r1, [r0, #10]
     cb0:	bb29      	cbnz	r1, cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     cb2:	f000 fbfd 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     cb6:	aa05      	add	r2, sp, #20
     cb8:	a904      	add	r1, sp, #16
     cba:	f002 fbc5 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     cbe:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     cc2:	2800      	cmp	r0, #0
     cc4:	bfcc      	ite	gt
     cc6:	2001      	movgt	r0, #1
     cc8:	2000      	movle	r0, #0
     cca:	f100 0133 	add.w	r1, r0, #51	; 0x33
     cce:	9804      	ldr	r0, [sp, #16]
     cd0:	f8d8 2000 	ldr.w	r2, [r8]
     cd4:	1a10      	subs	r0, r2, r0
     cd6:	0200      	lsls	r0, r0, #8
     cd8:	17c2      	asrs	r2, r0, #31
     cda:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cde:	1200      	asrs	r0, r0, #8
     ce0:	4288      	cmp	r0, r1
     ce2:	da0c      	bge.n	cfe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3e2>
     ce4:	f88a 5000 	strb.w	r5, [sl]
     ce8:	f899 1010 	ldrb.w	r1, [r9, #16]
     cec:	7b38      	ldrb	r0, [r7, #12]
     cee:	4281      	cmp	r1, r0
     cf0:	f67f af60 	bls.w	bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x298>
     cf4:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     cf8:	7845      	ldrb	r5, [r0, #1]
     cfa:	2d20      	cmp	r5, #32
     cfc:	d1c1      	bne.n	c82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x366>
     cfe:	9802      	ldr	r0, [sp, #8]
     d00:	b009      	add	sp, #36	; 0x24
     d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d06:	0000      	.short	0x0000
     d08:	20000f5c 	.word	0x20000f5c
     d0c:	20000c5c 	.word	0x20000c5c
     d10:	20000edc 	.word	0x20000edc
     d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d18:	4604      	mov	r4, r0
     d1a:	4847      	ldr	r0, [pc, #284]	; (e38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x51c>)
     d1c:	460e      	mov	r6, r1
     d1e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     d22:	4f46      	ldr	r7, [pc, #280]	; (e3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>)
     d24:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     d28:	2020      	movs	r0, #32
     d2a:	b083      	sub	sp, #12
     d2c:	4698      	mov	r8, r3
     d2e:	4692      	mov	sl, r2
     d30:	7010      	strb	r0, [r2, #0]
     d32:	f507 7920 	add.w	r9, r7, #640	; 0x280
     d36:	2d20      	cmp	r5, #32
     d38:	bf18      	it	ne
     d3a:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     d3e:	d031      	beq.n	da4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>
     d40:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     d44:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     d48:	1d01      	adds	r1, r0, #4
     d4a:	6880      	ldr	r0, [r0, #8]
     d4c:	6822      	ldr	r2, [r4, #0]
     d4e:	1a10      	subs	r0, r2, r0
     d50:	0200      	lsls	r0, r0, #8
     d52:	17c2      	asrs	r2, r0, #31
     d54:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d58:	1200      	asrs	r0, r0, #8
     d5a:	d423      	bmi.n	da4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>
     d5c:	8960      	ldrh	r0, [r4, #10]
     d5e:	b1d0      	cbz	r0, d96 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47a>
     d60:	8948      	ldrh	r0, [r1, #10]
     d62:	b9c0      	cbnz	r0, d96 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47a>
     d64:	4608      	mov	r0, r1
     d66:	f000 fba3 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     d6a:	aa01      	add	r2, sp, #4
     d6c:	4669      	mov	r1, sp
     d6e:	f002 fb6b 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     d72:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     d76:	2800      	cmp	r0, #0
     d78:	bfcc      	ite	gt
     d7a:	2001      	movgt	r0, #1
     d7c:	2000      	movle	r0, #0
     d7e:	f100 0133 	add.w	r1, r0, #51	; 0x33
     d82:	9800      	ldr	r0, [sp, #0]
     d84:	6822      	ldr	r2, [r4, #0]
     d86:	1a10      	subs	r0, r2, r0
     d88:	0200      	lsls	r0, r0, #8
     d8a:	17c2      	asrs	r2, r0, #31
     d8c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d90:	1200      	asrs	r0, r0, #8
     d92:	4288      	cmp	r0, r1
     d94:	db06      	blt.n	da4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>
     d96:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d9a:	f88a 5000 	strb.w	r5, [sl]
     d9e:	7845      	ldrb	r5, [r0, #1]
     da0:	2d20      	cmp	r5, #32
     da2:	d1cd      	bne.n	d40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x424>
     da4:	f89a 0000 	ldrb.w	r0, [sl]
     da8:	f888 0000 	strb.w	r0, [r8]
     dac:	2d20      	cmp	r5, #32
     dae:	bf18      	it	ne
     db0:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     db4:	d03c      	beq.n	e30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
     db6:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     dba:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     dbe:	6861      	ldr	r1, [r4, #4]
     dc0:	f8d9 2004 	ldr.w	r2, [r9, #4]
     dc4:	4620      	mov	r0, r4
     dc6:	1a51      	subs	r1, r2, r1
     dc8:	0209      	lsls	r1, r1, #8
     dca:	17ca      	asrs	r2, r1, #31
     dcc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     dd0:	f109 0604 	add.w	r6, r9, #4
     dd4:	1209      	asrs	r1, r1, #8
     dd6:	d41b      	bmi.n	e10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4f4>
     dd8:	8971      	ldrh	r1, [r6, #10]
     dda:	b349      	cbz	r1, e30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
     ddc:	8941      	ldrh	r1, [r0, #10]
     dde:	bb39      	cbnz	r1, e30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
     de0:	f000 fb66 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     de4:	aa01      	add	r2, sp, #4
     de6:	4669      	mov	r1, sp
     de8:	f002 fb2e 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     dec:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     df0:	2800      	cmp	r0, #0
     df2:	bfcc      	ite	gt
     df4:	2001      	movgt	r0, #1
     df6:	2000      	movle	r0, #0
     df8:	f100 0133 	add.w	r1, r0, #51	; 0x33
     dfc:	9800      	ldr	r0, [sp, #0]
     dfe:	6832      	ldr	r2, [r6, #0]
     e00:	1a10      	subs	r0, r2, r0
     e02:	0200      	lsls	r0, r0, #8
     e04:	17c2      	asrs	r2, r0, #31
     e06:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e0a:	1200      	asrs	r0, r0, #8
     e0c:	4288      	cmp	r0, r1
     e0e:	da0f      	bge.n	e30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x514>
     e10:	f888 5000 	strb.w	r5, [r8]
     e14:	f899 0010 	ldrb.w	r0, [r9, #16]
     e18:	7b21      	ldrb	r1, [r4, #12]
     e1a:	4288      	cmp	r0, r1
     e1c:	d803      	bhi.n	e26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x50a>
     e1e:	b003      	add	sp, #12
     e20:	2000      	movs	r0, #0
     e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e26:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     e2a:	7845      	ldrb	r5, [r0, #1]
     e2c:	2d20      	cmp	r5, #32
     e2e:	d1c2      	bne.n	db6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x49a>
     e30:	b003      	add	sp, #12
     e32:	2001      	movs	r0, #1
     e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e38:	20000f5c 	.word	0x20000f5c
     e3c:	20000c5c 	.word	0x20000c5c
     e40:	4804      	ldr	r0, [pc, #16]	; (e54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x538>)
     e42:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
     e46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     e4a:	bf0c      	ite	eq
     e4c:	2001      	moveq	r0, #1
     e4e:	2000      	movne	r0, #0
     e50:	4770      	bx	lr
     e52:	0000      	.short	0x0000
     e54:	00002ab9 	.word	0x00002ab9
     e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e5c:	f04f 0800 	mov.w	r8, #0
     e60:	b098      	sub	sp, #96	; 0x60
     e62:	4616      	mov	r6, r2
     e64:	460d      	mov	r5, r1
     e66:	46c3      	mov	fp, r8
     e68:	f002 f896 	bl	2f98 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     e6c:	4604      	mov	r4, r0
     e6e:	2d01      	cmp	r5, #1
     e70:	bf18      	it	ne
     e72:	2d02      	cmpne	r5, #2
     e74:	d005      	beq.n	e82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x566>
     e76:	f640 117c 	movw	r1, #2428	; 0x97c
     e7a:	f04f 0070 	mov.w	r0, #112	; 0x70
     e7e:	f002 fe29 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e82:	49ff      	ldr	r1, [pc, #1020]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
     e84:	2001      	movs	r0, #1
     e86:	6008      	str	r0, [r1, #0]
     e88:	49fe      	ldr	r1, [pc, #1016]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
     e8a:	6889      	ldr	r1, [r1, #8]
     e8c:	6008      	str	r0, [r1, #0]
     e8e:	2000      	movs	r0, #0
     e90:	9006      	str	r0, [sp, #24]
     e92:	1e40      	subs	r0, r0, #1
     e94:	9008      	str	r0, [sp, #32]
     e96:	49fc      	ldr	r1, [pc, #1008]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
     e98:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     e9c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     ea0:	1d1b      	adds	r3, r3, #4
     ea2:	af09      	add	r7, sp, #36	; 0x24
     ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     ea6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     eaa:	a809      	add	r0, sp, #36	; 0x24
     eac:	f000 fb00 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
     eb0:	9007      	str	r0, [sp, #28]
     eb2:	48f5      	ldr	r0, [pc, #980]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
     eb4:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     eb8:	f8b0 0320 	ldrh.w	r0, [r0, #800]	; 0x320
     ebc:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     ec0:	f1b9 0f00 	cmp.w	r9, #0
     ec4:	bf14      	ite	ne
     ec6:	f04f 0a01 	movne.w	sl, #1
     eca:	f04f 0a00 	moveq.w	sl, #0
     ece:	9809      	ldr	r0, [sp, #36]	; 0x24
     ed0:	9012      	str	r0, [sp, #72]	; 0x48
     ed2:	f1ba 0f00 	cmp.w	sl, #0
     ed6:	d009      	beq.n	eec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5d0>
     ed8:	48ec      	ldr	r0, [pc, #944]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
     eda:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     ede:	b928      	cbnz	r0, eec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5d0>
     ee0:	f002 fd94 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     ee4:	2800      	cmp	r0, #0
     ee6:	bf08      	it	eq
     ee8:	2701      	moveq	r7, #1
     eea:	d000      	beq.n	eee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5d2>
     eec:	2700      	movs	r7, #0
     eee:	48e8      	ldr	r0, [pc, #928]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     ef0:	2200      	movs	r2, #0
     ef2:	9214      	str	r2, [sp, #80]	; 0x50
     ef4:	7800      	ldrb	r0, [r0, #0]
     ef6:	4616      	mov	r6, r2
     ef8:	2801      	cmp	r0, #1
     efa:	bf18      	it	ne
     efc:	2803      	cmpne	r0, #3
     efe:	d143      	bne.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66c>
     f00:	48e3      	ldr	r0, [pc, #908]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     f02:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     f06:	eba8 0009 	sub.w	r0, r8, r9
     f0a:	9014      	str	r0, [sp, #80]	; 0x50
     f0c:	45c1      	cmp	r9, r8
     f0e:	d23b      	bcs.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66c>
     f10:	a803      	add	r0, sp, #12
     f12:	9005      	str	r0, [sp, #20]
     f14:	a817      	add	r0, sp, #92	; 0x5c
     f16:	9010      	str	r0, [sp, #64]	; 0x40
     f18:	9907      	ldr	r1, [sp, #28]
     f1a:	f108 0003 	add.w	r0, r8, #3
     f1e:	4242      	negs	r2, r0
     f20:	f8df c370 	ldr.w	ip, [pc, #880]	; 1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
     f24:	1a08      	subs	r0, r1, r0
     f26:	2300      	movs	r3, #0
     f28:	ebbc 0101 	subs.w	r1, ip, r1
     f2c:	eb73 0103 	sbcs.w	r1, r3, r3
     f30:	d204      	bcs.n	f3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x620>
     f32:	f240 51f5 	movw	r1, #1525	; 0x5f5
     f36:	2070      	movs	r0, #112	; 0x70
     f38:	f002 fdcc 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f3c:	49d6      	ldr	r1, [pc, #856]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
     f3e:	428a      	cmp	r2, r1
     f40:	dd04      	ble.n	f4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x630>
     f42:	f240 51f6 	movw	r1, #1526	; 0x5f6
     f46:	2070      	movs	r0, #112	; 0x70
     f48:	f002 fdc4 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f4c:	49d3      	ldr	r1, [pc, #844]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
     f4e:	428a      	cmp	r2, r1
     f50:	da04      	bge.n	f5c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x640>
     f52:	f240 51f7 	movw	r1, #1527	; 0x5f7
     f56:	2070      	movs	r0, #112	; 0x70
     f58:	f002 fdbc 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f5c:	49d0      	ldr	r1, [pc, #832]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
     f5e:	4288      	cmp	r0, r1
     f60:	bfa8      	it	ge
     f62:	49d0      	ldrge	r1, [pc, #832]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
     f64:	da03      	bge.n	f6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x652>
     f66:	2800      	cmp	r0, #0
     f68:	bfb8      	it	lt
     f6a:	49cd      	ldrlt	r1, [pc, #820]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
     f6c:	da00      	bge.n	f70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x654>
     f6e:	1840      	adds	r0, r0, r1
     f70:	9a10      	ldr	r2, [sp, #64]	; 0x40
     f72:	9905      	ldr	r1, [sp, #20]
     f74:	f002 fa68 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     f78:	9803      	ldr	r0, [sp, #12]
     f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
     f7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f80:	9003      	str	r0, [sp, #12]
     f82:	1a08      	subs	r0, r1, r0
     f84:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     f88:	2f00      	cmp	r7, #0
     f8a:	bf18      	it	ne
     f8c:	2632      	movne	r6, #50	; 0x32
     f8e:	d104      	bne.n	f9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x67e>
     f90:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     f94:	2800      	cmp	r0, #0
     f96:	bf18      	it	ne
     f98:	2602      	movne	r6, #2
     f9a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     f9e:	d008      	beq.n	fb2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x12>
     fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
     fa2:	1b00      	subs	r0, r0, r4
     fa4:	0200      	lsls	r0, r0, #8
     fa6:	17c1      	asrs	r1, r0, #31
     fa8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     fac:	1200      	asrs	r0, r0, #8
     fae:	2801      	cmp	r0, #1
     fb0:	da02      	bge.n	fb8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x18>
     fb2:	2004      	movs	r0, #4
     fb4:	9918      	ldr	r1, [sp, #96]	; 0x60
     fb6:	e00b      	b.n	fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
     fb8:	b147      	cbz	r7, fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
     fba:	48b4      	ldr	r0, [pc, #720]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
     fbc:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     fc0:	b120      	cbz	r0, fcc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2c>
     fc2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     fc6:	1c06      	adds	r6, r0, #0
     fc8:	bf18      	it	ne
     fca:	2602      	movne	r6, #2
     fcc:	4621      	mov	r1, r4
     fce:	2001      	movs	r0, #1
     fd0:	f1b9 0f00 	cmp.w	r9, #0
     fd4:	d002      	beq.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
     fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
     fd8:	2b1e      	cmp	r3, #30
     fda:	da02      	bge.n	fe2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x42>
     fdc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     fe0:	b113      	cbz	r3, fe8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x48>
     fe2:	f04f 0b01 	mov.w	fp, #1
     fe6:	1e40      	subs	r0, r0, #1
     fe8:	1983      	adds	r3, r0, r6
     fea:	48a9      	ldr	r0, [pc, #676]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     fec:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     ff0:	7800      	ldrb	r0, [r0, #0]
     ff2:	9015      	str	r0, [sp, #84]	; 0x54
     ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
     ff6:	1a80      	subs	r0, r0, r2
     ff8:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     ffc:	ebac 0001 	sub.w	r0, ip, r1
    1000:	0200      	lsls	r0, r0, #8
    1002:	ea4f 7ee0 	mov.w	lr, r0, asr #31
    1006:	eb00 601e 	add.w	r0, r0, lr, lsr #24
    100a:	1200      	asrs	r0, r0, #8
    100c:	4298      	cmp	r0, r3
    100e:	db18      	blt.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1010:	2a00      	cmp	r2, #0
    1012:	bf18      	it	ne
    1014:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
    1018:	9e09      	ldr	r6, [sp, #36]	; 0x24
    101a:	9710      	str	r7, [sp, #64]	; 0x40
    101c:	2700      	movs	r7, #0
    101e:	f001 feb5 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1022:	1a30      	subs	r0, r6, r0
    1024:	0200      	lsls	r0, r0, #8
    1026:	17c1      	asrs	r1, r0, #31
    1028:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    102c:	1200      	asrs	r0, r0, #8
    102e:	283e      	cmp	r0, #62	; 0x3e
    1030:	da3e      	bge.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1032:	2d01      	cmp	r5, #1
    1034:	d01f      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1036:	1e70      	subs	r0, r6, #1
    1038:	9910      	ldr	r1, [sp, #64]	; 0x40
    103a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    103e:	b311      	cbz	r1, 1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1040:	e02c      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1042:	b17a      	cbz	r2, 1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    1044:	2e00      	cmp	r6, #0
    1046:	bf04      	itt	eq
    1048:	9815      	ldreq	r0, [sp, #84]	; 0x54
    104a:	2803      	cmpeq	r0, #3
    104c:	d00a      	beq.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    104e:	b927      	cbnz	r7, 105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1050:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    1054:	2800      	cmp	r0, #0
    1056:	bf18      	it	ne
    1058:	1e9b      	subne	r3, r3, #2
    105a:	2200      	movs	r2, #0
    105c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    1060:	4690      	mov	r8, r2
    1062:	e7c7      	b.n	ff4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x54>
    1064:	bb07      	cbnz	r7, 10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    1066:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    106a:	b1e8      	cbz	r0, 10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    106c:	2000      	movs	r0, #0
    106e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    1072:	1e9b      	subs	r3, r3, #2
    1074:	e7be      	b.n	ff4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x54>
    1076:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    107a:	d120      	bne.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    107c:	f640 01f5 	movw	r1, #2293	; 0x8f5
    1080:	2070      	movs	r0, #112	; 0x70
    1082:	f002 fd27 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1086:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    108a:	d007      	beq.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    108c:	1a21      	subs	r1, r4, r0
    108e:	0209      	lsls	r1, r1, #8
    1090:	17ca      	asrs	r2, r1, #31
    1092:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1096:	1209      	asrs	r1, r1, #8
    1098:	2904      	cmp	r1, #4
    109a:	dd03      	ble.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    109c:	4604      	mov	r4, r0
    109e:	f001 fe7b 	bl	2d98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    10a2:	e00c      	b.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10a4:	2900      	cmp	r1, #0
    10a6:	dd0a      	ble.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10a8:	b01b      	add	sp, #108	; 0x6c
    10aa:	2000      	movs	r0, #0
    10ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10b0:	1e70      	subs	r0, r6, #1
    10b2:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    10b6:	4620      	mov	r0, r4
    10b8:	f001 fe6e 	bl	2d98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    10bc:	4657      	mov	r7, sl
    10be:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10c2:	d028      	beq.n	1116 <CONFIG_FPROTECT_BLOCK_SIZE+0x116>
    10c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    10c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    10ca:	1b00      	subs	r0, r0, r4
    10cc:	f08b 0301 	eor.w	r3, fp, #1
    10d0:	4a75      	ldr	r2, [pc, #468]	; (12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    10d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10d6:	ebac 0c04 	sub.w	ip, ip, r4
    10da:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    10de:	4283      	cmp	r3, r0
    10e0:	bf98      	it	ls
    10e2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    10e6:	d2df      	bcs.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    10e8:	4562      	cmp	r2, ip
    10ea:	d3dd      	bcc.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    10ec:	4620      	mov	r0, r4
    10ee:	f00d fdc1 	bl	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    10f2:	4a68      	ldr	r2, [pc, #416]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    10f4:	9907      	ldr	r1, [sp, #28]
    10f6:	1c53      	adds	r3, r2, #1
    10f8:	1a0e      	subs	r6, r1, r0
    10fa:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    10fe:	bf24      	itt	cs
    1100:	eba0 0c01 	subcs.w	ip, r0, r1
    1104:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1108:	d310      	bcc.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    110a:	42b2      	cmp	r2, r6
    110c:	d208      	bcs.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    110e:	1a10      	subs	r0, r2, r0
    1110:	4408      	add	r0, r1
    1112:	1c46      	adds	r6, r0, #1
    1114:	e00a      	b.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1116:	f640 2114 	movw	r1, #2580	; 0xa14
    111a:	2070      	movs	r0, #112	; 0x70
    111c:	f002 fcda 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1120:	4562      	cmp	r2, ip
    1122:	d22d      	bcs.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1124:	1a51      	subs	r1, r2, r1
    1126:	4408      	add	r0, r1
    1128:	1c40      	adds	r0, r0, #1
    112a:	4246      	negs	r6, r0
    112c:	4857      	ldr	r0, [pc, #348]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    112e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
    1132:	b350      	cbz	r0, 118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1134:	4628      	mov	r0, r5
    1136:	4645      	mov	r5, r8
    1138:	f04f 0b00 	mov.w	fp, #0
    113c:	46d8      	mov	r8, fp
    113e:	2801      	cmp	r0, #1
    1140:	d005      	beq.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
    1142:	2002      	movs	r0, #2
    1144:	f002 f870 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1148:	2001      	movs	r0, #1
    114a:	f002 f86d 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    114e:	45a9      	cmp	r9, r5
    1150:	d22c      	bcs.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1152:	eba6 0105 	sub.w	r1, r6, r5
    1156:	f04f 0301 	mov.w	r3, #1
    115a:	f04f 0203 	mov.w	r2, #3
    115e:	f04f 0002 	mov.w	r0, #2
    1162:	f001 ff99 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1166:	2800      	cmp	r0, #0
    1168:	bf08      	it	eq
    116a:	f04f 0801 	moveq.w	r8, #1
    116e:	f1b9 0f00 	cmp.w	r9, #0
    1172:	d035      	beq.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    1174:	2301      	movs	r3, #1
    1176:	eba6 0109 	sub.w	r1, r6, r9
    117a:	2203      	movs	r2, #3
    117c:	4618      	mov	r0, r3
    117e:	e023      	b.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    1180:	f640 21f4 	movw	r1, #2804	; 0xaf4
    1184:	2070      	movs	r0, #112	; 0x70
    1186:	f002 fca5 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    118a:	45c1      	cmp	r9, r8
    118c:	bf34      	ite	cc
    118e:	4640      	movcc	r0, r8
    1190:	4648      	movcs	r0, r9
    1192:	f1bb 0f00 	cmp.w	fp, #0
    1196:	bf14      	ite	ne
    1198:	2100      	movne	r1, #0
    119a:	211e      	moveq	r1, #30
    119c:	4408      	add	r0, r1
    119e:	42b0      	cmp	r0, r6
    11a0:	dbc8      	blt.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    11a2:	f640 2127 	movw	r1, #2599	; 0xa27
    11a6:	2070      	movs	r0, #112	; 0x70
    11a8:	f002 fc94 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ac:	d910      	bls.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
    11ae:	2301      	movs	r3, #1
    11b0:	eba6 0109 	sub.w	r1, r6, r9
    11b4:	2203      	movs	r2, #3
    11b6:	4618      	mov	r0, r3
    11b8:	f001 ff6e 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11bc:	b328      	cbz	r0, 120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11be:	b17d      	cbz	r5, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    11c0:	1b71      	subs	r1, r6, r5
    11c2:	2301      	movs	r3, #1
    11c4:	2203      	movs	r2, #3
    11c6:	2002      	movs	r0, #2
    11c8:	f001 ff66 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11cc:	b1e8      	cbz	r0, 120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11ce:	e007      	b.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    11d0:	ea55 0009 	orrs.w	r0, r5, r9
    11d4:	d004      	beq.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    11d6:	f640 115f 	movw	r1, #2399	; 0x95f
    11da:	2070      	movs	r0, #112	; 0x70
    11dc:	f002 fc7a 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e0:	2301      	movs	r3, #1
    11e2:	2203      	movs	r2, #3
    11e4:	4631      	mov	r1, r6
    11e6:	2000      	movs	r0, #0
    11e8:	f001 ff56 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11ec:	b168      	cbz	r0, 120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11ee:	2501      	movs	r5, #1
    11f0:	f1b8 0f00 	cmp.w	r8, #0
    11f4:	d003      	beq.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    11f6:	9812      	ldr	r0, [sp, #72]	; 0x48
    11f8:	9009      	str	r0, [sp, #36]	; 0x24
    11fa:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
    11fe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
    1202:	f1ba 0f00 	cmp.w	sl, #0
    1206:	d10e      	bne.n	1226 <CONFIG_FPROTECT_BLOCK_SIZE+0x226>
    1208:	e009      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    120a:	2002      	movs	r0, #2
    120c:	f002 f80c 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1210:	2001      	movs	r0, #1
    1212:	f002 f809 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1216:	b01b      	add	sp, #108	; 0x6c
    1218:	2000      	movs	r0, #0
    121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    121e:	481b      	ldr	r0, [pc, #108]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    1220:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    1224:	b100      	cbz	r0, 1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
    1226:	b34f      	cbz	r7, 127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1228:	f8df a060 	ldr.w	sl, [pc, #96]	; 128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
    122c:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    1230:	b118      	cbz	r0, 123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    1232:	f002 fab7 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1236:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    123a:	b307      	cbz	r7, 127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    123c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1240:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1244:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1248:	f8c8 0000 	str.w	r0, [r8]
    124c:	2300      	movs	r3, #0
    124e:	2203      	movs	r2, #3
    1250:	2005      	movs	r0, #5
    1252:	f001 ff21 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1256:	b378      	cbz	r0, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1258:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    125c:	2005      	movs	r0, #5
    125e:	f002 f89d 	bl	339c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1262:	4913      	ldr	r1, [pc, #76]	; (12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    1264:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1268:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    126c:	4911      	ldr	r1, [pc, #68]	; (12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>)
    126e:	12e0      	asrs	r0, r4, #11
    1270:	6008      	str	r0, [r1, #0]
    1272:	4c06      	ldr	r4, [pc, #24]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    1274:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    1278:	b3f0      	cbz	r0, 12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    127a:	e05d      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    127c:	e01d      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
    127e:	e021      	b.n	12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
    1280:	40000508 	.word	0x40000508
    1284:	20000010 	.word	0x20000010
    1288:	20000c5c 	.word	0x20000c5c
    128c:	20000f5c 	.word	0x20000f5c
    1290:	20000012 	.word	0x20000012
    1294:	1e847fff 	.word	0x1e847fff
    1298:	07a12000 	.word	0x07a12000
    129c:	f85ee000 	.word	0xf85ee000
    12a0:	1e848000 	.word	0x1e848000
    12a4:	e17b8000 	.word	0xe17b8000
    12a8:	003fffff 	.word	0x003fffff
    12ac:	4001f508 	.word	0x4001f508
    12b0:	4001f098 	.word	0x4001f098
    12b4:	4001f504 	.word	0x4001f504
    12b8:	e035      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    12ba:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    12be:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    12c2:	b358      	cbz	r0, 131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
    12c4:	4c2b      	ldr	r4, [pc, #172]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    12c6:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    12ca:	b150      	cbz	r0, 12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    12cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12d0:	f8c8 0000 	str.w	r0, [r8]
    12d4:	2005      	movs	r0, #5
    12d6:	f001 ffa7 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12da:	f002 facb 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12de:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
    12e2:	ac06      	add	r4, sp, #24
    12e4:	4824      	ldr	r0, [pc, #144]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    12e6:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    12ea:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    12ee:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    12f2:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
    12f6:	e000      	b.n	12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
    12f8:	e01a      	b.n	1330 <CONFIG_FPROTECT_BLOCK_SIZE+0x330>
    12fa:	f8c0 c310 	str.w	ip, [r0, #784]	; 0x310
    12fe:	ac0a      	add	r4, sp, #40	; 0x28
    1300:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1304:	f8c0 1314 	str.w	r1, [r0, #788]	; 0x314
    1308:	f8c0 2318 	str.w	r2, [r0, #792]	; 0x318
    130c:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
    1310:	f8c0 c320 	str.w	ip, [r0, #800]	; 0x320
    1314:	b01b      	add	sp, #108	; 0x6c
    1316:	2001      	movs	r0, #1
    1318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    131c:	f002 fa5e 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1320:	f88a 5030 	strb.w	r5, [sl, #48]	; 0x30
    1324:	e789      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    1326:	f240 315b 	movw	r1, #859	; 0x35b
    132a:	2070      	movs	r0, #112	; 0x70
    132c:	f002 fbd2 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1330:	f002 fa92 	bl	3858 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1334:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
    1338:	eba6 0009 	sub.w	r0, r6, r9
    133c:	f1a0 0119 	sub.w	r1, r0, #25
    1340:	2900      	cmp	r1, #0
    1342:	dc04      	bgt.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
    1344:	f640 2151 	movw	r1, #2641	; 0xa51
    1348:	2070      	movs	r0, #112	; 0x70
    134a:	f002 fbc3 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    134e:	2203      	movs	r2, #3
    1350:	2301      	movs	r3, #1
    1352:	4610      	mov	r0, r2
    1354:	f001 fea0 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1358:	b138      	cbz	r0, 136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
    135a:	4808      	ldr	r0, [pc, #32]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    135c:	6880      	ldr	r0, [r0, #8]
    135e:	f8c0 b000 	str.w	fp, [r0]
    1362:	4807      	ldr	r0, [pc, #28]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1364:	f8c0 b000 	str.w	fp, [r0]
    1368:	e7bb      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    136a:	f640 215c 	movw	r1, #2652	; 0xa5c
    136e:	2070      	movs	r0, #112	; 0x70
    1370:	f002 fbb0 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1374:	20000f5c 	.word	0x20000f5c
    1378:	20000c5c 	.word	0x20000c5c
    137c:	20000010 	.word	0x20000010
    1380:	40000508 	.word	0x40000508
    1384:	b510      	push	{r4, lr}
    1386:	4c15      	ldr	r4, [pc, #84]	; (13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>)
    1388:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    138c:	2820      	cmp	r0, #32
    138e:	bf18      	it	ne
    1390:	bd10      	popne	{r4, pc}
    1392:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    1396:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    139a:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    139e:	2920      	cmp	r1, #32
    13a0:	d016      	beq.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    13a2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    13a6:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    13aa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    13ae:	785b      	ldrb	r3, [r3, #1]
    13b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    13b4:	2301      	movs	r3, #1
    13b6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    13ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    13be:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    13c2:	2002      	movs	r0, #2
    13c4:	f000 f8b2 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    13c8:	2000      	movs	r0, #0
    13ca:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    13ce:	bd10      	pop	{r4, pc}
    13d0:	f44f 716a 	mov.w	r1, #936	; 0x3a8
    13d4:	2070      	movs	r0, #112	; 0x70
    13d6:	f002 fb7d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13da:	0000      	.short	0x0000
    13dc:	20000f5c 	.word	0x20000f5c
    13e0:	20000edc 	.word	0x20000edc
    13e4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    13e8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    13ec:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
    13f0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    13f4:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    13f8:	2c20      	cmp	r4, #32
    13fa:	bf08      	it	eq
    13fc:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1400:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    1404:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 14a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120>
    1408:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
    140c:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    1410:	2607      	movs	r6, #7
    1412:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1416:	2801      	cmp	r0, #1
    1418:	d00e      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    141a:	2804      	cmp	r0, #4
    141c:	bf08      	it	eq
    141e:	2602      	moveq	r6, #2
    1420:	d00a      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    1422:	2805      	cmp	r0, #5
    1424:	bf0c      	ite	eq
    1426:	2603      	moveq	r6, #3
    1428:	2806      	cmpne	r0, #6
    142a:	d005      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    142c:	f640 01c2 	movw	r1, #2242	; 0x8c2
    1430:	f04f 0070 	mov.w	r0, #112	; 0x70
    1434:	f002 fb4e 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1438:	f1ba 0f00 	cmp.w	sl, #0
    143c:	bf18      	it	ne
    143e:	f3af 8000 	nopne.w
    1442:	f3ef 8010 	mrs	r0, PRIMASK
    1446:	b672      	cpsid	i
    1448:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    144c:	784a      	ldrb	r2, [r1, #1]
    144e:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1452:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
    1456:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
    145a:	42a2      	cmp	r2, r4
    145c:	bf04      	itt	eq
    145e:	2220      	moveq	r2, #32
    1460:	f881 2026 	strbeq.w	r2, [r1, #38]	; 0x26
    1464:	b1a8      	cbz	r0, 1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1466:	462a      	mov	r2, r5
    1468:	4621      	mov	r1, r4
    146a:	2001      	movs	r0, #1
    146c:	f000 f85e 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    1470:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1474:	4631      	mov	r1, r6
    1476:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
    147a:	4620      	mov	r0, r4
    147c:	4790      	blx	r2
    147e:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
    1482:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1486:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    148a:	2c20      	cmp	r4, #32
    148c:	d1be      	bne.n	140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
    148e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1492:	4806      	ldr	r0, [pc, #24]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1494:	2800      	cmp	r0, #0
    1496:	bf18      	it	ne
    1498:	f3af 8000 	nopne.w
    149c:	b662      	cpsie	i
    149e:	e7e2      	b.n	1466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde>
    14a0:	20000f5c 	.word	0x20000f5c
    14a4:	00000000 	.word	0x00000000
    14a8:	20000edc 	.word	0x20000edc
    14ac:	00000000 	.word	0x00000000
    14b0:	b510      	push	{r4, lr}
    14b2:	4604      	mov	r4, r0
    14b4:	6800      	ldr	r0, [r0, #0]
    14b6:	f00d fbdd 	bl	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    14ba:	4601      	mov	r1, r0
    14bc:	8960      	ldrh	r0, [r4, #10]
    14be:	f994 2008 	ldrsb.w	r2, [r4, #8]
    14c2:	f8df c054 	ldr.w	ip, [pc, #84]	; 1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
    14c6:	4410      	add	r0, r2
    14c8:	1cc2      	adds	r2, r0, #3
    14ca:	1888      	adds	r0, r1, r2
    14cc:	2300      	movs	r3, #0
    14ce:	ebbc 0101 	subs.w	r1, ip, r1
    14d2:	eb73 0103 	sbcs.w	r1, r3, r3
    14d6:	d204      	bcs.n	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
    14d8:	f240 51f5 	movw	r1, #1525	; 0x5f5
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	f002 faf9 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	490e      	ldr	r1, [pc, #56]	; (151c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x194>)
    14e4:	428a      	cmp	r2, r1
    14e6:	dd04      	ble.n	14f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16a>
    14e8:	f240 51f6 	movw	r1, #1526	; 0x5f6
    14ec:	2070      	movs	r0, #112	; 0x70
    14ee:	f002 faf1 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f2:	490b      	ldr	r1, [pc, #44]	; (1520 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x198>)
    14f4:	428a      	cmp	r2, r1
    14f6:	da04      	bge.n	1502 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17a>
    14f8:	f240 51f7 	movw	r1, #1527	; 0x5f7
    14fc:	2070      	movs	r0, #112	; 0x70
    14fe:	f002 fae9 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1502:	4908      	ldr	r1, [pc, #32]	; (1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>)
    1504:	4288      	cmp	r0, r1
    1506:	bfa8      	it	ge
    1508:	4907      	ldrge	r1, [pc, #28]	; (1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>)
    150a:	da03      	bge.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    150c:	2800      	cmp	r0, #0
    150e:	bfb4      	ite	lt
    1510:	4904      	ldrlt	r1, [pc, #16]	; (1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>)
    1512:	bd10      	popge	{r4, pc}
    1514:	1840      	adds	r0, r0, r1
    1516:	bd10      	pop	{r4, pc}
    1518:	1e847fff 	.word	0x1e847fff
    151c:	07a12000 	.word	0x07a12000
    1520:	f85ee000 	.word	0xf85ee000
    1524:	1e848000 	.word	0x1e848000
    1528:	e17b8000 	.word	0xe17b8000
    152c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1584 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fc>
    1530:	b510      	push	{r4, lr}
    1532:	2300      	movs	r3, #0
    1534:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1538:	2807      	cmp	r0, #7
    153a:	d21e      	bcs.n	157a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f2>
    153c:	e8df f000 	tbb	[pc, r0]
    1540:	05050505 	.word	0x05050505
    1544:	00040404 	.word	0x00040404
    1548:	2301      	movs	r3, #1
    154a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    154e:	2b00      	cmp	r3, #0
    1550:	bf08      	it	eq
    1552:	bd10      	popeq	{r4, pc}
    1554:	480c      	ldr	r0, [pc, #48]	; (1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>)
    1556:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    155a:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    155e:	2820      	cmp	r0, #32
    1560:	bf0e      	itee	eq
    1562:	f882 1025 	strbeq.w	r1, [r2, #37]	; 0x25
    1566:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    156a:	7041      	strbne	r1, [r0, #1]
    156c:	2020      	movs	r0, #32
    156e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1572:	7058      	strb	r0, [r3, #1]
    1574:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1578:	bd10      	pop	{r4, pc}
    157a:	f44f 7120 	mov.w	r1, #640	; 0x280
    157e:	2070      	movs	r0, #112	; 0x70
    1580:	f002 faa8 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1584:	20000edc 	.word	0x20000edc
    1588:	20000f5c 	.word	0x20000f5c
    158c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1590:	b083      	sub	sp, #12
    1592:	485e      	ldr	r0, [pc, #376]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1594:	9904      	ldr	r1, [sp, #16]
    1596:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    159a:	9001      	str	r0, [sp, #4]
    159c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
    15a0:	9803      	ldr	r0, [sp, #12]
    15a2:	4625      	mov	r5, r4
    15a4:	2801      	cmp	r0, #1
    15a6:	bf18      	it	ne
    15a8:	2802      	cmpne	r0, #2
    15aa:	d005      	beq.n	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    15ac:	f640 2198 	movw	r1, #2712	; 0xa98
    15b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    15b4:	f002 fa8e 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15b8:	2700      	movs	r7, #0
    15ba:	2d20      	cmp	r5, #32
    15bc:	d04c      	beq.n	1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>
    15be:	4853      	ldr	r0, [pc, #332]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    15c0:	9100      	str	r1, [sp, #0]
    15c2:	2600      	movs	r6, #0
    15c4:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
    15c8:	2900      	cmp	r1, #0
    15ca:	bf04      	itt	eq
    15cc:	6800      	ldreq	r0, [r0, #0]
    15ce:	7886      	ldrbeq	r6, [r0, #2]
    15d0:	f001 fbdc 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    15d4:	f8df a13c 	ldr.w	sl, [pc, #316]	; 1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    15d8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    15dc:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    15e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>
    15e4:	684a      	ldr	r2, [r1, #4]
    15e6:	6889      	ldr	r1, [r1, #8]
    15e8:	1a12      	subs	r2, r2, r0
    15ea:	1a09      	subs	r1, r1, r0
    15ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    15f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    15f4:	4296      	cmp	r6, r2
    15f6:	bf98      	it	ls
    15f8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    15fc:	d201      	bcs.n	1602 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x27a>
    15fe:	4589      	cmp	r9, r1
    1600:	d228      	bcs.n	1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>
    1602:	4a45      	ldr	r2, [pc, #276]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
    1604:	9900      	ldr	r1, [sp, #0]
    1606:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    160a:	4622      	mov	r2, r4
    160c:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1610:	784c      	ldrb	r4, [r1, #1]
    1612:	2c20      	cmp	r4, #32
    1614:	d016      	beq.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
    1616:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    161a:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    161e:	f8dc 8004 	ldr.w	r8, [ip, #4]
    1622:	f8dc c008 	ldr.w	ip, [ip, #8]
    1626:	eba8 0800 	sub.w	r8, r8, r0
    162a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    162e:	ebac 0100 	sub.w	r1, ip, r0
    1632:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1636:	4546      	cmp	r6, r8
    1638:	bf98      	it	ls
    163a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    163e:	d2e4      	bcs.n	160a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x282>
    1640:	4589      	cmp	r9, r1
    1642:	d3e2      	bcc.n	160a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x282>
    1644:	2a20      	cmp	r2, #32
    1646:	d005      	beq.n	1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>
    1648:	2120      	movs	r1, #32
    164a:	2004      	movs	r0, #4
    164c:	9b00      	ldr	r3, [sp, #0]
    164e:	f7ff f9db 	bl	a08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec>
    1652:	4604      	mov	r4, r0
    1654:	42ac      	cmp	r4, r5
    1656:	d117      	bne.n	1688 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x300>
    1658:	4830      	ldr	r0, [pc, #192]	; (171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>)
    165a:	2800      	cmp	r0, #0
    165c:	bf18      	it	ne
    165e:	f3af 8000 	nopne.w
    1662:	f001 fb93 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1666:	4c29      	ldr	r4, [pc, #164]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1668:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    166c:	2920      	cmp	r1, #32
    166e:	d00f      	beq.n	1690 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x308>
    1670:	6822      	ldr	r2, [r4, #0]
    1672:	6921      	ldr	r1, [r4, #16]
    1674:	7892      	ldrb	r2, [r2, #2]
    1676:	4402      	add	r2, r0
    1678:	1a51      	subs	r1, r2, r1
    167a:	0209      	lsls	r1, r1, #8
    167c:	17ca      	asrs	r2, r1, #31
    167e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1682:	1209      	asrs	r1, r1, #8
    1684:	2900      	cmp	r1, #0
    1686:	dd03      	ble.n	1690 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x308>
    1688:	b005      	add	sp, #20
    168a:	2000      	movs	r0, #0
    168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1690:	2d20      	cmp	r5, #32
    1692:	d00d      	beq.n	16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>
    1694:	462a      	mov	r2, r5
    1696:	9903      	ldr	r1, [sp, #12]
    1698:	f7ff fbde 	bl	e58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x53c>
    169c:	b358      	cbz	r0, 16f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36e>
    169e:	9801      	ldr	r0, [sp, #4]
    16a0:	f880 7027 	strb.w	r7, [r0, #39]	; 0x27
    16a4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    16a8:	b005      	add	sp, #20
    16aa:	2001      	movs	r0, #1
    16ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16b0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    16b4:	b118      	cbz	r0, 16be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x336>
    16b6:	f002 f875 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    16ba:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    16be:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    16c2:	b150      	cbz	r0, 16da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x352>
    16c4:	4916      	ldr	r1, [pc, #88]	; (1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>)
    16c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16ca:	6008      	str	r0, [r1, #0]
    16cc:	2005      	movs	r0, #5
    16ce:	f001 fdab 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16d2:	f002 f8cf 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16d6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    16da:	2004      	movs	r0, #4
    16dc:	f001 fda4 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16e0:	f001 fdfe 	bl	32e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    16e4:	2020      	movs	r0, #32
    16e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    16ea:	480e      	ldr	r0, [pc, #56]	; (1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>)
    16ec:	6880      	ldr	r0, [r0, #8]
    16ee:	6007      	str	r7, [r0, #0]
    16f0:	480d      	ldr	r0, [pc, #52]	; (1728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a0>)
    16f2:	6007      	str	r7, [r0, #0]
    16f4:	e7d8      	b.n	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
    16f6:	462a      	mov	r2, r5
    16f8:	2120      	movs	r1, #32
    16fa:	2004      	movs	r0, #4
    16fc:	9b04      	ldr	r3, [sp, #16]
    16fe:	f7ff f983 	bl	a08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec>
    1702:	b005      	add	sp, #20
    1704:	2000      	movs	r0, #0
    1706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    170a:	0000      	.short	0x0000
    170c:	20000f5c 	.word	0x20000f5c
    1710:	003fffff 	.word	0x003fffff
    1714:	20000c5c 	.word	0x20000c5c
    1718:	20000edc 	.word	0x20000edc
    171c:	00000000 	.word	0x00000000
    1720:	4001f508 	.word	0x4001f508
    1724:	20000010 	.word	0x20000010
    1728:	40000508 	.word	0x40000508

0000172c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    172c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1730:	4e76      	ldr	r6, [pc, #472]	; (190c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    1732:	4607      	mov	r7, r0
    1734:	b087      	sub	sp, #28
    1736:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    173a:	468a      	mov	sl, r1
    173c:	2820      	cmp	r0, #32
    173e:	d05a      	beq.n	17f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1740:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    1744:	f106 0410 	add.w	r4, r6, #16
    1748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    174c:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1750:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1754:	2020      	movs	r0, #32
    1756:	f88d 0000 	strb.w	r0, [sp]
    175a:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    175e:	aa03      	add	r2, sp, #12
    1760:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1764:	a901      	add	r1, sp, #4
    1766:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
    176a:	6970      	ldr	r0, [r6, #20]
    176c:	9002      	str	r0, [sp, #8]
    176e:	6870      	ldr	r0, [r6, #4]
    1770:	4438      	add	r0, r7
    1772:	f001 fe69 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1776:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    177a:	2800      	cmp	r0, #0
    177c:	dd02      	ble.n	1784 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    177e:	9801      	ldr	r0, [sp, #4]
    1780:	1c40      	adds	r0, r0, #1
    1782:	9001      	str	r0, [sp, #4]
    1784:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1788:	9901      	ldr	r1, [sp, #4]
    178a:	2f64      	cmp	r7, #100	; 0x64
    178c:	4408      	add	r0, r1
    178e:	d337      	bcc.n	1800 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1790:	4b5f      	ldr	r3, [pc, #380]	; (1910 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e4>)
    1792:	2200      	movs	r2, #0
    1794:	1bdb      	subs	r3, r3, r7
    1796:	eb72 0102 	sbcs.w	r1, r2, r2
    179a:	d331      	bcc.n	1800 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    179c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    17a0:	1a41      	subs	r1, r0, r1
    17a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    17a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    17aa:	d229      	bcs.n	1800 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    17ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17b0:	6060      	str	r0, [r4, #4]
    17b2:	4856      	ldr	r0, [pc, #344]	; (190c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    17b4:	f884 a00c 	strb.w	sl, [r4, #12]
    17b8:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    17bc:	46ea      	mov	sl, sp
    17be:	2d20      	cmp	r5, #32
    17c0:	bf1c      	itt	ne
    17c2:	4954      	ldrne	r1, [pc, #336]	; (1914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e8>)
    17c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    17c8:	d04a      	beq.n	1860 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    17ca:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    17ce:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    17d2:	6860      	ldr	r0, [r4, #4]
    17d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    17d8:	4621      	mov	r1, r4
    17da:	1a10      	subs	r0, r2, r0
    17dc:	0200      	lsls	r0, r0, #8
    17de:	17c2      	asrs	r2, r0, #31
    17e0:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17e4:	f108 0604 	add.w	r6, r8, #4
    17e8:	1200      	asrs	r0, r0, #8
    17ea:	d426      	bmi.n	183a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    17ec:	8970      	ldrh	r0, [r6, #10]
    17ee:	b388      	cbz	r0, 1854 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    17f0:	8948      	ldrh	r0, [r1, #10]
    17f2:	b148      	cbz	r0, 1808 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    17f4:	e034      	b.n	1860 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    17f6:	f640 3165 	movw	r1, #2917	; 0xb65
    17fa:	2070      	movs	r0, #112	; 0x70
    17fc:	f002 f96a 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1800:	b007      	add	sp, #28
    1802:	2001      	movs	r0, #1
    1804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1808:	4620      	mov	r0, r4
    180a:	f7ff fe51 	bl	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
    180e:	aa05      	add	r2, sp, #20
    1810:	a904      	add	r1, sp, #16
    1812:	f001 fe19 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1816:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    181a:	2800      	cmp	r0, #0
    181c:	bfcc      	ite	gt
    181e:	2001      	movgt	r0, #1
    1820:	2000      	movle	r0, #0
    1822:	f100 0133 	add.w	r1, r0, #51	; 0x33
    1826:	9804      	ldr	r0, [sp, #16]
    1828:	6832      	ldr	r2, [r6, #0]
    182a:	1a10      	subs	r0, r2, r0
    182c:	0200      	lsls	r0, r0, #8
    182e:	17c2      	asrs	r2, r0, #31
    1830:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1834:	1200      	asrs	r0, r0, #8
    1836:	4288      	cmp	r0, r1
    1838:	da12      	bge.n	1860 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    183a:	f88a 5000 	strb.w	r5, [sl]
    183e:	f898 1010 	ldrb.w	r1, [r8, #16]
    1842:	7b20      	ldrb	r0, [r4, #12]
    1844:	4281      	cmp	r1, r0
    1846:	d806      	bhi.n	1856 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1848:	9802      	ldr	r0, [sp, #8]
    184a:	6060      	str	r0, [r4, #4]
    184c:	b007      	add	sp, #28
    184e:	2003      	movs	r0, #3
    1850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1854:	e004      	b.n	1860 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1856:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    185a:	7845      	ldrb	r5, [r0, #1]
    185c:	2d20      	cmp	r5, #32
    185e:	d1b4      	bne.n	17ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    1860:	4d2a      	ldr	r5, [pc, #168]	; (190c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    1862:	68e8      	ldr	r0, [r5, #12]
    1864:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1868:	d016      	beq.n	1898 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    186a:	f001 fa8f 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    186e:	68e9      	ldr	r1, [r5, #12]
    1870:	1a08      	subs	r0, r1, r0
    1872:	0200      	lsls	r0, r0, #8
    1874:	17c1      	asrs	r1, r0, #31
    1876:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    187a:	1200      	asrs	r0, r0, #8
    187c:	2802      	cmp	r0, #2
    187e:	dc05      	bgt.n	188c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    1880:	9802      	ldr	r0, [sp, #8]
    1882:	6060      	str	r0, [r4, #4]
    1884:	b007      	add	sp, #28
    1886:	2002      	movs	r0, #2
    1888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    188c:	2005      	movs	r0, #5
    188e:	f001 fccb 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1896:	60e8      	str	r0, [r5, #12]
    1898:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    189c:	f89d 2000 	ldrb.w	r2, [sp]
    18a0:	2120      	movs	r1, #32
    18a2:	2a20      	cmp	r2, #32
    18a4:	bf13      	iteet	ne
    18a6:	2005      	movne	r0, #5
    18a8:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    18ac:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    18b0:	f7ff f8aa 	blne	a08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec>
    18b4:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    18b8:	4916      	ldr	r1, [pc, #88]	; (1914 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e8>)
    18ba:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    18be:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    18c2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    18c6:	7048      	strb	r0, [r1, #1]
    18c8:	6868      	ldr	r0, [r5, #4]
    18ca:	4438      	add	r0, r7
    18cc:	6068      	str	r0, [r5, #4]
    18ce:	2001      	movs	r0, #1
    18d0:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
    18d4:	7f68      	ldrb	r0, [r5, #29]
    18d6:	2801      	cmp	r0, #1
    18d8:	d10a      	bne.n	18f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    18da:	6828      	ldr	r0, [r5, #0]
    18dc:	6969      	ldr	r1, [r5, #20]
    18de:	7840      	ldrb	r0, [r0, #1]
    18e0:	2801      	cmp	r0, #1
    18e2:	d811      	bhi.n	1908 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>
    18e4:	b180      	cbz	r0, 1908 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>
    18e6:	1a08      	subs	r0, r1, r0
    18e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18ec:	f001 faee 	bl	2ecc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    18f0:	f89d 0000 	ldrb.w	r0, [sp]
    18f4:	2820      	cmp	r0, #32
    18f6:	d003      	beq.n	1900 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>
    18f8:	4807      	ldr	r0, [pc, #28]	; (1918 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ec>)
    18fa:	7840      	ldrb	r0, [r0, #1]
    18fc:	f002 f9ba 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1900:	b007      	add	sp, #28
    1902:	2000      	movs	r0, #0
    1904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1908:	2001      	movs	r0, #1
    190a:	e7ec      	b.n	18e6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ba>
    190c:	20000f5c 	.word	0x20000f5c
    1910:	07a11fff 	.word	0x07a11fff
    1914:	20000edc 	.word	0x20000edc
    1918:	20000010 	.word	0x20000010

0000191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    191c:	4602      	mov	r2, r0
    191e:	f8df c054 	ldr.w	ip, [pc, #84]	; 1974 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    1922:	b510      	push	{r4, lr}
    1924:	2300      	movs	r3, #0
    1926:	ebbc 0202 	subs.w	r2, ip, r2
    192a:	4408      	add	r0, r1
    192c:	eb73 0203 	sbcs.w	r2, r3, r3
    1930:	d204      	bcs.n	193c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    1932:	f240 51f5 	movw	r1, #1525	; 0x5f5
    1936:	2070      	movs	r0, #112	; 0x70
    1938:	f002 f8cc 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    193c:	4a0e      	ldr	r2, [pc, #56]	; (1978 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    193e:	4291      	cmp	r1, r2
    1940:	dd04      	ble.n	194c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    1942:	f240 51f6 	movw	r1, #1526	; 0x5f6
    1946:	2070      	movs	r0, #112	; 0x70
    1948:	f002 f8c4 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    194c:	4a0b      	ldr	r2, [pc, #44]	; (197c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    194e:	4291      	cmp	r1, r2
    1950:	da04      	bge.n	195c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    1952:	f240 51f7 	movw	r1, #1527	; 0x5f7
    1956:	2070      	movs	r0, #112	; 0x70
    1958:	f002 f8bc 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    195c:	4908      	ldr	r1, [pc, #32]	; (1980 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    195e:	4288      	cmp	r0, r1
    1960:	bfa8      	it	ge
    1962:	4908      	ldrge	r1, [pc, #32]	; (1984 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    1964:	da03      	bge.n	196e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    1966:	2800      	cmp	r0, #0
    1968:	bfb4      	ite	lt
    196a:	4905      	ldrlt	r1, [pc, #20]	; (1980 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    196c:	bd10      	popge	{r4, pc}
    196e:	1840      	adds	r0, r0, r1
    1970:	bd10      	pop	{r4, pc}
    1972:	0000      	.short	0x0000
    1974:	1e847fff 	.word	0x1e847fff
    1978:	07a12000 	.word	0x07a12000
    197c:	f85ee000 	.word	0xf85ee000
    1980:	1e848000 	.word	0x1e848000
    1984:	e17b8000 	.word	0xe17b8000

00001988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1988:	4a10      	ldr	r2, [pc, #64]	; (19cc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    198a:	1a0b      	subs	r3, r1, r0
    198c:	f102 0c01 	add.w	ip, r2, #1
    1990:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1994:	bf3c      	itt	cc
    1996:	4618      	movcc	r0, r3
    1998:	4770      	bxcc	lr
    199a:	b510      	push	{r4, lr}
    199c:	1a44      	subs	r4, r0, r1
    199e:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    19a2:	bf3c      	itt	cc
    19a4:	4618      	movcc	r0, r3
    19a6:	bd10      	popcc	{r4, pc}
    19a8:	429a      	cmp	r2, r3
    19aa:	d203      	bcs.n	19b4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    19ac:	1a10      	subs	r0, r2, r0
    19ae:	4408      	add	r0, r1
    19b0:	1c40      	adds	r0, r0, #1
    19b2:	bd10      	pop	{r4, pc}
    19b4:	42a2      	cmp	r2, r4
    19b6:	d204      	bcs.n	19c2 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    19b8:	1a51      	subs	r1, r2, r1
    19ba:	4408      	add	r0, r1
    19bc:	1c40      	adds	r0, r0, #1
    19be:	4240      	negs	r0, r0
    19c0:	bd10      	pop	{r4, pc}
    19c2:	f640 21f4 	movw	r1, #2804	; 0xaf4
    19c6:	2070      	movs	r0, #112	; 0x70
    19c8:	f002 f884 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19cc:	1e847fff 	.word	0x1e847fff

000019d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    19d0:	490b      	ldr	r1, [pc, #44]	; (1a00 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    19d2:	b510      	push	{r4, lr}
    19d4:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    19d8:	2820      	cmp	r0, #32
    19da:	d00c      	beq.n	19f6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    19dc:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    19e0:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
    19e4:	4a07      	ldr	r2, [pc, #28]	; (1a04 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    19e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    19ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    19ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    19f2:	2104      	movs	r1, #4
    19f4:	4710      	bx	r2
    19f6:	f640 01a6 	movw	r1, #2214	; 0x8a6
    19fa:	2070      	movs	r0, #112	; 0x70
    19fc:	f002 f86a 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a00:	20000f5c 	.word	0x20000f5c
    1a04:	20000c5c 	.word	0x20000c5c

00001a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	4e64      	ldr	r6, [pc, #400]	; (1b9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1a0c:	4964      	ldr	r1, [pc, #400]	; (1ba0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x198>)
    1a0e:	2501      	movs	r5, #1
    1a10:	f506 7440 	add.w	r4, r6, #768	; 0x300
    1a14:	2808      	cmp	r0, #8
    1a16:	d27c      	bcs.n	1b12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    1a18:	e8df f000 	tbb	[pc, r0]
    1a1c:	a28f5e04 	.word	0xa28f5e04
    1a20:	aca745ba 	.word	0xaca745ba
    1a24:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    1a28:	b918      	cbnz	r0, 1a32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1a2a:	f001 fed7 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1a2e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1a32:	8b60      	ldrh	r0, [r4, #26]
    1a34:	b110      	cbz	r0, 1a3c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1a36:	f001 ffe9 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1a3a:	b188      	cbz	r0, 1a60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1a3c:	f7ff fca2 	bl	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1a40:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1a44:	68e1      	ldr	r1, [r4, #12]
    1a46:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1a4a:	d005      	beq.n	1a58 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1a4c:	2301      	movs	r3, #1
    1a4e:	2203      	movs	r2, #3
    1a50:	2005      	movs	r0, #5
    1a52:	f001 fb21 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a56:	b140      	cbz	r0, 1a6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1a58:	7f60      	ldrb	r0, [r4, #29]
    1a5a:	2801      	cmp	r0, #1
    1a5c:	d00a      	beq.n	1a74 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1a5e:	e014      	b.n	1a8a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x82>
    1a60:	f640 015e 	movw	r1, #2142	; 0x85e
    1a64:	2070      	movs	r0, #112	; 0x70
    1a66:	f002 f835 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a6a:	f640 0163 	movw	r1, #2147	; 0x863
    1a6e:	2070      	movs	r0, #112	; 0x70
    1a70:	f002 f830 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a74:	6820      	ldr	r0, [r4, #0]
    1a76:	6961      	ldr	r1, [r4, #20]
    1a78:	7840      	ldrb	r0, [r0, #1]
    1a7a:	2801      	cmp	r0, #1
    1a7c:	d811      	bhi.n	1aa2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1a7e:	b180      	cbz	r0, 1aa2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1a80:	1a08      	subs	r0, r1, r0
    1a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a86:	f001 fa21 	bl	2ecc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1a8a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1a8e:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1a92:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1a96:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1a9e:	2101      	movs	r1, #1
    1aa0:	4710      	bx	r2
    1aa2:	2001      	movs	r0, #1
    1aa4:	e7ec      	b.n	1a80 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1aa6:	f7ff fc6d 	bl	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1aae:	60e0      	str	r0, [r4, #12]
    1ab0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1ab4:	b158      	cbz	r0, 1ace <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc6>
    1ab6:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1aba:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1abe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1ac2:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1aca:	2106      	movs	r1, #6
    1acc:	4710      	bx	r2
    1ace:	f640 0173 	movw	r1, #2163	; 0x873
    1ad2:	2070      	movs	r0, #112	; 0x70
    1ad4:	f001 fffe 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ad8:	f7ff fc54 	bl	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1adc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    1ae0:	f001 ff94 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ae4:	b118      	cbz	r0, 1aee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe6>
    1ae6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    1aea:	b128      	cbz	r0, 1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf0>
    1aec:	e008      	b.n	1b00 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1aee:	f640 0182 	movw	r1, #2178	; 0x882
    1af2:	2070      	movs	r0, #112	; 0x70
    1af4:	f001 ffee 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1af8:	f001 fe70 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1afc:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1b00:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    1b04:	b168      	cbz	r0, 1b22 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1b06:	4927      	ldr	r1, [pc, #156]	; (1ba4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x19c>)
    1b08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1b0c:	6008      	str	r0, [r1, #0]
    1b0e:	2005      	movs	r0, #5
    1b10:	e000      	b.n	1b14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1b12:	e03d      	b.n	1b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>
    1b14:	f001 fb88 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b18:	f001 feac 	bl	3874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1b1c:	2000      	movs	r0, #0
    1b1e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    1b22:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1b26:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1b2a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1b2e:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1b36:	2100      	movs	r1, #0
    1b38:	4710      	bx	r2
    1b3a:	f001 fc1b 	bl	3374 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1b3e:	8b60      	ldrh	r0, [r4, #26]
    1b40:	b110      	cbz	r0, 1b48 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x140>
    1b42:	f001 ff63 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1b46:	b130      	cbz	r0, 1b56 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14e>
    1b48:	4817      	ldr	r0, [pc, #92]	; (1ba8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>)
    1b4a:	7800      	ldrb	r0, [r0, #0]
    1b4c:	2803      	cmp	r0, #3
    1b4e:	bf08      	it	eq
    1b50:	f884 5021 	strbeq.w	r5, [r4, #33]	; 0x21
    1b54:	bd70      	pop	{r4, r5, r6, pc}
    1b56:	f640 018c 	movw	r1, #2188	; 0x88c
    1b5a:	2070      	movs	r0, #112	; 0x70
    1b5c:	f001 ffba 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b60:	4812      	ldr	r0, [pc, #72]	; (1bac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a4>)
    1b62:	6005      	str	r5, [r0, #0]
    1b64:	6888      	ldr	r0, [r1, #8]
    1b66:	6005      	str	r5, [r0, #0]
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	7808      	ldrb	r0, [r1, #0]
    1b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1b70:	f002 b880 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b74:	f7ff fc06 	bl	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1b78:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1b7c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1b80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1b84:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1b8c:	2105      	movs	r1, #5
    1b8e:	4710      	bx	r2
    1b90:	f640 019e 	movw	r1, #2206	; 0x89e
    1b94:	2070      	movs	r0, #112	; 0x70
    1b96:	f001 ff9d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b9a:	0000      	.short	0x0000
    1b9c:	20000c5c 	.word	0x20000c5c
    1ba0:	20000010 	.word	0x20000010
    1ba4:	4001f508 	.word	0x4001f508
    1ba8:	20000012 	.word	0x20000012
    1bac:	40000508 	.word	0x40000508

00001bb0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1bb0:	4803      	ldr	r0, [pc, #12]	; (1bc0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1bb2:	b510      	push	{r4, lr}
    1bb4:	7840      	ldrb	r0, [r0, #1]
    1bb6:	f00d f85d 	bl	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1bba:	b280      	uxth	r0, r0
    1bbc:	bd10      	pop	{r4, pc}
    1bbe:	0000      	.short	0x0000
    1bc0:	20000012 	.word	0x20000012

00001bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1bc4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bc8:	48fe      	ldr	r0, [pc, #1016]	; (1fc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>)
    1bca:	b095      	sub	sp, #84	; 0x54
    1bcc:	4688      	mov	r8, r1
    1bce:	6800      	ldr	r0, [r0, #0]
    1bd0:	4cfd      	ldr	r4, [pc, #1012]	; (1fc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>)
    1bd2:	05c0      	lsls	r0, r0, #23
    1bd4:	0dc0      	lsrs	r0, r0, #23
    1bd6:	d00e      	beq.n	1bf6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1bd8:	3810      	subs	r0, #16
    1bda:	b240      	sxtb	r0, r0
    1bdc:	2800      	cmp	r0, #0
    1bde:	bfb8      	it	lt
    1be0:	f000 000f 	andlt.w	r0, r0, #15
    1be4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1be8:	bfac      	ite	ge
    1bea:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1bee:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1bf2:	0940      	lsrs	r0, r0, #5
    1bf4:	d00d      	beq.n	1c12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1bf6:	f898 0000 	ldrb.w	r0, [r8]
    1bfa:	f04f 0b00 	mov.w	fp, #0
    1bfe:	2800      	cmp	r0, #0
    1c00:	bf18      	it	ne
    1c02:	2801      	cmpne	r0, #1
    1c04:	d018      	beq.n	1c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1c06:	f240 714c 	movw	r1, #1868	; 0x74c
    1c0a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1c0e:	f001 ff61 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c12:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1c16:	f04f 0b01 	mov.w	fp, #1
    1c1a:	2820      	cmp	r0, #32
    1c1c:	d007      	beq.n	1c2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1c1e:	f898 0000 	ldrb.w	r0, [r8]
    1c22:	b148      	cbz	r0, 1c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1c24:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    1c28:	2070      	movs	r0, #112	; 0x70
    1c2a:	f001 ff53 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c2e:	f240 7145 	movw	r1, #1861	; 0x745
    1c32:	2070      	movs	r0, #112	; 0x70
    1c34:	f001 ff4e 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c38:	4de4      	ldr	r5, [pc, #912]	; (1fcc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>)
    1c3a:	b125      	cbz	r5, 1c46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1c3c:	2100      	movs	r1, #0
    1c3e:	f240 704f 	movw	r0, #1871	; 0x74f
    1c42:	f3af 8000 	nop.w
    1c46:	9815      	ldr	r0, [sp, #84]	; 0x54
    1c48:	49e1      	ldr	r1, [pc, #900]	; (1fd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>)
    1c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1c4e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1c52:	f04f 0901 	mov.w	r9, #1
    1c56:	9001      	str	r0, [sp, #4]
    1c58:	b125      	cbz	r5, 1c64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1c5a:	2100      	movs	r1, #0
    1c5c:	f240 7057 	movw	r0, #1879	; 0x757
    1c60:	f3af 8000 	nop.w
    1c64:	f1b9 0f00 	cmp.w	r9, #0
    1c68:	d00a      	beq.n	1c80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1c6a:	bf00      	nop
    1c6c:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    1c70:	f04f 0a00 	mov.w	sl, #0
    1c74:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
    1c78:	f1bb 0f00 	cmp.w	fp, #0
    1c7c:	d007      	beq.n	1c8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1c7e:	e02e      	b.n	1cde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1c80:	48d4      	ldr	r0, [pc, #848]	; (1fd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>)
    1c82:	2800      	cmp	r0, #0
    1c84:	bf18      	it	ne
    1c86:	f3af 8000 	nopne.w
    1c8a:	b662      	cpsie	i
    1c8c:	e7ee      	b.n	1c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1c8e:	4637      	mov	r7, r6
    1c90:	2001      	movs	r0, #1
    1c92:	ea20 0607 	bic.w	r6, r0, r7
    1c96:	48d0      	ldr	r0, [pc, #832]	; (1fd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28c>)
    1c98:	2240      	movs	r2, #64	; 0x40
    1c9a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c9e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1ca2:	f002 f869 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ca6:	b125      	cbz	r5, 1cb2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    1ca8:	2100      	movs	r1, #0
    1caa:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1cae:	f3af 8000 	nop.w
    1cb2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1cb6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1cba:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1cbc:	6241      	str	r1, [r0, #36]	; 0x24
    1cbe:	b125      	cbz	r5, 1cca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    1cc0:	2100      	movs	r1, #0
    1cc2:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1cc6:	f3af 8000 	nop.w
    1cca:	b125      	cbz	r5, 1cd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    1ccc:	2100      	movs	r1, #0
    1cce:	f240 7061 	movw	r0, #1889	; 0x761
    1cd2:	f3af 8000 	nop.w
    1cd6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cda:	2800      	cmp	r0, #0
    1cdc:	d1bc      	bne.n	1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1cde:	b125      	cbz	r5, 1cea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    1ce0:	2100      	movs	r1, #0
    1ce2:	f240 706b 	movw	r0, #1899	; 0x76b
    1ce6:	f3af 8000 	nop.w
    1cea:	f001 f84f 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cee:	4607      	mov	r7, r0
    1cf0:	a802      	add	r0, sp, #8
    1cf2:	9008      	str	r0, [sp, #32]
    1cf4:	f898 0000 	ldrb.w	r0, [r8]
    1cf8:	2800      	cmp	r0, #0
    1cfa:	f898 000b 	ldrb.w	r0, [r8, #11]
    1cfe:	f88d 0015 	strb.w	r0, [sp, #21]
    1d02:	f898 100a 	ldrb.w	r1, [r8, #10]
    1d06:	f88d 1014 	strb.w	r1, [sp, #20]
    1d0a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1d0e:	f8ad 1012 	strh.w	r1, [sp, #18]
    1d12:	9000      	str	r0, [sp, #0]
    1d14:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1d18:	d05d      	beq.n	1dd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a>
    1d1a:	2200      	movs	r2, #0
    1d1c:	9808      	ldr	r0, [sp, #32]
    1d1e:	f7fe fe09 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1d22:	9706      	str	r7, [sp, #24]
    1d24:	6820      	ldr	r0, [r4, #0]
    1d26:	aa0f      	add	r2, sp, #60	; 0x3c
    1d28:	a909      	add	r1, sp, #36	; 0x24
    1d2a:	f890 9003 	ldrb.w	r9, [r0, #3]
    1d2e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1d32:	f001 fb89 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1d36:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1d3a:	2820      	cmp	r0, #32
    1d3c:	d051      	beq.n	1de2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1d3e:	6960      	ldr	r0, [r4, #20]
    1d40:	4448      	add	r0, r9
    1d42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d46:	bf00      	nop
    1d48:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d4c:	1a89      	subs	r1, r1, r2
    1d4e:	9002      	str	r0, [sp, #8]
    1d50:	4408      	add	r0, r1
    1d52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d56:	9003      	str	r0, [sp, #12]
    1d58:	4631      	mov	r1, r6
    1d5a:	9808      	ldr	r0, [sp, #32]
    1d5c:	f7fe fe90 	bl	a80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x164>
    1d60:	f898 000b 	ldrb.w	r0, [r8, #11]
    1d64:	9000      	str	r0, [sp, #0]
    1d66:	46b9      	mov	r9, r7
    1d68:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1d6c:	a810      	add	r0, sp, #64	; 0x40
    1d6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1d72:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1d76:	f7fe fddd 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1d7a:	9802      	ldr	r0, [sp, #8]
    1d7c:	9a03      	ldr	r2, [sp, #12]
    1d7e:	eba0 0009 	sub.w	r0, r0, r9
    1d82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d86:	eba2 0209 	sub.w	r2, r2, r9
    1d8a:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d90:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d94:	d201      	bcs.n	1d9a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e>
    1d96:	4291      	cmp	r1, r2
    1d98:	d209      	bcs.n	1dae <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62>
    1d9a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d9e:	1a89      	subs	r1, r1, r2
    1da0:	1878      	adds	r0, r7, r1
    1da2:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    1da6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1daa:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1dae:	b125      	cbz	r5, 1dba <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e>
    1db0:	2100      	movs	r1, #0
    1db2:	f240 7072 	movw	r0, #1906	; 0x772
    1db6:	f3af 8000 	nop.w
    1dba:	4a87      	ldr	r2, [pc, #540]	; (1fd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28c>)
    1dbc:	4639      	mov	r1, r7
    1dbe:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    1dc2:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1dc6:	a802      	add	r0, sp, #8
    1dc8:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    1dcc:	2a01      	cmp	r2, #1
    1dce:	bf18      	it	ne
    1dd0:	2a02      	cmpne	r2, #2
    1dd2:	d01d      	beq.n	1e10 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dd4:	e05c      	b.n	1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    1dd6:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1dda:	9808      	ldr	r0, [sp, #32]
    1ddc:	f7fe fdaa 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1de0:	e7e5      	b.n	1dae <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62>
    1de2:	9806      	ldr	r0, [sp, #24]
    1de4:	4448      	add	r0, r9
    1de6:	f100 0904 	add.w	r9, r0, #4
    1dea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1dee:	b128      	cbz	r0, 1dfc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1df0:	f001 fe0c 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1df4:	2800      	cmp	r0, #0
    1df6:	bf08      	it	eq
    1df8:	f109 0932 	addeq.w	r9, r9, #50	; 0x32
    1dfc:	4877      	ldr	r0, [pc, #476]	; (1fdc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>)
    1dfe:	7841      	ldrb	r1, [r0, #1]
    1e00:	9809      	ldr	r0, [sp, #36]	; 0x24
    1e02:	4281      	cmp	r1, r0
    1e04:	bf84      	itt	hi
    1e06:	1a08      	subhi	r0, r1, r0
    1e08:	4481      	addhi	r9, r0
    1e0a:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
    1e0e:	e79b      	b.n	1d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    1e10:	6822      	ldr	r2, [r4, #0]
    1e12:	f8dd c00c 	ldr.w	ip, [sp, #12]
    1e16:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1fe0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1e1a:	7893      	ldrb	r3, [r2, #2]
    1e1c:	9a02      	ldr	r2, [sp, #8]
    1e1e:	1a52      	subs	r2, r2, r1
    1e20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e24:	ebac 0101 	sub.w	r1, ip, r1
    1e28:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e2c:	4293      	cmp	r3, r2
    1e2e:	bf98      	it	ls
    1e30:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1e34:	d264      	bcs.n	1f00 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>
    1e36:	458a      	cmp	sl, r1
    1e38:	d362      	bcc.n	1f00 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>
    1e3a:	f04f 0a01 	mov.w	sl, #1
    1e3e:	ab10      	add	r3, sp, #64	; 0x40
    1e40:	aa0f      	add	r2, sp, #60	; 0x3c
    1e42:	4631      	mov	r1, r6
    1e44:	f7fe ff66 	bl	d14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3f8>
    1e48:	2800      	cmp	r0, #0
    1e4a:	d061      	beq.n	1f10 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1e4c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    1e50:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1e54:	4633      	mov	r3, r6
    1e56:	428a      	cmp	r2, r1
    1e58:	d05e      	beq.n	1f18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1e5a:	2005      	movs	r0, #5
    1e5c:	f7fe fdd4 	bl	a08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec>
    1e60:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    1e64:	7048      	strb	r0, [r1, #1]
    1e66:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1e6a:	2820      	cmp	r0, #32
    1e6c:	bf03      	ittte	eq
    1e6e:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1e72:	f880 9024 	strbeq.w	r9, [r0, #36]	; 0x24
    1e76:	f880 a027 	strbeq.w	sl, [r0, #39]	; 0x27
    1e7a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1e7e:	bf18      	it	ne
    1e80:	f880 9001 	strbne.w	r9, [r0, #1]
    1e84:	4632      	mov	r2, r6
    1e86:	4649      	mov	r1, r9
    1e88:	f05f 0003 	movs.w	r0, #3
    1e8c:	f7ff fb4e 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    1e90:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1e94:	f890 7027 	ldrb.w	r7, [r0, #39]	; 0x27
    1e98:	b125      	cbz	r5, 1ea4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>
    1e9a:	2100      	movs	r1, #0
    1e9c:	f240 7079 	movw	r0, #1913	; 0x779
    1ea0:	f3af 8000 	nop.w
    1ea4:	484f      	ldr	r0, [pc, #316]	; (1fe4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>)
    1ea6:	2800      	cmp	r0, #0
    1ea8:	bf18      	it	ne
    1eaa:	f3af 8000 	nopne.w
    1eae:	f3ef 8910 	mrs	r9, PRIMASK
    1eb2:	b672      	cpsid	i
    1eb4:	b125      	cbz	r5, 1ec0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1eb6:	2100      	movs	r1, #0
    1eb8:	f240 707f 	movw	r0, #1919	; 0x77f
    1ebc:	f3af 8000 	nop.w
    1ec0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ec4:	2800      	cmp	r0, #0
    1ec6:	f47f aec7 	bne.w	1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1eca:	b125      	cbz	r5, 1ed6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18a>
    1ecc:	2100      	movs	r1, #0
    1ece:	f240 7087 	movw	r0, #1927	; 0x787
    1ed2:	f3af 8000 	nop.w
    1ed6:	f10d 0e04 	add.w	lr, sp, #4
    1eda:	f1ba 0f00 	cmp.w	sl, #0
    1ede:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    1ee2:	f100 0004 	add.w	r0, r0, #4
    1ee6:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1eea:	d041      	beq.n	1f70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1eec:	b125      	cbz	r5, 1ef8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1eee:	2100      	movs	r1, #0
    1ef0:	f240 7094 	movw	r0, #1940	; 0x794
    1ef4:	f3af 8000 	nop.w
    1ef8:	f1bb 0f00 	cmp.w	fp, #0
    1efc:	d12b      	bne.n	1f56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1efe:	e015      	b.n	1f2c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    1f00:	4632      	mov	r2, r6
    1f02:	4649      	mov	r1, r9
    1f04:	2004      	movs	r0, #4
    1f06:	f7ff fb11 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    1f0a:	f04f 0a01 	mov.w	sl, #1
    1f0e:	e7bf      	b.n	1e90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    1f10:	4632      	mov	r2, r6
    1f12:	4649      	mov	r1, r9
    1f14:	2004      	movs	r0, #4
    1f16:	e7b9      	b.n	1e8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1f18:	2920      	cmp	r1, #32
    1f1a:	bf19      	ittee	ne
    1f1c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1f20:	7840      	ldrbne	r0, [r0, #1]
    1f22:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1f26:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    1f2a:	e799      	b.n	1e60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1f2c:	b19f      	cbz	r7, 1f56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f2e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1f32:	2820      	cmp	r0, #32
    1f34:	d10f      	bne.n	1f56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f36:	b125      	cbz	r5, 1f42 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1f38:	2100      	movs	r1, #0
    1f3a:	f240 7099 	movw	r0, #1945	; 0x799
    1f3e:	f3af 8000 	nop.w
    1f42:	4631      	mov	r1, r6
    1f44:	2002      	movs	r0, #2
    1f46:	f7ff fb21 	bl	158c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x204>
    1f4a:	b920      	cbnz	r0, 1f56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f4c:	f898 0000 	ldrb.w	r0, [r8]
    1f50:	b3b8      	cbz	r0, 1fc2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x276>
    1f52:	2801      	cmp	r0, #1
    1f54:	d05d      	beq.n	2012 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c6>
    1f56:	b125      	cbz	r5, 1f62 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x216>
    1f58:	2100      	movs	r1, #0
    1f5a:	f240 70b6 	movw	r0, #1974	; 0x7b6
    1f5e:	f3af 8000 	nop.w
    1f62:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    1f66:	2001      	movs	r0, #1
    1f68:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    1f6c:	f04f 0a01 	mov.w	sl, #1
    1f70:	b125      	cbz	r5, 1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f72:	2100      	movs	r1, #0
    1f74:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1f78:	f3af 8000 	nop.w
    1f7c:	f1b9 0f00 	cmp.w	r9, #0
    1f80:	d050      	beq.n	2024 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    1f82:	b125      	cbz	r5, 1f8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x242>
    1f84:	2100      	movs	r1, #0
    1f86:	f240 70c3 	movw	r0, #1987	; 0x7c3
    1f8a:	f3af 8000 	nop.w
    1f8e:	f1ba 0f00 	cmp.w	sl, #0
    1f92:	d011      	beq.n	1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1f94:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    1f98:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1f9c:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    1fa0:	2820      	cmp	r0, #32
    1fa2:	d009      	beq.n	1fb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fa4:	b125      	cbz	r5, 1fb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1fa6:	2100      	movs	r1, #0
    1fa8:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1fac:	f3af 8000 	nop.w
    1fb0:	480d      	ldr	r0, [pc, #52]	; (1fe8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>)
    1fb2:	7840      	ldrb	r0, [r0, #1]
    1fb4:	f001 fe5e 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1fb8:	b1d5      	cbz	r5, 1ff0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>
    1fba:	2100      	movs	r1, #0
    1fbc:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1fc0:	e014      	b.n	1fec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>
    1fc2:	e019      	b.n	1ff8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ac>
    1fc4:	e000ed04 	.word	0xe000ed04
    1fc8:	20000f5c 	.word	0x20000f5c
    1fcc:	00000000 	.word	0x00000000
    1fd0:	20000c5c 	.word	0x20000c5c
    1fd4:	00000000 	.word	0x00000000
    1fd8:	20000edc 	.word	0x20000edc
    1fdc:	20000012 	.word	0x20000012
    1fe0:	003fffff 	.word	0x003fffff
    1fe4:	00000000 	.word	0x00000000
    1fe8:	20000010 	.word	0x20000010
    1fec:	f3af 8000 	nop.w
    1ff0:	b017      	add	sp, #92	; 0x5c
    1ff2:	4650      	mov	r0, sl
    1ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ff8:	b125      	cbz	r5, 2004 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b8>
    1ffa:	2100      	movs	r1, #0
    1ffc:	f240 70a1 	movw	r0, #1953	; 0x7a1
    2000:	f3af 8000 	nop.w
    2004:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    2008:	2004      	movs	r0, #4
    200a:	9915      	ldr	r1, [sp, #84]	; 0x54
    200c:	f7ff fa8e 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    2010:	e7ac      	b.n	1f6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>
    2012:	2d00      	cmp	r5, #0
    2014:	f43f ae20 	beq.w	1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2018:	2100      	movs	r1, #0
    201a:	f240 70ac 	movw	r0, #1964	; 0x7ac
    201e:	f3af 8000 	nop.w
    2022:	e619      	b.n	1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    2024:	4803      	ldr	r0, [pc, #12]	; (2034 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e8>)
    2026:	2800      	cmp	r0, #0
    2028:	bf18      	it	ne
    202a:	f3af 8000 	nopne.w
    202e:	b662      	cpsie	i
    2030:	e7a7      	b.n	1f82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x236>
    2032:	0000      	.short	0x0000
    2034:	00000000 	.word	0x00000000

00002038 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    203c:	4606      	mov	r6, r0
    203e:	48e4      	ldr	r0, [pc, #912]	; (23d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x398>)
    2040:	b095      	sub	sp, #84	; 0x54
    2042:	6800      	ldr	r0, [r0, #0]
    2044:	05c0      	lsls	r0, r0, #23
    2046:	0dc0      	lsrs	r0, r0, #23
    2048:	d011      	beq.n	206e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    204a:	3810      	subs	r0, #16
    204c:	b240      	sxtb	r0, r0
    204e:	2800      	cmp	r0, #0
    2050:	bfb8      	it	lt
    2052:	f000 000f 	andlt.w	r0, r0, #15
    2056:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    205a:	bfac      	ite	ge
    205c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2060:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2064:	0940      	lsrs	r0, r0, #5
    2066:	bf08      	it	eq
    2068:	f04f 0b01 	moveq.w	fp, #1
    206c:	d001      	beq.n	2072 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    206e:	f04f 0b00 	mov.w	fp, #0
    2072:	7830      	ldrb	r0, [r6, #0]
    2074:	2800      	cmp	r0, #0
    2076:	f04f 0000 	mov.w	r0, #0
    207a:	bf1c      	itt	ne
    207c:	b015      	addne	sp, #84	; 0x54
    207e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2082:	f8df 8350 	ldr.w	r8, [pc, #848]	; 23d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x39c>
    2086:	4dd4      	ldr	r5, [pc, #848]	; (23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a0>)
    2088:	f04f 0900 	mov.w	r9, #0
    208c:	f8cd 0030 	str.w	r0, [sp, #48]	; 0x30
    2090:	f1b8 0f00 	cmp.w	r8, #0
    2094:	d004      	beq.n	20a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    2096:	2100      	movs	r1, #0
    2098:	f240 6044 	movw	r0, #1604	; 0x644
    209c:	f3af 8000 	nop.w
    20a0:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    20a4:	f885 902f 	strb.w	r9, [r5, #47]	; 0x2f
    20a8:	f04f 0a00 	mov.w	sl, #0
    20ac:	f1b8 0f00 	cmp.w	r8, #0
    20b0:	d004      	beq.n	20bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    20b2:	2100      	movs	r1, #0
    20b4:	f240 6049 	movw	r0, #1609	; 0x649
    20b8:	f3af 8000 	nop.w
    20bc:	f1bb 0f00 	cmp.w	fp, #0
    20c0:	d121      	bne.n	2106 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    20c2:	463c      	mov	r4, r7
    20c4:	2001      	movs	r0, #1
    20c6:	ea20 0704 	bic.w	r7, r0, r4
    20ca:	48c4      	ldr	r0, [pc, #784]	; (23dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a4>)
    20cc:	2240      	movs	r2, #64	; 0x40
    20ce:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    20d2:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    20d6:	f001 fe4f 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    20da:	f1b8 0f00 	cmp.w	r8, #0
    20de:	d004      	beq.n	20ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    20e0:	2100      	movs	r1, #0
    20e2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    20e6:	f3af 8000 	nop.w
    20ea:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    20ee:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    20f2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    20f4:	6241      	str	r1, [r0, #36]	; 0x24
    20f6:	f1b8 0f00 	cmp.w	r8, #0
    20fa:	d004      	beq.n	2106 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    20fc:	2100      	movs	r1, #0
    20fe:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2102:	f3af 8000 	nop.w
    2106:	f1b8 0f00 	cmp.w	r8, #0
    210a:	d004      	beq.n	2116 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    210c:	2100      	movs	r1, #0
    210e:	f240 6051 	movw	r0, #1617	; 0x651
    2112:	f3af 8000 	nop.w
    2116:	f000 fe39 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    211a:	4604      	mov	r4, r0
    211c:	a802      	add	r0, sp, #8
    211e:	9006      	str	r0, [sp, #24]
    2120:	7830      	ldrb	r0, [r6, #0]
    2122:	2800      	cmp	r0, #0
    2124:	7af0      	ldrb	r0, [r6, #11]
    2126:	f88d 0015 	strb.w	r0, [sp, #21]
    212a:	7ab1      	ldrb	r1, [r6, #10]
    212c:	f88d 1014 	strb.w	r1, [sp, #20]
    2130:	8931      	ldrh	r1, [r6, #8]
    2132:	f8ad 1012 	strh.w	r1, [sp, #18]
    2136:	9000      	str	r0, [sp, #0]
    2138:	6873      	ldr	r3, [r6, #4]
    213a:	d017      	beq.n	216c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x134>
    213c:	2200      	movs	r2, #0
    213e:	9806      	ldr	r0, [sp, #24]
    2140:	f7fe fbf8 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2144:	9401      	str	r4, [sp, #4]
    2146:	6828      	ldr	r0, [r5, #0]
    2148:	aa10      	add	r2, sp, #64	; 0x40
    214a:	a90f      	add	r1, sp, #60	; 0x3c
    214c:	78c0      	ldrb	r0, [r0, #3]
    214e:	9000      	str	r0, [sp, #0]
    2150:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2154:	f001 f978 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2158:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    215c:	2820      	cmp	r0, #32
    215e:	d00a      	beq.n	2176 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13e>
    2160:	6969      	ldr	r1, [r5, #20]
    2162:	9800      	ldr	r0, [sp, #0]
    2164:	4408      	add	r0, r1
    2166:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    216a:	e01f      	b.n	21ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    216c:	68f2      	ldr	r2, [r6, #12]
    216e:	9806      	ldr	r0, [sp, #24]
    2170:	f7fe fbe0 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    2174:	e048      	b.n	2208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    2176:	e9dd 1000 	ldrd	r1, r0, [sp]
    217a:	4408      	add	r0, r1
    217c:	1d00      	adds	r0, r0, #4
    217e:	9007      	str	r0, [sp, #28]
    2180:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2184:	b128      	cbz	r0, 2192 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    2186:	f001 fc41 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    218a:	b910      	cbnz	r0, 2192 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    218c:	9807      	ldr	r0, [sp, #28]
    218e:	3032      	adds	r0, #50	; 0x32
    2190:	9007      	str	r0, [sp, #28]
    2192:	4893      	ldr	r0, [pc, #588]	; (23e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    2194:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2196:	7840      	ldrb	r0, [r0, #1]
    2198:	4288      	cmp	r0, r1
    219a:	bf98      	it	ls
    219c:	9807      	ldrls	r0, [sp, #28]
    219e:	d903      	bls.n	21a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    21a0:	1a41      	subs	r1, r0, r1
    21a2:	9807      	ldr	r0, [sp, #28]
    21a4:	4408      	add	r0, r1
    21a6:	9007      	str	r0, [sp, #28]
    21a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    21b0:	1a89      	subs	r1, r1, r2
    21b2:	9002      	str	r0, [sp, #8]
    21b4:	4408      	add	r0, r1
    21b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ba:	9003      	str	r0, [sp, #12]
    21bc:	4639      	mov	r1, r7
    21be:	9806      	ldr	r0, [sp, #24]
    21c0:	f7fe fc5e 	bl	a80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x164>
    21c4:	9409      	str	r4, [sp, #36]	; 0x24
    21c6:	7af0      	ldrb	r0, [r6, #11]
    21c8:	9000      	str	r0, [sp, #0]
    21ca:	8931      	ldrh	r1, [r6, #8]
    21cc:	a810      	add	r0, sp, #64	; 0x40
    21ce:	6873      	ldr	r3, [r6, #4]
    21d0:	68f2      	ldr	r2, [r6, #12]
    21d2:	f7fe fbaf 	bl	934 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    21d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21d8:	9802      	ldr	r0, [sp, #8]
    21da:	9a03      	ldr	r2, [sp, #12]
    21dc:	1ac0      	subs	r0, r0, r3
    21de:	1ad2      	subs	r2, r2, r3
    21e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21e4:	9911      	ldr	r1, [sp, #68]	; 0x44
    21e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    21ee:	d201      	bcs.n	21f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1bc>
    21f0:	4291      	cmp	r1, r2
    21f2:	d209      	bcs.n	2208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    21f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    21f8:	1a89      	subs	r1, r1, r2
    21fa:	1860      	adds	r0, r4, r1
    21fc:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    2200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2204:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2208:	f1b8 0f00 	cmp.w	r8, #0
    220c:	d004      	beq.n	2218 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    220e:	2100      	movs	r1, #0
    2210:	f240 6057 	movw	r0, #1623	; 0x657
    2214:	f3af 8000 	nop.w
    2218:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    221c:	2820      	cmp	r0, #32
    221e:	d014      	beq.n	224a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    2220:	6968      	ldr	r0, [r5, #20]
    2222:	9902      	ldr	r1, [sp, #8]
    2224:	1a09      	subs	r1, r1, r0
    2226:	0209      	lsls	r1, r1, #8
    2228:	17ca      	asrs	r2, r1, #31
    222a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    222e:	1209      	asrs	r1, r1, #8
    2230:	d50b      	bpl.n	224a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    2232:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2236:	1a89      	subs	r1, r1, r2
    2238:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    223c:	4408      	add	r0, r1
    223e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2242:	e9cd 2002 	strd	r2, r0, [sp, #8]
    2246:	f04f 0a01 	mov.w	sl, #1
    224a:	f1b8 0f00 	cmp.w	r8, #0
    224e:	d009      	beq.n	2264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22c>
    2250:	2100      	movs	r1, #0
    2252:	f240 6061 	movw	r0, #1633	; 0x661
    2256:	f3af 8000 	nop.w
    225a:	2100      	movs	r1, #0
    225c:	f240 6067 	movw	r0, #1639	; 0x667
    2260:	f3af 8000 	nop.w
    2264:	9902      	ldr	r1, [sp, #8]
    2266:	9a03      	ldr	r2, [sp, #12]
    2268:	1b09      	subs	r1, r1, r4
    226a:	1b12      	subs	r2, r2, r4
    226c:	485d      	ldr	r0, [pc, #372]	; (23e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3ac>)
    226e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2272:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2276:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    227a:	d205      	bcs.n	2288 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    227c:	4290      	cmp	r0, r2
    227e:	d303      	bcc.n	2288 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    2280:	f1bb 0f00 	cmp.w	fp, #0
    2284:	d10a      	bne.n	229c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x264>
    2286:	e003      	b.n	2290 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>
    2288:	f1bb 0f00 	cmp.w	fp, #0
    228c:	d037      	beq.n	22fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c6>
    228e:	e095      	b.n	23bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    2290:	4639      	mov	r1, r7
    2292:	a802      	add	r0, sp, #8
    2294:	f7fe fbf4 	bl	a80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x164>
    2298:	ea4a 0a00 	orr.w	sl, sl, r0
    229c:	f1ba 0f00 	cmp.w	sl, #0
    22a0:	d021      	beq.n	22e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ae>
    22a2:	9802      	ldr	r0, [sp, #8]
    22a4:	f00c fce6 	bl	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    22a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    22ac:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    22b0:	4c4d      	ldr	r4, [pc, #308]	; (23e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    22b2:	4411      	add	r1, r2
    22b4:	1cc9      	adds	r1, r1, #3
    22b6:	1842      	adds	r2, r0, r1
    22b8:	f04f 0c00 	mov.w	ip, #0
    22bc:	1a20      	subs	r0, r4, r0
    22be:	eb7c 0009 	sbcs.w	r0, ip, r9
    22c2:	d344      	bcc.n	234e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x316>
    22c4:	4849      	ldr	r0, [pc, #292]	; (23ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    22c6:	4281      	cmp	r1, r0
    22c8:	dc5d      	bgt.n	2386 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34e>
    22ca:	4240      	negs	r0, r0
    22cc:	4281      	cmp	r1, r0
    22ce:	db62      	blt.n	2396 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35e>
    22d0:	1c60      	adds	r0, r4, #1
    22d2:	4282      	cmp	r2, r0
    22d4:	bfa8      	it	ge
    22d6:	4846      	ldrge	r0, [pc, #280]	; (23f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b8>)
    22d8:	da03      	bge.n	22e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    22da:	2a00      	cmp	r2, #0
    22dc:	bfb8      	it	lt
    22de:	4845      	ldrlt	r0, [pc, #276]	; (23f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    22e0:	da00      	bge.n	22e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>
    22e2:	1812      	adds	r2, r2, r0
    22e4:	60f2      	str	r2, [r6, #12]
    22e6:	f04f 0001 	mov.w	r0, #1
    22ea:	900c      	str	r0, [sp, #48]	; 0x30
    22ec:	f1b8 0f00 	cmp.w	r8, #0
    22f0:	d064      	beq.n	23bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    22f2:	2100      	movs	r1, #0
    22f4:	f240 607a 	movw	r0, #1658	; 0x67a
    22f8:	f3af 8000 	nop.w
    22fc:	e05e      	b.n	23bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x384>
    22fe:	6828      	ldr	r0, [r5, #0]
    2300:	4627      	mov	r7, r4
    2302:	aa08      	add	r2, sp, #32
    2304:	78c4      	ldrb	r4, [r0, #3]
    2306:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    230a:	a907      	add	r1, sp, #28
    230c:	f001 f89c 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2310:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    2314:	2820      	cmp	r0, #32
    2316:	d01f      	beq.n	2358 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x320>
    2318:	6968      	ldr	r0, [r5, #20]
    231a:	4420      	add	r0, r4
    231c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2320:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2324:	1a89      	subs	r1, r1, r2
    2326:	4401      	add	r1, r0
    2328:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    232c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2330:	f00c fca0 	bl	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    2334:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    2338:	f99d 1010 	ldrsb.w	r1, [sp, #16]
    233c:	4c2a      	ldr	r4, [pc, #168]	; (23e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b0>)
    233e:	4411      	add	r1, r2
    2340:	1cc9      	adds	r1, r1, #3
    2342:	1842      	adds	r2, r0, r1
    2344:	2300      	movs	r3, #0
    2346:	1a20      	subs	r0, r4, r0
    2348:	eb73 0009 	sbcs.w	r0, r3, r9
    234c:	d218      	bcs.n	2380 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>
    234e:	f240 51f5 	movw	r1, #1525	; 0x5f5
    2352:	2070      	movs	r0, #112	; 0x70
    2354:	f001 fbbe 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2358:	1938      	adds	r0, r7, r4
    235a:	1d04      	adds	r4, r0, #4
    235c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2360:	b120      	cbz	r0, 236c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>
    2362:	f001 fb53 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2366:	2800      	cmp	r0, #0
    2368:	bf08      	it	eq
    236a:	3432      	addeq	r4, #50	; 0x32
    236c:	481c      	ldr	r0, [pc, #112]	; (23e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a8>)
    236e:	9907      	ldr	r1, [sp, #28]
    2370:	7840      	ldrb	r0, [r0, #1]
    2372:	4288      	cmp	r0, r1
    2374:	bf84      	itt	hi
    2376:	1a40      	subhi	r0, r0, r1
    2378:	4404      	addhi	r4, r0
    237a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    237e:	e7cf      	b.n	2320 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2e8>
    2380:	481a      	ldr	r0, [pc, #104]	; (23ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b4>)
    2382:	4281      	cmp	r1, r0
    2384:	dd04      	ble.n	2390 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x358>
    2386:	f240 51f6 	movw	r1, #1526	; 0x5f6
    238a:	2070      	movs	r0, #112	; 0x70
    238c:	f001 fba2 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2390:	4819      	ldr	r0, [pc, #100]	; (23f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c0>)
    2392:	4281      	cmp	r1, r0
    2394:	da04      	bge.n	23a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>
    2396:	f240 51f7 	movw	r1, #1527	; 0x5f7
    239a:	2070      	movs	r0, #112	; 0x70
    239c:	f001 fb9a 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23a0:	4814      	ldr	r0, [pc, #80]	; (23f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    23a2:	4282      	cmp	r2, r0
    23a4:	bfa8      	it	ge
    23a6:	4812      	ldrge	r0, [pc, #72]	; (23f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3b8>)
    23a8:	da03      	bge.n	23b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37a>
    23aa:	2a00      	cmp	r2, #0
    23ac:	bfb8      	it	lt
    23ae:	4811      	ldrlt	r0, [pc, #68]	; (23f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3bc>)
    23b0:	da00      	bge.n	23b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37c>
    23b2:	1812      	adds	r2, r2, r0
    23b4:	f04f 0001 	mov.w	r0, #1
    23b8:	60f2      	str	r2, [r6, #12]
    23ba:	900c      	str	r0, [sp, #48]	; 0x30
    23bc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    23c0:	2800      	cmp	r0, #0
    23c2:	f47f ae65 	bne.w	2090 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    23c6:	980c      	ldr	r0, [sp, #48]	; 0x30
    23c8:	b015      	add	sp, #84	; 0x54
    23ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23ce:	0000      	.short	0x0000
    23d0:	e000ed04 	.word	0xe000ed04
    23d4:	00000000 	.word	0x00000000
    23d8:	20000f5c 	.word	0x20000f5c
    23dc:	20000edc 	.word	0x20000edc
    23e0:	20000012 	.word	0x20000012
    23e4:	003fffff 	.word	0x003fffff
    23e8:	1e847fff 	.word	0x1e847fff
    23ec:	07a12000 	.word	0x07a12000
    23f0:	e17b8000 	.word	0xe17b8000
    23f4:	1e848000 	.word	0x1e848000
    23f8:	f85ee000 	.word	0xf85ee000

000023fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    23fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2400:	4d80      	ldr	r5, [pc, #512]	; (2604 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    2402:	b08c      	sub	sp, #48	; 0x30
    2404:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    2408:	2000      	movs	r0, #0
    240a:	9009      	str	r0, [sp, #36]	; 0x24
    240c:	2001      	movs	r0, #1
    240e:	4c7e      	ldr	r4, [pc, #504]	; (2608 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    2410:	f04f 0800 	mov.w	r8, #0
    2414:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2418:	4683      	mov	fp, r0
    241a:	9008      	str	r0, [sp, #32]
    241c:	b124      	cbz	r4, 2428 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    241e:	2100      	movs	r1, #0
    2420:	f240 70de 	movw	r0, #2014	; 0x7de
    2424:	f3af 8000 	nop.w
    2428:	9808      	ldr	r0, [sp, #32]
    242a:	b390      	cbz	r0, 2492 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    242c:	f885 802f 	strb.w	r8, [r5, #47]	; 0x2f
    2430:	b124      	cbz	r4, 243c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    2432:	2100      	movs	r1, #0
    2434:	f240 70e3 	movw	r0, #2019	; 0x7e3
    2438:	f3af 8000 	nop.w
    243c:	f895 9032 	ldrb.w	r9, [r5, #50]	; 0x32
    2440:	2240      	movs	r2, #64	; 0x40
    2442:	ea2b 0609 	bic.w	r6, fp, r9
    2446:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    244a:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    244e:	4682      	mov	sl, r0
    2450:	f001 fc92 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2454:	b124      	cbz	r4, 2460 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    2456:	2100      	movs	r1, #0
    2458:	f240 50b9 	movw	r0, #1465	; 0x5b9
    245c:	f3af 8000 	nop.w
    2460:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2464:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    2468:	9000      	str	r0, [sp, #0]
    246a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    246c:	6241      	str	r1, [r0, #36]	; 0x24
    246e:	b124      	cbz	r4, 247a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    2470:	2100      	movs	r1, #0
    2472:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2476:	f3af 8000 	nop.w
    247a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    247e:	b180      	cbz	r0, 24a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    2480:	2c00      	cmp	r4, #0
    2482:	bf1c      	itt	ne
    2484:	2100      	movne	r1, #0
    2486:	f240 70e9 	movwne	r0, #2025	; 0x7e9
    248a:	d0c7      	beq.n	241c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    248c:	f3af 8000 	nop.w
    2490:	e7c4      	b.n	241c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2492:	e7ff      	b.n	2494 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    2494:	485d      	ldr	r0, [pc, #372]	; (260c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    2496:	2800      	cmp	r0, #0
    2498:	bf18      	it	ne
    249a:	f3af 8000 	nopne.w
    249e:	b662      	cpsie	i
    24a0:	e7c4      	b.n	242c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    24a2:	b124      	cbz	r4, 24ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    24a4:	2100      	movs	r1, #0
    24a6:	f240 70ed 	movw	r0, #2029	; 0x7ed
    24aa:	f3af 8000 	nop.w
    24ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    24b0:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    24b4:	2803      	cmp	r0, #3
    24b6:	d178      	bne.n	25aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    24b8:	f8dd 9000 	ldr.w	r9, [sp]
    24bc:	f8cd 9018 	str.w	r9, [sp, #24]
    24c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    24c2:	f899 0024 	ldrb.w	r0, [r9, #36]	; 0x24
    24c6:	4288      	cmp	r0, r1
    24c8:	bf14      	ite	ne
    24ca:	f04f 0a00 	movne.w	sl, #0
    24ce:	f04f 0a01 	moveq.w	sl, #1
    24d2:	f109 0c24 	add.w	ip, r9, #36	; 0x24
    24d6:	4686      	mov	lr, r0
    24d8:	2220      	movs	r2, #32
    24da:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    24de:	e003      	b.n	24e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    24e0:	4602      	mov	r2, r0
    24e2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    24e6:	7840      	ldrb	r0, [r0, #1]
    24e8:	4288      	cmp	r0, r1
    24ea:	d002      	beq.n	24f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    24ec:	2820      	cmp	r0, #32
    24ee:	d00a      	beq.n	2506 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    24f0:	e7f6      	b.n	24e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    24f2:	2820      	cmp	r0, #32
    24f4:	d007      	beq.n	2506 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    24f6:	4586      	cmp	lr, r0
    24f8:	d107      	bne.n	250a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    24fa:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    24fe:	7840      	ldrb	r0, [r0, #1]
    2500:	f88c 0000 	strb.w	r0, [ip]
    2504:	e007      	b.n	2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2506:	4640      	mov	r0, r8
    2508:	e00c      	b.n	2524 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    250a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    250e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2512:	7840      	ldrb	r0, [r0, #1]
    2514:	7048      	strb	r0, [r1, #1]
    2516:	b124      	cbz	r4, 2522 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2518:	2100      	movs	r1, #0
    251a:	f240 503e 	movw	r0, #1342	; 0x53e
    251e:	f3af 8000 	nop.w
    2522:	4658      	mov	r0, fp
    2524:	ea10 0f0a 	tst.w	r0, sl
    2528:	bf18      	it	ne
    252a:	f889 b027 	strbne.w	fp, [r9, #39]	; 0x27
    252e:	b3e0      	cbz	r0, 25aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2530:	b124      	cbz	r4, 253c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2532:	2100      	movs	r1, #0
    2534:	f240 70f2 	movw	r0, #2034	; 0x7f2
    2538:	f3af 8000 	nop.w
    253c:	4632      	mov	r2, r6
    253e:	2001      	movs	r0, #1
    2540:	990c      	ldr	r1, [sp, #48]	; 0x30
    2542:	f7fe fff3 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    2546:	9806      	ldr	r0, [sp, #24]
    2548:	f890 9027 	ldrb.w	r9, [r0, #39]	; 0x27
    254c:	b124      	cbz	r4, 2558 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    254e:	2100      	movs	r1, #0
    2550:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2554:	f3af 8000 	nop.w
    2558:	482d      	ldr	r0, [pc, #180]	; (2610 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    255a:	2800      	cmp	r0, #0
    255c:	bf18      	it	ne
    255e:	f3af 8000 	nopne.w
    2562:	f3ef 8010 	mrs	r0, PRIMASK
    2566:	b672      	cpsid	i
    2568:	9008      	str	r0, [sp, #32]
    256a:	b124      	cbz	r4, 2576 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    256c:	2100      	movs	r1, #0
    256e:	f640 0002 	movw	r0, #2050	; 0x802
    2572:	f3af 8000 	nop.w
    2576:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    257a:	b138      	cbz	r0, 258c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    257c:	2c00      	cmp	r4, #0
    257e:	bf1c      	itt	ne
    2580:	2100      	movne	r1, #0
    2582:	f640 0006 	movwne	r0, #2054	; 0x806
    2586:	f43f af49 	beq.w	241c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    258a:	e77f      	b.n	248c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    258c:	f1b9 0f00 	cmp.w	r9, #0
    2590:	d008      	beq.n	25a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    2592:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    2596:	2820      	cmp	r0, #32
    2598:	d104      	bne.n	25a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    259a:	4631      	mov	r1, r6
    259c:	2002      	movs	r0, #2
    259e:	f7fe fff5 	bl	158c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x204>
    25a2:	b1f8      	cbz	r0, 25e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    25a4:	b134      	cbz	r4, 25b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    25a6:	2100      	movs	r1, #0
    25a8:	e000      	b.n	25ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    25aa:	e009      	b.n	25c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    25ac:	f640 001a 	movw	r0, #2074	; 0x81a
    25b0:	f3af 8000 	nop.w
    25b4:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
    25b8:	f885 b02f 	strb.w	fp, [r5, #47]	; 0x2f
    25bc:	2001      	movs	r0, #1
    25be:	9009      	str	r0, [sp, #36]	; 0x24
    25c0:	b124      	cbz	r4, 25cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    25c2:	2100      	movs	r1, #0
    25c4:	f640 0023 	movw	r0, #2083	; 0x823
    25c8:	f3af 8000 	nop.w
    25cc:	9808      	ldr	r0, [sp, #32]
    25ce:	b188      	cbz	r0, 25f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    25d0:	b124      	cbz	r4, 25dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    25d2:	2100      	movs	r1, #0
    25d4:	f640 0027 	movw	r0, #2087	; 0x827
    25d8:	f3af 8000 	nop.w
    25dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    25de:	b00d      	add	sp, #52	; 0x34
    25e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25e4:	2c00      	cmp	r4, #0
    25e6:	d0f1      	beq.n	25cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    25e8:	2100      	movs	r1, #0
    25ea:	f640 0015 	movw	r0, #2069	; 0x815
    25ee:	f3af 8000 	nop.w
    25f2:	e7e6      	b.n	25c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    25f4:	4805      	ldr	r0, [pc, #20]	; (260c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    25f6:	2800      	cmp	r0, #0
    25f8:	bf18      	it	ne
    25fa:	f3af 8000 	nopne.w
    25fe:	b662      	cpsie	i
    2600:	e7e6      	b.n	25d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2602:	0000      	.short	0x0000
    2604:	20000f5c 	.word	0x20000f5c
	...

00002614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2614:	b510      	push	{r4, lr}
    2616:	2820      	cmp	r0, #32
    2618:	d211      	bcs.n	263e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    261a:	490e      	ldr	r1, [pc, #56]	; (2654 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    261c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2620:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2624:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2628:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    262c:	b13b      	cbz	r3, 263e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    262e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2632:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2636:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    263a:	2a01      	cmp	r2, #1
    263c:	d001      	beq.n	2642 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    263e:	2000      	movs	r0, #0
    2640:	bd10      	pop	{r4, pc}
    2642:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    2646:	4601      	mov	r1, r0
    2648:	2000      	movs	r0, #0
    264a:	f7fe ff6f 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    264e:	2001      	movs	r0, #1
    2650:	bd10      	pop	{r4, pc}
    2652:	0000      	.short	0x0000
    2654:	20000f5c 	.word	0x20000f5c

00002658 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2658:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    265c:	4e7e      	ldr	r6, [pc, #504]	; (2858 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    265e:	4680      	mov	r8, r0
    2660:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    2664:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2668:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    266c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2670:	2800      	cmp	r0, #0
    2672:	d065      	beq.n	2740 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2674:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
    2678:	4d78      	ldr	r5, [pc, #480]	; (285c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    267a:	b125      	cbz	r5, 2686 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    267c:	2100      	movs	r1, #0
    267e:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2682:	f3af 8000 	nop.w
    2686:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    268a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    268e:	2801      	cmp	r0, #1
    2690:	d018      	beq.n	26c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2692:	b2c0      	uxtb	r0, r0
    2694:	2804      	cmp	r0, #4
    2696:	bf1c      	itt	ne
    2698:	2805      	cmpne	r0, #5
    269a:	2806      	cmpne	r0, #6
    269c:	d055      	beq.n	274a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    269e:	b12d      	cbz	r5, 26ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    26a0:	f04f 0100 	mov.w	r1, #0
    26a4:	f640 30bf 	movw	r0, #3007	; 0xbbf
    26a8:	f3af 8000 	nop.w
    26ac:	f001 fb34 	bl	3d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    26b0:	b125      	cbz	r5, 26bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    26b2:	2100      	movs	r1, #0
    26b4:	f640 30c3 	movw	r0, #3011	; 0xbc3
    26b8:	f3af 8000 	nop.w
    26bc:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    26c0:	2801      	cmp	r0, #1
    26c2:	d1e6      	bne.n	2692 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    26c4:	2401      	movs	r4, #1
    26c6:	b125      	cbz	r5, 26d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    26c8:	2100      	movs	r1, #0
    26ca:	f640 30ca 	movw	r0, #3018	; 0xbca
    26ce:	f3af 8000 	nop.w
    26d2:	b3a4      	cbz	r4, 273e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    26d4:	2000      	movs	r0, #0
    26d6:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    26da:	b125      	cbz	r5, 26e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    26dc:	2100      	movs	r1, #0
    26de:	f640 30cf 	movw	r0, #3023	; 0xbcf
    26e2:	f3af 8000 	nop.w
    26e6:	f896 b032 	ldrb.w	fp, [r6, #50]	; 0x32
    26ea:	2001      	movs	r0, #1
    26ec:	ea20 090b 	bic.w	r9, r0, fp
    26f0:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    26f4:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    26f8:	2240      	movs	r2, #64	; 0x40
    26fa:	f001 fb3d 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26fe:	b125      	cbz	r5, 270a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2700:	2100      	movs	r1, #0
    2702:	f240 50b9 	movw	r0, #1465	; 0x5b9
    2706:	f3af 8000 	nop.w
    270a:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    270e:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2712:	6a40      	ldr	r0, [r0, #36]	; 0x24
    2714:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    2718:	b125      	cbz	r5, 2724 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    271a:	2100      	movs	r1, #0
    271c:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2720:	f3af 8000 	nop.w
    2724:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2728:	b1e0      	cbz	r0, 2764 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    272a:	2d00      	cmp	r5, #0
    272c:	bf1c      	itt	ne
    272e:	2100      	movne	r1, #0
    2730:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    2734:	d0c7      	beq.n	26c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2736:	bf00      	nop
    2738:	f3af 8000 	nop.w
    273c:	e7c3      	b.n	26c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    273e:	e00a      	b.n	2756 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2740:	f640 31aa 	movw	r1, #2986	; 0xbaa
    2744:	2070      	movs	r0, #112	; 0x70
    2746:	f001 f9c5 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    274a:	464a      	mov	r2, r9
    274c:	4641      	mov	r1, r8
    274e:	2001      	movs	r0, #1
    2750:	f7fe feec 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    2754:	e7ac      	b.n	26b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2756:	4842      	ldr	r0, [pc, #264]	; (2860 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2758:	2800      	cmp	r0, #0
    275a:	bf18      	it	ne
    275c:	f3af 8000 	nopne.w
    2760:	b662      	cpsie	i
    2762:	e7b7      	b.n	26d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2764:	b125      	cbz	r5, 2770 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2766:	2100      	movs	r1, #0
    2768:	f640 30d9 	movw	r0, #3033	; 0xbd9
    276c:	f3af 8000 	nop.w
    2770:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
    2774:	f10a 0125 	add.w	r1, sl, #37	; 0x25
    2778:	4640      	mov	r0, r8
    277a:	461c      	mov	r4, r3
    277c:	f04f 0b20 	mov.w	fp, #32
    2780:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2784:	f10a 0a26 	add.w	sl, sl, #38	; 0x26
    2788:	e004      	b.n	2794 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    278a:	46a3      	mov	fp, r4
    278c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2790:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2794:	4284      	cmp	r4, r0
    2796:	d002      	beq.n	279e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2798:	2c20      	cmp	r4, #32
    279a:	d02b      	beq.n	27f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    279c:	e7f5      	b.n	278a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    279e:	2c20      	cmp	r4, #32
    27a0:	d028      	beq.n	27f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    27a2:	42a3      	cmp	r3, r4
    27a4:	d104      	bne.n	27b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    27a6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    27aa:	7840      	ldrb	r0, [r0, #1]
    27ac:	7008      	strb	r0, [r1, #0]
    27ae:	e005      	b.n	27bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    27b0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    27b4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    27b8:	7840      	ldrb	r0, [r0, #1]
    27ba:	7048      	strb	r0, [r1, #1]
    27bc:	f1ba 0f00 	cmp.w	sl, #0
    27c0:	d011      	beq.n	27e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    27c2:	b125      	cbz	r5, 27ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    27c4:	2100      	movs	r1, #0
    27c6:	f240 5036 	movw	r0, #1334	; 0x536
    27ca:	f3af 8000 	nop.w
    27ce:	f89a 0000 	ldrb.w	r0, [sl]
    27d2:	42a0      	cmp	r0, r4
    27d4:	d107      	bne.n	27e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    27d6:	b125      	cbz	r5, 27e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    27d8:	2100      	movs	r1, #0
    27da:	f240 5039 	movw	r0, #1337	; 0x539
    27de:	f3af 8000 	nop.w
    27e2:	f88a b000 	strb.w	fp, [sl]
    27e6:	b15d      	cbz	r5, 2800 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    27e8:	2100      	movs	r1, #0
    27ea:	f240 503e 	movw	r0, #1342	; 0x53e
    27ee:	f3af 8000 	nop.w
    27f2:	e000      	b.n	27f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    27f4:	b125      	cbz	r5, 2800 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    27f6:	2100      	movs	r1, #0
    27f8:	f640 30dd 	movw	r0, #3037	; 0xbdd
    27fc:	f3af 8000 	nop.w
    2800:	4818      	ldr	r0, [pc, #96]	; (2864 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2802:	2800      	cmp	r0, #0
    2804:	bf18      	it	ne
    2806:	f3af 8000 	nopne.w
    280a:	f3ef 8410 	mrs	r4, PRIMASK
    280e:	b672      	cpsid	i
    2810:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2814:	b138      	cbz	r0, 2826 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    2816:	2d00      	cmp	r5, #0
    2818:	bf1c      	itt	ne
    281a:	2100      	movne	r1, #0
    281c:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2820:	f43f af51 	beq.w	26c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2824:	e788      	b.n	2738 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    2826:	f886 9032 	strb.w	r9, [r6, #50]	; 0x32
    282a:	2001      	movs	r0, #1
    282c:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    2830:	b154      	cbz	r4, 2848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2832:	2d00      	cmp	r5, #0
    2834:	bf08      	it	eq
    2836:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    283a:	2100      	movs	r1, #0
    283c:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2840:	f3af 8000 	nop.w
    2844:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2848:	4805      	ldr	r0, [pc, #20]	; (2860 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    284a:	2800      	cmp	r0, #0
    284c:	bf18      	it	ne
    284e:	f3af 8000 	nopne.w
    2852:	b662      	cpsie	i
    2854:	e7ed      	b.n	2832 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    2856:	0000      	.short	0x0000
    2858:	20000f5c 	.word	0x20000f5c
	...

00002868 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2868:	4603      	mov	r3, r0
    286a:	480e      	ldr	r0, [pc, #56]	; (28a4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x3c>)
    286c:	b510      	push	{r4, lr}
    286e:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2872:	2400      	movs	r4, #0
    2874:	3880      	subs	r0, #128	; 0x80
    2876:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    287a:	bf00      	nop
    287c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2880:	b129      	cbz	r1, 288e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x26>
    2882:	1c61      	adds	r1, r4, #1
    2884:	b2cc      	uxtb	r4, r1
    2886:	2c20      	cmp	r4, #32
    2888:	d3f8      	bcc.n	287c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x14>
    288a:	2020      	movs	r0, #32
    288c:	bd10      	pop	{r4, pc}
    288e:	4906      	ldr	r1, [pc, #24]	; (28a8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2890:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    2894:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    2898:	4621      	mov	r1, r4
    289a:	2001      	movs	r0, #1
    289c:	f7fe fe46 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    28a0:	4620      	mov	r0, r4
    28a2:	bd10      	pop	{r4, pc}
    28a4:	20000f5c 	.word	0x20000f5c
    28a8:	20000c5c 	.word	0x20000c5c

000028ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    28ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28b0:	f000 fa6c 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    28b4:	4605      	mov	r5, r0
    28b6:	f000 fd13 	bl	32e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    28ba:	4c44      	ldr	r4, [pc, #272]	; (29cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>)
    28bc:	68e0      	ldr	r0, [r4, #12]
    28be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    28c2:	bf1c      	itt	ne
    28c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    28c8:	60e0      	strne	r0, [r4, #12]
    28ca:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    28ce:	b9c8      	cbnz	r0, 2904 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    28d0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    28d4:	1a08      	subs	r0, r1, r0
    28d6:	0200      	lsls	r0, r0, #8
    28d8:	17c1      	asrs	r1, r0, #31
    28da:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    28de:	1200      	asrs	r0, r0, #8
    28e0:	f44f 710c 	mov.w	r1, #560	; 0x230
    28e4:	f00c f9f3 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    28e8:	6961      	ldr	r1, [r4, #20]
    28ea:	4401      	add	r1, r0
    28ec:	1a68      	subs	r0, r5, r1
    28ee:	0200      	lsls	r0, r0, #8
    28f0:	17c1      	asrs	r1, r0, #31
    28f2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    28f6:	1200      	asrs	r0, r0, #8
    28f8:	d404      	bmi.n	2904 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    28fa:	f240 414d 	movw	r1, #1101	; 0x44d
    28fe:	2070      	movs	r0, #112	; 0x70
    2900:	f001 f8e8 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2904:	7f60      	ldrb	r0, [r4, #29]
    2906:	b148      	cbz	r0, 291c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    2908:	f000 fb4c 	bl	2fa4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    290c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    2910:	b150      	cbz	r0, 2928 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2912:	f240 415e 	movw	r1, #1118	; 0x45e
    2916:	2070      	movs	r0, #112	; 0x70
    2918:	f001 f8dc 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    291c:	1ce8      	adds	r0, r5, #3
    291e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2922:	f000 fa39 	bl	2d98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2926:	e7f1      	b.n	290c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    2928:	2701      	movs	r7, #1
    292a:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    292e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    2932:	2820      	cmp	r0, #32
    2934:	d026      	beq.n	2984 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd8>
    2936:	f894 8033 	ldrb.w	r8, [r4, #51]	; 0x33
    293a:	2020      	movs	r0, #32
    293c:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    2940:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    2944:	2600      	movs	r6, #0
    2946:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    294a:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    294e:	4820      	ldr	r0, [pc, #128]	; (29d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x124>)
    2950:	6066      	str	r6, [r4, #4]
    2952:	7800      	ldrb	r0, [r0, #0]
    2954:	2802      	cmp	r0, #2
    2956:	bf16      	itet	ne
    2958:	2803      	cmpne	r0, #3
    295a:	2001      	moveq	r0, #1
    295c:	2000      	movne	r0, #0
    295e:	f884 0020 	strb.w	r0, [r4, #32]
    2962:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
    2966:	f04f 0001 	mov.w	r0, #1
    296a:	4629      	mov	r1, r5
    296c:	f7fe fe0e 	bl	158c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x204>
    2970:	2800      	cmp	r0, #0
    2972:	d0f8      	beq.n	2966 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xba>
    2974:	4817      	ldr	r0, [pc, #92]	; (29d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>)
    2976:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    297a:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    297e:	2802      	cmp	r0, #2
    2980:	d005      	beq.n	298e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xe2>
    2982:	e009      	b.n	2998 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xec>
    2984:	f240 4161 	movw	r1, #1121	; 0x461
    2988:	2070      	movs	r0, #112	; 0x70
    298a:	f001 f8a3 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    298e:	462a      	mov	r2, r5
    2990:	4641      	mov	r1, r8
    2992:	2006      	movs	r0, #6
    2994:	f7fe fdca 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    2998:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    299c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    29a0:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    29a4:	2820      	cmp	r0, #32
    29a6:	d003      	beq.n	29b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    29a8:	480b      	ldr	r0, [pc, #44]	; (29d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>)
    29aa:	7840      	ldrb	r0, [r0, #1]
    29ac:	f001 f962 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    29b0:	f894 0020 	ldrb.w	r0, [r4, #32]
    29b4:	2800      	cmp	r0, #0
    29b6:	bf08      	it	eq
    29b8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29bc:	f000 fcda 	bl	3374 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    29c0:	f884 6020 	strb.w	r6, [r4, #32]
    29c4:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    29c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29cc:	20000f5c 	.word	0x20000f5c
    29d0:	20000012 	.word	0x20000012
    29d4:	20000edc 	.word	0x20000edc
    29d8:	20000010 	.word	0x20000010

000029dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    29dc:	b530      	push	{r4, r5, lr}
    29de:	4c30      	ldr	r4, [pc, #192]	; (2aa0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    29e0:	b083      	sub	sp, #12
    29e2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    29e6:	2920      	cmp	r1, #32
    29e8:	d008      	beq.n	29fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    29ea:	68e1      	ldr	r1, [r4, #12]
    29ec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    29f0:	d009      	beq.n	2a06 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    29f2:	f640 21d1 	movw	r1, #2769	; 0xad1
    29f6:	2070      	movs	r0, #112	; 0x70
    29f8:	f001 f86c 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29fc:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    2a00:	2070      	movs	r0, #112	; 0x70
    2a02:	f001 f867 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a06:	68a1      	ldr	r1, [r4, #8]
    2a08:	f8df c098 	ldr.w	ip, [pc, #152]	; 2aa4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2a0c:	180b      	adds	r3, r1, r0
    2a0e:	2200      	movs	r2, #0
    2a10:	ebbc 0101 	subs.w	r1, ip, r1
    2a14:	eb72 0102 	sbcs.w	r1, r2, r2
    2a18:	d204      	bcs.n	2a24 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    2a1a:	f240 51f5 	movw	r1, #1525	; 0x5f5
    2a1e:	2070      	movs	r0, #112	; 0x70
    2a20:	f001 f858 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a24:	4920      	ldr	r1, [pc, #128]	; (2aa8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2a26:	4288      	cmp	r0, r1
    2a28:	dd04      	ble.n	2a34 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    2a2a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    2a2e:	2070      	movs	r0, #112	; 0x70
    2a30:	f001 f850 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a34:	491d      	ldr	r1, [pc, #116]	; (2aac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2a36:	4288      	cmp	r0, r1
    2a38:	da04      	bge.n	2a44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    2a3a:	f240 51f7 	movw	r1, #1527	; 0x5f7
    2a3e:	2070      	movs	r0, #112	; 0x70
    2a40:	f001 f848 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a44:	481a      	ldr	r0, [pc, #104]	; (2ab0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2a46:	4283      	cmp	r3, r0
    2a48:	bfa8      	it	ge
    2a4a:	481a      	ldrge	r0, [pc, #104]	; (2ab4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2a4c:	da03      	bge.n	2a56 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2a4e:	2b00      	cmp	r3, #0
    2a50:	bfb8      	it	lt
    2a52:	4817      	ldrlt	r0, [pc, #92]	; (2ab0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2a54:	da00      	bge.n	2a58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2a56:	181b      	adds	r3, r3, r0
    2a58:	4618      	mov	r0, r3
    2a5a:	aa01      	add	r2, sp, #4
    2a5c:	4669      	mov	r1, sp
    2a5e:	f000 fcf3 	bl	3448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    2a62:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    2a66:	280f      	cmp	r0, #15
    2a68:	bfcc      	ite	gt
    2a6a:	2001      	movgt	r0, #1
    2a6c:	2000      	movle	r0, #0
    2a6e:	9900      	ldr	r1, [sp, #0]
    2a70:	4408      	add	r0, r1
    2a72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2a76:	60e1      	str	r1, [r4, #12]
    2a78:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a7c:	2800      	cmp	r0, #0
    2a7e:	bf04      	itt	eq
    2a80:	b003      	addeq	sp, #12
    2a82:	bd30      	popeq	{r4, r5, pc}
    2a84:	2301      	movs	r3, #1
    2a86:	2203      	movs	r2, #3
    2a88:	2005      	movs	r0, #5
    2a8a:	f000 fb05 	bl	3098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2a8e:	2800      	cmp	r0, #0
    2a90:	bf1c      	itt	ne
    2a92:	b003      	addne	sp, #12
    2a94:	bd30      	popne	{r4, r5, pc}
    2a96:	f640 21d9 	movw	r1, #2777	; 0xad9
    2a9a:	2070      	movs	r0, #112	; 0x70
    2a9c:	f001 f81a 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aa0:	20000f5c 	.word	0x20000f5c
    2aa4:	1e847fff 	.word	0x1e847fff
    2aa8:	07a12000 	.word	0x07a12000
    2aac:	f85ee000 	.word	0xf85ee000
    2ab0:	1e848000 	.word	0x1e848000
    2ab4:	e17b8000 	.word	0xe17b8000

00002ab8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2ab8:	b570      	push	{r4, r5, r6, lr}
    2aba:	4c22      	ldr	r4, [pc, #136]	; (2b44 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x8c>)
    2abc:	2020      	movs	r0, #32
    2abe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    2ac2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    2ac6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2aca:	2500      	movs	r5, #0
    2acc:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    2ad0:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    2ad4:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    2ad8:	1e69      	subs	r1, r5, #1
    2ada:	6065      	str	r5, [r4, #4]
    2adc:	60e1      	str	r1, [r4, #12]
    2ade:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    2ae2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    2ae6:	f884 5020 	strb.w	r5, [r4, #32]
    2aea:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    2aee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    2af2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2af6:	4814      	ldr	r0, [pc, #80]	; (2b48 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x90>)
    2af8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
    2afc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    2b00:	7005      	strb	r5, [r0, #0]
    2b02:	7045      	strb	r5, [r0, #1]
    2b04:	8045      	strh	r5, [r0, #2]
    2b06:	f7fe f99b 	bl	e40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x524>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	bf0c      	ite	eq
    2b0e:	480f      	ldreq	r0, [pc, #60]	; (2b4c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x94>)
    2b10:	480f      	ldrne	r0, [pc, #60]	; (2b50 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x98>)
    2b12:	6020      	str	r0, [r4, #0]
    2b14:	480f      	ldr	r0, [pc, #60]	; (2b54 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x9c>)
    2b16:	2110      	movs	r1, #16
    2b18:	1e49      	subs	r1, r1, #1
    2b1a:	7085      	strb	r5, [r0, #2]
    2b1c:	f800 5f04 	strb.w	r5, [r0, #4]!
    2b20:	d1fa      	bne.n	2b18 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x60>
    2b22:	2001      	movs	r0, #1
    2b24:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2b28:	4c0b      	ldr	r4, [pc, #44]	; (2b58 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa0>)
    2b2a:	20ff      	movs	r0, #255	; 0xff
    2b2c:	7020      	strb	r0, [r4, #0]
    2b2e:	480b      	ldr	r0, [pc, #44]	; (2b5c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa4>)
    2b30:	f001 f882 	bl	3c38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2b34:	7060      	strb	r0, [r4, #1]
    2b36:	f001 f8dd 	bl	3cf4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2b3a:	60a0      	str	r0, [r4, #8]
    2b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2b40:	f000 bc46 	b.w	33d0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2b44:	20000f5c 	.word	0x20000f5c
    2b48:	20000012 	.word	0x20000012
    2b4c:	00012450 	.word	0x00012450
    2b50:	00012454 	.word	0x00012454
    2b54:	20000eda 	.word	0x20000eda
    2b58:	20000010 	.word	0x20000010
    2b5c:	000013e5 	.word	0x000013e5

00002b60 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2b60:	b570      	push	{r4, r5, r6, lr}
    2b62:	4605      	mov	r5, r0
    2b64:	2001      	movs	r0, #1
    2b66:	fa00 f405 	lsl.w	r4, r0, r5
    2b6a:	460e      	mov	r6, r1
    2b6c:	2a00      	cmp	r2, #0
    2b6e:	bf08      	it	eq
    2b70:	4808      	ldreq	r0, [pc, #32]	; (2b94 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2b72:	d00c      	beq.n	2b8e <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2b74:	2000      	movs	r0, #0
    2b76:	f000 fc11 	bl	339c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2b7a:	00e9      	lsls	r1, r5, #3
    2b7c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2b80:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2b84:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2b88:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2b8c:	4802      	ldr	r0, [pc, #8]	; (2b98 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2b8e:	6004      	str	r4, [r0, #0]
    2b90:	bd70      	pop	{r4, r5, r6, pc}
    2b92:	0000      	.short	0x0000
    2b94:	4001f508 	.word	0x4001f508
    2b98:	4001f504 	.word	0x4001f504

00002b9c <MPSL_IRQ_RTC0_Handler>:
    2b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba0:	4c24      	ldr	r4, [pc, #144]	; (2c34 <MPSL_IRQ_RTC0_Handler+0x98>)
    2ba2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2ba6:	f04f 0500 	mov.w	r5, #0
    2baa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2bae:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2bb2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2bb6:	bf1c      	itt	ne
    2bb8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2bbc:	2800      	cmpne	r0, #0
    2bbe:	d00b      	beq.n	2bd8 <MPSL_IRQ_RTC0_Handler+0x3c>
    2bc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2bc4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2bc8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2bcc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2bd0:	f04f 0004 	mov.w	r0, #4
    2bd4:	f7fe ff18 	bl	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2bd8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2bdc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2be0:	bf1c      	itt	ne
    2be2:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2be6:	2800      	cmpne	r0, #0
    2be8:	d00b      	beq.n	2c02 <MPSL_IRQ_RTC0_Handler+0x66>
    2bea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2bee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2bf2:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2bf6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2bfa:	f04f 0005 	mov.w	r0, #5
    2bfe:	f7fe ff03 	bl	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c02:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c06:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2c0a:	bf1a      	itte	ne
    2c0c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2c10:	2800      	cmpne	r0, #0
    2c12:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2c1a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2c1e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2c22:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2c2a:	f04f 0006 	mov.w	r0, #6
    2c2e:	f7fe beeb 	b.w	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c32:	0000      	.short	0x0000
    2c34:	4000b000 	.word	0x4000b000

00002c38 <MPSL_IRQ_TIMER0_Handler>:
    2c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c3c:	4d3a      	ldr	r5, [pc, #232]	; (2d28 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2c3e:	7828      	ldrb	r0, [r5, #0]
    2c40:	2804      	cmp	r0, #4
    2c42:	d06c      	beq.n	2d1e <MPSL_IRQ_TIMER0_Handler+0xe6>
    2c44:	1ce8      	adds	r0, r5, #3
    2c46:	2201      	movs	r2, #1
    2c48:	7801      	ldrb	r1, [r0, #0]
    2c4a:	b159      	cbz	r1, 2c64 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2c4c:	2901      	cmp	r1, #1
    2c4e:	bf08      	it	eq
    2c50:	706a      	strbeq	r2, [r5, #1]
    2c52:	d002      	beq.n	2c5a <MPSL_IRQ_TIMER0_Handler+0x22>
    2c54:	7869      	ldrb	r1, [r5, #1]
    2c56:	2900      	cmp	r1, #0
    2c58:	d05c      	beq.n	2d14 <MPSL_IRQ_TIMER0_Handler+0xdc>
    2c5a:	2102      	movs	r1, #2
    2c5c:	7001      	strb	r1, [r0, #0]
    2c5e:	7840      	ldrb	r0, [r0, #1]
    2c60:	f000 fae2 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c64:	4c31      	ldr	r4, [pc, #196]	; (2d2c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2c66:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c6a:	f04f 0800 	mov.w	r8, #0
    2c6e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2c72:	f44f 7680 	mov.w	r6, #256	; 0x100
    2c76:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2c7a:	bf1c      	itt	ne
    2c7c:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2c80:	2800      	cmpne	r0, #0
    2c82:	d008      	beq.n	2c96 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2c84:	f04f 0003 	mov.w	r0, #3
    2c88:	f000 face 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c8c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2c90:	2003      	movs	r0, #3
    2c92:	f7fe feb9 	bl	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2c96:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2c9a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2c9e:	bf1c      	itt	ne
    2ca0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2ca4:	2800      	cmpne	r0, #0
    2ca6:	d008      	beq.n	2cba <MPSL_IRQ_TIMER0_Handler+0x82>
    2ca8:	f04f 0002 	mov.w	r0, #2
    2cac:	f000 fabc 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2cb0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2cb4:	2002      	movs	r0, #2
    2cb6:	f7fe fea7 	bl	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2cba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2cbe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2cc2:	bf1c      	itt	ne
    2cc4:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2cc8:	2800      	cmpne	r0, #0
    2cca:	d008      	beq.n	2cde <MPSL_IRQ_TIMER0_Handler+0xa6>
    2ccc:	f04f 0001 	mov.w	r0, #1
    2cd0:	f000 faaa 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2cd4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2cd8:	2001      	movs	r0, #1
    2cda:	f7fe fe95 	bl	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2cde:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2ce2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2ce6:	bf1a      	itte	ne
    2ce8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2cec:	2800      	cmpne	r0, #0
    2cee:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cf2:	f04f 0000 	mov.w	r0, #0
    2cf6:	f000 fa97 	bl	3228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2cfa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2cfe:	2004      	movs	r0, #4
    2d00:	7028      	strb	r0, [r5, #0]
    2d02:	f8c5 8008 	str.w	r8, [r5, #8]
    2d06:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2d0e:	2000      	movs	r0, #0
    2d10:	f7fe be7a 	b.w	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2d14:	f240 3172 	movw	r1, #882	; 0x372
    2d18:	206c      	movs	r0, #108	; 0x6c
    2d1a:	f000 fedb 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2d22:	2007      	movs	r0, #7
    2d24:	f7fe be70 	b.w	1a08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2d28:	2000001c 	.word	0x2000001c
    2d2c:	40008000 	.word	0x40008000
    2d30:	2201      	movs	r2, #1
    2d32:	0213      	lsls	r3, r2, #8
    2d34:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2d38:	2000      	movs	r0, #0
    2d3a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2d3e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2d42:	f3bf 8f4f 	dsb	sy
    2d46:	f3bf 8f6f 	isb	sy
    2d4a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2d4e:	490c      	ldr	r1, [pc, #48]	; (2d80 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2d50:	604a      	str	r2, [r1, #4]
    2d52:	1e43      	subs	r3, r0, #1
    2d54:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2d58:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2d5a:	6018      	str	r0, [r3, #0]
    2d5c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2d60:	1d1b      	adds	r3, r3, #4
    2d62:	6018      	str	r0, [r3, #0]
    2d64:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2d68:	1d1b      	adds	r3, r3, #4
    2d6a:	6018      	str	r0, [r3, #0]
    2d6c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2d70:	1d1b      	adds	r3, r3, #4
    2d72:	6018      	str	r0, [r3, #0]
    2d74:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2d78:	610a      	str	r2, [r1, #16]
    2d7a:	4903      	ldr	r1, [pc, #12]	; (2d88 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2d7c:	7048      	strb	r0, [r1, #1]
    2d7e:	4770      	bx	lr
    2d80:	40008000 	.word	0x40008000
    2d84:	40008540 	.word	0x40008540
    2d88:	2000001c 	.word	0x2000001c

00002d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2d8c:	4801      	ldr	r0, [pc, #4]	; (2d94 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2d8e:	6800      	ldr	r0, [r0, #0]
    2d90:	4770      	bx	lr
    2d92:	0000      	.short	0x0000
    2d94:	4000b504 	.word	0x4000b504

00002d98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2d98:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2d9c:	4e41      	ldr	r6, [pc, #260]	; (2ea4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2d9e:	4604      	mov	r4, r0
    2da0:	1ef7      	subs	r7, r6, #3
    2da2:	f896 c000 	ldrb.w	ip, [r6]
    2da6:	68f8      	ldr	r0, [r7, #12]
    2da8:	f1bc 0f01 	cmp.w	ip, #1
    2dac:	bf04      	itt	eq
    2dae:	42a0      	cmpeq	r0, r4
    2db0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2db4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2db8:	4a3b      	ldr	r2, [pc, #236]	; (2ea8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2dba:	6011      	str	r1, [r2, #0]
    2dbc:	493b      	ldr	r1, [pc, #236]	; (2eac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2dbe:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2dc2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2dc6:	4a3a      	ldr	r2, [pc, #232]	; (2eb0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2dc8:	f04f 0500 	mov.w	r5, #0
    2dcc:	f1bc 0f00 	cmp.w	ip, #0
    2dd0:	d057      	beq.n	2e82 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2dd2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2dd6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dda:	6015      	str	r5, [r2, #0]
    2ddc:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2de0:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2de4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2de8:	f04f 0801 	mov.w	r8, #1
    2dec:	2a00      	cmp	r2, #0
    2dee:	bf04      	itt	eq
    2df0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2df4:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2dfc:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2e00:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e04:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2e08:	4a2a      	ldr	r2, [pc, #168]	; (2eb4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2e0a:	f8d2 a000 	ldr.w	sl, [r2]
    2e0e:	eba4 0a0a 	sub.w	sl, r4, sl
    2e12:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2e16:	f1bb 0f02 	cmp.w	fp, #2
    2e1a:	d33c      	bcc.n	2e96 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2e1c:	f04f 0a02 	mov.w	sl, #2
    2e20:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2e24:	d237      	bcs.n	2e96 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2e26:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2e2a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2e2e:	f1bc 0f00 	cmp.w	ip, #0
    2e32:	d005      	beq.n	2e40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2e34:	6811      	ldr	r1, [r2, #0]
    2e36:	1a41      	subs	r1, r0, r1
    2e38:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2e3c:	2902      	cmp	r1, #2
    2e3e:	d3f9      	bcc.n	2e34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2e40:	f8c7 8008 	str.w	r8, [r7, #8]
    2e44:	703d      	strb	r5, [r7, #0]
    2e46:	f7ff ff73 	bl	2d30 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2e4a:	481b      	ldr	r0, [pc, #108]	; (2eb8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2e4c:	6005      	str	r5, [r0, #0]
    2e4e:	1d00      	adds	r0, r0, #4
    2e50:	f8c0 a000 	str.w	sl, [r0]
    2e54:	4919      	ldr	r1, [pc, #100]	; (2ebc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2e56:	2004      	movs	r0, #4
    2e58:	6008      	str	r0, [r1, #0]
    2e5a:	4919      	ldr	r1, [pc, #100]	; (2ec0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2e5c:	f8c1 800c 	str.w	r8, [r1, #12]
    2e60:	68ba      	ldr	r2, [r7, #8]
    2e62:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2e66:	0181      	lsls	r1, r0, #6
    2e68:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2e6c:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2e70:	4a14      	ldr	r2, [pc, #80]	; (2ec4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2e72:	0741      	lsls	r1, r0, #29
    2e74:	6011      	str	r1, [r2, #0]
    2e76:	60fc      	str	r4, [r7, #12]
    2e78:	7070      	strb	r0, [r6, #1]
    2e7a:	f886 8000 	strb.w	r8, [r6]
    2e7e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2e82:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e86:	4b10      	ldr	r3, [pc, #64]	; (2ec8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2e88:	601d      	str	r5, [r3, #0]
    2e8a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2e8e:	6015      	str	r5, [r2, #0]
    2e90:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2e94:	e7a4      	b.n	2de0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2e96:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2e9a:	f240 11a5 	movw	r1, #421	; 0x1a5
    2e9e:	206c      	movs	r0, #108	; 0x6c
    2ea0:	f000 fe18 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ea4:	2000001f 	.word	0x2000001f
    2ea8:	4001f508 	.word	0x4001f508
    2eac:	4000b000 	.word	0x4000b000
    2eb0:	4000b544 	.word	0x4000b544
    2eb4:	4000b504 	.word	0x4000b504
    2eb8:	40008504 	.word	0x40008504
    2ebc:	40008510 	.word	0x40008510
    2ec0:	40008000 	.word	0x40008000
    2ec4:	4001f504 	.word	0x4001f504
    2ec8:	4000b540 	.word	0x4000b540

00002ecc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed0:	4c2b      	ldr	r4, [pc, #172]	; (2f80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2ed2:	68e1      	ldr	r1, [r4, #12]
    2ed4:	4281      	cmp	r1, r0
    2ed6:	bf14      	ite	ne
    2ed8:	2201      	movne	r2, #1
    2eda:	2200      	moveq	r2, #0
    2edc:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2f84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2ee0:	f89c 7000 	ldrb.w	r7, [ip]
    2ee4:	2f02      	cmp	r7, #2
    2ee6:	d002      	beq.n	2eee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2ee8:	2a00      	cmp	r2, #0
    2eea:	d038      	beq.n	2f5e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2eec:	e003      	b.n	2ef6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2eee:	2a00      	cmp	r2, #0
    2ef0:	bf08      	it	eq
    2ef2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ef6:	7862      	ldrb	r2, [r4, #1]
    2ef8:	b382      	cbz	r2, 2f5c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2efa:	4b23      	ldr	r3, [pc, #140]	; (2f88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f00:	601a      	str	r2, [r3, #0]
    2f02:	4b22      	ldr	r3, [pc, #136]	; (2f8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2f04:	1395      	asrs	r5, r2, #14
    2f06:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2f0a:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2f0e:	2600      	movs	r6, #0
    2f10:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2f14:	4a1e      	ldr	r2, [pc, #120]	; (2f90 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2f16:	f8d2 8000 	ldr.w	r8, [r2]
    2f1a:	eba0 0808 	sub.w	r8, r0, r8
    2f1e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2f22:	f1b8 0f02 	cmp.w	r8, #2
    2f26:	d324      	bcc.n	2f72 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2f28:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2f2c:	d221      	bcs.n	2f72 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2f2e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2f32:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2f36:	b12f      	cbz	r7, 2f44 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2f38:	6813      	ldr	r3, [r2, #0]
    2f3a:	1acb      	subs	r3, r1, r3
    2f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2f40:	2b02      	cmp	r3, #2
    2f42:	d3f9      	bcc.n	2f38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2f44:	4b13      	ldr	r3, [pc, #76]	; (2f94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2f46:	2102      	movs	r1, #2
    2f48:	074a      	lsls	r2, r1, #29
    2f4a:	601a      	str	r2, [r3, #0]
    2f4c:	60e0      	str	r0, [r4, #12]
    2f4e:	2004      	movs	r0, #4
    2f50:	f88c 0001 	strb.w	r0, [ip, #1]
    2f54:	f88c 1000 	strb.w	r1, [ip]
    2f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f5c:	e004      	b.n	2f68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2f5e:	f240 11b3 	movw	r1, #435	; 0x1b3
    2f62:	206c      	movs	r0, #108	; 0x6c
    2f64:	f000 fdb6 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f68:	f240 11b7 	movw	r1, #439	; 0x1b7
    2f6c:	206c      	movs	r0, #108	; 0x6c
    2f6e:	f000 fdb1 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f72:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2f76:	f240 11c3 	movw	r1, #451	; 0x1c3
    2f7a:	206c      	movs	r0, #108	; 0x6c
    2f7c:	f000 fdaa 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f80:	2000001c 	.word	0x2000001c
    2f84:	2000001f 	.word	0x2000001f
    2f88:	4001f508 	.word	0x4001f508
    2f8c:	4000b000 	.word	0x4000b000
    2f90:	4000b504 	.word	0x4000b504
    2f94:	4001f504 	.word	0x4001f504

00002f98 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2f98:	4801      	ldr	r0, [pc, #4]	; (2fa0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2f9a:	68c0      	ldr	r0, [r0, #12]
    2f9c:	4770      	bx	lr
    2f9e:	0000      	.short	0x0000
    2fa0:	2000001c 	.word	0x2000001c

00002fa4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fa8:	4833      	ldr	r0, [pc, #204]	; (3078 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2faa:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2fae:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2fb2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 307c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2fb6:	4a32      	ldr	r2, [pc, #200]	; (3080 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2fb8:	2100      	movs	r1, #0
    2fba:	f89c 3000 	ldrb.w	r3, [ip]
    2fbe:	b163      	cbz	r3, 2fda <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2fc0:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2fc4:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2fc8:	6011      	str	r1, [r2, #0]
    2fca:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2fce:	bf00      	nop
    2fd0:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2fd4:	2201      	movs	r2, #1
    2fd6:	b980      	cbnz	r0, 2ffa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2fd8:	e009      	b.n	2fee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2fda:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2fde:	4c29      	ldr	r4, [pc, #164]	; (3084 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2fe0:	6021      	str	r1, [r4, #0]
    2fe2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2fe6:	6011      	str	r1, [r2, #0]
    2fe8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2fec:	e7f0      	b.n	2fd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2fee:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2ff2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2ff6:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2ffa:	2b02      	cmp	r3, #2
    2ffc:	d004      	beq.n	3008 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2ffe:	f240 11cf 	movw	r1, #463	; 0x1cf
    3002:	206c      	movs	r0, #108	; 0x6c
    3004:	f000 fd66 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3008:	4e1f      	ldr	r6, [pc, #124]	; (3088 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    300a:	6830      	ldr	r0, [r6, #0]
    300c:	4c1f      	ldr	r4, [pc, #124]	; (308c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    300e:	1cc0      	adds	r0, r0, #3
    3010:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3014:	68e3      	ldr	r3, [r4, #12]
    3016:	4d1e      	ldr	r5, [pc, #120]	; (3090 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3018:	4298      	cmp	r0, r3
    301a:	d00b      	beq.n	3034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    301c:	6837      	ldr	r7, [r6, #0]
    301e:	1bdf      	subs	r7, r3, r7
    3020:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3024:	2f04      	cmp	r7, #4
    3026:	d305      	bcc.n	3034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3028:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    302c:	d202      	bcs.n	3034 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    302e:	f7ff feb3 	bl	2d98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3032:	e01b      	b.n	306c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3034:	6830      	ldr	r0, [r6, #0]
    3036:	1a18      	subs	r0, r3, r0
    3038:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    303c:	2802      	cmp	r0, #2
    303e:	d313      	bcc.n	3068 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3040:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3044:	d210      	bcs.n	3068 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3046:	4b13      	ldr	r3, [pc, #76]	; (3094 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3048:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    304c:	6018      	str	r0, [r3, #0]
    304e:	60a2      	str	r2, [r4, #8]
    3050:	7021      	strb	r1, [r4, #0]
    3052:	606a      	str	r2, [r5, #4]
    3054:	60ea      	str	r2, [r5, #12]
    3056:	0040      	lsls	r0, r0, #1
    3058:	1f19      	subs	r1, r3, #4
    305a:	6008      	str	r0, [r1, #0]
    305c:	2004      	movs	r0, #4
    305e:	f88c 0001 	strb.w	r0, [ip, #1]
    3062:	f88c 2000 	strb.w	r2, [ip]
    3066:	e001      	b.n	306c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3068:	60a2      	str	r2, [r4, #8]
    306a:	7021      	strb	r1, [r4, #0]
    306c:	68a0      	ldr	r0, [r4, #8]
    306e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3076:	0000      	.short	0x0000
    3078:	4000b000 	.word	0x4000b000
    307c:	2000001f 	.word	0x2000001f
    3080:	4000b544 	.word	0x4000b544
    3084:	4000b540 	.word	0x4000b540
    3088:	4000b504 	.word	0x4000b504
    308c:	2000001c 	.word	0x2000001c
    3090:	40008000 	.word	0x40008000
    3094:	4001f508 	.word	0x4001f508

00003098 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    309c:	f8df c174 	ldr.w	ip, [pc, #372]	; 3214 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    30a0:	2701      	movs	r7, #1
    30a2:	f04f 0800 	mov.w	r8, #0
    30a6:	f89c 5000 	ldrb.w	r5, [ip]
    30aa:	f89c c001 	ldrb.w	ip, [ip, #1]
    30ae:	2807      	cmp	r0, #7
    30b0:	d27e      	bcs.n	31b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    30b2:	e8df f000 	tbb	[pc, r0]
    30b6:	0404      	.short	0x0404
    30b8:	6a6a0404 	.word	0x6a6a0404
    30bc:	006a      	.short	0x006a
    30be:	4c56      	ldr	r4, [pc, #344]	; (3218 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    30c0:	68e6      	ldr	r6, [r4, #12]
    30c2:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    30c6:	bf04      	itt	eq
    30c8:	7864      	ldrbeq	r4, [r4, #1]
    30ca:	2c00      	cmpeq	r4, #0
    30cc:	d002      	beq.n	30d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    30ce:	2d02      	cmp	r5, #2
    30d0:	d005      	beq.n	30de <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    30d2:	e03c      	b.n	314e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    30d4:	f240 2102 	movw	r1, #514	; 0x202
    30d8:	206c      	movs	r0, #108	; 0x6c
    30da:	f000 fcfb 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30de:	ea4f 048c 	mov.w	r4, ip, lsl #2
    30e2:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    30e6:	f1ac 0404 	sub.w	r4, ip, #4
    30ea:	0624      	lsls	r4, r4, #24
    30ec:	0da4      	lsrs	r4, r4, #22
    30ee:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    30f2:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    30f6:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    30fa:	2400      	movs	r4, #0
    30fc:	2d01      	cmp	r5, #1
    30fe:	d002      	beq.n	3106 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3100:	2d02      	cmp	r5, #2
    3102:	d011      	beq.n	3128 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3104:	e020      	b.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3106:	f1bc 0f04 	cmp.w	ip, #4
    310a:	d205      	bcs.n	3118 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    310c:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3110:	f1ba 0f00 	cmp.w	sl, #0
    3114:	d118      	bne.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3116:	e004      	b.n	3122 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3118:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    311c:	f1ba 0f00 	cmp.w	sl, #0
    3120:	d112      	bne.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3122:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3126:	e00f      	b.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3128:	f1bc 0f04 	cmp.w	ip, #4
    312c:	d205      	bcs.n	313a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    312e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3132:	f1ba 0f00 	cmp.w	sl, #0
    3136:	d107      	bne.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3138:	e004      	b.n	3144 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    313a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    313e:	f1ba 0f00 	cmp.w	sl, #0
    3142:	d101      	bne.n	3148 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3144:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3148:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    314c:	d1d5      	bne.n	30fa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    314e:	4c33      	ldr	r4, [pc, #204]	; (321c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3150:	f100 0c10 	add.w	ip, r0, #16
    3154:	fa07 fc0c 	lsl.w	ip, r7, ip
    3158:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    315c:	0080      	lsls	r0, r0, #2
    315e:	4420      	add	r0, r4
    3160:	b152      	cbz	r2, 3178 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3162:	6407      	str	r7, [r0, #64]	; 0x40
    3164:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3168:	1b8d      	subs	r5, r1, r6
    316a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    316e:	42aa      	cmp	r2, r5
    3170:	bf98      	it	ls
    3172:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3176:	d243      	bcs.n	3200 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3178:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    317c:	2b01      	cmp	r3, #1
    317e:	bf08      	it	eq
    3180:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3184:	2001      	movs	r0, #1
    3186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    318a:	b135      	cbz	r5, 319a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    318c:	4584      	cmp	ip, r0
    318e:	d104      	bne.n	319a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3190:	f240 2129 	movw	r1, #553	; 0x229
    3194:	206c      	movs	r0, #108	; 0x6c
    3196:	f000 fc9d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    319a:	1f00      	subs	r0, r0, #4
    319c:	b2c0      	uxtb	r0, r0
    319e:	2b01      	cmp	r3, #1
    31a0:	bf0c      	ite	eq
    31a2:	2401      	moveq	r4, #1
    31a4:	2400      	movne	r4, #0
    31a6:	2803      	cmp	r0, #3
    31a8:	d306      	bcc.n	31b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    31aa:	f240 1103 	movw	r1, #259	; 0x103
    31ae:	e000      	b.n	31b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    31b0:	e02b      	b.n	320a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    31b2:	206c      	movs	r0, #108	; 0x6c
    31b4:	f000 fc8e 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b8:	f8df c064 	ldr.w	ip, [pc, #100]	; 3220 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    31bc:	f100 0310 	add.w	r3, r0, #16
    31c0:	fa07 f303 	lsl.w	r3, r7, r3
    31c4:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    31c8:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    31cc:	0080      	lsls	r0, r0, #2
    31ce:	4460      	add	r0, ip
    31d0:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    31d4:	b14a      	cbz	r2, 31ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    31d6:	4d13      	ldr	r5, [pc, #76]	; (3224 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    31d8:	682e      	ldr	r6, [r5, #0]
    31da:	1b8d      	subs	r5, r1, r6
    31dc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    31e0:	42aa      	cmp	r2, r5
    31e2:	bf98      	it	ls
    31e4:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    31e8:	d20a      	bcs.n	3200 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    31ea:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    31ee:	2c00      	cmp	r4, #0
    31f0:	bf18      	it	ne
    31f2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    31f6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    31fa:	2001      	movs	r0, #1
    31fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3200:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3204:	2000      	movs	r0, #0
    3206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    320a:	f240 212e 	movw	r1, #558	; 0x22e
    320e:	206c      	movs	r0, #108	; 0x6c
    3210:	f000 fc60 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3214:	2000001f 	.word	0x2000001f
    3218:	2000001c 	.word	0x2000001c
    321c:	40008000 	.word	0x40008000
    3220:	4000b000 	.word	0x4000b000
    3224:	4000b504 	.word	0x4000b504

00003228 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    322a:	2701      	movs	r7, #1
    322c:	2400      	movs	r4, #0
    322e:	2807      	cmp	r0, #7
    3230:	d243      	bcs.n	32ba <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    3232:	e8df f000 	tbb	[pc, r0]
    3236:	0404      	.short	0x0404
    3238:	16160404 	.word	0x16160404
    323c:	0016      	.short	0x0016
    323e:	4a21      	ldr	r2, [pc, #132]	; (32c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    3240:	f100 0110 	add.w	r1, r0, #16
    3244:	fa07 f101 	lsl.w	r1, r7, r1
    3248:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    324c:	0081      	lsls	r1, r0, #2
    324e:	4411      	add	r1, r2
    3250:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3254:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3258:	491b      	ldr	r1, [pc, #108]	; (32c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    325a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    325e:	9000      	str	r0, [sp, #0]
    3260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3262:	4d1a      	ldr	r5, [pc, #104]	; (32cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    3264:	1f01      	subs	r1, r0, #4
    3266:	b2ce      	uxtb	r6, r1
    3268:	7829      	ldrb	r1, [r5, #0]
    326a:	b179      	cbz	r1, 328c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    326c:	786a      	ldrb	r2, [r5, #1]
    326e:	4282      	cmp	r2, r0
    3270:	d10c      	bne.n	328c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3272:	4a17      	ldr	r2, [pc, #92]	; (32d0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    3274:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3278:	6010      	str	r0, [r2, #0]
    327a:	2901      	cmp	r1, #1
    327c:	bf08      	it	eq
    327e:	f7ff fd57 	bleq	2d30 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3282:	702c      	strb	r4, [r5, #0]
    3284:	4913      	ldr	r1, [pc, #76]	; (32d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    3286:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    328a:	60c8      	str	r0, [r1, #12]
    328c:	f106 0010 	add.w	r0, r6, #16
    3290:	fa07 f100 	lsl.w	r1, r7, r0
    3294:	4810      	ldr	r0, [pc, #64]	; (32d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3296:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    329a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    329e:	00b0      	lsls	r0, r6, #2
    32a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    32a4:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    32a8:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    32ac:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    32b0:	480a      	ldr	r0, [pc, #40]	; (32dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    32b2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    32b6:	9000      	str	r0, [sp, #0]
    32b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32ba:	f240 219b 	movw	r1, #667	; 0x29b
    32be:	206c      	movs	r0, #108	; 0x6c
    32c0:	f000 fc08 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c4:	40008000 	.word	0x40008000
    32c8:	40008140 	.word	0x40008140
    32cc:	2000001f 	.word	0x2000001f
    32d0:	4001f508 	.word	0x4001f508
    32d4:	2000001c 	.word	0x2000001c
    32d8:	4000b000 	.word	0x4000b000
    32dc:	4000b140 	.word	0x4000b140

000032e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    32e0:	491e      	ldr	r1, [pc, #120]	; (335c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    32e2:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    32e6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    32ea:	481d      	ldr	r0, [pc, #116]	; (3360 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    32ec:	4a1d      	ldr	r2, [pc, #116]	; (3364 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    32ee:	f890 c000 	ldrb.w	ip, [r0]
    32f2:	2000      	movs	r0, #0
    32f4:	f1bc 0f00 	cmp.w	ip, #0
    32f8:	d00a      	beq.n	3310 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    32fa:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    32fe:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3302:	6010      	str	r0, [r2, #0]
    3304:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3308:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    330c:	b981      	cbnz	r1, 3330 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    330e:	e009      	b.n	3324 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3310:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3314:	4b14      	ldr	r3, [pc, #80]	; (3368 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3316:	6018      	str	r0, [r3, #0]
    3318:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    331c:	6010      	str	r0, [r2, #0]
    331e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3322:	e7f1      	b.n	3308 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3324:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3328:	f44f 6100 	mov.w	r1, #2048	; 0x800
    332c:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3330:	490e      	ldr	r1, [pc, #56]	; (336c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3336:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    333a:	4a0d      	ldr	r2, [pc, #52]	; (3370 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    333c:	6010      	str	r0, [r2, #0]
    333e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3342:	1d12      	adds	r2, r2, #4
    3344:	6010      	str	r0, [r2, #0]
    3346:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    334a:	1d12      	adds	r2, r2, #4
    334c:	6010      	str	r0, [r2, #0]
    334e:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3352:	1d12      	adds	r2, r2, #4
    3354:	6010      	str	r0, [r2, #0]
    3356:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    335a:	4770      	bx	lr
    335c:	4000b000 	.word	0x4000b000
    3360:	2000001f 	.word	0x2000001f
    3364:	4000b544 	.word	0x4000b544
    3368:	4000b540 	.word	0x4000b540
    336c:	40008000 	.word	0x40008000
    3370:	40008540 	.word	0x40008540

00003374 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3374:	4808      	ldr	r0, [pc, #32]	; (3398 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3376:	f990 0002 	ldrsb.w	r0, [r0, #2]
    337a:	2800      	cmp	r0, #0
    337c:	bfb8      	it	lt
    337e:	4770      	bxlt	lr
    3380:	f000 011f 	and.w	r1, r0, #31
    3384:	2201      	movs	r2, #1
    3386:	fa02 f101 	lsl.w	r1, r2, r1
    338a:	0940      	lsrs	r0, r0, #5
    338c:	0080      	lsls	r0, r0, #2
    338e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3392:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3396:	4770      	bx	lr
    3398:	2000001c 	.word	0x2000001c

0000339c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    339c:	b510      	push	{r4, lr}
    339e:	2807      	cmp	r0, #7
    33a0:	d20d      	bcs.n	33be <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    33a2:	e8df f000 	tbb	[pc, r0]
    33a6:	0404      	.short	0x0404
    33a8:	06060404 	.word	0x06060404
    33ac:	0006      	.short	0x0006
    33ae:	4906      	ldr	r1, [pc, #24]	; (33c8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    33b0:	e002      	b.n	33b8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    33b2:	1f00      	subs	r0, r0, #4
    33b4:	4905      	ldr	r1, [pc, #20]	; (33cc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    33b6:	b2c0      	uxtb	r0, r0
    33b8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    33bc:	bd10      	pop	{r4, pc}
    33be:	f240 2152 	movw	r1, #594	; 0x252
    33c2:	206c      	movs	r0, #108	; 0x6c
    33c4:	f000 fb86 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33c8:	40008140 	.word	0x40008140
    33cc:	4000b140 	.word	0x4000b140

000033d0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	4819      	ldr	r0, [pc, #100]	; (3438 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    33d4:	2400      	movs	r4, #0
    33d6:	2104      	movs	r1, #4
    33d8:	7004      	strb	r4, [r0, #0]
    33da:	1ec0      	subs	r0, r0, #3
    33dc:	7001      	strb	r1, [r0, #0]
    33de:	0589      	lsls	r1, r1, #22
    33e0:	60c1      	str	r1, [r0, #12]
    33e2:	f7ff fca5 	bl	2d30 <MPSL_IRQ_TIMER0_Handler+0xf8>
    33e6:	2501      	movs	r5, #1
    33e8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    33ec:	02eb      	lsls	r3, r5, #11
    33ee:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    33f2:	f3bf 8f4f 	dsb	sy
    33f6:	f3bf 8f6f 	isb	sy
    33fa:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    33fe:	4a0f      	ldr	r2, [pc, #60]	; (343c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3400:	6055      	str	r5, [r2, #4]
    3402:	6095      	str	r5, [r2, #8]
    3404:	480e      	ldr	r0, [pc, #56]	; (3440 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3406:	6801      	ldr	r1, [r0, #0]
    3408:	2900      	cmp	r1, #0
    340a:	d1fc      	bne.n	3406 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    340c:	1e48      	subs	r0, r1, #1
    340e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3412:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3416:	480b      	ldr	r0, [pc, #44]	; (3444 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3418:	6004      	str	r4, [r0, #0]
    341a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    341e:	1d00      	adds	r0, r0, #4
    3420:	6004      	str	r4, [r0, #0]
    3422:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3426:	1d00      	adds	r0, r0, #4
    3428:	6004      	str	r4, [r0, #0]
    342a:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    342e:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3432:	6015      	str	r5, [r2, #0]
    3434:	bd70      	pop	{r4, r5, r6, pc}
    3436:	0000      	.short	0x0000
    3438:	2000001f 	.word	0x2000001f
    343c:	4000b000 	.word	0x4000b000
    3440:	4000b504 	.word	0x4000b504
    3444:	4000b540 	.word	0x4000b540

00003448 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    3448:	0b43      	lsrs	r3, r0, #13
    344a:	f248 6c37 	movw	ip, #34359	; 0x8637
    344e:	fb03 f30c 	mul.w	r3, r3, ip
    3452:	0c1b      	lsrs	r3, r3, #16
    3454:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    3458:	f8c1 c000 	str.w	ip, [r1]
    345c:	f8df c038 	ldr.w	ip, [pc, #56]	; 3498 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    3460:	fb03 030c 	mla	r3, r3, ip, r0
    3464:	480d      	ldr	r0, [pc, #52]	; (349c <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    3466:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    346a:	4358      	muls	r0, r3
    346c:	0d40      	lsrs	r0, r0, #21
    346e:	fb10 fc0c 	smulbb	ip, r0, ip
    3472:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    3476:	f503 7380 	add.w	r3, r3, #256	; 0x100
    347a:	125b      	asrs	r3, r3, #9
    347c:	7013      	strb	r3, [r2, #0]
    347e:	680b      	ldr	r3, [r1, #0]
    3480:	4418      	add	r0, r3
    3482:	6008      	str	r0, [r1, #0]
    3484:	7810      	ldrb	r0, [r2, #0]
    3486:	281f      	cmp	r0, #31
    3488:	bf18      	it	ne
    348a:	4770      	bxne	lr
    348c:	2000      	movs	r0, #0
    348e:	7010      	strb	r0, [r2, #0]
    3490:	6808      	ldr	r0, [r1, #0]
    3492:	1c40      	adds	r0, r0, #1
    3494:	6008      	str	r0, [r1, #0]
    3496:	4770      	bx	lr
    3498:	ffffc2f7 	.word	0xffffc2f7
    349c:	00010c6f 	.word	0x00010c6f

000034a0 <MPSL_IRQ_CLOCK_Handler>:
    34a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    34a8:	058d      	lsls	r5, r1, #22
    34aa:	4628      	mov	r0, r5
    34ac:	f00b fc33 	bl	ed16 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    34b0:	4680      	mov	r8, r0
    34b2:	f44f 7182 	mov.w	r1, #260	; 0x104
    34b6:	4628      	mov	r0, r5
    34b8:	f00b fc2d 	bl	ed16 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    34bc:	2600      	movs	r6, #0
    34be:	4607      	mov	r7, r0
    34c0:	f1b8 0f00 	cmp.w	r8, #0
    34c4:	d00a      	beq.n	34dc <MPSL_IRQ_CLOCK_Handler+0x3c>
    34c6:	2001      	movs	r0, #1
    34c8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    34cc:	4c07      	ldr	r4, [pc, #28]	; (34ec <MPSL_IRQ_CLOCK_Handler+0x4c>)
    34ce:	7920      	ldrb	r0, [r4, #4]
    34d0:	b120      	cbz	r0, 34dc <MPSL_IRQ_CLOCK_Handler+0x3c>
    34d2:	7126      	strb	r6, [r4, #4]
    34d4:	69a0      	ldr	r0, [r4, #24]
    34d6:	b108      	cbz	r0, 34dc <MPSL_IRQ_CLOCK_Handler+0x3c>
    34d8:	4780      	blx	r0
    34da:	61a6      	str	r6, [r4, #24]
    34dc:	b10f      	cbz	r7, 34e2 <MPSL_IRQ_CLOCK_Handler+0x42>
    34de:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    34e2:	4640      	mov	r0, r8
    34e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    34e8:	f000 b848 	b.w	357c <MPSL_IRQ_CLOCK_Handler+0xdc>
    34ec:	2000002c 	.word	0x2000002c
    34f0:	b510      	push	{r4, lr}
    34f2:	f000 f973 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34f6:	f000 fa89 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34fa:	2302      	movs	r3, #2
    34fc:	4908      	ldr	r1, [pc, #32]	; (3520 <MPSL_IRQ_CLOCK_Handler+0x80>)
    34fe:	075a      	lsls	r2, r3, #29
    3500:	b130      	cbz	r0, 3510 <MPSL_IRQ_CLOCK_Handler+0x70>
    3502:	4808      	ldr	r0, [pc, #32]	; (3524 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3504:	6003      	str	r3, [r0, #0]
    3506:	2001      	movs	r0, #1
    3508:	6110      	str	r0, [r2, #16]
    350a:	2003      	movs	r0, #3
    350c:	7248      	strb	r0, [r1, #9]
    350e:	e003      	b.n	3518 <MPSL_IRQ_CLOCK_Handler+0x78>
    3510:	724b      	strb	r3, [r1, #9]
    3512:	2001      	movs	r0, #1
    3514:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    3518:	2000      	movs	r0, #0
    351a:	71c8      	strb	r0, [r1, #7]
    351c:	bd10      	pop	{r4, pc}
    351e:	0000      	.short	0x0000
    3520:	2000002c 	.word	0x2000002c
    3524:	40000c34 	.word	0x40000c34
    3528:	b570      	push	{r4, r5, r6, lr}
    352a:	4c13      	ldr	r4, [pc, #76]	; (3578 <MPSL_IRQ_CLOCK_Handler+0xd8>)
    352c:	79a0      	ldrb	r0, [r4, #6]
    352e:	b1f0      	cbz	r0, 356e <MPSL_IRQ_CLOCK_Handler+0xce>
    3530:	2801      	cmp	r0, #1
    3532:	d003      	beq.n	353c <MPSL_IRQ_CLOCK_Handler+0x9c>
    3534:	79e1      	ldrb	r1, [r4, #7]
    3536:	1e40      	subs	r0, r0, #1
    3538:	4281      	cmp	r1, r0
    353a:	da18      	bge.n	356e <MPSL_IRQ_CLOCK_Handler+0xce>
    353c:	f000 fa66 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3540:	4605      	mov	r5, r0
    3542:	f000 fb37 	bl	3bb4 <mpsl_temperature_get>
    3546:	79a1      	ldrb	r1, [r4, #6]
    3548:	2901      	cmp	r1, #1
    354a:	d902      	bls.n	3552 <MPSL_IRQ_CLOCK_Handler+0xb2>
    354c:	79e1      	ldrb	r1, [r4, #7]
    354e:	1c49      	adds	r1, r1, #1
    3550:	71e1      	strb	r1, [r4, #7]
    3552:	b10d      	cbz	r5, 3558 <MPSL_IRQ_CLOCK_Handler+0xb8>
    3554:	6961      	ldr	r1, [r4, #20]
    3556:	e000      	b.n	355a <MPSL_IRQ_CLOCK_Handler+0xba>
    3558:	6921      	ldr	r1, [r4, #16]
    355a:	1a41      	subs	r1, r0, r1
    355c:	2902      	cmp	r1, #2
    355e:	da02      	bge.n	3566 <MPSL_IRQ_CLOCK_Handler+0xc6>
    3560:	f111 0f02 	cmn.w	r1, #2
    3564:	dc07      	bgt.n	3576 <MPSL_IRQ_CLOCK_Handler+0xd6>
    3566:	b10d      	cbz	r5, 356c <MPSL_IRQ_CLOCK_Handler+0xcc>
    3568:	6160      	str	r0, [r4, #20]
    356a:	e000      	b.n	356e <MPSL_IRQ_CLOCK_Handler+0xce>
    356c:	6120      	str	r0, [r4, #16]
    356e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3572:	f7ff bfbd 	b.w	34f0 <MPSL_IRQ_CLOCK_Handler+0x50>
    3576:	bd70      	pop	{r4, r5, r6, pc}
    3578:	2000002c 	.word	0x2000002c
    357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3580:	4606      	mov	r6, r0
    3582:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3586:	f44f 7186 	mov.w	r1, #268	; 0x10c
    358a:	4628      	mov	r0, r5
    358c:	f00b fbc3 	bl	ed16 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3590:	4681      	mov	r9, r0
    3592:	f44f 7188 	mov.w	r1, #272	; 0x110
    3596:	4628      	mov	r0, r5
    3598:	f00b fbbd 	bl	ed16 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    359c:	4c22      	ldr	r4, [pc, #136]	; (3628 <MPSL_IRQ_CLOCK_Handler+0x188>)
    359e:	4682      	mov	sl, r0
    35a0:	f894 8000 	ldrb.w	r8, [r4]
    35a4:	f104 0008 	add.w	r0, r4, #8
    35a8:	f00b fc28 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    35ac:	b110      	cbz	r0, 35b4 <MPSL_IRQ_CLOCK_Handler+0x114>
    35ae:	f44f 71c4 	mov.w	r1, #392	; 0x188
    35b2:	e015      	b.n	35e0 <MPSL_IRQ_CLOCK_Handler+0x140>
    35b4:	481d      	ldr	r0, [pc, #116]	; (362c <MPSL_IRQ_CLOCK_Handler+0x18c>)
    35b6:	2701      	movs	r7, #1
    35b8:	b13e      	cbz	r6, 35ca <MPSL_IRQ_CLOCK_Handler+0x12a>
    35ba:	7a61      	ldrb	r1, [r4, #9]
    35bc:	2902      	cmp	r1, #2
    35be:	d104      	bne.n	35ca <MPSL_IRQ_CLOCK_Handler+0x12a>
    35c0:	2103      	movs	r1, #3
    35c2:	7261      	strb	r1, [r4, #9]
    35c4:	2102      	movs	r1, #2
    35c6:	6001      	str	r1, [r0, #0]
    35c8:	612f      	str	r7, [r5, #16]
    35ca:	2600      	movs	r6, #0
    35cc:	f1b9 0f00 	cmp.w	r9, #0
    35d0:	d00d      	beq.n	35ee <MPSL_IRQ_CLOCK_Handler+0x14e>
    35d2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    35d6:	7a61      	ldrb	r1, [r4, #9]
    35d8:	2903      	cmp	r1, #3
    35da:	d004      	beq.n	35e6 <MPSL_IRQ_CLOCK_Handler+0x146>
    35dc:	f240 119f 	movw	r1, #415	; 0x19f
    35e0:	206d      	movs	r0, #109	; 0x6d
    35e2:	f000 fa77 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35e6:	6006      	str	r6, [r0, #0]
    35e8:	7267      	strb	r7, [r4, #9]
    35ea:	f000 f8db 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    35ee:	f1ba 0f00 	cmp.w	sl, #0
    35f2:	d007      	beq.n	3604 <MPSL_IRQ_CLOCK_Handler+0x164>
    35f4:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    35f8:	7a60      	ldrb	r0, [r4, #9]
    35fa:	2801      	cmp	r0, #1
    35fc:	d101      	bne.n	3602 <MPSL_IRQ_CLOCK_Handler+0x162>
    35fe:	f7ff ff93 	bl	3528 <MPSL_IRQ_CLOCK_Handler+0x88>
    3602:	616f      	str	r7, [r5, #20]
    3604:	f1b8 0f00 	cmp.w	r8, #0
    3608:	d007      	beq.n	361a <MPSL_IRQ_CLOCK_Handler+0x17a>
    360a:	7026      	strb	r6, [r4, #0]
    360c:	7a60      	ldrb	r0, [r4, #9]
    360e:	2801      	cmp	r0, #1
    3610:	d101      	bne.n	3616 <MPSL_IRQ_CLOCK_Handler+0x176>
    3612:	f7ff ff6d 	bl	34f0 <MPSL_IRQ_CLOCK_Handler+0x50>
    3616:	f000 f8c5 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    361a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    361e:	4802      	ldr	r0, [pc, #8]	; (3628 <MPSL_IRQ_CLOCK_Handler+0x188>)
    3620:	3008      	adds	r0, #8
    3622:	f00b bc02 	b.w	ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3626:	0000      	.short	0x0000
    3628:	2000002c 	.word	0x2000002c
    362c:	40000c34 	.word	0x40000c34
    3630:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3634:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3798 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    3638:	7801      	ldrb	r1, [r0, #0]
    363a:	7843      	ldrb	r3, [r0, #1]
    363c:	7882      	ldrb	r2, [r0, #2]
    363e:	2400      	movs	r4, #0
    3640:	f889 100a 	strb.w	r1, [r9, #10]
    3644:	f889 3005 	strb.w	r3, [r9, #5]
    3648:	f889 2006 	strb.w	r2, [r9, #6]
    364c:	4606      	mov	r6, r0
    364e:	4627      	mov	r7, r4
    3650:	f889 4007 	strb.w	r4, [r9, #7]
    3654:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    3658:	2905      	cmp	r1, #5
    365a:	d225      	bcs.n	36a8 <MPSL_IRQ_CLOCK_Handler+0x208>
    365c:	e8df f001 	tbb	[pc, r1]
    3660:	10050315 	.word	0x10050315
    3664:	0013      	.short	0x0013
    3666:	2401      	movs	r4, #1
    3668:	e00f      	b.n	368a <MPSL_IRQ_CLOCK_Handler+0x1ea>
    366a:	f000 f8b7 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    366e:	4654      	mov	r4, sl
    3670:	2101      	movs	r1, #1
    3672:	4620      	mov	r0, r4
    3674:	f00b fb54 	bl	ed20 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3678:	2800      	cmp	r0, #0
    367a:	d0f9      	beq.n	3670 <MPSL_IRQ_CLOCK_Handler+0x1d0>
    367c:	2402      	movs	r4, #2
    367e:	e004      	b.n	368a <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3680:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    3684:	e001      	b.n	368a <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3686:	f44f 3440 	mov.w	r4, #196608	; 0x30000
    368a:	f00b fb75 	bl	ed78 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    368e:	b180      	cbz	r0, 36b2 <MPSL_IRQ_CLOCK_Handler+0x212>
    3690:	f000 f9d6 	bl	3a40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3694:	f004 0503 	and.w	r5, r4, #3
    3698:	42a8      	cmp	r0, r5
    369a:	d10a      	bne.n	36b2 <MPSL_IRQ_CLOCK_Handler+0x212>
    369c:	4628      	mov	r0, r5
    369e:	f00b fb5b 	bl	ed58 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    36a2:	2800      	cmp	r0, #0
    36a4:	d0fa      	beq.n	369c <MPSL_IRQ_CLOCK_Handler+0x1fc>
    36a6:	e059      	b.n	375c <MPSL_IRQ_CLOCK_Handler+0x2bc>
    36a8:	f240 217a 	movw	r1, #634	; 0x27a
    36ac:	206d      	movs	r0, #109	; 0x6d
    36ae:	f000 fa11 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36b2:	f04f 0801 	mov.w	r8, #1
    36b6:	4655      	mov	r5, sl
    36b8:	f8ca 800c 	str.w	r8, [sl, #12]
    36bc:	f8ca 7104 	str.w	r7, [sl, #260]	; 0x104
    36c0:	f8ca 4518 	str.w	r4, [sl, #1304]	; 0x518
    36c4:	f00b fbbc 	bl	ee40 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    36c8:	b940      	cbnz	r0, 36dc <MPSL_IRQ_CLOCK_Handler+0x23c>
    36ca:	f00b fbc3 	bl	ee54 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    36ce:	b928      	cbnz	r0, 36dc <MPSL_IRQ_CLOCK_Handler+0x23c>
    36d0:	f00b fbca 	bl	ee68 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    36d4:	b910      	cbnz	r0, 36dc <MPSL_IRQ_CLOCK_Handler+0x23c>
    36d6:	f00b fbdb 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    36da:	b138      	cbz	r0, 36ec <MPSL_IRQ_CLOCK_Handler+0x24c>
    36dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    36e0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    36e4:	492d      	ldr	r1, [pc, #180]	; (379c <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    36e6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    36ea:	6008      	str	r0, [r1, #0]
    36ec:	492b      	ldr	r1, [pc, #172]	; (379c <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    36ee:	3110      	adds	r1, #16
    36f0:	f8c1 8000 	str.w	r8, [r1]
    36f4:	2102      	movs	r1, #2
    36f6:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304
    36fa:	f8c5 8008 	str.w	r8, [r5, #8]
    36fe:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 37a0 <MPSL_IRQ_CLOCK_Handler+0x300>
    3702:	f8db 1000 	ldr.w	r1, [fp]
    3706:	43c9      	mvns	r1, r1
    3708:	f341 1800 	sbfx	r8, r1, #4, #1
    370c:	f8db 1000 	ldr.w	r1, [fp]
    3710:	f041 0110 	orr.w	r1, r1, #16
    3714:	f8cb 1000 	str.w	r1, [fp]
    3718:	f108 0801 	add.w	r8, r8, #1
    371c:	e002      	b.n	3724 <MPSL_IRQ_CLOCK_Handler+0x284>
    371e:	bf00      	nop
    3720:	f000 fafa 	bl	3d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3724:	f44f 7182 	mov.w	r1, #260	; 0x104
    3728:	4628      	mov	r0, r5
    372a:	f00b faf4 	bl	ed16 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    372e:	2800      	cmp	r0, #0
    3730:	d0f6      	beq.n	3720 <MPSL_IRQ_CLOCK_Handler+0x280>
    3732:	f004 0403 	and.w	r4, r4, #3
    3736:	4620      	mov	r0, r4
    3738:	f00b fb0e 	bl	ed58 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    373c:	2800      	cmp	r0, #0
    373e:	d0fa      	beq.n	3736 <MPSL_IRQ_CLOCK_Handler+0x296>
    3740:	f1b8 0f00 	cmp.w	r8, #0
    3744:	d105      	bne.n	3752 <MPSL_IRQ_CLOCK_Handler+0x2b2>
    3746:	f8db 1000 	ldr.w	r1, [fp]
    374a:	f021 0110 	bic.w	r1, r1, #16
    374e:	f8cb 1000 	str.w	r1, [fp]
    3752:	2102      	movs	r1, #2
    3754:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    3758:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    375c:	f899 0006 	ldrb.w	r0, [r9, #6]
    3760:	464c      	mov	r4, r9
    3762:	b170      	cbz	r0, 3782 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3764:	7830      	ldrb	r0, [r6, #0]
    3766:	b960      	cbnz	r0, 3782 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3768:	f000 f950 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    376c:	4605      	mov	r5, r0
    376e:	f000 fa21 	bl	3bb4 <mpsl_temperature_get>
    3772:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3776:	b115      	cbz	r5, 377e <MPSL_IRQ_CLOCK_Handler+0x2de>
    3778:	e9c4 2004 	strd	r2, r0, [r4, #16]
    377c:	e001      	b.n	3782 <MPSL_IRQ_CLOCK_Handler+0x2e2>
    377e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3782:	2101      	movs	r1, #1
    3784:	4650      	mov	r0, sl
    3786:	f00b facb 	bl	ed20 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    378a:	b108      	cbz	r0, 3790 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    378c:	f000 f938 	bl	3a00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3790:	7267      	strb	r7, [r4, #9]
    3792:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3796:	0000      	.short	0x0000
    3798:	2000002c 	.word	0x2000002c
    379c:	4000053c 	.word	0x4000053c
    37a0:	e000ed10 	.word	0xe000ed10

000037a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    37a4:	b510      	push	{r4, lr}
    37a6:	f3ef 8410 	mrs	r4, PRIMASK
    37aa:	b672      	cpsid	i
    37ac:	480a      	ldr	r0, [pc, #40]	; (37d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    37ae:	7841      	ldrb	r1, [r0, #1]
    37b0:	b129      	cbz	r1, 37be <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    37b2:	7841      	ldrb	r1, [r0, #1]
    37b4:	1e49      	subs	r1, r1, #1
    37b6:	7041      	strb	r1, [r0, #1]
    37b8:	7841      	ldrb	r1, [r0, #1]
    37ba:	b129      	cbz	r1, 37c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    37bc:	e008      	b.n	37d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    37be:	f240 1101 	movw	r1, #257	; 0x101
    37c2:	206d      	movs	r0, #109	; 0x6d
    37c4:	f000 f986 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37c8:	7880      	ldrb	r0, [r0, #2]
    37ca:	b908      	cbnz	r0, 37d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    37cc:	f000 f92c 	bl	3a28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    37d0:	2c00      	cmp	r4, #0
    37d2:	d100      	bne.n	37d6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    37d4:	b662      	cpsie	i
    37d6:	bd10      	pop	{r4, pc}
    37d8:	2000002c 	.word	0x2000002c

000037dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    37dc:	b510      	push	{r4, lr}
    37de:	f3ef 8410 	mrs	r4, PRIMASK
    37e2:	b672      	cpsid	i
    37e4:	4806      	ldr	r0, [pc, #24]	; (3800 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    37e6:	7841      	ldrb	r1, [r0, #1]
    37e8:	1c49      	adds	r1, r1, #1
    37ea:	7041      	strb	r1, [r0, #1]
    37ec:	7840      	ldrb	r0, [r0, #1]
    37ee:	2801      	cmp	r0, #1
    37f0:	d101      	bne.n	37f6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    37f2:	f00b faac 	bl	ed4e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    37f6:	2c00      	cmp	r4, #0
    37f8:	d100      	bne.n	37fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    37fa:	b662      	cpsie	i
    37fc:	bd10      	pop	{r4, pc}
    37fe:	0000      	.short	0x0000
    3800:	2000002c 	.word	0x2000002c

00003804 <mpsl_clock_hfclk_release>:
    3804:	4805      	ldr	r0, [pc, #20]	; (381c <mpsl_clock_hfclk_release+0x18>)
    3806:	b510      	push	{r4, lr}
    3808:	78c1      	ldrb	r1, [r0, #3]
    380a:	b121      	cbz	r1, 3816 <mpsl_clock_hfclk_release+0x12>
    380c:	2100      	movs	r1, #0
    380e:	7101      	strb	r1, [r0, #4]
    3810:	70c1      	strb	r1, [r0, #3]
    3812:	f7ff ffc7 	bl	37a4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3816:	2000      	movs	r0, #0
    3818:	bd10      	pop	{r4, pc}
    381a:	0000      	.short	0x0000
    381c:	2000002c 	.word	0x2000002c

00003820 <mpsl_clock_hfclk_request>:
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	4c0c      	ldr	r4, [pc, #48]	; (3854 <mpsl_clock_hfclk_request+0x34>)
    3824:	78e1      	ldrb	r1, [r4, #3]
    3826:	b961      	cbnz	r1, 3842 <mpsl_clock_hfclk_request+0x22>
    3828:	2501      	movs	r5, #1
    382a:	70e5      	strb	r5, [r4, #3]
    382c:	61a0      	str	r0, [r4, #24]
    382e:	f7ff ffd5 	bl	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3832:	f000 f8eb 	bl	3a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3836:	b130      	cbz	r0, 3846 <mpsl_clock_hfclk_request+0x26>
    3838:	69a0      	ldr	r0, [r4, #24]
    383a:	b110      	cbz	r0, 3842 <mpsl_clock_hfclk_request+0x22>
    383c:	4780      	blx	r0
    383e:	2000      	movs	r0, #0
    3840:	61a0      	str	r0, [r4, #24]
    3842:	2000      	movs	r0, #0
    3844:	bd70      	pop	{r4, r5, r6, pc}
    3846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    384a:	7125      	strb	r5, [r4, #4]
    384c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3850:	e7f7      	b.n	3842 <mpsl_clock_hfclk_request+0x22>
    3852:	0000      	.short	0x0000
    3854:	2000002c 	.word	0x2000002c

00003858 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3858:	f3ef 8010 	mrs	r0, PRIMASK
    385c:	b672      	cpsid	i
    385e:	4904      	ldr	r1, [pc, #16]	; (3870 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3860:	788a      	ldrb	r2, [r1, #2]
    3862:	1c52      	adds	r2, r2, #1
    3864:	708a      	strb	r2, [r1, #2]
    3866:	2800      	cmp	r0, #0
    3868:	d100      	bne.n	386c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    386a:	b662      	cpsie	i
    386c:	4770      	bx	lr
    386e:	0000      	.short	0x0000
    3870:	2000002c 	.word	0x2000002c

00003874 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3874:	b510      	push	{r4, lr}
    3876:	f3ef 8410 	mrs	r4, PRIMASK
    387a:	b672      	cpsid	i
    387c:	480a      	ldr	r0, [pc, #40]	; (38a8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    387e:	7881      	ldrb	r1, [r0, #2]
    3880:	b129      	cbz	r1, 388e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3882:	7881      	ldrb	r1, [r0, #2]
    3884:	1e49      	subs	r1, r1, #1
    3886:	7081      	strb	r1, [r0, #2]
    3888:	7841      	ldrb	r1, [r0, #1]
    388a:	b129      	cbz	r1, 3898 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    388c:	e008      	b.n	38a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    388e:	f240 1125 	movw	r1, #293	; 0x125
    3892:	206d      	movs	r0, #109	; 0x6d
    3894:	f000 f91e 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3898:	7880      	ldrb	r0, [r0, #2]
    389a:	b908      	cbnz	r0, 38a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    389c:	f000 f8c4 	bl	3a28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    38a0:	2c00      	cmp	r4, #0
    38a2:	d100      	bne.n	38a6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    38a4:	b662      	cpsie	i
    38a6:	bd10      	pop	{r4, pc}
    38a8:	2000002c 	.word	0x2000002c

000038ac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    38ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b0:	0004      	movs	r4, r0
    38b2:	f06f 0015 	mvn.w	r0, #21
    38b6:	d03b      	beq.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    38b8:	7821      	ldrb	r1, [r4, #0]
    38ba:	2904      	cmp	r1, #4
    38bc:	d838      	bhi.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    38be:	2900      	cmp	r1, #0
    38c0:	7861      	ldrb	r1, [r4, #1]
    38c2:	d037      	beq.n	3934 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    38c4:	2900      	cmp	r1, #0
    38c6:	d133      	bne.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    38c8:	78a1      	ldrb	r1, [r4, #2]
    38ca:	2900      	cmp	r1, #0
    38cc:	d130      	bne.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    38ce:	2000      	movs	r0, #0
    38d0:	f00b f9ec 	bl	ecac <MPSL_IRQ_RADIO_Handler+0x1e>
    38d4:	2000      	movs	r0, #0
    38d6:	f00b f9dc 	bl	ec92 <MPSL_IRQ_RADIO_Handler+0x4>
    38da:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    38de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    38e2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    38e6:	2500      	movs	r5, #0
    38e8:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    38ec:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    38f0:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    38f4:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    38f8:	4e13      	ldr	r6, [pc, #76]	; (3948 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    38fa:	7075      	strb	r5, [r6, #1]
    38fc:	88a0      	ldrh	r0, [r4, #4]
    38fe:	81b0      	strh	r0, [r6, #12]
    3900:	f00b fa1c 	bl	ed3c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3904:	2701      	movs	r7, #1
    3906:	b108      	cbz	r0, 390c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3908:	70f7      	strb	r7, [r6, #3]
    390a:	7077      	strb	r7, [r6, #1]
    390c:	2101      	movs	r1, #1
    390e:	4640      	mov	r0, r8
    3910:	f00b fa06 	bl	ed20 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3914:	b108      	cbz	r0, 391a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3916:	f000 f873 	bl	3a00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    391a:	4620      	mov	r0, r4
    391c:	f7ff fe88 	bl	3630 <MPSL_IRQ_CLOCK_Handler+0x190>
    3920:	2000      	movs	r0, #0
    3922:	f00b f9b6 	bl	ec92 <MPSL_IRQ_RADIO_Handler+0x4>
    3926:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    392a:	4628      	mov	r0, r5
    392c:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3934:	2900      	cmp	r1, #0
    3936:	d0fb      	beq.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3938:	2920      	cmp	r1, #32
    393a:	d8f9      	bhi.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    393c:	78a1      	ldrb	r1, [r4, #2]
    393e:	2921      	cmp	r1, #33	; 0x21
    3940:	d8f6      	bhi.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3942:	2901      	cmp	r1, #1
    3944:	d1c3      	bne.n	38ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3946:	e7f3      	b.n	3930 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3948:	2000002c 	.word	0x2000002c

0000394c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    394c:	4801      	ldr	r0, [pc, #4]	; (3954 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    394e:	8980      	ldrh	r0, [r0, #12]
    3950:	4770      	bx	lr
    3952:	0000      	.short	0x0000
    3954:	2000002c 	.word	0x2000002c

00003958 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3958:	b510      	push	{r4, lr}
    395a:	480d      	ldr	r0, [pc, #52]	; (3990 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    395c:	f00b fa4e 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3960:	490b      	ldr	r1, [pc, #44]	; (3990 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3962:	3908      	subs	r1, #8
    3964:	b148      	cbz	r0, 397a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3966:	2001      	movs	r0, #1
    3968:	7008      	strb	r0, [r1, #0]
    396a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    396e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3976:	f7ff bf31 	b.w	37dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    397a:	7a48      	ldrb	r0, [r1, #9]
    397c:	2801      	cmp	r0, #1
    397e:	d101      	bne.n	3984 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3980:	f7ff fdb6 	bl	34f0 <MPSL_IRQ_CLOCK_Handler+0x50>
    3984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3988:	4801      	ldr	r0, [pc, #4]	; (3990 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    398a:	f00b ba4e 	b.w	ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    398e:	0000      	.short	0x0000
    3990:	20000034 	.word	0x20000034

00003994 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3994:	4802      	ldr	r0, [pc, #8]	; (39a0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3996:	7a40      	ldrb	r0, [r0, #9]
    3998:	2800      	cmp	r0, #0
    399a:	d000      	beq.n	399e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    399c:	2001      	movs	r0, #1
    399e:	4770      	bx	lr
    39a0:	2000002c 	.word	0x2000002c

000039a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a6:	4d15      	ldr	r5, [pc, #84]	; (39fc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    39a8:	7aa8      	ldrb	r0, [r5, #10]
    39aa:	2800      	cmp	r0, #0
    39ac:	d125      	bne.n	39fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x56>
    39ae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    39b2:	2018      	movs	r0, #24
    39b4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    39b8:	2601      	movs	r6, #1
    39ba:	61a6      	str	r6, [r4, #24]
    39bc:	f44f 7020 	mov.w	r0, #640	; 0x280
    39c0:	f8ad 0000 	strh.w	r0, [sp]
    39c4:	f8bd 0000 	ldrh.w	r0, [sp]
    39c8:	1e41      	subs	r1, r0, #1
    39ca:	f8ad 1000 	strh.w	r1, [sp]
    39ce:	d2f9      	bcs.n	39c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x20>
    39d0:	2700      	movs	r7, #0
    39d2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    39d6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    39da:	4808      	ldr	r0, [pc, #32]	; (39fc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    39dc:	3008      	adds	r0, #8
    39de:	f00b fa20 	bl	ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    39e2:	702f      	strb	r7, [r5, #0]
    39e4:	f7ff fd84 	bl	34f0 <MPSL_IRQ_CLOCK_Handler+0x50>
    39e8:	6166      	str	r6, [r4, #20]
    39ea:	7968      	ldrb	r0, [r5, #5]
    39ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    39f0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    39f4:	2018      	movs	r0, #24
    39f6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    39fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39fc:	2000002c 	.word	0x2000002c

00003a00 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3a00:	4901      	ldr	r1, [pc, #4]	; (3a08 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3a02:	2001      	movs	r0, #1
    3a04:	7008      	strb	r0, [r1, #0]
    3a06:	4770      	bx	lr
    3a08:	200003a4 	.word	0x200003a4

00003a0c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3a0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3a10:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3a14:	b918      	cbnz	r0, 3a1e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3a16:	4803      	ldr	r0, [pc, #12]	; (3a24 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3a18:	7800      	ldrb	r0, [r0, #0]
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d000      	beq.n	3a20 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3a1e:	2001      	movs	r0, #1
    3a20:	4770      	bx	lr
    3a22:	0000      	.short	0x0000
    3a24:	200003a4 	.word	0x200003a4

00003a28 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3a28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3a2c:	2101      	movs	r1, #1
    3a2e:	6041      	str	r1, [r0, #4]
    3a30:	2100      	movs	r1, #0
    3a32:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3a36:	4801      	ldr	r0, [pc, #4]	; (3a3c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3a38:	7001      	strb	r1, [r0, #0]
    3a3a:	4770      	bx	lr
    3a3c:	200003a4 	.word	0x200003a4

00003a40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3a40:	4802      	ldr	r0, [pc, #8]	; (3a4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3a42:	6800      	ldr	r0, [r0, #0]
    3a44:	f000 0003 	and.w	r0, r0, #3
    3a48:	4770      	bx	lr
    3a4a:	0000      	.short	0x0000
    3a4c:	4000041c 	.word	0x4000041c
    3a50:	b510      	push	{r4, lr}
    3a52:	b131      	cbz	r1, 3a62 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3a54:	2901      	cmp	r1, #1
    3a56:	d007      	beq.n	3a68 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3a58:	f44f 7142 	mov.w	r1, #776	; 0x308
    3a5c:	a005      	add	r0, pc, #20	; (adr r0, 3a74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3a5e:	f000 f80f 	bl	3a80 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3a62:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3a66:	e001      	b.n	3a6c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3a68:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3a6c:	f000 0001 	and.w	r0, r0, #1
    3a70:	bd10      	pop	{r4, pc}
    3a72:	0000      	.short	0x0000
    3a74:	5f66726e 	.word	0x5f66726e
    3a78:	636f6c63 	.word	0x636f6c63
    3a7c:	00682e6b 	.word	0x00682e6b

00003a80 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3a80:	4a02      	ldr	r2, [pc, #8]	; (3a8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3a82:	6852      	ldr	r2, [r2, #4]
    3a84:	b102      	cbz	r2, 3a88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3a86:	4710      	bx	r2
    3a88:	e7fe      	b.n	3a88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3a8a:	0000      	.short	0x0000
    3a8c:	20000048 	.word	0x20000048
    3a90:	4806      	ldr	r0, [pc, #24]	; (3aac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3a92:	b510      	push	{r4, lr}
    3a94:	2100      	movs	r1, #0
    3a96:	6001      	str	r1, [r0, #0]
    3a98:	2101      	movs	r1, #1
    3a9a:	6001      	str	r1, [r0, #0]
    3a9c:	4608      	mov	r0, r1
    3a9e:	f00b f982 	bl	eda6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3aa6:	2001      	movs	r0, #1
    3aa8:	f00b b970 	b.w	ed8c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3aac:	40001ffc 	.word	0x40001ffc
    3ab0:	4807      	ldr	r0, [pc, #28]	; (3ad0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    3ab2:	b510      	push	{r4, lr}
    3ab4:	2101      	movs	r1, #1
    3ab6:	6041      	str	r1, [r0, #4]
    3ab8:	1e89      	subs	r1, r1, #2
    3aba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3abe:	200c      	movs	r0, #12
    3ac0:	f00b f971 	bl	eda6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ac8:	200c      	movs	r0, #12
    3aca:	f00b b95f 	b.w	ed8c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3ace:	0000      	.short	0x0000
    3ad0:	4000c000 	.word	0x4000c000

00003ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3ad4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3ad6:	4a10      	ldr	r2, [pc, #64]	; (3b18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3ad8:	6855      	ldr	r5, [r2, #4]
    3ada:	b1e5      	cbz	r5, 3b16 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3adc:	2200      	movs	r2, #0
    3ade:	4603      	mov	r3, r0
    3ae0:	466e      	mov	r6, sp
    3ae2:	240a      	movs	r4, #10
    3ae4:	e003      	b.n	3aee <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    3ae6:	fbb0 f0f4 	udiv	r0, r0, r4
    3aea:	1c52      	adds	r2, r2, #1
    3aec:	b2d2      	uxtb	r2, r2
    3aee:	2800      	cmp	r0, #0
    3af0:	d1f9      	bne.n	3ae6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    3af2:	54b0      	strb	r0, [r6, r2]
    3af4:	e00a      	b.n	3b0c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3af6:	bf00      	nop
    3af8:	fbb3 f0f4 	udiv	r0, r3, r4
    3afc:	fb04 3010 	mls	r0, r4, r0, r3
    3b00:	fbb3 f3f4 	udiv	r3, r3, r4
    3b04:	1e52      	subs	r2, r2, #1
    3b06:	b2d2      	uxtb	r2, r2
    3b08:	3030      	adds	r0, #48	; 0x30
    3b0a:	54b0      	strb	r0, [r6, r2]
    3b0c:	2a00      	cmp	r2, #0
    3b0e:	d1f3      	bne.n	3af8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3b10:	4630      	mov	r0, r6
    3b12:	47a8      	blx	r5
    3b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b16:	e7fe      	b.n	3b16 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3b18:	20000048 	.word	0x20000048

00003b1c <mpsl_init>:
    3b1c:	b570      	push	{r4, r5, r6, lr}
    3b1e:	4c17      	ldr	r4, [pc, #92]	; (3b7c <mpsl_init+0x60>)
    3b20:	4606      	mov	r6, r0
    3b22:	460d      	mov	r5, r1
    3b24:	7860      	ldrb	r0, [r4, #1]
    3b26:	b110      	cbz	r0, 3b2e <mpsl_init+0x12>
    3b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b2c:	bd70      	pop	{r4, r5, r6, pc}
    3b2e:	b906      	cbnz	r6, 3b32 <mpsl_init+0x16>
    3b30:	4e13      	ldr	r6, [pc, #76]	; (3b80 <mpsl_init+0x64>)
    3b32:	6062      	str	r2, [r4, #4]
    3b34:	7025      	strb	r5, [r4, #0]
    3b36:	f7ff ffab 	bl	3a90 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3b3a:	f7ff ffb9 	bl	3ab0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3b3e:	4630      	mov	r0, r6
    3b40:	f7ff feb4 	bl	38ac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3b44:	0006      	movs	r6, r0
    3b46:	d1f1      	bne.n	3b2c <mpsl_init+0x10>
    3b48:	f7fe ffb6 	bl	2ab8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3b4c:	f7ff ff2a 	bl	39a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3b50:	f00b f876 	bl	ec40 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3b54:	4628      	mov	r0, r5
    3b56:	f00b f919 	bl	ed8c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3b5a:	2001      	movs	r0, #1
    3b5c:	2d00      	cmp	r5, #0
    3b5e:	db09      	blt.n	3b74 <mpsl_init+0x58>
    3b60:	f005 011f 	and.w	r1, r5, #31
    3b64:	fa00 f101 	lsl.w	r1, r0, r1
    3b68:	096a      	lsrs	r2, r5, #5
    3b6a:	0092      	lsls	r2, r2, #2
    3b6c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3b70:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3b74:	7060      	strb	r0, [r4, #1]
    3b76:	4630      	mov	r0, r6
    3b78:	bd70      	pop	{r4, r5, r6, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	20000048 	.word	0x20000048
    3b80:	0000edc8 	.word	0x0000edc8

00003b84 <mpsl_is_initialized>:
    3b84:	4801      	ldr	r0, [pc, #4]	; (3b8c <mpsl_is_initialized+0x8>)
    3b86:	7840      	ldrb	r0, [r0, #1]
    3b88:	4770      	bx	lr
    3b8a:	0000      	.short	0x0000
    3b8c:	20000048 	.word	0x20000048

00003b90 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3b90:	4807      	ldr	r0, [pc, #28]	; (3bb0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3b92:	f990 0000 	ldrsb.w	r0, [r0]
    3b96:	2800      	cmp	r0, #0
    3b98:	db09      	blt.n	3bae <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3b9a:	f000 021f 	and.w	r2, r0, #31
    3b9e:	2101      	movs	r1, #1
    3ba0:	4091      	lsls	r1, r2
    3ba2:	0940      	lsrs	r0, r0, #5
    3ba4:	0080      	lsls	r0, r0, #2
    3ba6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3baa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3bae:	4770      	bx	lr
    3bb0:	20000048 	.word	0x20000048

00003bb4 <mpsl_temperature_get>:
    3bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bb8:	2601      	movs	r6, #1
    3bba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3bbe:	0331      	lsls	r1, r6, #12
    3bc0:	f04f 0800 	mov.w	r8, #0
    3bc4:	4640      	mov	r0, r8
    3bc6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3bca:	f3bf 8f4f 	dsb	sy
    3bce:	f3bf 8f6f 	isb	sy
    3bd2:	4c16      	ldr	r4, [pc, #88]	; (3c2c <mpsl_temperature_get+0x78>)
    3bd4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3bd8:	200c      	movs	r0, #12
    3bda:	f00b f902 	bl	ede2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    3bde:	4d14      	ldr	r5, [pc, #80]	; (3c30 <mpsl_temperature_get+0x7c>)
    3be0:	6828      	ldr	r0, [r5, #0]
    3be2:	43c0      	mvns	r0, r0
    3be4:	f340 1700 	sbfx	r7, r0, #4, #1
    3be8:	6828      	ldr	r0, [r5, #0]
    3bea:	f040 0010 	orr.w	r0, r0, #16
    3bee:	6028      	str	r0, [r5, #0]
    3bf0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3bf4:	6026      	str	r6, [r4, #0]
    3bf6:	1c7f      	adds	r7, r7, #1
    3bf8:	e002      	b.n	3c00 <mpsl_temperature_get+0x4c>
    3bfa:	bf00      	nop
    3bfc:	f000 f88c 	bl	3d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3c00:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3c04:	2800      	cmp	r0, #0
    3c06:	d0f9      	beq.n	3bfc <mpsl_temperature_get+0x48>
    3c08:	b91f      	cbnz	r7, 3c12 <mpsl_temperature_get+0x5e>
    3c0a:	6828      	ldr	r0, [r5, #0]
    3c0c:	f020 0010 	bic.w	r0, r0, #16
    3c10:	6028      	str	r0, [r5, #0]
    3c12:	4808      	ldr	r0, [pc, #32]	; (3c34 <mpsl_temperature_get+0x80>)
    3c14:	6805      	ldr	r5, [r0, #0]
    3c16:	6066      	str	r6, [r4, #4]
    3c18:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3c1c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3c20:	200c      	movs	r0, #12
    3c22:	f00b f8de 	bl	ede2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    3c26:	4628      	mov	r0, r5
    3c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c2c:	4000c000 	.word	0x4000c000
    3c30:	e000ed10 	.word	0xe000ed10
    3c34:	4000c508 	.word	0x4000c508

00003c38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3c38:	b510      	push	{r4, lr}
    3c3a:	4602      	mov	r2, r0
    3c3c:	2005      	movs	r0, #5
    3c3e:	490c      	ldr	r1, [pc, #48]	; (3c70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3c40:	e004      	b.n	3c4c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3c42:	bf00      	nop
    3c44:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3c48:	791b      	ldrb	r3, [r3, #4]
    3c4a:	b133      	cbz	r3, 3c5a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3c4c:	1e40      	subs	r0, r0, #1
    3c4e:	b2c0      	uxtb	r0, r0
    3c50:	d2f8      	bcs.n	3c44 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3c52:	214b      	movs	r1, #75	; 0x4b
    3c54:	2069      	movs	r0, #105	; 0x69
    3c56:	f7ff ff3d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c5a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3c5e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3c62:	2200      	movs	r2, #0
    3c64:	714a      	strb	r2, [r1, #5]
    3c66:	718a      	strb	r2, [r1, #6]
    3c68:	2201      	movs	r2, #1
    3c6a:	710a      	strb	r2, [r1, #4]
    3c6c:	bd10      	pop	{r4, pc}
    3c6e:	0000      	.short	0x0000
    3c70:	20000f94 	.word	0x20000f94

00003c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3c74:	b510      	push	{r4, lr}
    3c76:	2805      	cmp	r0, #5
    3c78:	d301      	bcc.n	3c7e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3c7a:	215a      	movs	r1, #90	; 0x5a
    3c7c:	e006      	b.n	3c8c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3c7e:	490a      	ldr	r1, [pc, #40]	; (3ca8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3c80:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3c84:	7901      	ldrb	r1, [r0, #4]
    3c86:	2901      	cmp	r1, #1
    3c88:	d003      	beq.n	3c92 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3c8a:	215b      	movs	r1, #91	; 0x5b
    3c8c:	2069      	movs	r0, #105	; 0x69
    3c8e:	f7ff ff21 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c92:	7941      	ldrb	r1, [r0, #5]
    3c94:	7982      	ldrb	r2, [r0, #6]
    3c96:	1c49      	adds	r1, r1, #1
    3c98:	b2c9      	uxtb	r1, r1
    3c9a:	428a      	cmp	r2, r1
    3c9c:	d000      	beq.n	3ca0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3c9e:	7141      	strb	r1, [r0, #5]
    3ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ca4:	f7ff bf74 	b.w	3b90 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ca8:	20000f94 	.word	0x20000f94

00003cac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3cac:	b570      	push	{r4, r5, r6, lr}
    3cae:	2505      	movs	r5, #5
    3cb0:	4e0e      	ldr	r6, [pc, #56]	; (3cec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3cb2:	4c0f      	ldr	r4, [pc, #60]	; (3cf0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3cb4:	e016      	b.n	3ce4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3cb6:	7821      	ldrb	r1, [r4, #0]
    3cb8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3cbc:	7902      	ldrb	r2, [r0, #4]
    3cbe:	2a01      	cmp	r2, #1
    3cc0:	d108      	bne.n	3cd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3cc2:	7942      	ldrb	r2, [r0, #5]
    3cc4:	7983      	ldrb	r3, [r0, #6]
    3cc6:	429a      	cmp	r2, r3
    3cc8:	d004      	beq.n	3cd4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3cca:	7942      	ldrb	r2, [r0, #5]
    3ccc:	7182      	strb	r2, [r0, #6]
    3cce:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3cd2:	4780      	blx	r0
    3cd4:	7820      	ldrb	r0, [r4, #0]
    3cd6:	1c40      	adds	r0, r0, #1
    3cd8:	b2c0      	uxtb	r0, r0
    3cda:	7020      	strb	r0, [r4, #0]
    3cdc:	2805      	cmp	r0, #5
    3cde:	d301      	bcc.n	3ce4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ce0:	2000      	movs	r0, #0
    3ce2:	7020      	strb	r0, [r4, #0]
    3ce4:	1e6d      	subs	r5, r5, #1
    3ce6:	b2ed      	uxtb	r5, r5
    3ce8:	d2e5      	bcs.n	3cb6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    3cec:	20000f94 	.word	0x20000f94
    3cf0:	200003a5 	.word	0x200003a5

00003cf4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3cf4:	b500      	push	{lr}
    3cf6:	f00b f901 	bl	eefc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3cfa:	b928      	cbnz	r0, 3d08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    3cfc:	f00b f8f4 	bl	eee8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    3d00:	b910      	cbnz	r0, 3d08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    3d02:	f00b f8bb 	bl	ee7c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    3d06:	b108      	cbz	r0, 3d0c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x18>
    3d08:	4801      	ldr	r0, [pc, #4]	; (3d10 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1c>)
    3d0a:	bd00      	pop	{pc}
    3d0c:	4801      	ldr	r0, [pc, #4]	; (3d14 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x20>)
    3d0e:	bd00      	pop	{pc}
    3d10:	4001e700 	.word	0x4001e700
    3d14:	4000050c 	.word	0x4000050c

00003d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3d18:	b510      	push	{r4, lr}
    3d1a:	f00b f8b9 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d1e:	b1e0      	cbz	r0, 3d5a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3d20:	f3ef 8010 	mrs	r0, PRIMASK
    3d24:	b1d8      	cbz	r0, 3d5e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3d26:	2100      	movs	r1, #0
    3d28:	b672      	cpsid	i
    3d2a:	4812      	ldr	r0, [pc, #72]	; (3d74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3d2c:	6802      	ldr	r2, [r0, #0]
    3d2e:	6803      	ldr	r3, [r0, #0]
    3d30:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3d34:	f043 0310 	orr.w	r3, r3, #16
    3d38:	6003      	str	r3, [r0, #0]
    3d3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d3e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3d42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3d46:	431c      	orrs	r4, r3
    3d48:	d000      	beq.n	3d4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3d4a:	bf40      	sev
    3d4c:	bf20      	wfe
    3d4e:	bf00      	nop
    3d50:	bf00      	nop
    3d52:	bf00      	nop
    3d54:	bf00      	nop
    3d56:	b122      	cbz	r2, 3d62 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4a>
    3d58:	e007      	b.n	3d6a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x52>
    3d5a:	bf20      	wfe
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	2101      	movs	r1, #1
    3d60:	e7e2      	b.n	3d28 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3d62:	6802      	ldr	r2, [r0, #0]
    3d64:	f022 0210 	bic.w	r2, r2, #16
    3d68:	6002      	str	r2, [r0, #0]
    3d6a:	2900      	cmp	r1, #0
    3d6c:	d0f6      	beq.n	3d5c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x44>
    3d6e:	b662      	cpsie	i
    3d70:	bd10      	pop	{r4, pc}
    3d72:	0000      	.short	0x0000
    3d74:	e000ed10 	.word	0xe000ed10

00003d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    3d78:	b510      	push	{r4, lr}
    3d7a:	ea80 0401 	eor.w	r4, r0, r1
    3d7e:	4603      	mov	r3, r0
    3d80:	07a4      	lsls	r4, r4, #30
    3d82:	d007      	beq.n	3d94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    3d84:	e015      	b.n	3db2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    3d86:	2a00      	cmp	r2, #0
    3d88:	d015      	beq.n	3db6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    3d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
    3d8e:	f803 4b01 	strb.w	r4, [r3], #1
    3d92:	1e52      	subs	r2, r2, #1
    3d94:	079c      	lsls	r4, r3, #30
    3d96:	d1f6      	bne.n	3d86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    3d98:	e002      	b.n	3da0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    3d9a:	c910      	ldmia	r1!, {r4}
    3d9c:	1f12      	subs	r2, r2, #4
    3d9e:	c310      	stmia	r3!, {r4}
    3da0:	2a04      	cmp	r2, #4
    3da2:	d2fa      	bcs.n	3d9a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    3da4:	e005      	b.n	3db2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    3da6:	bf00      	nop
    3da8:	f811 4b01 	ldrb.w	r4, [r1], #1
    3dac:	f803 4b01 	strb.w	r4, [r3], #1
    3db0:	1e52      	subs	r2, r2, #1
    3db2:	2a00      	cmp	r2, #0
    3db4:	d1f8      	bne.n	3da8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    3db6:	bd10      	pop	{r4, pc}
    3db8:	b570      	push	{r4, r5, r6, lr}
    3dba:	4c0e      	ldr	r4, [pc, #56]	; (3df4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    3dbc:	7860      	ldrb	r0, [r4, #1]
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d117      	bne.n	3df2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    3dc2:	7820      	ldrb	r0, [r4, #0]
    3dc4:	2500      	movs	r5, #0
    3dc6:	2801      	cmp	r0, #1
    3dc8:	d106      	bne.n	3dd8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    3dca:	2002      	movs	r0, #2
    3dcc:	7020      	strb	r0, [r4, #0]
    3dce:	68a0      	ldr	r0, [r4, #8]
    3dd0:	b110      	cbz	r0, 3dd8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    3dd2:	68a0      	ldr	r0, [r4, #8]
    3dd4:	4780      	blx	r0
    3dd6:	60a5      	str	r5, [r4, #8]
    3dd8:	7820      	ldrb	r0, [r4, #0]
    3dda:	2803      	cmp	r0, #3
    3ddc:	d109      	bne.n	3df2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    3dde:	7025      	strb	r5, [r4, #0]
    3de0:	68a0      	ldr	r0, [r4, #8]
    3de2:	2800      	cmp	r0, #0
    3de4:	d005      	beq.n	3df2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    3de6:	6860      	ldr	r0, [r4, #4]
    3de8:	6940      	ldr	r0, [r0, #20]
    3dea:	4780      	blx	r0
    3dec:	68a0      	ldr	r0, [r4, #8]
    3dee:	4780      	blx	r0
    3df0:	60a5      	str	r5, [r4, #8]
    3df2:	bd70      	pop	{r4, r5, r6, pc}
    3df4:	20000050 	.word	0x20000050

00003df8 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    3df8:	b510      	push	{r4, lr}
    3dfa:	4c08      	ldr	r4, [pc, #32]	; (3e1c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    3dfc:	7820      	ldrb	r0, [r4, #0]
    3dfe:	2802      	cmp	r0, #2
    3e00:	d002      	beq.n	3e08 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    3e02:	7820      	ldrb	r0, [r4, #0]
    3e04:	2803      	cmp	r0, #3
    3e06:	d102      	bne.n	3e0e <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3e08:	6860      	ldr	r0, [r4, #4]
    3e0a:	6880      	ldr	r0, [r0, #8]
    3e0c:	4780      	blx	r0
    3e0e:	2000      	movs	r0, #0
    3e10:	7060      	strb	r0, [r4, #1]
    3e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e16:	f7ff bfcf 	b.w	3db8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    3e1a:	0000      	.short	0x0000
    3e1c:	20000050 	.word	0x20000050

00003e20 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3e20:	b538      	push	{r3, r4, r5, lr}
    3e22:	4604      	mov	r4, r0
    3e24:	2805      	cmp	r0, #5
    3e26:	d304      	bcc.n	3e32 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3e28:	f44f 7189 	mov.w	r1, #274	; 0x112
    3e2c:	2068      	movs	r0, #104	; 0x68
    3e2e:	f7ff fe51 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e32:	f7ff ffc1 	bl	3db8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    3e36:	4d0e      	ldr	r5, [pc, #56]	; (3e70 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    3e38:	2001      	movs	r0, #1
    3e3a:	7068      	strb	r0, [r5, #1]
    3e3c:	7828      	ldrb	r0, [r5, #0]
    3e3e:	2802      	cmp	r0, #2
    3e40:	d115      	bne.n	3e6e <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    3e42:	6868      	ldr	r0, [r5, #4]
    3e44:	68c1      	ldr	r1, [r0, #12]
    3e46:	4620      	mov	r0, r4
    3e48:	4788      	blx	r1
    3e4a:	490a      	ldr	r1, [pc, #40]	; (3e74 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    3e4c:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3e50:	7852      	ldrb	r2, [r2, #1]
    3e52:	4282      	cmp	r2, r0
    3e54:	d201      	bcs.n	3e5a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    3e56:	2001      	movs	r0, #1
    3e58:	e001      	b.n	3e5e <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    3e5a:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3e5e:	f88d 0000 	strb.w	r0, [sp]
    3e62:	f88d 4001 	strb.w	r4, [sp, #1]
    3e66:	6868      	ldr	r0, [r5, #4]
    3e68:	6801      	ldr	r1, [r0, #0]
    3e6a:	4668      	mov	r0, sp
    3e6c:	4788      	blx	r1
    3e6e:	bd38      	pop	{r3, r4, r5, pc}
    3e70:	20000050 	.word	0x20000050
    3e74:	20001ac6 	.word	0x20001ac6

00003e78 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3e78:	4905      	ldr	r1, [pc, #20]	; (3e90 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3e7a:	780a      	ldrb	r2, [r1, #0]
    3e7c:	2a02      	cmp	r2, #2
    3e7e:	d004      	beq.n	3e8a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3e80:	780a      	ldrb	r2, [r1, #0]
    3e82:	2a03      	cmp	r2, #3
    3e84:	d001      	beq.n	3e8a <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3e86:	2000      	movs	r0, #0
    3e88:	4770      	bx	lr
    3e8a:	6849      	ldr	r1, [r1, #4]
    3e8c:	6909      	ldr	r1, [r1, #16]
    3e8e:	4708      	bx	r1
    3e90:	20000050 	.word	0x20000050

00003e94 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    3e94:	b510      	push	{r4, lr}
    3e96:	b158      	cbz	r0, 3eb0 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3e98:	4908      	ldr	r1, [pc, #32]	; (3ebc <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3e9a:	780a      	ldrb	r2, [r1, #0]
    3e9c:	2a02      	cmp	r2, #2
    3e9e:	d002      	beq.n	3ea6 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3ea0:	780a      	ldrb	r2, [r1, #0]
    3ea2:	2a03      	cmp	r2, #3
    3ea4:	d109      	bne.n	3eba <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    3ea6:	6849      	ldr	r1, [r1, #4]
    3ea8:	6849      	ldr	r1, [r1, #4]
    3eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3eae:	4708      	bx	r1
    3eb0:	f240 1127 	movw	r1, #295	; 0x127
    3eb4:	2068      	movs	r0, #104	; 0x68
    3eb6:	f7ff fe0d 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3eba:	bd10      	pop	{r4, pc}
    3ebc:	20000050 	.word	0x20000050

00003ec0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    3ec0:	4805      	ldr	r0, [pc, #20]	; (3ed8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    3ec2:	7801      	ldrb	r1, [r0, #0]
    3ec4:	2902      	cmp	r1, #2
    3ec6:	d004      	beq.n	3ed2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3ec8:	7801      	ldrb	r1, [r0, #0]
    3eca:	2903      	cmp	r1, #3
    3ecc:	d001      	beq.n	3ed2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    3ece:	2000      	movs	r0, #0
    3ed0:	4770      	bx	lr
    3ed2:	6840      	ldr	r0, [r0, #4]
    3ed4:	6980      	ldr	r0, [r0, #24]
    3ed6:	4700      	bx	r0
    3ed8:	20000050 	.word	0x20000050
    3edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ede:	4c18      	ldr	r4, [pc, #96]	; (3f40 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    3ee0:	7960      	ldrb	r0, [r4, #5]
    3ee2:	2803      	cmp	r0, #3
    3ee4:	d203      	bcs.n	3eee <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    3ee6:	bf00      	nop
    3ee8:	f04f 0103 	mov.w	r1, #3
    3eec:	e000      	b.n	3ef0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    3eee:	4601      	mov	r1, r0
    3ef0:	f88d 1001 	strb.w	r1, [sp, #1]
    3ef4:	d201      	bcs.n	3efa <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    3ef6:	f04f 0003 	mov.w	r0, #3
    3efa:	f88d 0000 	strb.w	r0, [sp]
    3efe:	78e0      	ldrb	r0, [r4, #3]
    3f00:	f8ad 0004 	strh.w	r0, [sp, #4]
    3f04:	78a0      	ldrb	r0, [r4, #2]
    3f06:	f8ad 0002 	strh.w	r0, [sp, #2]
    3f0a:	4668      	mov	r0, sp
    3f0c:	f008 fdf8 	bl	cb00 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3f10:	b108      	cbz	r0, 3f16 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    3f12:	219b      	movs	r1, #155	; 0x9b
    3f14:	e010      	b.n	3f38 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3f16:	68a0      	ldr	r0, [r4, #8]
    3f18:	9002      	str	r0, [sp, #8]
    3f1a:	a802      	add	r0, sp, #8
    3f1c:	f008 fe08 	bl	cb30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3f20:	b108      	cbz	r0, 3f26 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    3f22:	219f      	movs	r1, #159	; 0x9f
    3f24:	e008      	b.n	3f38 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3f26:	4807      	ldr	r0, [pc, #28]	; (3f44 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    3f28:	6800      	ldr	r0, [r0, #0]
    3f2a:	9003      	str	r0, [sp, #12]
    3f2c:	a803      	add	r0, sp, #12
    3f2e:	f00d fd71 	bl	11a14 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3f32:	2800      	cmp	r0, #0
    3f34:	d003      	beq.n	3f3e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    3f36:	21a3      	movs	r1, #163	; 0xa3
    3f38:	2003      	movs	r0, #3
    3f3a:	f000 f8a7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3f40:	20000068 	.word	0x20000068
    3f44:	000040f4 	.word	0x000040f4

00003f48 <sdc_build_revision_get>:
    3f48:	b510      	push	{r4, lr}
    3f4a:	b128      	cbz	r0, 3f58 <sdc_build_revision_get+0x10>
    3f4c:	2214      	movs	r2, #20
    3f4e:	4904      	ldr	r1, [pc, #16]	; (3f60 <sdc_build_revision_get+0x18>)
    3f50:	f7ff ff12 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f54:	2000      	movs	r0, #0
    3f56:	bd10      	pop	{r4, pc}
    3f58:	f06f 0015 	mvn.w	r0, #21
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	0000      	.short	0x0000
    3f60:	00004126 	.word	0x00004126

00003f64 <sdc_cfg_set>:
    3f64:	b510      	push	{r4, lr}
    3f66:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3f6a:	bb18      	cbnz	r0, 3fb4 <sdc_cfg_set+0x50>
    3f6c:	b1c9      	cbz	r1, 3fa2 <sdc_cfg_set+0x3e>
    3f6e:	b14a      	cbz	r2, 3f84 <sdc_cfg_set+0x20>
    3f70:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <sdc_cfg_set+0x54>)
    3f72:	2901      	cmp	r1, #1
    3f74:	d009      	beq.n	3f8a <sdc_cfg_set+0x26>
    3f76:	2902      	cmp	r1, #2
    3f78:	d00a      	beq.n	3f90 <sdc_cfg_set+0x2c>
    3f7a:	2903      	cmp	r1, #3
    3f7c:	d00b      	beq.n	3f96 <sdc_cfg_set+0x32>
    3f7e:	2904      	cmp	r1, #4
    3f80:	d118      	bne.n	3fb4 <sdc_cfg_set+0x50>
    3f82:	e00c      	b.n	3f9e <sdc_cfg_set+0x3a>
    3f84:	f06f 0015 	mvn.w	r0, #21
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	7810      	ldrb	r0, [r2, #0]
    3f8c:	7218      	strb	r0, [r3, #8]
    3f8e:	e008      	b.n	3fa2 <sdc_cfg_set+0x3e>
    3f90:	7810      	ldrb	r0, [r2, #0]
    3f92:	7258      	strb	r0, [r3, #9]
    3f94:	e005      	b.n	3fa2 <sdc_cfg_set+0x3e>
    3f96:	6810      	ldr	r0, [r2, #0]
    3f98:	f8c3 000a 	str.w	r0, [r3, #10]
    3f9c:	e001      	b.n	3fa2 <sdc_cfg_set+0x3e>
    3f9e:	6810      	ldr	r0, [r2, #0]
    3fa0:	6118      	str	r0, [r3, #16]
    3fa2:	4905      	ldr	r1, [pc, #20]	; (3fb8 <sdc_cfg_set+0x54>)
    3fa4:	2201      	movs	r2, #1
    3fa6:	3108      	adds	r1, #8
    3fa8:	2000      	movs	r0, #0
    3faa:	f00a ffdd 	bl	ef68 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3fae:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3fb2:	dbe9      	blt.n	3f88 <sdc_cfg_set+0x24>
    3fb4:	4620      	mov	r0, r4
    3fb6:	bd10      	pop	{r4, pc}
    3fb8:	20000060 	.word	0x20000060

00003fbc <sdc_enable>:
    3fbc:	b538      	push	{r3, r4, r5, lr}
    3fbe:	460c      	mov	r4, r1
    3fc0:	b1c0      	cbz	r0, 3ff4 <sdc_enable+0x38>
    3fc2:	b1bc      	cbz	r4, 3ff4 <sdc_enable+0x38>
    3fc4:	f7ff fe38 	bl	3c38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3fc8:	4d0c      	ldr	r5, [pc, #48]	; (3ffc <sdc_enable+0x40>)
    3fca:	2200      	movs	r2, #0
    3fcc:	f105 0108 	add.w	r1, r5, #8
    3fd0:	7028      	strb	r0, [r5, #0]
    3fd2:	4620      	mov	r0, r4
    3fd4:	f00a ffc8 	bl	ef68 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3fd8:	f00e f98e 	bl	122f8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3fdc:	2100      	movs	r1, #0
    3fde:	7828      	ldrb	r0, [r5, #0]
    3fe0:	f009 f8ec 	bl	d1bc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3fe4:	7868      	ldrb	r0, [r5, #1]
    3fe6:	f88d 0000 	strb.w	r0, [sp]
    3fea:	4668      	mov	r0, sp
    3fec:	f00d fd00 	bl	119f0 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3ff0:	2000      	movs	r0, #0
    3ff2:	bd38      	pop	{r3, r4, r5, pc}
    3ff4:	f06f 0015 	mvn.w	r0, #21
    3ff8:	bd38      	pop	{r3, r4, r5, pc}
    3ffa:	0000      	.short	0x0000
    3ffc:	20000060 	.word	0x20000060

00004000 <sdc_init>:
    4000:	b570      	push	{r4, r5, r6, lr}
    4002:	0004      	movs	r4, r0
    4004:	d00b      	beq.n	401e <sdc_init+0x1e>
    4006:	f7ff fdbd 	bl	3b84 <mpsl_is_initialized>
    400a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    400e:	b120      	cbz	r0, 401a <sdc_init+0x1a>
    4010:	f7ff fc9c 	bl	394c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4014:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4018:	d904      	bls.n	4024 <sdc_init+0x24>
    401a:	4628      	mov	r0, r5
    401c:	bd70      	pop	{r4, r5, r6, pc}
    401e:	f06f 0015 	mvn.w	r0, #21
    4022:	bd70      	pop	{r4, r5, r6, pc}
    4024:	2200      	movs	r2, #0
    4026:	4b14      	ldr	r3, [pc, #80]	; (4078 <sdc_init+0x78>)
    4028:	4611      	mov	r1, r2
    402a:	bf00      	nop
    402c:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    4030:	4285      	cmp	r5, r0
    4032:	d303      	bcc.n	403c <sdc_init+0x3c>
    4034:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    4038:	7882      	ldrb	r2, [r0, #2]
    403a:	e003      	b.n	4044 <sdc_init+0x44>
    403c:	1c49      	adds	r1, r1, #1
    403e:	b2c9      	uxtb	r1, r1
    4040:	290c      	cmp	r1, #12
    4042:	d3f3      	bcc.n	402c <sdc_init+0x2c>
    4044:	480d      	ldr	r0, [pc, #52]	; (407c <sdc_init+0x7c>)
    4046:	7042      	strb	r2, [r0, #1]
    4048:	6044      	str	r4, [r0, #4]
    404a:	480d      	ldr	r0, [pc, #52]	; (4080 <sdc_init+0x80>)
    404c:	f000 f986 	bl	435c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4050:	f3ef 8410 	mrs	r4, PRIMASK
    4054:	b672      	cpsid	i
    4056:	480b      	ldr	r0, [pc, #44]	; (4084 <sdc_init+0x84>)
    4058:	f06f 010c 	mvn.w	r1, #12
    405c:	f000 fc88 	bl	4970 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4060:	4809      	ldr	r0, [pc, #36]	; (4088 <sdc_init+0x88>)
    4062:	f000 fd4b 	bl	4afc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4066:	b118      	cbz	r0, 4070 <sdc_init+0x70>
    4068:	21b2      	movs	r1, #178	; 0xb2
    406a:	2003      	movs	r0, #3
    406c:	f000 f80e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4070:	b904      	cbnz	r4, 4074 <sdc_init+0x74>
    4072:	b662      	cpsie	i
    4074:	2000      	movs	r0, #0
    4076:	bd70      	pop	{r4, r5, r6, pc}
    4078:	000040f6 	.word	0x000040f6
    407c:	20000060 	.word	0x20000060
    4080:	00003edd 	.word	0x00003edd
    4084:	4000e000 	.word	0x4000e000
    4088:	0000413d 	.word	0x0000413d

0000408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    408c:	b50e      	push	{r1, r2, r3, lr}
    408e:	b672      	cpsid	i
    4090:	4a15      	ldr	r2, [pc, #84]	; (40e8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4092:	6855      	ldr	r5, [r2, #4]
    4094:	b1d5      	cbz	r5, 40cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4096:	2200      	movs	r2, #0
    4098:	4603      	mov	r3, r0
    409a:	466e      	mov	r6, sp
    409c:	240a      	movs	r4, #10
    409e:	e003      	b.n	40a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    40a0:	fbb0 f0f4 	udiv	r0, r0, r4
    40a4:	1c52      	adds	r2, r2, #1
    40a6:	b2d2      	uxtb	r2, r2
    40a8:	2800      	cmp	r0, #0
    40aa:	d1f9      	bne.n	40a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    40ac:	54b0      	strb	r0, [r6, r2]
    40ae:	e009      	b.n	40c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    40b0:	fbb3 f0f4 	udiv	r0, r3, r4
    40b4:	fb04 3010 	mls	r0, r4, r0, r3
    40b8:	fbb3 f3f4 	udiv	r3, r3, r4
    40bc:	1e52      	subs	r2, r2, #1
    40be:	b2d2      	uxtb	r2, r2
    40c0:	3030      	adds	r0, #48	; 0x30
    40c2:	54b0      	strb	r0, [r6, r2]
    40c4:	2a00      	cmp	r2, #0
    40c6:	d1f3      	bne.n	40b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    40c8:	4630      	mov	r0, r6
    40ca:	47a8      	blx	r5
    40cc:	f3bf 8f4f 	dsb	sy
    40d0:	4806      	ldr	r0, [pc, #24]	; (40ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    40d2:	6801      	ldr	r1, [r0, #0]
    40d4:	4a06      	ldr	r2, [pc, #24]	; (40f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    40d6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    40da:	4311      	orrs	r1, r2
    40dc:	6001      	str	r1, [r0, #0]
    40de:	f3bf 8f4f 	dsb	sy
    40e2:	bf00      	nop
    40e4:	e7fd      	b.n	40e2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    40e6:	0000      	.short	0x0000
    40e8:	20000060 	.word	0x20000060
    40ec:	e000ed0c 	.word	0xe000ed0c
    40f0:	05fa0004 	.word	0x05fa0004
    40f4:	00010001 	.word	0x00010001
    40f8:	0002000b 	.word	0x0002000b
    40fc:	0005000a 	.word	0x0005000a
    4100:	000a0009 	.word	0x000a0009
    4104:	00140008 	.word	0x00140008
    4108:	001e0007 	.word	0x001e0007
    410c:	00320006 	.word	0x00320006
    4110:	004b0005 	.word	0x004b0005
    4114:	00640004 	.word	0x00640004
    4118:	00960003 	.word	0x00960003
    411c:	00fa0002 	.word	0x00fa0002
    4120:	01f40001 	.word	0x01f40001
    4124:	43d40000 	.word	0x43d40000
    4128:	2263cfb5 	.word	0x2263cfb5
    412c:	8aedd4e9 	.word	0x8aedd4e9
    4130:	a14cd024 	.word	0xa14cd024
    4134:	26a4b1f7 	.word	0x26a4b1f7
    4138:	00007585 	.word	0x00007585

0000413c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4c12      	ldr	r4, [pc, #72]	; (4188 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4140:	2600      	movs	r6, #0
    4142:	6825      	ldr	r5, [r4, #0]
    4144:	e011      	b.n	416a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4146:	9800      	ldr	r0, [sp, #0]
    4148:	2802      	cmp	r0, #2
    414a:	d002      	beq.n	4152 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    414c:	2803      	cmp	r0, #3
    414e:	d10c      	bne.n	416a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4150:	e006      	b.n	4160 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4152:	6820      	ldr	r0, [r4, #0]
    4154:	b110      	cbz	r0, 415c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4156:	2000      	movs	r0, #0
    4158:	6026      	str	r6, [r4, #0]
    415a:	e005      	b.n	4168 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    415c:	2126      	movs	r1, #38	; 0x26
    415e:	e00c      	b.n	417a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4160:	6820      	ldr	r0, [r4, #0]
    4162:	b168      	cbz	r0, 4180 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4164:	2001      	movs	r0, #1
    4166:	6026      	str	r6, [r4, #0]
    4168:	47a8      	blx	r5
    416a:	4668      	mov	r0, sp
    416c:	f000 fc98 	bl	4aa0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4170:	2800      	cmp	r0, #0
    4172:	d0e8      	beq.n	4146 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4174:	2805      	cmp	r0, #5
    4176:	d005      	beq.n	4184 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4178:	2133      	movs	r1, #51	; 0x33
    417a:	2004      	movs	r0, #4
    417c:	f7ff ff86 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4180:	212b      	movs	r1, #43	; 0x2b
    4182:	e7fa      	b.n	417a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4186:	0000      	.short	0x0000
    4188:	20000074 	.word	0x20000074

0000418c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    418c:	b570      	push	{r4, r5, r6, lr}
    418e:	4d17      	ldr	r5, [pc, #92]	; (41ec <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>)
    4190:	4606      	mov	r6, r0
    4192:	7828      	ldrb	r0, [r5, #0]
    4194:	b148      	cbz	r0, 41aa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4196:	78ac      	ldrb	r4, [r5, #2]
    4198:	1c69      	adds	r1, r5, #1
    419a:	1ca4      	adds	r4, r4, #2
    419c:	4622      	mov	r2, r4
    419e:	4630      	mov	r0, r6
    41a0:	f7ff fdea 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    41a4:	2000      	movs	r0, #0
    41a6:	7028      	strb	r0, [r5, #0]
    41a8:	e012      	b.n	41d0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x44>
    41aa:	4811      	ldr	r0, [pc, #68]	; (41f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    41ac:	f008 fdaa 	bl	cd04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    41b0:	2800      	cmp	r0, #0
    41b2:	d01a      	beq.n	41ea <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    41b4:	210a      	movs	r1, #10
    41b6:	203e      	movs	r0, #62	; 0x3e
    41b8:	f000 f81c 	bl	41f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    41bc:	b918      	cbnz	r0, 41c6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    41be:	480c      	ldr	r0, [pc, #48]	; (41f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    41c0:	7800      	ldrb	r0, [r0, #0]
    41c2:	2814      	cmp	r0, #20
    41c4:	d00b      	beq.n	41de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x52>
    41c6:	490a      	ldr	r1, [pc, #40]	; (41f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    41c8:	4630      	mov	r0, r6
    41ca:	f00a ffdc 	bl	f186 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    41ce:	4604      	mov	r4, r0
    41d0:	b154      	cbz	r4, 41e8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5c>
    41d2:	78b1      	ldrb	r1, [r6, #2]
    41d4:	7830      	ldrb	r0, [r6, #0]
    41d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41da:	f000 b80b 	b.w	41f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    41de:	4904      	ldr	r1, [pc, #16]	; (41f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    41e0:	4630      	mov	r0, r6
    41e2:	f00b fa0d 	bl	f600 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    41e6:	e7f2      	b.n	41ce <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    41e8:	2000      	movs	r0, #0
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	200010dc 	.word	0x200010dc
    41f0:	20000fbc 	.word	0x20000fbc
    41f4:	b570      	push	{r4, r5, r6, lr}
    41f6:	460c      	mov	r4, r1
    41f8:	4605      	mov	r5, r0
    41fa:	f000 f84b 	bl	4294 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    41fe:	2800      	cmp	r0, #0
    4200:	d002      	beq.n	4208 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    4202:	2d3e      	cmp	r5, #62	; 0x3e
    4204:	d001      	beq.n	420a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7e>
    4206:	2001      	movs	r0, #1
    4208:	bd70      	pop	{r4, r5, r6, pc}
    420a:	2c12      	cmp	r4, #18
    420c:	d106      	bne.n	421c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    420e:	4806      	ldr	r0, [pc, #24]	; (4228 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x9c>)
    4210:	7801      	ldrb	r1, [r0, #0]
    4212:	2902      	cmp	r1, #2
    4214:	d002      	beq.n	421c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    4216:	7840      	ldrb	r0, [r0, #1]
    4218:	2800      	cmp	r0, #0
    421a:	d0f5      	beq.n	4208 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    421c:	4620      	mov	r0, r4
    421e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4222:	f000 b853 	b.w	42cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    4226:	0000      	.short	0x0000
    4228:	200003a6 	.word	0x200003a6

0000422c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    422c:	4901      	ldr	r1, [pc, #4]	; (4234 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    422e:	7048      	strb	r0, [r1, #1]
    4230:	4770      	bx	lr
    4232:	0000      	.short	0x0000
    4234:	200003a6 	.word	0x200003a6
    4238:	b570      	push	{r4, r5, r6, lr}
    423a:	780a      	ldrb	r2, [r1, #0]
    423c:	7082      	strb	r2, [r0, #2]
    423e:	b33a      	cbz	r2, 4290 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4240:	2a01      	cmp	r2, #1
    4242:	d825      	bhi.n	4290 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    4244:	2313      	movs	r3, #19
    4246:	7003      	strb	r3, [r0, #0]
    4248:	2300      	movs	r3, #0
    424a:	e00a      	b.n	4262 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    424c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4250:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4254:	78a6      	ldrb	r6, [r4, #2]
    4256:	70ee      	strb	r6, [r5, #3]
    4258:	8864      	ldrh	r4, [r4, #2]
    425a:	0a24      	lsrs	r4, r4, #8
    425c:	1c5b      	adds	r3, r3, #1
    425e:	712c      	strb	r4, [r5, #4]
    4260:	b2db      	uxtb	r3, r3
    4262:	4293      	cmp	r3, r2
    4264:	d3f2      	bcc.n	424c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    4266:	2300      	movs	r3, #0
    4268:	e00b      	b.n	4282 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    426a:	bf00      	nop
    426c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4270:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4274:	792e      	ldrb	r6, [r5, #4]
    4276:	7166      	strb	r6, [r4, #5]
    4278:	88ad      	ldrh	r5, [r5, #4]
    427a:	0a2d      	lsrs	r5, r5, #8
    427c:	1c5b      	adds	r3, r3, #1
    427e:	71a5      	strb	r5, [r4, #6]
    4280:	b2db      	uxtb	r3, r3
    4282:	4293      	cmp	r3, r2
    4284:	d3f2      	bcc.n	426c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    4286:	2101      	movs	r1, #1
    4288:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    428c:	b2c0      	uxtb	r0, r0
    428e:	bd70      	pop	{r4, r5, r6, pc}
    4290:	2000      	movs	r0, #0
    4292:	bd70      	pop	{r4, r5, r6, pc}

00004294 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4294:	2101      	movs	r1, #1
    4296:	4a0c      	ldr	r2, [pc, #48]	; (42c8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4298:	2840      	cmp	r0, #64	; 0x40
    429a:	d20c      	bcs.n	42b6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    429c:	2820      	cmp	r0, #32
    429e:	d803      	bhi.n	42a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    42a0:	1e40      	subs	r0, r0, #1
    42a2:	4081      	lsls	r1, r0
    42a4:	6810      	ldr	r0, [r2, #0]
    42a6:	e002      	b.n	42ae <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    42a8:	3821      	subs	r0, #33	; 0x21
    42aa:	4081      	lsls	r1, r0
    42ac:	6850      	ldr	r0, [r2, #4]
    42ae:	4201      	tst	r1, r0
    42b0:	d107      	bne.n	42c2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    42b2:	2000      	movs	r0, #0
    42b4:	4770      	bx	lr
    42b6:	28ff      	cmp	r0, #255	; 0xff
    42b8:	d003      	beq.n	42c2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    42ba:	3840      	subs	r0, #64	; 0x40
    42bc:	4081      	lsls	r1, r0
    42be:	6890      	ldr	r0, [r2, #8]
    42c0:	e7f5      	b.n	42ae <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    42c2:	2001      	movs	r0, #1
    42c4:	4770      	bx	lr
    42c6:	0000      	.short	0x0000
    42c8:	20000078 	.word	0x20000078

000042cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    42cc:	2101      	movs	r1, #1
    42ce:	1e40      	subs	r0, r0, #1
    42d0:	4081      	lsls	r1, r0
    42d2:	4804      	ldr	r0, [pc, #16]	; (42e4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    42d4:	68c0      	ldr	r0, [r0, #12]
    42d6:	4201      	tst	r1, r0
    42d8:	d001      	beq.n	42de <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    42da:	2001      	movs	r0, #1
    42dc:	4770      	bx	lr
    42de:	2000      	movs	r0, #0
    42e0:	4770      	bx	lr
    42e2:	0000      	.short	0x0000
    42e4:	20000078 	.word	0x20000078

000042e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    42e8:	4901      	ldr	r1, [pc, #4]	; (42f0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    42ea:	6800      	ldr	r0, [r0, #0]
    42ec:	60c8      	str	r0, [r1, #12]
    42ee:	4770      	bx	lr
    42f0:	20000078 	.word	0x20000078

000042f4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    42f4:	4904      	ldr	r1, [pc, #16]	; (4308 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    42f6:	6802      	ldr	r2, [r0, #0]
    42f8:	6840      	ldr	r0, [r0, #4]
    42fa:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    42fe:	600a      	str	r2, [r1, #0]
    4300:	4a02      	ldr	r2, [pc, #8]	; (430c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4302:	4310      	orrs	r0, r2
    4304:	6048      	str	r0, [r1, #4]
    4306:	4770      	bx	lr
    4308:	20000078 	.word	0x20000078
    430c:	024007f8 	.word	0x024007f8

00004310 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4310:	4901      	ldr	r1, [pc, #4]	; (4318 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4312:	6800      	ldr	r0, [r0, #0]
    4314:	6088      	str	r0, [r1, #8]
    4316:	4770      	bx	lr
    4318:	20000078 	.word	0x20000078

0000431c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    431c:	4805      	ldr	r0, [pc, #20]	; (4334 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    431e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4322:	6001      	str	r1, [r0, #0]
    4324:	0cc9      	lsrs	r1, r1, #19
    4326:	6041      	str	r1, [r0, #4]
    4328:	2100      	movs	r1, #0
    432a:	6081      	str	r1, [r0, #8]
    432c:	211f      	movs	r1, #31
    432e:	60c1      	str	r1, [r0, #12]
    4330:	4770      	bx	lr
    4332:	0000      	.short	0x0000
    4334:	20000078 	.word	0x20000078

00004338 <sdc_hci_cmd_cb_reset>:
    4338:	b510      	push	{r4, lr}
    433a:	f7ff ffef 	bl	431c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    433e:	2000      	movs	r0, #0
    4340:	f7ff ff74 	bl	422c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    4344:	f00d fc03 	bl	11b4e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4348:	4604      	mov	r4, r0
    434a:	4803      	ldr	r0, [pc, #12]	; (4358 <sdc_hci_cmd_cb_reset+0x20>)
    434c:	6800      	ldr	r0, [r0, #0]
    434e:	b100      	cbz	r0, 4352 <sdc_hci_cmd_cb_reset+0x1a>
    4350:	4780      	blx	r0
    4352:	4620      	mov	r0, r4
    4354:	bd10      	pop	{r4, pc}
    4356:	0000      	.short	0x0000
    4358:	20000088 	.word	0x20000088

0000435c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    435c:	4901      	ldr	r1, [pc, #4]	; (4364 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    435e:	6008      	str	r0, [r1, #0]
    4360:	4770      	bx	lr
    4362:	0000      	.short	0x0000
    4364:	20000088 	.word	0x20000088

00004368 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4368:	2102      	movs	r1, #2
    436a:	8001      	strh	r1, [r0, #0]
    436c:	8041      	strh	r1, [r0, #2]
    436e:	2100      	movs	r1, #0
    4370:	7101      	strb	r1, [r0, #4]
    4372:	21d4      	movs	r1, #212	; 0xd4
    4374:	7141      	strb	r1, [r0, #5]
    4376:	f24b 5143 	movw	r1, #46403	; 0xb543
    437a:	80c1      	strh	r1, [r0, #6]
    437c:	4901      	ldr	r1, [pc, #4]	; (4384 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    437e:	6081      	str	r1, [r0, #8]
    4380:	2000      	movs	r0, #0
    4382:	4770      	bx	lr
    4384:	e92263cf 	.word	0xe92263cf

00004388 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    4388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    438c:	4607      	mov	r7, r0
    438e:	b111      	cbz	r1, 4396 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    4390:	2000      	movs	r0, #0
    4392:	b960      	cbnz	r0, 43ae <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    4394:	e001      	b.n	439a <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    4396:	2001      	movs	r0, #1
    4398:	e7fb      	b.n	4392 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    439a:	2901      	cmp	r1, #1
    439c:	d007      	beq.n	43ae <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    439e:	2000      	movs	r0, #0
    43a0:	2800      	cmp	r0, #0
    43a2:	d01f      	beq.n	43e4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    43a4:	2400      	movs	r4, #0
    43a6:	4812      	ldr	r0, [pc, #72]	; (43f0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    43a8:	2901      	cmp	r1, #1
    43aa:	d002      	beq.n	43b2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    43ac:	e002      	b.n	43b4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    43ae:	2001      	movs	r0, #1
    43b0:	e7f6      	b.n	43a0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    43b2:	7804      	ldrb	r4, [r0, #0]
    43b4:	2300      	movs	r3, #0
    43b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    43ba:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    43be:	f810 e001 	ldrb.w	lr, [r0, r1]
    43c2:	e008      	b.n	43d6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    43c4:	1918      	adds	r0, r3, r4
    43c6:	f8dc 500c 	ldr.w	r5, [ip, #12]
    43ca:	b280      	uxth	r0, r0
    43cc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    43d0:	b125      	cbz	r5, 43dc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    43d2:	1c5b      	adds	r3, r3, #1
    43d4:	b29b      	uxth	r3, r3
    43d6:	459e      	cmp	lr, r3
    43d8:	d8f4      	bhi.n	43c4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    43da:	4630      	mov	r0, r6
    43dc:	8038      	strh	r0, [r7, #0]
    43de:	42b0      	cmp	r0, r6
    43e0:	d102      	bne.n	43e8 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    43e2:	2000      	movs	r0, #0
    43e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43ec:	f000 b8b4 	b.w	4558 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    43f0:	200011e0 	.word	0x200011e0

000043f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    43f4:	b510      	push	{r4, lr}
    43f6:	2802      	cmp	r0, #2
    43f8:	d304      	bcc.n	4404 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    43fa:	f240 1153 	movw	r1, #339	; 0x153
    43fe:	2017      	movs	r0, #23
    4400:	f7ff fe44 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4404:	4901      	ldr	r1, [pc, #4]	; (440c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4406:	5c08      	ldrb	r0, [r1, r0]
    4408:	bd10      	pop	{r4, pc}
    440a:	0000      	.short	0x0000
    440c:	200011e0 	.word	0x200011e0

00004410 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4412:	4605      	mov	r5, r0
    4414:	18c8      	adds	r0, r1, r3
    4416:	28ff      	cmp	r0, #255	; 0xff
    4418:	d902      	bls.n	4420 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    441a:	f240 1121 	movw	r1, #289	; 0x121
    441e:	e00f      	b.n	4440 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    4420:	429a      	cmp	r2, r3
    4422:	d902      	bls.n	442a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    4424:	f44f 7191 	mov.w	r1, #290	; 0x122
    4428:	e00a      	b.n	4440 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    442a:	b2c4      	uxtb	r4, r0
    442c:	9500      	str	r5, [sp, #0]
    442e:	b155      	cbz	r5, 4446 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    4430:	2600      	movs	r6, #0
    4432:	1ce8      	adds	r0, r5, #3
    4434:	f020 0003 	bic.w	r0, r0, #3
    4438:	42a8      	cmp	r0, r5
    443a:	d006      	beq.n	444a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    443c:	f44f 7194 	mov.w	r1, #296	; 0x128
    4440:	2017      	movs	r0, #23
    4442:	f7ff fe23 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4446:	2601      	movs	r6, #1
    4448:	e7f3      	b.n	4432 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    444a:	4f12      	ldr	r7, [pc, #72]	; (4494 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    444c:	4668      	mov	r0, sp
    444e:	703b      	strb	r3, [r7, #0]
    4450:	7079      	strb	r1, [r7, #1]
    4452:	4631      	mov	r1, r6
    4454:	f000 f8c6 	bl	45e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4458:	2100      	movs	r1, #0
    445a:	468c      	mov	ip, r1
    445c:	9800      	ldr	r0, [sp, #0]
    445e:	1cc0      	adds	r0, r0, #3
    4460:	f020 0003 	bic.w	r0, r0, #3
    4464:	9000      	str	r0, [sp, #0]
    4466:	b95e      	cbnz	r6, 4480 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    4468:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    446c:	60d8      	str	r0, [r3, #12]
    446e:	2000      	movs	r0, #0
    4470:	e004      	b.n	447c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    4472:	68da      	ldr	r2, [r3, #12]
    4474:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    4478:	1c40      	adds	r0, r0, #1
    447a:	b2c0      	uxtb	r0, r0
    447c:	42a0      	cmp	r0, r4
    447e:	d3f8      	bcc.n	4472 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    4480:	9800      	ldr	r0, [sp, #0]
    4482:	1c49      	adds	r1, r1, #1
    4484:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4488:	b2c9      	uxtb	r1, r1
    448a:	9000      	str	r0, [sp, #0]
    448c:	2902      	cmp	r1, #2
    448e:	d3e5      	bcc.n	445c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    4490:	1b40      	subs	r0, r0, r5
    4492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4494:	200011e0 	.word	0x200011e0

00004498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4498:	b570      	push	{r4, r5, r6, lr}
    449a:	4604      	mov	r4, r0
    449c:	f00b fed6 	bl	1024c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    44a0:	b108      	cbz	r0, 44a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    44a2:	2010      	movs	r0, #16
    44a4:	bd70      	pop	{r4, r5, r6, pc}
    44a6:	7825      	ldrb	r5, [r4, #0]
    44a8:	f000 f84e 	bl	4548 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    44ac:	4602      	mov	r2, r0
    44ae:	480c      	ldr	r0, [pc, #48]	; (44e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    44b0:	8861      	ldrh	r1, [r4, #2]
    44b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    44b6:	e00e      	b.n	44d6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    44b8:	68c3      	ldr	r3, [r0, #12]
    44ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    44be:	b143      	cbz	r3, 44d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    44c0:	1c4a      	adds	r2, r1, #1
    44c2:	8062      	strh	r2, [r4, #2]
    44c4:	80a1      	strh	r1, [r4, #4]
    44c6:	68c0      	ldr	r0, [r0, #12]
    44c8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    44cc:	60a0      	str	r0, [r4, #8]
    44ce:	2000      	movs	r0, #0
    44d0:	bd70      	pop	{r4, r5, r6, pc}
    44d2:	1c49      	adds	r1, r1, #1
    44d4:	b289      	uxth	r1, r1
    44d6:	4291      	cmp	r1, r2
    44d8:	d3ee      	bcc.n	44b8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    44da:	8061      	strh	r1, [r4, #2]
    44dc:	2005      	movs	r0, #5
    44de:	bd70      	pop	{r4, r5, r6, pc}
    44e0:	200011e0 	.word	0x200011e0

000044e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e8:	4607      	mov	r7, r0
    44ea:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    44ee:	460c      	mov	r4, r1
    44f0:	f243 0602 	movw	r6, #12290	; 0x3002
    44f4:	38ff      	subs	r0, #255	; 0xff
    44f6:	d020      	beq.n	453a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    44f8:	2c02      	cmp	r4, #2
    44fa:	d302      	bcc.n	4502 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    44fc:	2007      	movs	r0, #7
    44fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4502:	4638      	mov	r0, r7
    4504:	f000 f85e 	bl	45c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4508:	0005      	movs	r5, r0
    450a:	d016      	beq.n	453a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    450c:	480c      	ldr	r0, [pc, #48]	; (4540 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    450e:	4629      	mov	r1, r5
    4510:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4514:	4638      	mov	r0, r7
    4516:	4790      	blx	r2
    4518:	480a      	ldr	r0, [pc, #40]	; (4544 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    451a:	2100      	movs	r1, #0
    451c:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    4520:	68f0      	ldr	r0, [r6, #12]
    4522:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    4526:	4620      	mov	r0, r4
    4528:	f000 f88e 	bl	4648 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    452c:	4602      	mov	r2, r0
    452e:	4629      	mov	r1, r5
    4530:	6870      	ldr	r0, [r6, #4]
    4532:	f00b fdc3 	bl	100bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4536:	2000      	movs	r0, #0
    4538:	e7e1      	b.n	44fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    453a:	4630      	mov	r0, r6
    453c:	e7df      	b.n	44fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    453e:	0000      	.short	0x0000
    4540:	00004668 	.word	0x00004668
    4544:	200011e0 	.word	0x200011e0
    4548:	4902      	ldr	r1, [pc, #8]	; (4554 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    454a:	7808      	ldrb	r0, [r1, #0]
    454c:	7849      	ldrb	r1, [r1, #1]
    454e:	4408      	add	r0, r1
    4550:	b2c0      	uxtb	r0, r0
    4552:	4770      	bx	lr
    4554:	200011e0 	.word	0x200011e0
    4558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    455c:	4690      	mov	r8, r2
    455e:	460e      	mov	r6, r1
    4560:	4607      	mov	r7, r0
    4562:	f00b fde5 	bl	10130 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4566:	b140      	cbz	r0, 457a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    4568:	4814      	ldr	r0, [pc, #80]	; (45bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    456a:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    456e:	68e0      	ldr	r0, [r4, #12]
    4570:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4574:	b118      	cbz	r0, 457e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    4576:	21f4      	movs	r1, #244	; 0xf4
    4578:	e013      	b.n	45a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    457a:	21f3      	movs	r1, #243	; 0xf3
    457c:	e011      	b.n	45a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    457e:	6860      	ldr	r0, [r4, #4]
    4580:	2800      	cmp	r0, #0
    4582:	d019      	beq.n	45b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    4584:	4630      	mov	r0, r6
    4586:	f000 f85f 	bl	4648 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    458a:	4601      	mov	r1, r0
    458c:	6860      	ldr	r0, [r4, #4]
    458e:	f00b fd47 	bl	10020 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4592:	0005      	movs	r5, r0
    4594:	d00f      	beq.n	45b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    4596:	68e0      	ldr	r0, [r4, #12]
    4598:	2e02      	cmp	r6, #2
    459a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    459e:	d303      	bcc.n	45a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    45a0:	21ff      	movs	r1, #255	; 0xff
    45a2:	2017      	movs	r0, #23
    45a4:	f7ff fd72 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45a8:	4805      	ldr	r0, [pc, #20]	; (45c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    45aa:	4642      	mov	r2, r8
    45ac:	4629      	mov	r1, r5
    45ae:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    45b2:	4638      	mov	r0, r7
    45b4:	4798      	blx	r3
    45b6:	4628      	mov	r0, r5
    45b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45bc:	200011e0 	.word	0x200011e0
    45c0:	00004660 	.word	0x00004660
    45c4:	b570      	push	{r4, r5, r6, lr}
    45c6:	460c      	mov	r4, r1
    45c8:	4605      	mov	r5, r0
    45ca:	f00b fdb1 	bl	10130 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    45ce:	2800      	cmp	r0, #0
    45d0:	d005      	beq.n	45de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    45d2:	4803      	ldr	r0, [pc, #12]	; (45e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    45d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    45d8:	68c0      	ldr	r0, [r0, #12]
    45da:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    45de:	bd70      	pop	{r4, r5, r6, pc}
    45e0:	200011e0 	.word	0x200011e0
    45e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45e8:	4f16      	ldr	r7, [pc, #88]	; (4644 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    45ea:	4688      	mov	r8, r1
    45ec:	4605      	mov	r5, r0
    45ee:	2400      	movs	r4, #0
    45f0:	6828      	ldr	r0, [r5, #0]
    45f2:	1cc0      	adds	r0, r0, #3
    45f4:	f020 0003 	bic.w	r0, r0, #3
    45f8:	6028      	str	r0, [r5, #0]
    45fa:	4620      	mov	r0, r4
    45fc:	f000 f824 	bl	4648 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4600:	5d39      	ldrb	r1, [r7, r4]
    4602:	4341      	muls	r1, r0
    4604:	f1b8 0f00 	cmp.w	r8, #0
    4608:	d001      	beq.n	460e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    460a:	2000      	movs	r0, #0
    460c:	e000      	b.n	4610 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    460e:	6828      	ldr	r0, [r5, #0]
    4610:	9000      	str	r0, [sp, #0]
    4612:	b118      	cbz	r0, 461c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4614:	2600      	movs	r6, #0
    4616:	b11e      	cbz	r6, 4620 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    4618:	2000      	movs	r0, #0
    461a:	e002      	b.n	4622 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    461c:	2601      	movs	r6, #1
    461e:	e7fa      	b.n	4616 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4620:	4668      	mov	r0, sp
    4622:	f00b fd2a 	bl	1007a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4626:	b91e      	cbnz	r6, 4630 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4628:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    462c:	9a00      	ldr	r2, [sp, #0]
    462e:	604a      	str	r2, [r1, #4]
    4630:	6829      	ldr	r1, [r5, #0]
    4632:	1c64      	adds	r4, r4, #1
    4634:	4408      	add	r0, r1
    4636:	b2e4      	uxtb	r4, r4
    4638:	6028      	str	r0, [r5, #0]
    463a:	2c02      	cmp	r4, #2
    463c:	d3d8      	bcc.n	45f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    463e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4642:	0000      	.short	0x0000
    4644:	200011e0 	.word	0x200011e0
    4648:	4903      	ldr	r1, [pc, #12]	; (4658 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    464a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    464e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4652:	1cc0      	adds	r0, r0, #3
    4654:	4008      	ands	r0, r1
    4656:	4770      	bx	lr
    4658:	0000465c 	.word	0x0000465c
    465c:	02280190 	.word	0x02280190
    4660:	00011407 	.word	0x00011407
    4664:	000111d7 	.word	0x000111d7
    4668:	0001143d 	.word	0x0001143d
    466c:	000111ed 	.word	0x000111ed

00004670 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4670:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4674:	4c26      	ldr	r4, [pc, #152]	; (4710 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4676:	4680      	mov	r8, r0
    4678:	b081      	sub	sp, #4
    467a:	6820      	ldr	r0, [r4, #0]
    467c:	469a      	mov	sl, r3
    467e:	4693      	mov	fp, r2
    4680:	b158      	cbz	r0, 469a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4682:	7a02      	ldrb	r2, [r0, #8]
    4684:	4542      	cmp	r2, r8
    4686:	d903      	bls.n	4690 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4688:	6841      	ldr	r1, [r0, #4]
    468a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    468e:	b140      	cbz	r0, 46a2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4690:	f243 0002 	movw	r0, #12290	; 0x3002
    4694:	b005      	add	sp, #20
    4696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    469a:	21a5      	movs	r1, #165	; 0xa5
    469c:	2018      	movs	r0, #24
    469e:	f7ff fcf5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a2:	4619      	mov	r1, r3
    46a4:	9802      	ldr	r0, [sp, #8]
    46a6:	f00b fd64 	bl	10172 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    46aa:	b287      	uxth	r7, r0
    46ac:	4658      	mov	r0, fp
    46ae:	990e      	ldr	r1, [sp, #56]	; 0x38
    46b0:	f00b fd56 	bl	10160 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    46b4:	b286      	uxth	r6, r0
    46b6:	19b8      	adds	r0, r7, r6
    46b8:	1d00      	adds	r0, r0, #4
    46ba:	b285      	uxth	r5, r0
    46bc:	6820      	ldr	r0, [r4, #0]
    46be:	46a1      	mov	r9, r4
    46c0:	4629      	mov	r1, r5
    46c2:	6800      	ldr	r0, [r0, #0]
    46c4:	f00b fcac 	bl	10020 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    46c8:	0004      	movs	r4, r0
    46ca:	d01f      	beq.n	470c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    46cc:	8065      	strh	r5, [r4, #2]
    46ce:	8026      	strh	r6, [r4, #0]
    46d0:	980e      	ldr	r0, [sp, #56]	; 0x38
    46d2:	1d25      	adds	r5, r4, #4
    46d4:	9000      	str	r0, [sp, #0]
    46d6:	4631      	mov	r1, r6
    46d8:	465a      	mov	r2, fp
    46da:	2301      	movs	r3, #1
    46dc:	4628      	mov	r0, r5
    46de:	f00b fbda 	bl	fe96 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    46e2:	8820      	ldrh	r0, [r4, #0]
    46e4:	4639      	mov	r1, r7
    46e6:	4428      	add	r0, r5
    46e8:	2301      	movs	r3, #1
    46ea:	9a02      	ldr	r2, [sp, #8]
    46ec:	f8cd a000 	str.w	sl, [sp]
    46f0:	f00b fbd1 	bl	fe96 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    46f4:	8820      	ldrh	r0, [r4, #0]
    46f6:	1941      	adds	r1, r0, r5
    46f8:	4628      	mov	r0, r5
    46fa:	f00b fc02 	bl	ff02 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    46fe:	f8d9 0000 	ldr.w	r0, [r9]
    4702:	6841      	ldr	r1, [r0, #4]
    4704:	2000      	movs	r0, #0
    4706:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    470a:	e7c3      	b.n	4694 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    470c:	2004      	movs	r0, #4
    470e:	e7c1      	b.n	4694 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4710:	2000008c 	.word	0x2000008c

00004714 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4714:	b570      	push	{r4, r5, r6, lr}
    4716:	4c14      	ldr	r4, [pc, #80]	; (4768 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4718:	6823      	ldr	r3, [r4, #0]
    471a:	b18b      	cbz	r3, 4740 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    471c:	7a19      	ldrb	r1, [r3, #8]
    471e:	4281      	cmp	r1, r0
    4720:	d912      	bls.n	4748 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4722:	685a      	ldr	r2, [r3, #4]
    4724:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4728:	b171      	cbz	r1, 4748 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    472a:	2500      	movs	r5, #0
    472c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4730:	884a      	ldrh	r2, [r1, #2]
    4732:	6818      	ldr	r0, [r3, #0]
    4734:	f00b fcc2 	bl	100bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4738:	6821      	ldr	r1, [r4, #0]
    473a:	2000      	movs	r0, #0
    473c:	7a0a      	ldrb	r2, [r1, #8]
    473e:	e00c      	b.n	475a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4740:	21c8      	movs	r1, #200	; 0xc8
    4742:	2018      	movs	r0, #24
    4744:	f7ff fca2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4748:	f243 0002 	movw	r0, #12290	; 0x3002
    474c:	bd70      	pop	{r4, r5, r6, pc}
    474e:	684b      	ldr	r3, [r1, #4]
    4750:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4754:	b933      	cbnz	r3, 4764 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4756:	1c40      	adds	r0, r0, #1
    4758:	b2c0      	uxtb	r0, r0
    475a:	4282      	cmp	r2, r0
    475c:	d8f7      	bhi.n	474e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    475e:	6808      	ldr	r0, [r1, #0]
    4760:	f00b fca1 	bl	100a6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4764:	2000      	movs	r0, #0
    4766:	bd70      	pop	{r4, r5, r6, pc}
    4768:	2000008c 	.word	0x2000008c

0000476c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4770:	460d      	mov	r5, r1
    4772:	0004      	movs	r4, r0
    4774:	4690      	mov	r8, r2
    4776:	f04f 0600 	mov.w	r6, #0
    477a:	d009      	beq.n	4790 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    477c:	2700      	movs	r7, #0
    477e:	1ce0      	adds	r0, r4, #3
    4780:	f020 0003 	bic.w	r0, r0, #3
    4784:	42a0      	cmp	r0, r4
    4786:	d005      	beq.n	4794 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4788:	2186      	movs	r1, #134	; 0x86
    478a:	2018      	movs	r0, #24
    478c:	f7ff fc7e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4790:	2701      	movs	r7, #1
    4792:	e7f4      	b.n	477e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4794:	b1cd      	cbz	r5, 47ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4796:	4611      	mov	r1, r2
    4798:	2000      	movs	r0, #0
    479a:	f00b fc6e 	bl	1007a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    479e:	300c      	adds	r0, #12
    47a0:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    47a4:	b98f      	cbnz	r7, 47ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    47a6:	4f0a      	ldr	r7, [pc, #40]	; (47d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    47a8:	f104 000c 	add.w	r0, r4, #12
    47ac:	00aa      	lsls	r2, r5, #2
    47ae:	603c      	str	r4, [r7, #0]
    47b0:	7225      	strb	r5, [r4, #8]
    47b2:	6060      	str	r0, [r4, #4]
    47b4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    47b8:	6020      	str	r0, [r4, #0]
    47ba:	2100      	movs	r1, #0
    47bc:	6860      	ldr	r0, [r4, #4]
    47be:	f00a fbb7 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47c2:	4641      	mov	r1, r8
    47c4:	6838      	ldr	r0, [r7, #0]
    47c6:	f00b fc58 	bl	1007a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    47ca:	4630      	mov	r0, r6
    47cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47d0:	2000008c 	.word	0x2000008c

000047d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    47d4:	b570      	push	{r4, r5, r6, lr}
    47d6:	4d08      	ldr	r5, [pc, #32]	; (47f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    47d8:	6828      	ldr	r0, [r5, #0]
    47da:	2800      	cmp	r0, #0
    47dc:	d00a      	beq.n	47f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    47de:	2400      	movs	r4, #0
    47e0:	e004      	b.n	47ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    47e2:	4620      	mov	r0, r4
    47e4:	f7ff ff96 	bl	4714 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    47e8:	1c64      	adds	r4, r4, #1
    47ea:	b2e4      	uxtb	r4, r4
    47ec:	6828      	ldr	r0, [r5, #0]
    47ee:	7a00      	ldrb	r0, [r0, #8]
    47f0:	42a0      	cmp	r0, r4
    47f2:	d8f6      	bhi.n	47e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    47f4:	bd70      	pop	{r4, r5, r6, pc}
    47f6:	0000      	.short	0x0000
    47f8:	2000008c 	.word	0x2000008c

000047fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    47fc:	4909      	ldr	r1, [pc, #36]	; (4824 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    47fe:	b510      	push	{r4, lr}
    4800:	4602      	mov	r2, r0
    4802:	6809      	ldr	r1, [r1, #0]
    4804:	2000      	movs	r0, #0
    4806:	b149      	cbz	r1, 481c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4808:	7a0b      	ldrb	r3, [r1, #8]
    480a:	4293      	cmp	r3, r2
    480c:	d905      	bls.n	481a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    480e:	6849      	ldr	r1, [r1, #4]
    4810:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4814:	2900      	cmp	r1, #0
    4816:	d000      	beq.n	481a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4818:	1d08      	adds	r0, r1, #4
    481a:	bd10      	pop	{r4, pc}
    481c:	21ee      	movs	r1, #238	; 0xee
    481e:	2018      	movs	r0, #24
    4820:	f7ff fc34 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4824:	2000008c 	.word	0x2000008c

00004828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4828:	490a      	ldr	r1, [pc, #40]	; (4854 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    482a:	b510      	push	{r4, lr}
    482c:	4602      	mov	r2, r0
    482e:	6809      	ldr	r1, [r1, #0]
    4830:	2000      	movs	r0, #0
    4832:	b159      	cbz	r1, 484c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4834:	7a0b      	ldrb	r3, [r1, #8]
    4836:	4293      	cmp	r3, r2
    4838:	d907      	bls.n	484a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    483a:	6849      	ldr	r1, [r1, #4]
    483c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4840:	2900      	cmp	r1, #0
    4842:	d002      	beq.n	484a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4844:	f831 0b04 	ldrh.w	r0, [r1], #4
    4848:	4408      	add	r0, r1
    484a:	bd10      	pop	{r4, pc}
    484c:	21fc      	movs	r1, #252	; 0xfc
    484e:	2018      	movs	r0, #24
    4850:	f7ff fc1c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4854:	2000008c 	.word	0x2000008c
    4858:	4909      	ldr	r1, [pc, #36]	; (4880 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    485a:	b510      	push	{r4, lr}
    485c:	4807      	ldr	r0, [pc, #28]	; (487c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    485e:	6008      	str	r0, [r1, #0]
    4860:	4b08      	ldr	r3, [pc, #32]	; (4884 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    4862:	2011      	movs	r0, #17
    4864:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4868:	2200      	movs	r2, #0
    486a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    486e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4872:	1c40      	adds	r0, r0, #1
    4874:	b2c0      	uxtb	r0, r0
    4876:	2814      	cmp	r0, #20
    4878:	d3f4      	bcc.n	4864 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    487a:	bd10      	pop	{r4, pc}
    487c:	fffe0000 	.word	0xfffe0000
    4880:	4001f508 	.word	0x4001f508
    4884:	4001f000 	.word	0x4001f000
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	2420      	movs	r4, #32
    488c:	2100      	movs	r1, #0
    488e:	2301      	movs	r3, #1
    4890:	fa20 f201 	lsr.w	r2, r0, r1
    4894:	07d2      	lsls	r2, r2, #31
    4896:	d020      	beq.n	48da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    4898:	b24a      	sxtb	r2, r1
    489a:	2a00      	cmp	r2, #0
    489c:	db10      	blt.n	48c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    489e:	bf00      	nop
    48a0:	ea4f 1652 	mov.w	r6, r2, lsr #5
    48a4:	ea4f 0686 	mov.w	r6, r6, lsl #2
    48a8:	f002 051f 	and.w	r5, r2, #31
    48ac:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    48b0:	fa03 f505 	lsl.w	r5, r3, r5
    48b4:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    48b8:	f3bf 8f4f 	dsb	sy
    48bc:	f3bf 8f6f 	isb	sy
    48c0:	db0b      	blt.n	48da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    48c2:	f002 051f 	and.w	r5, r2, #31
    48c6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    48ca:	ea4f 0282 	mov.w	r2, r2, lsl #2
    48ce:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    48d2:	fa03 f505 	lsl.w	r5, r3, r5
    48d6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    48da:	f101 0101 	add.w	r1, r1, #1
    48de:	42a1      	cmp	r1, r4
    48e0:	d3d6      	bcc.n	4890 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    48e2:	bd70      	pop	{r4, r5, r6, pc}
    48e4:	b570      	push	{r4, r5, r6, lr}
    48e6:	0041      	lsls	r1, r0, #1
    48e8:	f04f 0300 	mov.w	r3, #0
    48ec:	d501      	bpl.n	48f2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    48ee:	491a      	ldr	r1, [pc, #104]	; (4958 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    48f0:	600b      	str	r3, [r1, #0]
    48f2:	0484      	lsls	r4, r0, #18
    48f4:	f04f 0101 	mov.w	r1, #1
    48f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    48fc:	d507      	bpl.n	490e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    48fe:	4c17      	ldr	r4, [pc, #92]	; (495c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    4900:	6061      	str	r1, [r4, #4]
    4902:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    4906:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    490a:	4c15      	ldr	r4, [pc, #84]	; (4960 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    490c:	6023      	str	r3, [r4, #0]
    490e:	f3c0 3480 	ubfx	r4, r0, #14, #1
    4912:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    4916:	42ac      	cmp	r4, r5
    4918:	d003      	beq.n	4922 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    491a:	2172      	movs	r1, #114	; 0x72
    491c:	201b      	movs	r0, #27
    491e:	f7ff fbb5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4922:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4926:	d012      	beq.n	494e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    4928:	480e      	ldr	r0, [pc, #56]	; (4964 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    492a:	6041      	str	r1, [r0, #4]
    492c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4930:	480d      	ldr	r0, [pc, #52]	; (4968 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    4932:	6081      	str	r1, [r0, #8]
    4934:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4938:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    493c:	4c0b      	ldr	r4, [pc, #44]	; (496c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    493e:	6023      	str	r3, [r4, #0]
    4940:	1d25      	adds	r5, r4, #4
    4942:	6029      	str	r1, [r5, #0]
    4944:	6081      	str	r1, [r0, #8]
    4946:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    494a:	6023      	str	r3, [r4, #0]
    494c:	6029      	str	r1, [r5, #0]
    494e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4952:	f7ff bf81 	b.w	4858 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4956:	0000      	.short	0x0000
    4958:	4001e504 	.word	0x4001e504
    495c:	4000d000 	.word	0x4000d000
    4960:	4000d504 	.word	0x4000d504
    4964:	4000e000 	.word	0x4000e000
    4968:	4000f000 	.word	0x4000f000
    496c:	4000f500 	.word	0x4000f500

00004970 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4970:	b570      	push	{r4, r5, r6, lr}
    4972:	4c0b      	ldr	r4, [pc, #44]	; (49a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    4974:	460d      	mov	r5, r1
    4976:	6020      	str	r0, [r4, #0]
    4978:	f7ff ffb4 	bl	48e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    497c:	6820      	ldr	r0, [r4, #0]
    497e:	f7ff ff83 	bl	4888 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    4982:	f000 f879 	bl	4a78 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4986:	f000 f959 	bl	4c3c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    498a:	f7ff ff65 	bl	4858 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    498e:	f00b fc26 	bl	101de <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4992:	4628      	mov	r0, r5
    4994:	f000 f8aa 	bl	4aec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    499c:	f000 b8c2 	b.w	4b24 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    49a0:	20000090 	.word	0x20000090

000049a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    49a4:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    49a8:	4e2f      	ldr	r6, [pc, #188]	; (4a68 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    49aa:	4683      	mov	fp, r0
    49ac:	6830      	ldr	r0, [r6, #0]
    49ae:	9001      	str	r0, [sp, #4]
    49b0:	2701      	movs	r7, #1
    49b2:	482e      	ldr	r0, [pc, #184]	; (4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    49b4:	f00a fa22 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    49b8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    49bc:	b920      	cbnz	r0, 49c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    49be:	2700      	movs	r7, #0
    49c0:	f108 0001 	add.w	r0, r8, #1
    49c4:	f00a fa31 	bl	ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    49c8:	4c29      	ldr	r4, [pc, #164]	; (4a70 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    49ca:	2500      	movs	r5, #0
    49cc:	f04f 0903 	mov.w	r9, #3
    49d0:	2001      	movs	r0, #1
    49d2:	6060      	str	r0, [r4, #4]
    49d4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    49d8:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    49dc:	f8c6 b000 	str.w	fp, [r6]
    49e0:	6020      	str	r0, [r4, #0]
    49e2:	f8df a090 	ldr.w	sl, [pc, #144]	; 4a74 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    49e6:	e017      	b.n	4a18 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    49e8:	f8da 0000 	ldr.w	r0, [sl]
    49ec:	06c0      	lsls	r0, r0, #27
    49ee:	d513      	bpl.n	4a18 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    49f0:	200e      	movs	r0, #14
    49f2:	f00b fbc7 	bl	10184 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    49f6:	f3ef 8010 	mrs	r0, PRIMASK
    49fa:	9000      	str	r0, [sp, #0]
    49fc:	b672      	cpsid	i
    49fe:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    4a02:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4a06:	b920      	cbnz	r0, 4a12 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4a08:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a0c:	b908      	cbnz	r0, 4a12 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4a0e:	f7ff f983 	bl	3d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4a12:	9800      	ldr	r0, [sp, #0]
    4a14:	b900      	cbnz	r0, 4a18 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4a16:	b662      	cpsie	i
    4a18:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4a1c:	b918      	cbnz	r0, 4a26 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4a1e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a22:	2800      	cmp	r0, #0
    4a24:	d0e0      	beq.n	49e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4a26:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4a2a:	2800      	cmp	r0, #0
    4a2c:	d1d0      	bne.n	49d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4a2e:	b137      	cbz	r7, 4a3e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4a30:	9801      	ldr	r0, [sp, #4]
    4a32:	6030      	str	r0, [r6, #0]
    4a34:	f108 0001 	add.w	r0, r8, #1
    4a38:	f00a f9e0 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a3c:	e011      	b.n	4a62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4a3e:	f108 0001 	add.w	r0, r8, #1
    4a42:	f00a f9db 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a46:	2800      	cmp	r0, #0
    4a48:	d1ba      	bne.n	49c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4a4a:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    4a4e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4a52:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4a56:	200e      	movs	r0, #14
    4a58:	f00b fb94 	bl	10184 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4a5c:	4803      	ldr	r0, [pc, #12]	; (4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4a5e:	f00a f9e4 	bl	ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a62:	2000      	movs	r0, #0
    4a64:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4a68:	4000e504 	.word	0x4000e504
    4a6c:	200003a8 	.word	0x200003a8
    4a70:	4000e000 	.word	0x4000e000
    4a74:	e000ed10 	.word	0xe000ed10

00004a78 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4a78:	b510      	push	{r4, lr}
    4a7a:	4808      	ldr	r0, [pc, #32]	; (4a9c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a7c:	f00a f9d1 	bl	ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a80:	b108      	cbz	r0, 4a86 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4a82:	2124      	movs	r1, #36	; 0x24
    4a84:	e006      	b.n	4a94 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4a86:	4805      	ldr	r0, [pc, #20]	; (4a9c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a88:	1c40      	adds	r0, r0, #1
    4a8a:	f00a f9ca 	bl	ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a8e:	2800      	cmp	r0, #0
    4a90:	d003      	beq.n	4a9a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4a92:	2128      	movs	r1, #40	; 0x28
    4a94:	201d      	movs	r0, #29
    4a96:	f7ff faf9 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	200003a8 	.word	0x200003a8

00004aa0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4aa0:	b570      	push	{r4, r5, r6, lr}
    4aa2:	4911      	ldr	r1, [pc, #68]	; (4ae8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4aa4:	680a      	ldr	r2, [r1, #0]
    4aa6:	b1ea      	cbz	r2, 4ae4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4aa8:	2300      	movs	r3, #0
    4aaa:	461d      	mov	r5, r3
    4aac:	2401      	movs	r4, #1
    4aae:	684a      	ldr	r2, [r1, #4]
    4ab0:	1c52      	adds	r2, r2, #1
    4ab2:	604a      	str	r2, [r1, #4]
    4ab4:	2a09      	cmp	r2, #9
    4ab6:	d300      	bcc.n	4aba <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4ab8:	604d      	str	r5, [r1, #4]
    4aba:	790e      	ldrb	r6, [r1, #4]
    4abc:	fa04 f206 	lsl.w	r2, r4, r6
    4ac0:	680e      	ldr	r6, [r1, #0]
    4ac2:	4216      	tst	r6, r2
    4ac4:	d00b      	beq.n	4ade <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4ac6:	f3ef 8310 	mrs	r3, PRIMASK
    4aca:	b672      	cpsid	i
    4acc:	680c      	ldr	r4, [r1, #0]
    4ace:	4394      	bics	r4, r2
    4ad0:	600c      	str	r4, [r1, #0]
    4ad2:	b903      	cbnz	r3, 4ad6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4ad4:	b662      	cpsie	i
    4ad6:	6849      	ldr	r1, [r1, #4]
    4ad8:	6001      	str	r1, [r0, #0]
    4ada:	2000      	movs	r0, #0
    4adc:	bd70      	pop	{r4, r5, r6, pc}
    4ade:	1c5b      	adds	r3, r3, #1
    4ae0:	2b09      	cmp	r3, #9
    4ae2:	d3e4      	bcc.n	4aae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4ae4:	2005      	movs	r0, #5
    4ae6:	bd70      	pop	{r4, r5, r6, pc}
    4ae8:	20000094 	.word	0x20000094

00004aec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4aec:	4802      	ldr	r0, [pc, #8]	; (4af8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4aee:	2100      	movs	r1, #0
    4af0:	6001      	str	r1, [r0, #0]
    4af2:	6041      	str	r1, [r0, #4]
    4af4:	4770      	bx	lr
    4af6:	0000      	.short	0x0000
    4af8:	20000094 	.word	0x20000094

00004afc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4afc:	b510      	push	{r4, lr}
    4afe:	4c08      	ldr	r4, [pc, #32]	; (4b20 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4b00:	7861      	ldrb	r1, [r4, #1]
    4b02:	b109      	cbz	r1, 4b08 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4b04:	200f      	movs	r0, #15
    4b06:	bd10      	pop	{r4, pc}
    4b08:	f7ff f896 	bl	3c38 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b0c:	7020      	strb	r0, [r4, #0]
    4b0e:	28ff      	cmp	r0, #255	; 0xff
    4b10:	d001      	beq.n	4b16 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4b12:	2000      	movs	r0, #0
    4b14:	bd10      	pop	{r4, pc}
    4b16:	2172      	movs	r1, #114	; 0x72
    4b18:	201f      	movs	r0, #31
    4b1a:	f7ff fab7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b1e:	0000      	.short	0x0000
    4b20:	2000009c 	.word	0x2000009c

00004b24 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4b24:	4901      	ldr	r1, [pc, #4]	; (4b2c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4b26:	2000      	movs	r0, #0
    4b28:	7048      	strb	r0, [r1, #1]
    4b2a:	4770      	bx	lr
    4b2c:	2000009c 	.word	0x2000009c

00004b30 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    4b30:	4906      	ldr	r1, [pc, #24]	; (4b4c <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    4b32:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    4b36:	2801      	cmp	r0, #1
    4b38:	d107      	bne.n	4b4a <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    4b3a:	4805      	ldr	r0, [pc, #20]	; (4b50 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    4b3c:	6800      	ldr	r0, [r0, #0]
    4b3e:	2200      	movs	r2, #0
    4b40:	b2c0      	uxtb	r0, r0
    4b42:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    4b46:	f000 b8e1 	b.w	4d0c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    4b4a:	4770      	bx	lr
    4b4c:	4000d000 	.word	0x4000d000
    4b50:	4000d508 	.word	0x4000d508

00004b54 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    4b54:	4901      	ldr	r1, [pc, #4]	; (4b5c <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    4b56:	2001      	movs	r0, #1
    4b58:	6008      	str	r0, [r1, #0]
    4b5a:	4770      	bx	lr
    4b5c:	4000d504 	.word	0x4000d504

00004b60 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    4b60:	b510      	push	{r4, lr}
    4b62:	4806      	ldr	r0, [pc, #24]	; (4b7c <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    4b64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    4b68:	2900      	cmp	r1, #0
    4b6a:	d0fb      	beq.n	4b64 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    4b6c:	f7ff ffe0 	bl	4b30 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    4b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b74:	200d      	movs	r0, #13
    4b76:	f00b bb14 	b.w	101a2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4b7a:	0000      	.short	0x0000
    4b7c:	4000d000 	.word	0x4000d000

00004b80 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    4b80:	b570      	push	{r4, r5, r6, lr}
    4b82:	200d      	movs	r0, #13
    4b84:	f00b fb1a 	bl	101bc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    4b88:	4c08      	ldr	r4, [pc, #32]	; (4bac <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    4b8a:	2000      	movs	r0, #0
    4b8c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4b90:	2501      	movs	r5, #1
    4b92:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    4b96:	200d      	movs	r0, #13
    4b98:	f00b fb03 	bl	101a2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4b9c:	6025      	str	r5, [r4, #0]
    4b9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4ba2:	1460      	asrs	r0, r4, #17
    4ba4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    4ba8:	bd70      	pop	{r4, r5, r6, pc}
    4baa:	0000      	.short	0x0000
    4bac:	4000d000 	.word	0x4000d000

00004bb0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    4bb0:	b510      	push	{r4, lr}
    4bb2:	200d      	movs	r0, #13
    4bb4:	f00b fb02 	bl	101bc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1e>
    4bb8:	4805      	ldr	r0, [pc, #20]	; (4bd0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    4bba:	2101      	movs	r1, #1
    4bbc:	6041      	str	r1, [r0, #4]
    4bbe:	2100      	movs	r1, #0
    4bc0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bc8:	200d      	movs	r0, #13
    4bca:	f00b baea 	b.w	101a2 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4bce:	0000      	.short	0x0000
    4bd0:	4000d000 	.word	0x4000d000
    4bd4:	b510      	push	{r4, lr}
    4bd6:	4805      	ldr	r0, [pc, #20]	; (4bec <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    4bd8:	f00a f910 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4bdc:	2800      	cmp	r0, #0
    4bde:	d103      	bne.n	4be8 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    4be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4be4:	f7ff bfcc 	b.w	4b80 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    4be8:	bd10      	pop	{r4, pc}
    4bea:	0000      	.short	0x0000
    4bec:	200000b8 	.word	0x200000b8
    4bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bf4:	4615      	mov	r5, r2
    4bf6:	460e      	mov	r6, r1
    4bf8:	4604      	mov	r4, r0
    4bfa:	2700      	movs	r7, #0
    4bfc:	f00b fb09 	bl	10212 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4c00:	42a8      	cmp	r0, r5
    4c02:	d315      	bcc.n	4c30 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x80>
    4c04:	2300      	movs	r3, #0
    4c06:	2041      	movs	r0, #65	; 0x41
    4c08:	e00f      	b.n	4c2a <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x7a>
    4c0a:	bf00      	nop
    4c0c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4c10:	5ca2      	ldrb	r2, [r4, r2]
    4c12:	54f2      	strb	r2, [r6, r3]
    4c14:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    4c18:	1c49      	adds	r1, r1, #1
    4c1a:	fbb1 f2f0 	udiv	r2, r1, r0
    4c1e:	fb00 1112 	mls	r1, r0, r2, r1
    4c22:	1c5b      	adds	r3, r3, #1
    4c24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	42ab      	cmp	r3, r5
    4c2c:	d3ee      	bcc.n	4c0c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x5c>
    4c2e:	2701      	movs	r7, #1
    4c30:	f7ff ffd0 	bl	4bd4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4c34:	4638      	mov	r0, r7
    4c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004c3c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    4c3c:	490e      	ldr	r1, [pc, #56]	; (4c78 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    4c3e:	b510      	push	{r4, lr}
    4c40:	2000      	movs	r0, #0
    4c42:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4c46:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4c4a:	3143      	adds	r1, #67	; 0x43
    4c4c:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4c50:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4c54:	3143      	adds	r1, #67	; 0x43
    4c56:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4c5a:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4c5e:	4807      	ldr	r0, [pc, #28]	; (4c7c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4c60:	f00a f8df 	bl	ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4c64:	4805      	ldr	r0, [pc, #20]	; (4c7c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4c66:	1c40      	adds	r0, r0, #1
    4c68:	f00a f8db 	bl	ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4c6c:	f7ff ff72 	bl	4b54 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    4c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c74:	f7ff bfae 	b.w	4bd4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4c78:	20001ad0 	.word	0x20001ad0
    4c7c:	200000b8 	.word	0x200000b8

00004c80 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>:
    4c80:	4801      	ldr	r0, [pc, #4]	; (4c88 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY+0x8>)
    4c82:	f00b bac6 	b.w	10212 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4c86:	0000      	.short	0x0000
    4c88:	20001b13 	.word	0x20001b13

00004c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    4c8c:	460a      	mov	r2, r1
    4c8e:	4601      	mov	r1, r0
    4c90:	4801      	ldr	r0, [pc, #4]	; (4c98 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    4c92:	f7ff bfad 	b.w	4bf0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4c96:	0000      	.short	0x0000
    4c98:	20001b13 	.word	0x20001b13

00004c9c <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    4c9c:	4801      	ldr	r0, [pc, #4]	; (4ca4 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    4c9e:	f00b bab8 	b.w	10212 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4ca2:	0000      	.short	0x0000
    4ca4:	20001ad0 	.word	0x20001ad0

00004ca8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    4ca8:	460a      	mov	r2, r1
    4caa:	4601      	mov	r1, r0
    4cac:	4801      	ldr	r0, [pc, #4]	; (4cb4 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0xc>)
    4cae:	f7ff bf9f 	b.w	4bf0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4cb2:	0000      	.short	0x0000
    4cb4:	20001ad0 	.word	0x20001ad0

00004cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    4cb8:	b570      	push	{r4, r5, r6, lr}
    4cba:	460c      	mov	r4, r1
    4cbc:	4606      	mov	r6, r0
    4cbe:	2941      	cmp	r1, #65	; 0x41
    4cc0:	d903      	bls.n	4cca <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    4cc2:	21fb      	movs	r1, #251	; 0xfb
    4cc4:	2023      	movs	r0, #35	; 0x23
    4cc6:	f7ff f9e1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cca:	480e      	ldr	r0, [pc, #56]	; (4d04 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    4ccc:	6800      	ldr	r0, [r0, #0]
    4cce:	3810      	subs	r0, #16
    4cd0:	b240      	sxtb	r0, r0
    4cd2:	f00b fa8f 	bl	101f4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    4cd6:	b2c5      	uxtb	r5, r0
    4cd8:	200d      	movs	r0, #13
    4cda:	f00b fa8b 	bl	101f4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    4cde:	b2c0      	uxtb	r0, r0
    4ce0:	4285      	cmp	r5, r0
    4ce2:	d801      	bhi.n	4ce8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    4ce4:	2501      	movs	r5, #1
    4ce6:	e004      	b.n	4cf2 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4ce8:	2500      	movs	r5, #0
    4cea:	e002      	b.n	4cf2 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4cec:	b10d      	cbz	r5, 4cf2 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4cee:	f7ff ff37 	bl	4b60 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    4cf2:	4622      	mov	r2, r4
    4cf4:	4631      	mov	r1, r6
    4cf6:	4804      	ldr	r0, [pc, #16]	; (4d08 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    4cf8:	f7ff ff7a 	bl	4bf0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d0f5      	beq.n	4cec <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    4d00:	bd70      	pop	{r4, r5, r6, pc}
    4d02:	0000      	.short	0x0000
    4d04:	e000ed04 	.word	0xe000ed04
    4d08:	20001ad0 	.word	0x20001ad0

00004d0c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    4d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d10:	4f1f      	ldr	r7, [pc, #124]	; (4d90 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4d12:	4606      	mov	r6, r0
    4d14:	2500      	movs	r5, #0
    4d16:	bf00      	nop
    4d18:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    4d1c:	4620      	mov	r0, r4
    4d1e:	f00b fa84 	bl	1022a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4d22:	b300      	cbz	r0, 4d66 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    4d24:	1c6d      	adds	r5, r5, #1
    4d26:	b2ed      	uxtb	r5, r5
    4d28:	2d03      	cmp	r5, #3
    4d2a:	d3f5      	bcc.n	4d18 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    4d2c:	4819      	ldr	r0, [pc, #100]	; (4d94 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4d2e:	f00b fa7c 	bl	1022a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4d32:	2800      	cmp	r0, #0
    4d34:	d02a      	beq.n	4d8c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4d36:	4817      	ldr	r0, [pc, #92]	; (4d94 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4d38:	3843      	subs	r0, #67	; 0x43
    4d3a:	f00b fa76 	bl	1022a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d024      	beq.n	4d8c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4d42:	4814      	ldr	r0, [pc, #80]	; (4d94 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4d44:	3043      	adds	r0, #67	; 0x43
    4d46:	f00b fa70 	bl	1022a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4d4a:	2800      	cmp	r0, #0
    4d4c:	d01e      	beq.n	4d8c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4d4e:	f7ff ff2f 	bl	4bb0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    4d52:	480f      	ldr	r0, [pc, #60]	; (4d90 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4d54:	1f00      	subs	r0, r0, #4
    4d56:	f00a f851 	bl	edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4d5a:	3023      	adds	r0, #35	; 0x23
    4d5c:	d010      	beq.n	4d80 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    4d5e:	21b3      	movs	r1, #179	; 0xb3
    4d60:	2023      	movs	r0, #35	; 0x23
    4d62:	f7ff f993 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d66:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    4d6a:	2141      	movs	r1, #65	; 0x41
    4d6c:	5426      	strb	r6, [r4, r0]
    4d6e:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    4d72:	1c40      	adds	r0, r0, #1
    4d74:	fbb0 f2f1 	udiv	r2, r0, r1
    4d78:	fb01 0012 	mls	r0, r1, r2, r0
    4d7c:	7020      	strb	r0, [r4, #0]
    4d7e:	e7d5      	b.n	4d2c <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    4d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d84:	4802      	ldr	r0, [pc, #8]	; (4d90 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4d86:	1f00      	subs	r0, r0, #4
    4d88:	f00a b84f 	b.w	ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d90:	200000bc 	.word	0x200000bc
    4d94:	20001b13 	.word	0x20001b13

00004d98 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4d98:	4905      	ldr	r1, [pc, #20]	; (4db0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4d9a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4d9c:	4282      	cmp	r2, r0
    4d9e:	bf18      	it	ne
    4da0:	4770      	bxne	lr
    4da2:	2000      	movs	r0, #0
    4da4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4da8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4dac:	8488      	strh	r0, [r1, #36]	; 0x24
    4dae:	4770      	bx	lr
    4db0:	20001a60 	.word	0x20001a60

00004db4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4db4:	4806      	ldr	r0, [pc, #24]	; (4dd0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4db6:	4a07      	ldr	r2, [pc, #28]	; (4dd4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4db8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4dba:	8852      	ldrh	r2, [r2, #2]
    4dbc:	4291      	cmp	r1, r2
    4dbe:	d105      	bne.n	4dcc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    4dc0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4dc4:	2800      	cmp	r0, #0
    4dc6:	bf1c      	itt	ne
    4dc8:	2000      	movne	r0, #0
    4dca:	4770      	bxne	lr
    4dcc:	2001      	movs	r0, #1
    4dce:	4770      	bx	lr
    4dd0:	20001a60 	.word	0x20001a60
    4dd4:	20000394 	.word	0x20000394

00004dd8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4dd8:	4901      	ldr	r1, [pc, #4]	; (4de0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4dda:	8048      	strh	r0, [r1, #2]
    4ddc:	4770      	bx	lr
    4dde:	0000      	.short	0x0000
    4de0:	20000394 	.word	0x20000394

00004de4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4de4:	4808      	ldr	r0, [pc, #32]	; (4e08 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4de6:	4a09      	ldr	r2, [pc, #36]	; (4e0c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4de8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4dea:	8852      	ldrh	r2, [r2, #2]
    4dec:	4291      	cmp	r1, r2
    4dee:	d109      	bne.n	4e04 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4df0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4df4:	8481      	strh	r1, [r0, #36]	; 0x24
    4df6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4dfa:	b119      	cbz	r1, 4e04 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4dfc:	2100      	movs	r1, #0
    4dfe:	7001      	strb	r1, [r0, #0]
    4e00:	2001      	movs	r0, #1
    4e02:	4770      	bx	lr
    4e04:	2000      	movs	r0, #0
    4e06:	4770      	bx	lr
    4e08:	20001a60 	.word	0x20001a60
    4e0c:	20000394 	.word	0x20000394

00004e10 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4e10:	4907      	ldr	r1, [pc, #28]	; (4e30 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4e12:	f101 0022 	add.w	r0, r1, #34	; 0x22
    4e16:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4e1a:	2a01      	cmp	r2, #1
    4e1c:	bf04      	itt	eq
    4e1e:	2000      	moveq	r0, #0
    4e20:	4770      	bxeq	lr
    4e22:	2201      	movs	r2, #1
    4e24:	7002      	strb	r2, [r0, #0]
    4e26:	4803      	ldr	r0, [pc, #12]	; (4e34 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4e28:	8800      	ldrh	r0, [r0, #0]
    4e2a:	8488      	strh	r0, [r1, #36]	; 0x24
    4e2c:	4610      	mov	r0, r2
    4e2e:	4770      	bx	lr
    4e30:	20001a60 	.word	0x20001a60
    4e34:	20000394 	.word	0x20000394

00004e38 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4e38:	4907      	ldr	r1, [pc, #28]	; (4e58 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4e3a:	4b08      	ldr	r3, [pc, #32]	; (4e5c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4e3c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4e3e:	885b      	ldrh	r3, [r3, #2]
    4e40:	429a      	cmp	r2, r3
    4e42:	d106      	bne.n	4e52 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4e44:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4e48:	2a00      	cmp	r2, #0
    4e4a:	bf1e      	ittt	ne
    4e4c:	6001      	strne	r1, [r0, #0]
    4e4e:	2001      	movne	r0, #1
    4e50:	4770      	bxne	lr
    4e52:	2000      	movs	r0, #0
    4e54:	4770      	bx	lr
    4e56:	0000      	.short	0x0000
    4e58:	20001a60 	.word	0x20001a60
    4e5c:	20000394 	.word	0x20000394

00004e60 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4e60:	4909      	ldr	r1, [pc, #36]	; (4e88 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e62:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4e64:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4e68:	3bff      	subs	r3, #255	; 0xff
    4e6a:	d003      	beq.n	4e74 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4e6c:	2100      	movs	r1, #0
    4e6e:	6001      	str	r1, [r0, #0]
    4e70:	4608      	mov	r0, r1
    4e72:	4770      	bx	lr
    4e74:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4e78:	4903      	ldr	r1, [pc, #12]	; (4e88 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e7a:	2a01      	cmp	r2, #1
    4e7c:	bf1a      	itte	ne
    4e7e:	6001      	strne	r1, [r0, #0]
    4e80:	2001      	movne	r0, #1
    4e82:	2000      	moveq	r0, #0
    4e84:	4770      	bx	lr
    4e86:	0000      	.short	0x0000
    4e88:	20001a60 	.word	0x20001a60

00004e8c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4e8c:	4901      	ldr	r1, [pc, #4]	; (4e94 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4e8e:	8008      	strh	r0, [r1, #0]
    4e90:	4770      	bx	lr
    4e92:	0000      	.short	0x0000
    4e94:	20000394 	.word	0x20000394

00004e98 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    4e98:	4905      	ldr	r1, [pc, #20]	; (4eb0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    4e9a:	2000      	movs	r0, #0
    4e9c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4ea0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4ea4:	8488      	strh	r0, [r1, #36]	; 0x24
    4ea6:	4903      	ldr	r1, [pc, #12]	; (4eb4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    4ea8:	8008      	strh	r0, [r1, #0]
    4eaa:	8048      	strh	r0, [r1, #2]
    4eac:	4770      	bx	lr
    4eae:	0000      	.short	0x0000
    4eb0:	20001a60 	.word	0x20001a60
    4eb4:	20000394 	.word	0x20000394

00004eb8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4eb8:	4905      	ldr	r1, [pc, #20]	; (4ed0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4eba:	2000      	movs	r0, #0
    4ebc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4ec0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4ec4:	8488      	strh	r0, [r1, #36]	; 0x24
    4ec6:	4903      	ldr	r1, [pc, #12]	; (4ed4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4ec8:	8008      	strh	r0, [r1, #0]
    4eca:	8048      	strh	r0, [r1, #2]
    4ecc:	4770      	bx	lr
    4ece:	0000      	.short	0x0000
    4ed0:	20001a60 	.word	0x20001a60
    4ed4:	20000394 	.word	0x20000394

00004ed8 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    4ed8:	4b0d      	ldr	r3, [pc, #52]	; (4f10 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    4eda:	b169      	cbz	r1, 4ef8 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    4edc:	2901      	cmp	r1, #1
    4ede:	bf04      	itt	eq
    4ee0:	7899      	ldrbeq	r1, [r3, #2]
    4ee2:	4281      	cmpeq	r1, r0
    4ee4:	d110      	bne.n	4f08 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4ee6:	f8d3 000f 	ldr.w	r0, [r3, #15]
    4eea:	6010      	str	r0, [r2, #0]
    4eec:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    4ef0:	8090      	strh	r0, [r2, #4]
    4ef2:	f04f 0001 	mov.w	r0, #1
    4ef6:	4770      	bx	lr
    4ef8:	7858      	ldrb	r0, [r3, #1]
    4efa:	b128      	cbz	r0, 4f08 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4efc:	f8d3 0003 	ldr.w	r0, [r3, #3]
    4f00:	6010      	str	r0, [r2, #0]
    4f02:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    4f06:	e7f3      	b.n	4ef0 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    4f08:	f04f 0000 	mov.w	r0, #0
    4f0c:	4770      	bx	lr
    4f0e:	0000      	.short	0x0000
    4f10:	200003aa 	.word	0x200003aa

00004f14 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    4f14:	4a07      	ldr	r2, [pc, #28]	; (4f34 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    4f16:	b129      	cbz	r1, 4f24 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    4f18:	2901      	cmp	r1, #1
    4f1a:	bf04      	itt	eq
    4f1c:	7891      	ldrbeq	r1, [r2, #2]
    4f1e:	4281      	cmpeq	r1, r0
    4f20:	d002      	beq.n	4f28 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    4f22:	e004      	b.n	4f2e <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4f24:	7850      	ldrb	r0, [r2, #1]
    4f26:	b110      	cbz	r0, 4f2e <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4f28:	f04f 0001 	mov.w	r0, #1
    4f2c:	4770      	bx	lr
    4f2e:	f04f 0000 	mov.w	r0, #0
    4f32:	4770      	bx	lr
    4f34:	200003aa 	.word	0x200003aa

00004f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4f38:	4a0c      	ldr	r2, [pc, #48]	; (4f6c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    4f3a:	b110      	cbz	r0, 4f42 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4f3c:	2801      	cmp	r0, #1
    4f3e:	d008      	beq.n	4f52 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    4f40:	e011      	b.n	4f66 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4f42:	7850      	ldrb	r0, [r2, #1]
    4f44:	b178      	cbz	r0, 4f66 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4f46:	f8d2 0003 	ldr.w	r0, [r2, #3]
    4f4a:	6008      	str	r0, [r1, #0]
    4f4c:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    4f50:	e006      	b.n	4f60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f52:	7810      	ldrb	r0, [r2, #0]
    4f54:	b138      	cbz	r0, 4f66 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4f56:	f8d2 0009 	ldr.w	r0, [r2, #9]
    4f5a:	6008      	str	r0, [r1, #0]
    4f5c:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    4f60:	8088      	strh	r0, [r1, #4]
    4f62:	2001      	movs	r0, #1
    4f64:	4770      	bx	lr
    4f66:	2000      	movs	r0, #0
    4f68:	4770      	bx	lr
    4f6a:	0000      	.short	0x0000
    4f6c:	200003aa 	.word	0x200003aa

00004f70 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    4f70:	4901      	ldr	r1, [pc, #4]	; (4f78 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    4f72:	20ff      	movs	r0, #255	; 0xff
    4f74:	7088      	strb	r0, [r1, #2]
    4f76:	4770      	bx	lr
    4f78:	200003aa 	.word	0x200003aa

00004f7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4f7c:	4a0a      	ldr	r2, [pc, #40]	; (4fa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    4f7e:	2301      	movs	r3, #1
    4f80:	b150      	cbz	r0, 4f98 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    4f82:	2801      	cmp	r0, #1
    4f84:	bf18      	it	ne
    4f86:	4770      	bxne	lr
    4f88:	7013      	strb	r3, [r2, #0]
    4f8a:	6808      	ldr	r0, [r1, #0]
    4f8c:	f8c2 0009 	str.w	r0, [r2, #9]
    4f90:	8888      	ldrh	r0, [r1, #4]
    4f92:	f8a2 000d 	strh.w	r0, [r2, #13]
    4f96:	4770      	bx	lr
    4f98:	7053      	strb	r3, [r2, #1]
    4f9a:	6808      	ldr	r0, [r1, #0]
    4f9c:	f8c2 0003 	str.w	r0, [r2, #3]
    4fa0:	8888      	ldrh	r0, [r1, #4]
    4fa2:	f8a2 0007 	strh.w	r0, [r2, #7]
    4fa6:	4770      	bx	lr
    4fa8:	200003aa 	.word	0x200003aa

00004fac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4fac:	4906      	ldr	r1, [pc, #24]	; (4fc8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4fae:	b110      	cbz	r0, 4fb6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4fb0:	2801      	cmp	r0, #1
    4fb2:	d003      	beq.n	4fbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4fb4:	e006      	b.n	4fc4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4fb6:	7848      	ldrb	r0, [r1, #1]
    4fb8:	b910      	cbnz	r0, 4fc0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4fba:	e003      	b.n	4fc4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4fbc:	7808      	ldrb	r0, [r1, #0]
    4fbe:	b108      	cbz	r0, 4fc4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4fc0:	2001      	movs	r0, #1
    4fc2:	4770      	bx	lr
    4fc4:	2000      	movs	r0, #0
    4fc6:	4770      	bx	lr
    4fc8:	200003aa 	.word	0x200003aa

00004fcc <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    4fcc:	4901      	ldr	r1, [pc, #4]	; (4fd4 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    4fce:	2001      	movs	r0, #1
    4fd0:	7148      	strb	r0, [r1, #5]
    4fd2:	4770      	bx	lr
    4fd4:	200000c8 	.word	0x200000c8

00004fd8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4fd8:	4901      	ldr	r1, [pc, #4]	; (4fe0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4fda:	7448      	strb	r0, [r1, #17]
    4fdc:	4770      	bx	lr
    4fde:	0000      	.short	0x0000
    4fe0:	20000c4a 	.word	0x20000c4a

00004fe4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4fe4:	4801      	ldr	r0, [pc, #4]	; (4fec <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4fe6:	78c0      	ldrb	r0, [r0, #3]
    4fe8:	4770      	bx	lr
    4fea:	0000      	.short	0x0000
    4fec:	200000c8 	.word	0x200000c8

00004ff0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4ff0:	4801      	ldr	r0, [pc, #4]	; (4ff8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4ff2:	7900      	ldrb	r0, [r0, #4]
    4ff4:	4770      	bx	lr
    4ff6:	0000      	.short	0x0000
    4ff8:	200000c8 	.word	0x200000c8

00004ffc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4ffc:	4910      	ldr	r1, [pc, #64]	; (5040 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    4ffe:	b430      	push	{r4, r5}
    5000:	7c4a      	ldrb	r2, [r1, #17]
    5002:	2a00      	cmp	r2, #0
    5004:	bf19      	ittee	ne
    5006:	7c0a      	ldrbne	r2, [r1, #16]
    5008:	2a00      	cmpne	r2, #0
    500a:	2000      	moveq	r0, #0
    500c:	bc30      	popeq	{r4, r5}
    500e:	bf08      	it	eq
    5010:	4770      	bxeq	lr
    5012:	f04f 0200 	mov.w	r2, #0
    5016:	f04f 0c1f 	mov.w	ip, #31
    501a:	4b0a      	ldr	r3, [pc, #40]	; (5044 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    501c:	740a      	strb	r2, [r1, #16]
    501e:	7042      	strb	r2, [r0, #1]
    5020:	f880 c000 	strb.w	ip, [r0]
    5024:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    5028:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    502c:	6044      	str	r4, [r0, #4]
    502e:	6085      	str	r5, [r0, #8]
    5030:	7c0c      	ldrb	r4, [r1, #16]
    5032:	2c00      	cmp	r4, #0
    5034:	d1f2      	bne.n	501c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    5036:	bc30      	pop	{r4, r5}
    5038:	f04f 0001 	mov.w	r0, #1
    503c:	4770      	bx	lr
    503e:	0000      	.short	0x0000
    5040:	20000c4a 	.word	0x20000c4a
    5044:	20000af8 	.word	0x20000af8

00005048 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5048:	b570      	push	{r4, r5, r6, lr}
    504a:	4c08      	ldr	r4, [pc, #32]	; (506c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    504c:	4606      	mov	r6, r0
    504e:	460d      	mov	r5, r1
    5050:	7820      	ldrb	r0, [r4, #0]
    5052:	b118      	cbz	r0, 505c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    5054:	21ab      	movs	r1, #171	; 0xab
    5056:	2027      	movs	r0, #39	; 0x27
    5058:	f7ff f818 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    505c:	2101      	movs	r1, #1
    505e:	4804      	ldr	r0, [pc, #16]	; (5070 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    5060:	f00b fcc9 	bl	109f6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5064:	7226      	strb	r6, [r4, #8]
    5066:	6325      	str	r5, [r4, #48]	; 0x30
    5068:	bd70      	pop	{r4, r5, r6, pc}
    506a:	0000      	.short	0x0000
    506c:	200000c8 	.word	0x200000c8
    5070:	20000c28 	.word	0x20000c28

00005074 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5074:	4901      	ldr	r1, [pc, #4]	; (507c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5076:	2001      	movs	r0, #1
    5078:	71c8      	strb	r0, [r1, #7]
    507a:	4770      	bx	lr
    507c:	200000c8 	.word	0x200000c8

00005080 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5084:	4d82      	ldr	r5, [pc, #520]	; (5290 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    5086:	b085      	sub	sp, #20
    5088:	782c      	ldrb	r4, [r5, #0]
    508a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    508e:	2c00      	cmp	r4, #0
    5090:	d175      	bne.n	517e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5092:	2a00      	cmp	r2, #0
    5094:	bf1c      	itt	ne
    5096:	2b00      	cmpne	r3, #0
    5098:	f1bc 0f00 	cmpne.w	ip, #0
    509c:	d06f      	beq.n	517e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    509e:	f8c5 c020 	str.w	ip, [r5, #32]
    50a2:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    50a6:	f04f 0000 	mov.w	r0, #0
    50aa:	e9c5 2306 	strd	r2, r3, [r5, #24]
    50ae:	71e8      	strb	r0, [r5, #7]
    50b0:	71a8      	strb	r0, [r5, #6]
    50b2:	70e8      	strb	r0, [r5, #3]
    50b4:	70a8      	strb	r0, [r5, #2]
    50b6:	7128      	strb	r0, [r5, #4]
    50b8:	7168      	strb	r0, [r5, #5]
    50ba:	4f76      	ldr	r7, [pc, #472]	; (5294 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    50bc:	81e8      	strh	r0, [r5, #14]
    50be:	8228      	strh	r0, [r5, #16]
    50c0:	6878      	ldr	r0, [r7, #4]
    50c2:	f100 0678 	add.w	r6, r0, #120	; 0x78
    50c6:	4604      	mov	r4, r0
    50c8:	f008 fe84 	bl	ddd4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    50cc:	f008 fa28 	bl	d520 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    50d0:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    50d4:	f008 ff16 	bl	df04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    50d8:	f104 0016 	add.w	r0, r4, #22
    50dc:	f009 f9f4 	bl	e4c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    50e0:	f104 0012 	add.w	r0, r4, #18
    50e4:	f009 f9e4 	bl	e4b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    50e8:	7ef0      	ldrb	r0, [r6, #27]
    50ea:	f009 fa3f 	bl	e56c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    50ee:	7838      	ldrb	r0, [r7, #0]
    50f0:	f641 584c 	movw	r8, #7500	; 0x1d4c
    50f4:	2800      	cmp	r0, #0
    50f6:	d046      	beq.n	5186 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    50f8:	2004      	movs	r0, #4
    50fa:	f7fe fe91 	bl	3e20 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    50fe:	6860      	ldr	r0, [r4, #4]
    5100:	4540      	cmp	r0, r8
    5102:	bf28      	it	cs
    5104:	2096      	movcs	r0, #150	; 0x96
    5106:	d203      	bcs.n	5110 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    5108:	2001      	movs	r0, #1
    510a:	f009 f987 	bl	e41c <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    510e:	204d      	movs	r0, #77	; 0x4d
    5110:	f008 fdb2 	bl	dc78 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    5114:	6878      	ldr	r0, [r7, #4]
    5116:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    511a:	2800      	cmp	r0, #0
    511c:	bf18      	it	ne
    511e:	f008 fda1 	blne	dc64 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5122:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5126:	2001      	movs	r0, #1
    5128:	f008 fbba 	bl	d8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    512c:	2800      	cmp	r0, #0
    512e:	bf04      	itt	eq
    5130:	b005      	addeq	sp, #20
    5132:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5136:	7838      	ldrb	r0, [r7, #0]
    5138:	2800      	cmp	r0, #0
    513a:	bf0c      	ite	eq
    513c:	2003      	moveq	r0, #3
    513e:	2001      	movne	r0, #1
    5140:	f008 fdf8 	bl	dd34 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    5144:	4854      	ldr	r0, [pc, #336]	; (5298 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    5146:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    514a:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    514e:	6900      	ldr	r0, [r0, #16]
    5150:	9004      	str	r0, [sp, #16]
    5152:	7838      	ldrb	r0, [r7, #0]
    5154:	2800      	cmp	r0, #0
    5156:	bf0c      	ite	eq
    5158:	4850      	ldreq	r0, [pc, #320]	; (529c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    515a:	4851      	ldrne	r0, [pc, #324]	; (52a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    515c:	9004      	str	r0, [sp, #16]
    515e:	4668      	mov	r0, sp
    5160:	f008 fd04 	bl	db6c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5164:	8820      	ldrh	r0, [r4, #0]
    5166:	f7ff fb5f 	bl	4828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    516a:	6368      	str	r0, [r5, #52]	; 0x34
    516c:	8820      	ldrh	r0, [r4, #0]
    516e:	f7ff fb45 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5172:	63a8      	str	r0, [r5, #56]	; 0x38
    5174:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    5178:	bb68      	cbnz	r0, 51d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    517a:	e01c      	b.n	51b6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    517c:	e7ff      	b.n	517e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    517e:	21d3      	movs	r1, #211	; 0xd3
    5180:	2027      	movs	r0, #39	; 0x27
    5182:	f7fe ff83 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5186:	2003      	movs	r0, #3
    5188:	f7fe fe4a 	bl	3e20 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    518c:	6860      	ldr	r0, [r4, #4]
    518e:	4540      	cmp	r0, r8
    5190:	bf28      	it	cs
    5192:	2096      	movcs	r0, #150	; 0x96
    5194:	d203      	bcs.n	519e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    5196:	2001      	movs	r0, #1
    5198:	f009 f940 	bl	e41c <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    519c:	204d      	movs	r0, #77	; 0x4d
    519e:	f008 fd6b 	bl	dc78 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    51a2:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    51a6:	2000      	movs	r0, #0
    51a8:	f008 fb7a 	bl	d8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    51ac:	2800      	cmp	r0, #0
    51ae:	d1c2      	bne.n	5136 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    51b0:	b005      	add	sp, #20
    51b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    51b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    51b8:	b168      	cbz	r0, 51d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    51ba:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    51bc:	8831      	ldrh	r1, [r6, #0]
    51be:	4288      	cmp	r0, r1
    51c0:	d109      	bne.n	51d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    51c2:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    51c6:	2201      	movs	r2, #1
    51c8:	4408      	add	r0, r1
    51ca:	8570      	strh	r0, [r6, #42]	; 0x2a
    51cc:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    51d0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    51d2:	f7fd fcc5 	bl	2b60 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    51d6:	f106 0160 	add.w	r1, r6, #96	; 0x60
    51da:	4832      	ldr	r0, [pc, #200]	; (52a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    51dc:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    51e0:	f500 7884 	add.w	r8, r0, #264	; 0x108
    51e4:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    51e8:	6f31      	ldr	r1, [r6, #112]	; 0x70
    51ea:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    51ee:	6f71      	ldr	r1, [r6, #116]	; 0x74
    51f0:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    51f4:	20ff      	movs	r0, #255	; 0xff
    51f6:	72a8      	strb	r0, [r5, #10]
    51f8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    51fc:	f896 9012 	ldrb.w	r9, [r6, #18]
    5200:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    5204:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    5206:	2908      	cmp	r1, #8
    5208:	d01c      	beq.n	5244 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    520a:	f00b f951 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    520e:	bf00      	nop
    5210:	f1b9 0f00 	cmp.w	r9, #0
    5214:	bf04      	itt	eq
    5216:	1d00      	addeq	r0, r0, #4
    5218:	b280      	uxtheq	r0, r0
    521a:	4580      	cmp	r8, r0
    521c:	bf38      	it	cc
    521e:	4640      	movcc	r0, r8
    5220:	b2c0      	uxtb	r0, r0
    5222:	7cb1      	ldrb	r1, [r6, #18]
    5224:	2900      	cmp	r1, #0
    5226:	bf18      	it	ne
    5228:	2104      	movne	r1, #4
    522a:	4408      	add	r0, r1
    522c:	b2c0      	uxtb	r0, r0
    522e:	7268      	strb	r0, [r5, #9]
    5230:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    5234:	1d09      	adds	r1, r1, #4
    5236:	4281      	cmp	r1, r0
    5238:	d208      	bcs.n	524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    523a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    523e:	2027      	movs	r0, #39	; 0x27
    5240:	f7fe ff24 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5244:	2104      	movs	r1, #4
    5246:	f00b f933 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    524a:	e7e1      	b.n	5210 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    524c:	7838      	ldrb	r0, [r7, #0]
    524e:	2800      	cmp	r0, #0
    5250:	f04f 0001 	mov.w	r0, #1
    5254:	d014      	beq.n	5280 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    5256:	f000 fb4b 	bl	58f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    525a:	4813      	ldr	r0, [pc, #76]	; (52a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    525c:	6800      	ldr	r0, [r0, #0]
    525e:	2803      	cmp	r0, #3
    5260:	bf18      	it	ne
    5262:	280b      	cmpne	r0, #11
    5264:	d00f      	beq.n	5286 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    5266:	4d11      	ldr	r5, [pc, #68]	; (52ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    5268:	4628      	mov	r0, r5
    526a:	f00d f8e4 	bl	12436 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    526e:	8830      	ldrh	r0, [r6, #0]
    5270:	8068      	strh	r0, [r5, #2]
    5272:	8820      	ldrh	r0, [r4, #0]
    5274:	8028      	strh	r0, [r5, #0]
    5276:	7ef0      	ldrb	r0, [r6, #27]
    5278:	7128      	strb	r0, [r5, #4]
    527a:	b005      	add	sp, #20
    527c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5280:	f000 fbc4 	bl	5a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    5284:	e7e9      	b.n	525a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    5286:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    528a:	2027      	movs	r0, #39	; 0x27
    528c:	f7fe fefe 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5290:	200000c8 	.word	0x200000c8
    5294:	20000104 	.word	0x20000104
    5298:	00005cd8 	.word	0x00005cd8
    529c:	0000c215 	.word	0x0000c215
    52a0:	000090c9 	.word	0x000090c9
    52a4:	20000af8 	.word	0x20000af8
    52a8:	40001550 	.word	0x40001550
    52ac:	20000c4a 	.word	0x20000c4a

000052b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    52b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52b4:	0006      	movs	r6, r0
    52b6:	4847      	ldr	r0, [pc, #284]	; (53d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    52b8:	4d47      	ldr	r5, [pc, #284]	; (53d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    52ba:	6840      	ldr	r0, [r0, #4]
    52bc:	f100 0478 	add.w	r4, r0, #120	; 0x78
    52c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    52c2:	f890 9001 	ldrb.w	r9, [r0, #1]
    52c6:	bf18      	it	ne
    52c8:	2e01      	cmpne	r6, #1
    52ca:	d103      	bne.n	52d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    52cc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    52ce:	f009 fef7 	bl	f0c0 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    52d2:	7068      	strb	r0, [r5, #1]
    52d4:	7868      	ldrb	r0, [r5, #1]
    52d6:	2700      	movs	r7, #0
    52d8:	f04f 0801 	mov.w	r8, #1
    52dc:	b150      	cbz	r0, 52f4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    52de:	2801      	cmp	r0, #1
    52e0:	d030      	beq.n	5344 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    52e2:	2802      	cmp	r0, #2
    52e4:	d056      	beq.n	5394 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    52e6:	2803      	cmp	r0, #3
    52e8:	d068      	beq.n	53bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    52ea:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    52ee:	2027      	movs	r0, #39	; 0x27
    52f0:	f7fe fecc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52f4:	2e01      	cmp	r6, #1
    52f6:	d012      	beq.n	531e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    52f8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    52fa:	2800      	cmp	r0, #0
    52fc:	d045      	beq.n	538a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    52fe:	89a9      	ldrh	r1, [r5, #12]
    5300:	1cca      	adds	r2, r1, #3
    5302:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5304:	f7fe fd38 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5308:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    530a:	62a8      	str	r0, [r5, #40]	; 0x28
    530c:	2201      	movs	r2, #1
    530e:	4649      	mov	r1, r9
    5310:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5312:	f00a fba9 	bl	fa68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5316:	2e02      	cmp	r6, #2
    5318:	bf08      	it	eq
    531a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    531e:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    5322:	1c49      	adds	r1, r1, #1
    5324:	f140 0000 	adc.w	r0, r0, #0
    5328:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    532c:	79e0      	ldrb	r0, [r4, #7]
    532e:	2801      	cmp	r0, #1
    5330:	d101      	bne.n	5336 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    5332:	71e7      	strb	r7, [r4, #7]
    5334:	e001      	b.n	533a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5336:	f884 8007 	strb.w	r8, [r4, #7]
    533a:	7a28      	ldrb	r0, [r5, #8]
    533c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5340:	f7fe bc98 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5344:	2e01      	cmp	r6, #1
    5346:	d011      	beq.n	536c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    5348:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    534a:	b1f0      	cbz	r0, 538a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    534c:	89a9      	ldrh	r1, [r5, #12]
    534e:	1cca      	adds	r2, r1, #3
    5350:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5352:	f7fe fd11 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5356:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5358:	62a8      	str	r0, [r5, #40]	; 0x28
    535a:	2200      	movs	r2, #0
    535c:	4649      	mov	r1, r9
    535e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5360:	f00a fb82 	bl	fa68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5364:	2e02      	cmp	r6, #2
    5366:	bf08      	it	eq
    5368:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    536c:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    5370:	1c41      	adds	r1, r0, #1
    5372:	f142 0000 	adc.w	r0, r2, #0
    5376:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    537a:	79e0      	ldrb	r0, [r4, #7]
    537c:	2801      	cmp	r0, #1
    537e:	bf0c      	ite	eq
    5380:	71e7      	strbeq	r7, [r4, #7]
    5382:	f884 8007 	strbne.w	r8, [r4, #7]
    5386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    538a:	f240 31f7 	movw	r1, #1015	; 0x3f7
    538e:	2027      	movs	r0, #39	; 0x27
    5390:	f7fe fe7c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5394:	2e01      	cmp	r6, #1
    5396:	d006      	beq.n	53a6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    5398:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    539a:	f00a fe3a 	bl	10012 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    539e:	2e02      	cmp	r6, #2
    53a0:	bf08      	it	eq
    53a2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53a6:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    53aa:	1c49      	adds	r1, r1, #1
    53ac:	f140 0000 	adc.w	r0, r0, #0
    53b0:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    53b4:	79e0      	ldrb	r0, [r4, #7]
    53b6:	2801      	cmp	r0, #1
    53b8:	d1bd      	bne.n	5336 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    53ba:	e7ba      	b.n	5332 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    53bc:	2e01      	cmp	r6, #1
    53be:	bf08      	it	eq
    53c0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53c4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    53c6:	f00a fe24 	bl	10012 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    53ca:	7a28      	ldrb	r0, [r5, #8]
    53cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53d0:	f7fe bc50 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    53d4:	20000104 	.word	0x20000104
    53d8:	200000c8 	.word	0x200000c8

000053dc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    53dc:	4802      	ldr	r0, [pc, #8]	; (53e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xc>)
    53de:	7800      	ldrb	r0, [r0, #0]
    53e0:	2800      	cmp	r0, #0
    53e2:	bf18      	it	ne
    53e4:	200c      	movne	r0, #12
    53e6:	4770      	bx	lr
    53e8:	200000c8 	.word	0x200000c8

000053ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    53ec:	4811      	ldr	r0, [pc, #68]	; (5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>)
    53ee:	b510      	push	{r4, lr}
    53f0:	7801      	ldrb	r1, [r0, #0]
    53f2:	b159      	cbz	r1, 540c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    53f4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    53f8:	7800      	ldrb	r0, [r0, #0]
    53fa:	780a      	ldrb	r2, [r1, #0]
    53fc:	b152      	cbz	r2, 5414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28>
    53fe:	2802      	cmp	r0, #2
    5400:	d010      	beq.n	5424 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5402:	f240 1197 	movw	r1, #407	; 0x197
    5406:	2027      	movs	r0, #39	; 0x27
    5408:	f7fe fe40 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5410:	f000 ba12 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5414:	2801      	cmp	r0, #1
    5416:	bf08      	it	eq
    5418:	bd10      	popeq	{r4, pc}
    541a:	f240 1193 	movw	r1, #403	; 0x193
    541e:	2027      	movs	r0, #39	; 0x27
    5420:	f7fe fe34 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5424:	6848      	ldr	r0, [r1, #4]
    5426:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    542a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    542e:	f008 bba9 	b.w	db84 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5432:	0000      	.short	0x0000
    5434:	200000c8 	.word	0x200000c8
    5438:	b570      	push	{r4, r5, r6, lr}
    543a:	4c26      	ldr	r4, [pc, #152]	; (54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    543c:	4605      	mov	r5, r0
    543e:	2900      	cmp	r1, #0
    5440:	bf08      	it	eq
    5442:	2d01      	cmpeq	r5, #1
    5444:	d106      	bne.n	5454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    5446:	78e0      	ldrb	r0, [r4, #3]
    5448:	f100 0001 	add.w	r0, r0, #1
    544c:	b2c0      	uxtb	r0, r0
    544e:	70e0      	strb	r0, [r4, #3]
    5450:	2801      	cmp	r0, #1
    5452:	d83c      	bhi.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5454:	69e1      	ldr	r1, [r4, #28]
    5456:	4628      	mov	r0, r5
    5458:	4788      	blx	r1
    545a:	2800      	cmp	r0, #0
    545c:	d037      	beq.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    545e:	7960      	ldrb	r0, [r4, #5]
    5460:	b148      	cbz	r0, 5476 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    5462:	2d01      	cmp	r5, #1
    5464:	d107      	bne.n	5476 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    5466:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5468:	7841      	ldrb	r1, [r0, #1]
    546a:	2900      	cmp	r1, #0
    546c:	bf04      	itt	eq
    546e:	7800      	ldrbeq	r0, [r0, #0]
    5470:	f010 0f10 	tsteq.w	r0, #16
    5474:	d02b      	beq.n	54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5476:	79a0      	ldrb	r0, [r4, #6]
    5478:	bb48      	cbnz	r0, 54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    547a:	4817      	ldr	r0, [pc, #92]	; (54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    547c:	7801      	ldrb	r1, [r0, #0]
    547e:	2900      	cmp	r1, #0
    5480:	bf08      	it	eq
    5482:	2d01      	cmpeq	r5, #1
    5484:	d004      	beq.n	5490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    5486:	b101      	cbz	r1, 548a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9e>
    5488:	b115      	cbz	r5, 5490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    548a:	f04f 0000 	mov.w	r0, #0
    548e:	bd70      	pop	{r4, r5, r6, pc}
    5490:	4812      	ldr	r0, [pc, #72]	; (54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>)
    5492:	7801      	ldrb	r1, [r0, #0]
    5494:	f011 0f10 	tst.w	r1, #16
    5498:	d106      	bne.n	54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>
    549a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    549c:	7800      	ldrb	r0, [r0, #0]
    549e:	f010 0f10 	tst.w	r0, #16
    54a2:	bf08      	it	eq
    54a4:	2001      	moveq	r0, #1
    54a6:	d001      	beq.n	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    54a8:	f04f 0000 	mov.w	r0, #0
    54ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    54ae:	b932      	cbnz	r2, 54be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    54b0:	89a2      	ldrh	r2, [r4, #12]
    54b2:	b122      	cbz	r2, 54be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    54b4:	f011 0f10 	tst.w	r1, #16
    54b8:	bf08      	it	eq
    54ba:	2101      	moveq	r1, #1
    54bc:	d001      	beq.n	54c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd6>
    54be:	f04f 0100 	mov.w	r1, #0
    54c2:	89e2      	ldrh	r2, [r4, #14]
    54c4:	ea40 0002 	orr.w	r0, r0, r2
    54c8:	4308      	orrs	r0, r1
    54ca:	bf08      	it	eq
    54cc:	bd70      	popeq	{r4, r5, r6, pc}
    54ce:	2001      	movs	r0, #1
    54d0:	bd70      	pop	{r4, r5, r6, pc}
    54d2:	0000      	.short	0x0000
    54d4:	200000c8 	.word	0x200000c8
    54d8:	20000104 	.word	0x20000104
    54dc:	200000da 	.word	0x200000da
    54e0:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    54e4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 578c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    54e8:	2700      	movs	r7, #0
    54ea:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    54ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
    54f2:	463d      	mov	r5, r7
    54f4:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    54f8:	7820      	ldrb	r0, [r4, #0]
    54fa:	2802      	cmp	r0, #2
    54fc:	d004      	beq.n	5508 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    54fe:	f240 4149 	movw	r1, #1097	; 0x449
    5502:	2027      	movs	r0, #39	; 0x27
    5504:	f7fe fdc2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5508:	7c20      	ldrb	r0, [r4, #16]
    550a:	f010 0f40 	tst.w	r0, #64	; 0x40
    550e:	d107      	bne.n	5520 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5510:	2040      	movs	r0, #64	; 0x40
    5512:	69a2      	ldr	r2, [r4, #24]
    5514:	2100      	movs	r1, #0
    5516:	4790      	blx	r2
    5518:	8a20      	ldrh	r0, [r4, #16]
    551a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    551e:	8220      	strh	r0, [r4, #16]
    5520:	9900      	ldr	r1, [sp, #0]
    5522:	489b      	ldr	r0, [pc, #620]	; (5790 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>)
    5524:	2900      	cmp	r1, #0
    5526:	f000 8100 	beq.w	572a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    552a:	7941      	ldrb	r1, [r0, #5]
    552c:	1c49      	adds	r1, r1, #1
    552e:	7141      	strb	r1, [r0, #5]
    5530:	f89a 0012 	ldrb.w	r0, [sl, #18]
    5534:	f008 f874 	bl	d620 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5538:	f008 f856 	bl	d5e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    553c:	f04f 0901 	mov.w	r9, #1
    5540:	b998      	cbnz	r0, 556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5542:	f89a 0012 	ldrb.w	r0, [sl, #18]
    5546:	b180      	cbz	r0, 556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    554a:	7841      	ldrb	r1, [r0, #1]
    554c:	b169      	cbz	r1, 556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    554e:	7800      	ldrb	r0, [r0, #0]
    5550:	f89a 1007 	ldrb.w	r1, [sl, #7]
    5554:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5558:	4288      	cmp	r0, r1
    555a:	d106      	bne.n	556a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    555c:	f884 9002 	strb.w	r9, [r4, #2]
    5560:	b002      	add	sp, #8
    5562:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5566:	f000 b967 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    556a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    556c:	7841      	ldrb	r1, [r0, #1]
    556e:	81a1      	strh	r1, [r4, #12]
    5570:	2900      	cmp	r1, #0
    5572:	bf08      	it	eq
    5574:	62e7      	streq	r7, [r4, #44]	; 0x2c
    5576:	d003      	beq.n	5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    5578:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    557a:	f00a fd03 	bl	ff84 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    557e:	62e0      	str	r0, [r4, #44]	; 0x2c
    5580:	8a20      	ldrh	r0, [r4, #16]
    5582:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5586:	8220      	strh	r0, [r4, #16]
    5588:	70e7      	strb	r7, [r4, #3]
    558a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    558e:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    5592:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    5596:	2801      	cmp	r0, #1
    5598:	d11d      	bne.n	55d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    559a:	f008 ff45 	bl	e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    559e:	4659      	mov	r1, fp
    55a0:	4630      	mov	r0, r6
    55a2:	f00b f85e 	bl	10662 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    55a6:	b1b0      	cbz	r0, 55d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    55a8:	f898 0000 	ldrb.w	r0, [r8]
    55ac:	2800      	cmp	r0, #0
    55ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
    55b2:	bf0c      	ite	eq
    55b4:	f500 70a6 	addeq.w	r0, r0, #332	; 0x14c
    55b8:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    55bc:	8831      	ldrh	r1, [r6, #0]
    55be:	8041      	strh	r1, [r0, #2]
    55c0:	f89b 1008 	ldrb.w	r1, [fp, #8]
    55c4:	7101      	strb	r1, [r0, #4]
    55c6:	f89b 1009 	ldrb.w	r1, [fp, #9]
    55ca:	7141      	strb	r1, [r0, #5]
    55cc:	f880 9000 	strb.w	r9, [r0]
    55d0:	7a20      	ldrb	r0, [r4, #8]
    55d2:	f7fe fb4f 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    55d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    55d8:	f89a 1006 	ldrb.w	r1, [sl, #6]
    55dc:	7800      	ldrb	r0, [r0, #0]
    55de:	f3c0 0080 	ubfx	r0, r0, #2, #1
    55e2:	4288      	cmp	r0, r1
    55e4:	d049      	beq.n	567a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    55e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    55ea:	f100 0678 	add.w	r6, r0, #120	; 0x78
    55ee:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    55f2:	2800      	cmp	r0, #0
    55f4:	d03d      	beq.n	5672 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    55f6:	2802      	cmp	r0, #2
    55f8:	d10e      	bne.n	5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22c>
    55fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    55fc:	f00a fa00 	bl	fa00 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5600:	2800      	cmp	r0, #0
    5602:	d055      	beq.n	56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    5604:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5608:	1c49      	adds	r1, r1, #1
    560a:	f140 0000 	adc.w	r0, r0, #0
    560e:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    5612:	7a20      	ldrb	r0, [r4, #8]
    5614:	f7fe fb2e 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5618:	7177      	strb	r7, [r6, #5]
    561a:	f898 0000 	ldrb.w	r0, [r8]
    561e:	2800      	cmp	r0, #0
    5620:	bf1c      	itt	ne
    5622:	7930      	ldrbne	r0, [r6, #4]
    5624:	2800      	cmpne	r0, #0
    5626:	d009      	beq.n	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x250>
    5628:	7137      	strb	r7, [r6, #4]
    562a:	89e2      	ldrh	r2, [r4, #14]
    562c:	4639      	mov	r1, r7
    562e:	f042 0210 	orr.w	r2, r2, #16
    5632:	81e2      	strh	r2, [r4, #14]
    5634:	69a2      	ldr	r2, [r4, #24]
    5636:	f04f 0010 	mov.w	r0, #16
    563a:	4790      	blx	r2
    563c:	78f0      	ldrb	r0, [r6, #3]
    563e:	b190      	cbz	r0, 5666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27a>
    5640:	70f7      	strb	r7, [r6, #3]
    5642:	f7ff fbcf 	bl	4de4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5646:	b390      	cbz	r0, 56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    5648:	89e2      	ldrh	r2, [r4, #14]
    564a:	2008      	movs	r0, #8
    564c:	f042 0208 	orr.w	r2, r2, #8
    5650:	81e2      	strh	r2, [r4, #14]
    5652:	69a2      	ldr	r2, [r4, #24]
    5654:	2100      	movs	r1, #0
    5656:	4790      	blx	r2
    5658:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    565c:	1c49      	adds	r1, r1, #1
    565e:	f140 0000 	adc.w	r0, r0, #0
    5662:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    5666:	79b0      	ldrb	r0, [r6, #6]
    5668:	2801      	cmp	r0, #1
    566a:	bf0c      	ite	eq
    566c:	71b7      	strbeq	r7, [r6, #6]
    566e:	f886 9006 	strbne.w	r9, [r6, #6]
    5672:	8a20      	ldrh	r0, [r4, #16]
    5674:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5678:	8220      	strh	r0, [r4, #16]
    567a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    567c:	f89a 3007 	ldrb.w	r3, [sl, #7]
    5680:	7808      	ldrb	r0, [r1, #0]
    5682:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    5686:	429a      	cmp	r2, r3
    5688:	d148      	bne.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    568a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    568e:	f000 0003 	and.w	r0, r0, #3
    5692:	f102 0678 	add.w	r6, r2, #120	; 0x78
    5696:	2801      	cmp	r0, #1
    5698:	bf18      	it	ne
    569a:	2802      	cmpne	r0, #2
    569c:	d027      	beq.n	56ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    569e:	2803      	cmp	r0, #3
    56a0:	bf1c      	itt	ne
    56a2:	79a0      	ldrbne	r0, [r4, #6]
    56a4:	f040 0004 	orrne.w	r0, r0, #4
    56a8:	d00c      	beq.n	56c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    56aa:	71a0      	strb	r0, [r4, #6]
    56ac:	e036      	b.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56ae:	e004      	b.n	56ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    56b0:	f240 314b 	movw	r1, #843	; 0x34b
    56b4:	2027      	movs	r0, #39	; 0x27
    56b6:	f7fe fce9 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56ba:	f240 3163 	movw	r1, #867	; 0x363
    56be:	2027      	movs	r0, #39	; 0x27
    56c0:	f7fe fce4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56c4:	f886 9002 	strb.w	r9, [r6, #2]
    56c8:	8a22      	ldrh	r2, [r4, #16]
    56ca:	4648      	mov	r0, r9
    56cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    56d0:	8222      	strh	r2, [r4, #16]
    56d2:	89e2      	ldrh	r2, [r4, #14]
    56d4:	f042 0201 	orr.w	r2, r2, #1
    56d8:	81e2      	strh	r2, [r4, #14]
    56da:	69a2      	ldr	r2, [r4, #24]
    56dc:	4790      	blx	r2
    56de:	79f0      	ldrb	r0, [r6, #7]
    56e0:	2801      	cmp	r0, #1
    56e2:	d101      	bne.n	56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    56e4:	71f7      	strb	r7, [r6, #7]
    56e6:	e019      	b.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56e8:	f886 9007 	strb.w	r9, [r6, #7]
    56ec:	e016      	b.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56ee:	7848      	ldrb	r0, [r1, #1]
    56f0:	b1b8      	cbz	r0, 5722 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    56f2:	8a21      	ldrh	r1, [r4, #16]
    56f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    56f8:	8221      	strh	r1, [r4, #16]
    56fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    56fc:	b171      	cbz	r1, 571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56fe:	28fb      	cmp	r0, #251	; 0xfb
    5700:	bf84      	itt	hi
    5702:	79a0      	ldrbhi	r0, [r4, #6]
    5704:	f040 0010 	orrhi.w	r0, r0, #16
    5708:	d8cf      	bhi.n	56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    570a:	79e0      	ldrb	r0, [r4, #7]
    570c:	2800      	cmp	r0, #0
    570e:	bf08      	it	eq
    5710:	464d      	moveq	r5, r9
    5712:	d003      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5714:	2020      	movs	r0, #32
    5716:	69a2      	ldr	r2, [r4, #24]
    5718:	2100      	movs	r1, #0
    571a:	4790      	blx	r2
    571c:	9801      	ldr	r0, [sp, #4]
    571e:	b9b8      	cbnz	r0, 5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    5720:	e011      	b.n	5746 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5722:	79f0      	ldrb	r0, [r6, #7]
    5724:	2801      	cmp	r0, #1
    5726:	d1df      	bne.n	56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    5728:	e7dc      	b.n	56e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    572a:	7981      	ldrb	r1, [r0, #6]
    572c:	1c49      	adds	r1, r1, #1
    572e:	7181      	strb	r1, [r0, #6]
    5730:	f89a 0012 	ldrb.w	r0, [sl, #18]
    5734:	2800      	cmp	r0, #0
    5736:	bf18      	it	ne
    5738:	f007 ff6c 	blne	d614 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    573c:	8a20      	ldrh	r0, [r4, #16]
    573e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5742:	8220      	strh	r0, [r4, #16]
    5744:	e7ea      	b.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5746:	2001      	movs	r0, #1
    5748:	9900      	ldr	r1, [sp, #0]
    574a:	f7ff fe75 	bl	5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    574e:	b148      	cbz	r0, 5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5750:	2d00      	cmp	r5, #0
    5752:	bf1c      	itt	ne
    5754:	2000      	movne	r0, #0
    5756:	f7ff fdab 	blne	52b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    575a:	b002      	add	sp, #8
    575c:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5760:	f000 b86a 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5764:	2d00      	cmp	r5, #0
    5766:	bf1c      	itt	ne
    5768:	2001      	movne	r0, #1
    576a:	f7ff fda1 	blne	52b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    576e:	2000      	movs	r0, #0
    5770:	f000 f94c 	bl	5a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    5774:	2d00      	cmp	r5, #0
    5776:	bf04      	itt	eq
    5778:	b002      	addeq	sp, #8
    577a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    577e:	2002      	movs	r0, #2
    5780:	b002      	add	sp, #8
    5782:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5786:	f7ff bd93 	b.w	52b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    578a:	0000      	.short	0x0000
    578c:	20000104 	.word	0x20000104
    5790:	20000c4a 	.word	0x20000c4a
    5794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5798:	4e26      	ldr	r6, [pc, #152]	; (5834 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    579a:	4681      	mov	r9, r0
    579c:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    57a0:	6870      	ldr	r0, [r6, #4]
    57a2:	4688      	mov	r8, r1
    57a4:	f100 0478 	add.w	r4, r0, #120	; 0x78
    57a8:	7828      	ldrb	r0, [r5, #0]
    57aa:	2801      	cmp	r0, #1
    57ac:	d004      	beq.n	57b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    57ae:	f240 4106 	movw	r1, #1030	; 0x406
    57b2:	2027      	movs	r0, #39	; 0x27
    57b4:	f7fe fc6a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57b8:	78a0      	ldrb	r0, [r4, #2]
    57ba:	2701      	movs	r7, #1
    57bc:	b160      	cbz	r0, 57d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    57be:	2100      	movs	r1, #0
    57c0:	70a1      	strb	r1, [r4, #2]
    57c2:	89ea      	ldrh	r2, [r5, #14]
    57c4:	2004      	movs	r0, #4
    57c6:	f042 0204 	orr.w	r2, r2, #4
    57ca:	81ea      	strh	r2, [r5, #14]
    57cc:	69aa      	ldr	r2, [r5, #24]
    57ce:	4790      	blx	r2
    57d0:	7830      	ldrb	r0, [r6, #0]
    57d2:	2800      	cmp	r0, #0
    57d4:	bf18      	it	ne
    57d6:	7127      	strbne	r7, [r4, #4]
    57d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    57da:	2603      	movs	r6, #3
    57dc:	7808      	ldrb	r0, [r1, #0]
    57de:	ea36 0000 	bics.w	r0, r6, r0
    57e2:	d10d      	bne.n	5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    57e4:	7960      	ldrb	r0, [r4, #5]
    57e6:	b998      	cbnz	r0, 5810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    57e8:	89ea      	ldrh	r2, [r5, #14]
    57ea:	2002      	movs	r0, #2
    57ec:	f042 0202 	orr.w	r2, r2, #2
    57f0:	81ea      	strh	r2, [r5, #14]
    57f2:	69aa      	ldr	r2, [r5, #24]
    57f4:	4790      	blx	r2
    57f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
    57f8:	7800      	ldrb	r0, [r0, #0]
    57fa:	ea36 0000 	bics.w	r0, r6, r0
    57fe:	d007      	beq.n	5810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    5800:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5802:	7840      	ldrb	r0, [r0, #1]
    5804:	2800      	cmp	r0, #0
    5806:	bf0e      	itee	eq
    5808:	7167      	strbeq	r7, [r4, #5]
    580a:	2002      	movne	r0, #2
    580c:	7160      	strbne	r0, [r4, #5]
    580e:	e000      	b.n	5812 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    5810:	7166      	strb	r6, [r4, #5]
    5812:	ea38 0009 	bics.w	r0, r8, r9
    5816:	d004      	beq.n	5822 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x436>
    5818:	2101      	movs	r1, #1
    581a:	2000      	movs	r0, #0
    581c:	f7ff fe0c 	bl	5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    5820:	b118      	cbz	r0, 582a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x43e>
    5822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5826:	f000 b807 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    582a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    582e:	2000      	movs	r0, #0
    5830:	f000 b85e 	b.w	58f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    5834:	20000104 	.word	0x20000104
    5838:	b510      	push	{r4, lr}
    583a:	f007 ffbf 	bl	d7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    583e:	f007 fe6f 	bl	d520 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5842:	4818      	ldr	r0, [pc, #96]	; (58a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>)
    5844:	6844      	ldr	r4, [r0, #4]
    5846:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    584a:	2801      	cmp	r0, #1
    584c:	bf08      	it	eq
    584e:	f008 fdeb 	bleq	e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5852:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    5856:	b938      	cbnz	r0, 5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    5858:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    585a:	b128      	cbz	r0, 5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    585c:	2200      	movs	r2, #0
    585e:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5862:	4611      	mov	r1, r2
    5864:	f7fd f97c 	bl	2b60 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5868:	4c0f      	ldr	r4, [pc, #60]	; (58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>)
    586a:	2100      	movs	r1, #0
    586c:	69a2      	ldr	r2, [r4, #24]
    586e:	8a20      	ldrh	r0, [r4, #16]
    5870:	4790      	blx	r2
    5872:	6a22      	ldr	r2, [r4, #32]
    5874:	79a1      	ldrb	r1, [r4, #6]
    5876:	78a0      	ldrb	r0, [r4, #2]
    5878:	4790      	blx	r2
    587a:	490c      	ldr	r1, [pc, #48]	; (58ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    587c:	7c48      	ldrb	r0, [r1, #17]
    587e:	b170      	cbz	r0, 589e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5880:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    5884:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    5888:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    588c:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    5890:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    5894:	2001      	movs	r0, #1
    5896:	7408      	strb	r0, [r1, #16]
    5898:	7a20      	ldrb	r0, [r4, #8]
    589a:	f7fe f9eb 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    589e:	2000      	movs	r0, #0
    58a0:	7020      	strb	r0, [r4, #0]
    58a2:	bd10      	pop	{r4, pc}
    58a4:	20000104 	.word	0x20000104
    58a8:	200000c8 	.word	0x200000c8
    58ac:	20000c4a 	.word	0x20000c4a
    58b0:	4808      	ldr	r0, [pc, #32]	; (58d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e8>)
    58b2:	b510      	push	{r4, lr}
    58b4:	7800      	ldrb	r0, [r0, #0]
    58b6:	2802      	cmp	r0, #2
    58b8:	d004      	beq.n	58c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    58ba:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    58be:	2027      	movs	r0, #39	; 0x27
    58c0:	f7fe fbe4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58c4:	4904      	ldr	r1, [pc, #16]	; (58d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>)
    58c6:	2001      	movs	r0, #1
    58c8:	71c8      	strb	r0, [r1, #7]
    58ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58ce:	f7ff bfb3 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    58d2:	0000      	.short	0x0000
    58d4:	200000c8 	.word	0x200000c8
    58d8:	20000c4a 	.word	0x20000c4a
    58dc:	4803      	ldr	r0, [pc, #12]	; (58ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>)
    58de:	7800      	ldrb	r0, [r0, #0]
    58e0:	2800      	cmp	r0, #0
    58e2:	bf08      	it	eq
    58e4:	4770      	bxeq	lr
    58e6:	f7ff bfa7 	b.w	5838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    58ea:	0000      	.short	0x0000
    58ec:	200000c8 	.word	0x200000c8
    58f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58f4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>
    58f8:	4606      	mov	r6, r0
    58fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
    58fe:	f104 0778 	add.w	r7, r4, #120	; 0x78
    5902:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5906:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    5908:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    590c:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    590e:	2908      	cmp	r1, #8
    5910:	d011      	beq.n	5936 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5912:	f00a fdcd 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5916:	bf00      	nop
    5918:	f1b9 0f00 	cmp.w	r9, #0
    591c:	bf04      	itt	eq
    591e:	1d00      	addeq	r0, r0, #4
    5920:	b280      	uxtheq	r0, r0
    5922:	4285      	cmp	r5, r0
    5924:	bf38      	it	cc
    5926:	4628      	movcc	r0, r5
    5928:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    592c:	4d34      	ldr	r5, [pc, #208]	; (5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>)
    592e:	6b28      	ldr	r0, [r5, #48]	; 0x30
    5930:	62a8      	str	r0, [r5, #40]	; 0x28
    5932:	b976      	cbnz	r6, 5952 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    5934:	e003      	b.n	593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    5936:	2104      	movs	r1, #4
    5938:	f00a fdba 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    593c:	e7ec      	b.n	5918 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    593e:	7a68      	ldrb	r0, [r5, #9]
    5940:	7aa9      	ldrb	r1, [r5, #10]
    5942:	4288      	cmp	r0, r1
    5944:	d105      	bne.n	5952 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    5946:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    594a:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    594e:	4288      	cmp	r0, r1
    5950:	d004      	beq.n	595c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    5952:	7a68      	ldrb	r0, [r5, #9]
    5954:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    5958:	f008 fdbe 	bl	e4d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    595c:	7cb8      	ldrb	r0, [r7, #18]
    595e:	b348      	cbz	r0, 59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5960:	4828      	ldr	r0, [pc, #160]	; (5a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x618>)
    5962:	f008 fad5 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5966:	f898 0000 	ldrb.w	r0, [r8]
    596a:	2800      	cmp	r0, #0
    596c:	bf0c      	ite	eq
    596e:	2001      	moveq	r0, #1
    5970:	2000      	movne	r0, #0
    5972:	f080 0101 	eor.w	r1, r0, #1
    5976:	4824      	ldr	r0, [pc, #144]	; (5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    5978:	7601      	strb	r1, [r0, #24]
    597a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    597e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5982:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    5986:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    5988:	f007 fdba 	bl	d500 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    598c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5990:	2801      	cmp	r0, #1
    5992:	bf08      	it	eq
    5994:	2200      	moveq	r2, #0
    5996:	d008      	beq.n	59aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5998:	2802      	cmp	r0, #2
    599a:	bf08      	it	eq
    599c:	2201      	moveq	r2, #1
    599e:	d004      	beq.n	59aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    59a0:	f240 31b3 	movw	r1, #947	; 0x3b3
    59a4:	2006      	movs	r0, #6
    59a6:	f7fe fb71 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59aa:	4649      	mov	r1, r9
    59ac:	2001      	movs	r0, #1
    59ae:	f007 fdd5 	bl	d55c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    59b2:	e004      	b.n	59be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d2>
    59b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    59b6:	f008 faab 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    59ba:	f007 fdb1 	bl	d520 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    59be:	2e00      	cmp	r6, #0
    59c0:	bf04      	itt	eq
    59c2:	2000      	moveq	r0, #0
    59c4:	f008 f912 	bleq	dbec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    59c8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    59cc:	6860      	ldr	r0, [r4, #4]
    59ce:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    59d2:	4288      	cmp	r0, r1
    59d4:	f04f 0201 	mov.w	r2, #1
    59d8:	f04f 0100 	mov.w	r1, #0
    59dc:	bf34      	ite	cc
    59de:	2001      	movcc	r0, #1
    59e0:	2000      	movcs	r0, #0
    59e2:	f008 fc75 	bl	e2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    59e6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    59ea:	2801      	cmp	r0, #1
    59ec:	bf08      	it	eq
    59ee:	f008 fd27 	bleq	e440 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    59f2:	2002      	movs	r0, #2
    59f4:	7028      	strb	r0, [r5, #0]
    59f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59fa:	0000      	.short	0x0000
    59fc:	20000104 	.word	0x20000104
    5a00:	200000c8 	.word	0x200000c8
    5a04:	20000af8 	.word	0x20000af8
    5a08:	20000c00 	.word	0x20000c00
    5a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a10:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8dc>
    5a14:	0002      	movs	r2, r0
    5a16:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    5a1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
    5a1e:	7aa0      	ldrb	r0, [r4, #10]
    5a20:	b083      	sub	sp, #12
    5a22:	f895 1066 	ldrb.w	r1, [r5, #102]	; 0x66
    5a26:	f105 0778 	add.w	r7, r5, #120	; 0x78
    5a2a:	f1a8 0b18 	sub.w	fp, r8, #24
    5a2e:	bf01      	itttt	eq
    5a30:	7a62      	ldrbeq	r2, [r4, #9]
    5a32:	4282      	cmpeq	r2, r0
    5a34:	f895 2067 	ldrbeq.w	r2, [r5, #103]	; 0x67
    5a38:	428a      	cmpeq	r2, r1
    5a3a:	d001      	beq.n	5a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    5a3c:	f008 fd4c 	bl	e4d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5a40:	7978      	ldrb	r0, [r7, #5]
    5a42:	f8df a288 	ldr.w	sl, [pc, #648]	; 5ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e0>
    5a46:	f04f 0900 	mov.w	r9, #0
    5a4a:	2601      	movs	r6, #1
    5a4c:	b150      	cbz	r0, 5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
    5a4e:	2801      	cmp	r0, #1
    5a50:	d06d      	beq.n	5b2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5a52:	2802      	cmp	r0, #2
    5a54:	d06c      	beq.n	5b30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x744>
    5a56:	2803      	cmp	r0, #3
    5a58:	d06b      	beq.n	5b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5a5a:	f240 2162 	movw	r1, #610	; 0x262
    5a5e:	2027      	movs	r0, #39	; 0x27
    5a60:	f7fe fb14 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a64:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5a68:	f100 0178 	add.w	r1, r0, #120	; 0x78
    5a6c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    5a70:	2b24      	cmp	r3, #36	; 0x24
    5a72:	bf1c      	itt	ne
    5a74:	7b49      	ldrbne	r1, [r1, #13]
    5a76:	2924      	cmpne	r1, #36	; 0x24
    5a78:	d008      	beq.n	5a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    5a7a:	f04f 0202 	mov.w	r2, #2
    5a7e:	2b1f      	cmp	r3, #31
    5a80:	bf18      	it	ne
    5a82:	2b20      	cmpne	r3, #32
    5a84:	d01c      	beq.n	5ac0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    5a86:	2922      	cmp	r1, #34	; 0x22
    5a88:	d033      	beq.n	5af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5a8a:	e053      	b.n	5b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5a8c:	f898 1000 	ldrb.w	r1, [r8]
    5a90:	2900      	cmp	r1, #0
    5a92:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5a96:	d00a      	beq.n	5aae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    5a98:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d04e      	beq.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5aa0:	2901      	cmp	r1, #1
    5aa2:	bf18      	it	ne
    5aa4:	2801      	cmpne	r0, #1
    5aa6:	d038      	beq.n	5b1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5aa8:	f04f 0102 	mov.w	r1, #2
    5aac:	e047      	b.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5aae:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d043      	beq.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5ab6:	2901      	cmp	r1, #1
    5ab8:	bf18      	it	ne
    5aba:	2801      	cmpne	r0, #1
    5abc:	d02d      	beq.n	5b1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5abe:	e7f3      	b.n	5aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5ac0:	2922      	cmp	r1, #34	; 0x22
    5ac2:	d016      	beq.n	5af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5ac4:	f898 1000 	ldrb.w	r1, [r8]
    5ac8:	b381      	cbz	r1, 5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    5aca:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5ace:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    5ad2:	f010 0f01 	tst.w	r0, #1
    5ad6:	bf18      	it	ne
    5ad8:	4630      	movne	r0, r6
    5ada:	d004      	beq.n	5ae6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    5adc:	2901      	cmp	r1, #1
    5ade:	bf18      	it	ne
    5ae0:	2801      	cmpne	r0, #1
    5ae2:	d01a      	beq.n	5b1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5ae4:	e7e0      	b.n	5aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5ae6:	f010 0f02 	tst.w	r0, #2
    5aea:	bf18      	it	ne
    5aec:	4610      	movne	r0, r2
    5aee:	d1f5      	bne.n	5adc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5af0:	e025      	b.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5af2:	f898 1000 	ldrb.w	r1, [r8]
    5af6:	b1c9      	cbz	r1, 5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    5af8:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5afc:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    5b00:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    5b04:	ea03 0000 	and.w	r0, r3, r0
    5b08:	f010 0f01 	tst.w	r0, #1
    5b0c:	bf18      	it	ne
    5b0e:	4630      	movne	r0, r6
    5b10:	d006      	beq.n	5b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    5b12:	2901      	cmp	r1, #1
    5b14:	bf18      	it	ne
    5b16:	2801      	cmpne	r0, #1
    5b18:	d1c6      	bne.n	5aa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5b1a:	f04f 0101 	mov.w	r1, #1
    5b1e:	e00e      	b.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5b20:	f010 0f02 	tst.w	r0, #2
    5b24:	bf18      	it	ne
    5b26:	4610      	movne	r0, r2
    5b28:	d1f3      	bne.n	5b12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    5b2a:	e008      	b.n	5b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5b2c:	e002      	b.n	5b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5b2e:	e029      	b.n	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5b30:	e03b      	b.n	5baa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7be>
    5b32:	e04a      	b.n	5bca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7de>
    5b34:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5b38:	2904      	cmp	r1, #4
    5b3a:	bf08      	it	eq
    5b3c:	2108      	moveq	r1, #8
    5b3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5b40:	f00a fcb6 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5b44:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    5b46:	4281      	cmp	r1, r0
    5b48:	bf38      	it	cc
    5b4a:	4608      	movcc	r0, r1
    5b4c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b50:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    5b54:	4658      	mov	r0, fp
    5b56:	f7ff f96f 	bl	4e38 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5b5a:	b148      	cbz	r0, 5b70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x784>
    5b5c:	89e2      	ldrh	r2, [r4, #14]
    5b5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5b64:	81e2      	strh	r2, [r4, #14]
    5b66:	69a2      	ldr	r2, [r4, #24]
    5b68:	2080      	movs	r0, #128	; 0x80
    5b6a:	4790      	blx	r2
    5b6c:	70fe      	strb	r6, [r7, #3]
    5b6e:	e030      	b.n	5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b70:	466a      	mov	r2, sp
    5b72:	a901      	add	r1, sp, #4
    5b74:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5b76:	f00a f92e 	bl	fdd6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5b7a:	6260      	str	r0, [r4, #36]	; 0x24
    5b7c:	b110      	cbz	r0, 5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5b7e:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    5b82:	b111      	cbz	r1, 5b8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x79e>
    5b84:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    5b88:	e023      	b.n	5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b8a:	f89d 1000 	ldrb.w	r1, [sp]
    5b8e:	b931      	cbnz	r1, 5b9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b2>
    5b90:	f8a0 9000 	strh.w	r9, [r0]
    5b94:	f880 9002 	strb.w	r9, [r0, #2]
    5b98:	2101      	movs	r1, #1
    5b9a:	f00a ff2c 	bl	109f6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5b9e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ba4:	f00a fee1 	bl	1096a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5ba8:	e013      	b.n	5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5baa:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5bae:	f8ad 0004 	strh.w	r0, [sp, #4]
    5bb2:	466a      	mov	r2, sp
    5bb4:	a901      	add	r1, sp, #4
    5bb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5bb8:	f00a f90d 	bl	fdd6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5bbc:	6260      	str	r0, [r4, #36]	; 0x24
    5bbe:	b940      	cbnz	r0, 5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5bc0:	f240 2153 	movw	r1, #595	; 0x253
    5bc4:	2027      	movs	r0, #39	; 0x27
    5bc6:	f7fe fa61 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bca:	4658      	mov	r0, fp
    5bcc:	f7ff f934 	bl	4e38 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5bd0:	b1e0      	cbz	r0, 5c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    5bd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bd4:	2208      	movs	r2, #8
    5bd6:	7801      	ldrb	r1, [r0, #0]
    5bd8:	f021 0308 	bic.w	r3, r1, #8
    5bdc:	7003      	strb	r3, [r0, #0]
    5bde:	79b9      	ldrb	r1, [r7, #6]
    5be0:	ea02 01c1 	and.w	r1, r2, r1, lsl #3
    5be4:	4319      	orrs	r1, r3
    5be6:	f021 0304 	bic.w	r3, r1, #4
    5bea:	7003      	strb	r3, [r0, #0]
    5bec:	79f9      	ldrb	r1, [r7, #7]
    5bee:	2204      	movs	r2, #4
    5bf0:	ea02 0181 	and.w	r1, r2, r1, lsl #2
    5bf4:	4319      	orrs	r1, r3
    5bf6:	f021 0110 	bic.w	r1, r1, #16
    5bfa:	7001      	strb	r1, [r0, #0]
    5bfc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5bfe:	f00a f8bb 	bl	fd78 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5c02:	2800      	cmp	r0, #0
    5c04:	bf18      	it	ne
    5c06:	46b1      	movne	r9, r6
    5c08:	d10f      	bne.n	5c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5c0a:	e004      	b.n	5c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x82a>
    5c0c:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5c10:	2027      	movs	r0, #39	; 0x27
    5c12:	f7fe fa3b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c18:	2103      	movs	r1, #3
    5c1a:	7800      	ldrb	r0, [r0, #0]
    5c1c:	ea31 0000 	bics.w	r0, r1, r0
    5c20:	d003      	beq.n	5c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5c22:	f7ff f8c7 	bl	4db4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5c26:	f080 0901 	eor.w	r9, r0, #1
    5c2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c2c:	7801      	ldrb	r1, [r0, #0]
    5c2e:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    5c32:	7001      	strb	r1, [r0, #0]
    5c34:	7c79      	ldrb	r1, [r7, #17]
    5c36:	2900      	cmp	r1, #0
    5c38:	bf1c      	itt	ne
    5c3a:	7841      	ldrbne	r1, [r0, #1]
    5c3c:	2900      	cmpne	r1, #0
    5c3e:	d027      	beq.n	5c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a4>
    5c40:	4823      	ldr	r0, [pc, #140]	; (5cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>)
    5c42:	f008 f965 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c46:	f898 0000 	ldrb.w	r0, [r8]
    5c4a:	2800      	cmp	r0, #0
    5c4c:	bf0c      	ite	eq
    5c4e:	2101      	moveq	r1, #1
    5c50:	2100      	movne	r1, #0
    5c52:	4820      	ldr	r0, [pc, #128]	; (5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e8>)
    5c54:	7601      	strb	r1, [r0, #24]
    5c56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5c5a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c5e:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    5c62:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5c64:	f007 fc4c 	bl	d500 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5c68:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5c6c:	2801      	cmp	r0, #1
    5c6e:	bf08      	it	eq
    5c70:	2200      	moveq	r2, #0
    5c72:	d008      	beq.n	5c86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5c74:	2802      	cmp	r0, #2
    5c76:	bf08      	it	eq
    5c78:	2201      	moveq	r2, #1
    5c7a:	d004      	beq.n	5c86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5c7c:	f240 31b3 	movw	r1, #947	; 0x3b3
    5c80:	2006      	movs	r0, #6
    5c82:	f7fe fa03 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c86:	21fb      	movs	r1, #251	; 0xfb
    5c88:	2000      	movs	r0, #0
    5c8a:	f007 fc67 	bl	d55c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5c8e:	e003      	b.n	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ac>
    5c90:	f008 f93e 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c94:	f007 fc44 	bl	d520 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c98:	6868      	ldr	r0, [r5, #4]
    5c9a:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5c9e:	4288      	cmp	r0, r1
    5ca0:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5ca4:	f04f 0201 	mov.w	r2, #1
    5ca8:	4611      	mov	r1, r2
    5caa:	bf34      	ite	cc
    5cac:	2001      	movcc	r0, #1
    5cae:	2000      	movcs	r0, #0
    5cb0:	f008 fb0e 	bl	e2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5cb4:	7126      	strb	r6, [r4, #4]
    5cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5cb8:	8801      	ldrh	r1, [r0, #0]
    5cba:	8261      	strh	r1, [r4, #18]
    5cbc:	7880      	ldrb	r0, [r0, #2]
    5cbe:	7520      	strb	r0, [r4, #20]
    5cc0:	7026      	strb	r6, [r4, #0]
    5cc2:	b003      	add	sp, #12
    5cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cc8:	20000104 	.word	0x20000104
    5ccc:	20000c28 	.word	0x20000c28
    5cd0:	20000af8 	.word	0x20000af8
    5cd4:	20000c00 	.word	0x20000c00
    5cd8:	000058b1 	.word	0x000058b1
    5cdc:	000054e1 	.word	0x000054e1
    5ce0:	00005795 	.word	0x00005795
    5ce4:	000058dd 	.word	0x000058dd
    5ce8:	00000000 	.word	0x00000000

00005cec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    5cec:	460a      	mov	r2, r1
    5cee:	4907      	ldr	r1, [pc, #28]	; (5d0c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    5cf0:	b510      	push	{r4, lr}
    5cf2:	7809      	ldrb	r1, [r1, #0]
    5cf4:	b141      	cbz	r1, 5d08 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    5cf6:	4b06      	ldr	r3, [pc, #24]	; (5d10 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    5cf8:	7899      	ldrb	r1, [r3, #2]
    5cfa:	b129      	cbz	r1, 5d08 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    5cfc:	4402      	add	r2, r0
    5cfe:	1cd8      	adds	r0, r3, #3
    5d00:	f007 fb28 	bl	d354 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5d04:	2001      	movs	r0, #1
    5d06:	bd10      	pop	{r4, pc}
    5d08:	2000      	movs	r0, #0
    5d0a:	bd10      	pop	{r4, pc}
    5d0c:	20000398 	.word	0x20000398
    5d10:	20001b99 	.word	0x20001b99

00005d14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5d14:	4800      	ldr	r0, [pc, #0]	; (5d18 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5d16:	4770      	bx	lr
    5d18:	20001d6c 	.word	0x20001d6c

00005d1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5d1c:	4904      	ldr	r1, [pc, #16]	; (5d30 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5d1e:	788a      	ldrb	r2, [r1, #2]
    5d20:	4282      	cmp	r2, r0
    5d22:	bf86      	itte	hi
    5d24:	4408      	addhi	r0, r1
    5d26:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    5d2a:	2000      	movls	r0, #0
    5d2c:	4770      	bx	lr
    5d2e:	0000      	.short	0x0000
    5d30:	20001b99 	.word	0x20001b99

00005d34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5d34:	4904      	ldr	r1, [pc, #16]	; (5d48 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5d36:	788a      	ldrb	r2, [r1, #2]
    5d38:	4282      	cmp	r2, r0
    5d3a:	bf86      	itte	hi
    5d3c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5d40:	3083      	addhi	r0, #131	; 0x83
    5d42:	2000      	movls	r0, #0
    5d44:	4770      	bx	lr
    5d46:	0000      	.short	0x0000
    5d48:	20001b99 	.word	0x20001b99

00005d4c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5d4c:	4a05      	ldr	r2, [pc, #20]	; (5d64 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5d4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5d52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5d56:	6802      	ldr	r2, [r0, #0]
    5d58:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5d5c:	8880      	ldrh	r0, [r0, #4]
    5d5e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5d62:	4770      	bx	lr
    5d64:	20001b99 	.word	0x20001b99

00005d68 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d6c:	460e      	mov	r6, r1
    5d6e:	4607      	mov	r7, r0
    5d70:	4615      	mov	r5, r2
    5d72:	2106      	movs	r1, #6
    5d74:	4630      	mov	r0, r6
    5d76:	f000 fe3b 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5d7a:	4c1c      	ldr	r4, [pc, #112]	; (5dec <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5d7c:	b198      	cbz	r0, 5da6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5d7e:	78a1      	ldrb	r1, [r4, #2]
    5d80:	b171      	cbz	r1, 5da0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5d82:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    5d86:	f011 0f01 	tst.w	r1, #1
    5d8a:	bf18      	it	ne
    5d8c:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5d90:	78a1      	ldrb	r1, [r4, #2]
    5d92:	0849      	lsrs	r1, r1, #1
    5d94:	d004      	beq.n	5da0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5d96:	7045      	strb	r5, [r0, #1]
    5d98:	f800 5f02 	strb.w	r5, [r0, #2]!
    5d9c:	1e49      	subs	r1, r1, #1
    5d9e:	d1fa      	bne.n	5d96 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5da0:	2001      	movs	r0, #1
    5da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5da6:	4638      	mov	r0, r7
    5da8:	4631      	mov	r1, r6
    5daa:	f000 fad5 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5dae:	2810      	cmp	r0, #16
    5db0:	d019      	beq.n	5de6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5db2:	78a3      	ldrb	r3, [r4, #2]
    5db4:	2100      	movs	r1, #0
    5db6:	2b00      	cmp	r3, #0
    5db8:	d915      	bls.n	5de6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5dba:	1862      	adds	r2, r4, r1
    5dbc:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    5dc0:	4282      	cmp	r2, r0
    5dc2:	d10b      	bne.n	5ddc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    5dc4:	2910      	cmp	r1, #16
    5dc6:	bf18      	it	ne
    5dc8:	2908      	cmpne	r1, #8
    5dca:	d00c      	beq.n	5de6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5dcc:	eb04 0001 	add.w	r0, r4, r1
    5dd0:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5dd4:	f04f 0001 	mov.w	r0, #1
    5dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ddc:	f101 0101 	add.w	r1, r1, #1
    5de0:	b2c9      	uxtb	r1, r1
    5de2:	428b      	cmp	r3, r1
    5de4:	d8e9      	bhi.n	5dba <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    5de6:	2000      	movs	r0, #0
    5de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dec:	20001b99 	.word	0x20001b99

00005df0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5df0:	4904      	ldr	r1, [pc, #16]	; (5e04 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5df2:	788a      	ldrb	r2, [r1, #2]
    5df4:	4282      	cmp	r2, r0
    5df6:	bf86      	itte	hi
    5df8:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5dfc:	1cc0      	addhi	r0, r0, #3
    5dfe:	2000      	movls	r0, #0
    5e00:	4770      	bx	lr
    5e02:	0000      	.short	0x0000
    5e04:	20001b99 	.word	0x20001b99

00005e08 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e08:	b510      	push	{r4, lr}
    5e0a:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e0e:	2100      	movs	r1, #0
    5e10:	4807      	ldr	r0, [pc, #28]	; (5e30 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5e12:	f009 f88d 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e16:	2208      	movs	r2, #8
    5e18:	21ff      	movs	r1, #255	; 0xff
    5e1a:	4806      	ldr	r0, [pc, #24]	; (5e34 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e1c:	f009 f888 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e20:	4805      	ldr	r0, [pc, #20]	; (5e38 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e22:	2100      	movs	r1, #0
    5e24:	7001      	strb	r1, [r0, #0]
    5e26:	7041      	strb	r1, [r0, #1]
    5e28:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e2c:	8041      	strh	r1, [r0, #2]
    5e2e:	bd10      	pop	{r4, pc}
    5e30:	20001b99 	.word	0x20001b99
    5e34:	2000039c 	.word	0x2000039c
    5e38:	20000398 	.word	0x20000398

00005e3c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5e3c:	4901      	ldr	r1, [pc, #4]	; (5e44 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5e3e:	7008      	strb	r0, [r1, #0]
    5e40:	4770      	bx	lr
    5e42:	0000      	.short	0x0000
    5e44:	20000398 	.word	0x20000398

00005e48 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5e48:	4801      	ldr	r0, [pc, #4]	; (5e50 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5e4a:	7800      	ldrb	r0, [r0, #0]
    5e4c:	4770      	bx	lr
    5e4e:	0000      	.short	0x0000
    5e50:	20000398 	.word	0x20000398

00005e54 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5e54:	4b0b      	ldr	r3, [pc, #44]	; (5e84 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5e56:	f893 c002 	ldrb.w	ip, [r3, #2]
    5e5a:	4584      	cmp	ip, r0
    5e5c:	bf9c      	itt	ls
    5e5e:	2000      	movls	r0, #0
    5e60:	4770      	bxls	lr
    5e62:	4418      	add	r0, r3
    5e64:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e68:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e6c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e70:	700b      	strb	r3, [r1, #0]
    5e72:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e76:	6011      	str	r1, [r2, #0]
    5e78:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e7c:	8090      	strh	r0, [r2, #4]
    5e7e:	2001      	movs	r0, #1
    5e80:	4770      	bx	lr
    5e82:	0000      	.short	0x0000
    5e84:	20001b99 	.word	0x20001b99

00005e88 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5e88:	4907      	ldr	r1, [pc, #28]	; (5ea8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5e8a:	788a      	ldrb	r2, [r1, #2]
    5e8c:	4282      	cmp	r2, r0
    5e8e:	bf9c      	itt	ls
    5e90:	2000      	movls	r0, #0
    5e92:	4770      	bxls	lr
    5e94:	4408      	add	r0, r1
    5e96:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e9a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5e9e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ea2:	f000 0001 	and.w	r0, r0, #1
    5ea6:	4770      	bx	lr
    5ea8:	20001b99 	.word	0x20001b99

00005eac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    5eac:	b510      	push	{r4, lr}
    5eae:	f000 fa53 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5eb2:	2810      	cmp	r0, #16
    5eb4:	d014      	beq.n	5ee0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5eb6:	4a0b      	ldr	r2, [pc, #44]	; (5ee4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    5eb8:	4601      	mov	r1, r0
    5eba:	2000      	movs	r0, #0
    5ebc:	f892 c002 	ldrb.w	ip, [r2, #2]
    5ec0:	f1bc 0f00 	cmp.w	ip, #0
    5ec4:	d90c      	bls.n	5ee0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5ec6:	1813      	adds	r3, r2, r0
    5ec8:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5ecc:	428b      	cmp	r3, r1
    5ece:	d103      	bne.n	5ed8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    5ed0:	2810      	cmp	r0, #16
    5ed2:	bf18      	it	ne
    5ed4:	bd10      	popne	{r4, pc}
    5ed6:	e003      	b.n	5ee0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5ed8:	1c40      	adds	r0, r0, #1
    5eda:	b2c0      	uxtb	r0, r0
    5edc:	4584      	cmp	ip, r0
    5ede:	d8f2      	bhi.n	5ec6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    5ee0:	2008      	movs	r0, #8
    5ee2:	bd10      	pop	{r4, pc}
    5ee4:	20001b99 	.word	0x20001b99

00005ee8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5eec:	4698      	mov	r8, r3
    5eee:	4691      	mov	r9, r2
    5ef0:	460f      	mov	r7, r1
    5ef2:	4606      	mov	r6, r0
    5ef4:	f000 fa30 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5ef8:	4c2d      	ldr	r4, [pc, #180]	; (5fb0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    5efa:	4605      	mov	r5, r0
    5efc:	2810      	cmp	r0, #16
    5efe:	d017      	beq.n	5f30 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    5f00:	78a1      	ldrb	r1, [r4, #2]
    5f02:	2000      	movs	r0, #0
    5f04:	2900      	cmp	r1, #0
    5f06:	d90e      	bls.n	5f26 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5f08:	1822      	adds	r2, r4, r0
    5f0a:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5f0e:	42ab      	cmp	r3, r5
    5f10:	d105      	bne.n	5f1e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5f12:	2810      	cmp	r0, #16
    5f14:	bf1c      	itt	ne
    5f16:	2012      	movne	r0, #18
    5f18:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f1c:	e003      	b.n	5f26 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5f1e:	1c40      	adds	r0, r0, #1
    5f20:	b2c0      	uxtb	r0, r0
    5f22:	4281      	cmp	r1, r0
    5f24:	d8f0      	bhi.n	5f08 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5f26:	2908      	cmp	r1, #8
    5f28:	d23f      	bcs.n	5faa <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5f2a:	2d10      	cmp	r5, #16
    5f2c:	d003      	beq.n	5f36 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5f2e:	e018      	b.n	5f62 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5f30:	78a1      	ldrb	r1, [r4, #2]
    5f32:	2908      	cmp	r1, #8
    5f34:	d239      	bcs.n	5faa <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5f36:	7825      	ldrb	r5, [r4, #0]
    5f38:	2100      	movs	r1, #0
    5f3a:	1c68      	adds	r0, r5, #1
    5f3c:	7020      	strb	r0, [r4, #0]
    5f3e:	2d10      	cmp	r5, #16
    5f40:	d303      	bcc.n	5f4a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5f42:	2146      	movs	r1, #70	; 0x46
    5f44:	2028      	movs	r0, #40	; 0x28
    5f46:	f7fe f8a1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f4a:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5f4e:	683a      	ldr	r2, [r7, #0]
    5f50:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    5f54:	88ba      	ldrh	r2, [r7, #4]
    5f56:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    5f5a:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    5f5e:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5f62:	78a6      	ldrb	r6, [r4, #2]
    5f64:	2210      	movs	r2, #16
    5f66:	1c70      	adds	r0, r6, #1
    5f68:	70a0      	strb	r0, [r4, #2]
    5f6a:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    5f6e:	1cf8      	adds	r0, r7, #3
    5f70:	4649      	mov	r1, r9
    5f72:	f000 fd07 	bl	6984 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f76:	f107 0083 	add.w	r0, r7, #131	; 0x83
    5f7a:	2210      	movs	r2, #16
    5f7c:	4641      	mov	r1, r8
    5f7e:	f000 fd01 	bl	6984 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f82:	2110      	movs	r1, #16
    5f84:	4640      	mov	r0, r8
    5f86:	f000 fd33 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f8a:	4434      	add	r4, r6
    5f8c:	2110      	movs	r1, #16
    5f8e:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5f92:	4648      	mov	r0, r9
    5f94:	f000 fd2c 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f98:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    5f9c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    5fa0:	2000      	movs	r0, #0
    5fa2:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    5fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5faa:	2007      	movs	r0, #7
    5fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fb0:	20001b99 	.word	0x20001b99

00005fb4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5fb4:	b470      	push	{r4, r5, r6}
    5fb6:	484d      	ldr	r0, [pc, #308]	; (60ec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    5fb8:	7881      	ldrb	r1, [r0, #2]
    5fba:	1e49      	subs	r1, r1, #1
    5fbc:	b24b      	sxtb	r3, r1
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	bfbc      	itt	lt
    5fc2:	bc70      	poplt	{r4, r5, r6}
    5fc4:	4770      	bxlt	lr
    5fc6:	bf00      	nop
    5fc8:	7881      	ldrb	r1, [r0, #2]
    5fca:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    5fce:	1e49      	subs	r1, r1, #1
    5fd0:	b2ca      	uxtb	r2, r1
    5fd2:	7082      	strb	r2, [r0, #2]
    5fd4:	fa50 f183 	uxtab	r1, r0, r3
    5fd8:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    5fdc:	4594      	cmp	ip, r2
    5fde:	d03e      	beq.n	605e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    5fe0:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    5fe4:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    5fe8:	f8d5 6003 	ldr.w	r6, [r5, #3]
    5fec:	f8c4 6003 	str.w	r6, [r4, #3]
    5ff0:	f8d5 6007 	ldr.w	r6, [r5, #7]
    5ff4:	f8c4 6007 	str.w	r6, [r4, #7]
    5ff8:	f8d5 600b 	ldr.w	r6, [r5, #11]
    5ffc:	f8c4 600b 	str.w	r6, [r4, #11]
    6000:	f8d5 600f 	ldr.w	r6, [r5, #15]
    6004:	f8c4 600f 	str.w	r6, [r4, #15]
    6008:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    600c:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    6010:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    6014:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    6018:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    601c:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    6020:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    6024:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    6028:	1885      	adds	r5, r0, r2
    602a:	eb00 040c 	add.w	r4, r0, ip
    602e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6032:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    6036:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    603a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    603e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    6042:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    6046:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    604a:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    604e:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6052:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    6056:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    605a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    605e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6062:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    6066:	f012 0f01 	tst.w	r2, #1
    606a:	d133      	bne.n	60d4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    606c:	f890 c002 	ldrb.w	ip, [r0, #2]
    6070:	2200      	movs	r2, #0
    6072:	f1bc 0f00 	cmp.w	ip, #0
    6076:	d90b      	bls.n	6090 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6078:	1884      	adds	r4, r0, r2
    607a:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    607e:	428d      	cmp	r5, r1
    6080:	d102      	bne.n	6088 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    6082:	2a10      	cmp	r2, #16
    6084:	d126      	bne.n	60d4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6086:	e003      	b.n	6090 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    6088:	1c52      	adds	r2, r2, #1
    608a:	b2d2      	uxtb	r2, r2
    608c:	4594      	cmp	ip, r2
    608e:	d8f3      	bhi.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    6090:	7802      	ldrb	r2, [r0, #0]
    6092:	1e52      	subs	r2, r2, #1
    6094:	b2d2      	uxtb	r2, r2
    6096:	7002      	strb	r2, [r0, #0]
    6098:	428a      	cmp	r2, r1
    609a:	d01b      	beq.n	60d4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    609c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    60a0:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    60a4:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    60a8:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    60ac:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    60b0:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    60b4:	7884      	ldrb	r4, [r0, #2]
    60b6:	f890 c000 	ldrb.w	ip, [r0]
    60ba:	2200      	movs	r2, #0
    60bc:	2c00      	cmp	r4, #0
    60be:	d909      	bls.n	60d4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    60c0:	1885      	adds	r5, r0, r2
    60c2:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    60c6:	4565      	cmp	r5, ip
    60c8:	d10b      	bne.n	60e2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    60ca:	2a10      	cmp	r2, #16
    60cc:	bf1c      	itt	ne
    60ce:	4402      	addne	r2, r0
    60d0:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    60d4:	1e59      	subs	r1, r3, #1
    60d6:	b24b      	sxtb	r3, r1
    60d8:	2b00      	cmp	r3, #0
    60da:	f6bf af75 	bge.w	5fc8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    60de:	bc70      	pop	{r4, r5, r6}
    60e0:	4770      	bx	lr
    60e2:	1c52      	adds	r2, r2, #1
    60e4:	b2d2      	uxtb	r2, r2
    60e6:	4294      	cmp	r4, r2
    60e8:	d8ea      	bhi.n	60c0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    60ea:	e7f3      	b.n	60d4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    60ec:	20001b99 	.word	0x20001b99

000060f0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    60f0:	b510      	push	{r4, lr}
    60f2:	f000 f931 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    60f6:	2810      	cmp	r0, #16
    60f8:	d016      	beq.n	6128 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    60fa:	4a0c      	ldr	r2, [pc, #48]	; (612c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    60fc:	4601      	mov	r1, r0
    60fe:	2000      	movs	r0, #0
    6100:	7893      	ldrb	r3, [r2, #2]
    6102:	2b00      	cmp	r3, #0
    6104:	d910      	bls.n	6128 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    6106:	bf00      	nop
    6108:	eb02 0c00 	add.w	ip, r2, r0
    610c:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6110:	458c      	cmp	ip, r1
    6112:	d105      	bne.n	6120 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    6114:	2810      	cmp	r0, #16
    6116:	d007      	beq.n	6128 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    6118:	f000 f942 	bl	63a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    611c:	2001      	movs	r0, #1
    611e:	bd10      	pop	{r4, pc}
    6120:	1c40      	adds	r0, r0, #1
    6122:	b2c0      	uxtb	r0, r0
    6124:	4283      	cmp	r3, r0
    6126:	d8ef      	bhi.n	6108 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    6128:	2000      	movs	r0, #0
    612a:	bd10      	pop	{r4, pc}
    612c:	20001b99 	.word	0x20001b99

00006130 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6130:	4801      	ldr	r0, [pc, #4]	; (6138 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6132:	8840      	ldrh	r0, [r0, #2]
    6134:	4770      	bx	lr
    6136:	0000      	.short	0x0000
    6138:	20000398 	.word	0x20000398

0000613c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    613c:	b138      	cbz	r0, 614e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    613e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6142:	4288      	cmp	r0, r1
    6144:	d803      	bhi.n	614e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6146:	4903      	ldr	r1, [pc, #12]	; (6154 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6148:	8048      	strh	r0, [r1, #2]
    614a:	2001      	movs	r0, #1
    614c:	4770      	bx	lr
    614e:	2000      	movs	r0, #0
    6150:	4770      	bx	lr
    6152:	0000      	.short	0x0000
    6154:	20000398 	.word	0x20000398

00006158 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6158:	4906      	ldr	r1, [pc, #24]	; (6174 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    615a:	788a      	ldrb	r2, [r1, #2]
    615c:	4282      	cmp	r2, r0
    615e:	d906      	bls.n	616e <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    6160:	4408      	add	r0, r1
    6162:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6166:	2800      	cmp	r0, #0
    6168:	bf04      	itt	eq
    616a:	2001      	moveq	r0, #1
    616c:	4770      	bxeq	lr
    616e:	2000      	movs	r0, #0
    6170:	4770      	bx	lr
    6172:	0000      	.short	0x0000
    6174:	20001b99 	.word	0x20001b99

00006178 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	460d      	mov	r5, r1
    617c:	4604      	mov	r4, r0
    617e:	f000 f8eb 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6182:	4a1a      	ldr	r2, [pc, #104]	; (61ec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    6184:	2810      	cmp	r0, #16
    6186:	d014      	beq.n	61b2 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    6188:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    618c:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    6190:	f010 0f01 	tst.w	r0, #1
    6194:	bf1c      	itt	ne
    6196:	2001      	movne	r0, #1
    6198:	bd70      	popne	{r4, r5, r6, pc}
    619a:	7850      	ldrb	r0, [r2, #1]
    619c:	2808      	cmp	r0, #8
    619e:	bf3c      	itt	cc
    61a0:	2001      	movcc	r0, #1
    61a2:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    61a6:	d21e      	bcs.n	61e6 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    61a8:	7850      	ldrb	r0, [r2, #1]
    61aa:	1c40      	adds	r0, r0, #1
    61ac:	7050      	strb	r0, [r2, #1]
    61ae:	2001      	movs	r0, #1
    61b0:	bd70      	pop	{r4, r5, r6, pc}
    61b2:	7850      	ldrb	r0, [r2, #1]
    61b4:	2808      	cmp	r0, #8
    61b6:	d216      	bcs.n	61e6 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    61b8:	7813      	ldrb	r3, [r2, #0]
    61ba:	2001      	movs	r0, #1
    61bc:	1c59      	adds	r1, r3, #1
    61be:	7011      	strb	r1, [r2, #0]
    61c0:	2b10      	cmp	r3, #16
    61c2:	d303      	bcc.n	61cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    61c4:	2146      	movs	r1, #70	; 0x46
    61c6:	2028      	movs	r0, #40	; 0x28
    61c8:	f7fd ff60 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    61d0:	6829      	ldr	r1, [r5, #0]
    61d2:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    61d6:	88a9      	ldrh	r1, [r5, #4]
    61d8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    61dc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    61e0:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    61e4:	e7e0      	b.n	61a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    61e6:	2000      	movs	r0, #0
    61e8:	bd70      	pop	{r4, r5, r6, pc}
    61ea:	0000      	.short	0x0000
    61ec:	20001b99 	.word	0x20001b99

000061f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    61f0:	4901      	ldr	r1, [pc, #4]	; (61f8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    61f2:	7048      	strb	r0, [r1, #1]
    61f4:	4770      	bx	lr
    61f6:	0000      	.short	0x0000
    61f8:	20000398 	.word	0x20000398

000061fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    61fc:	b470      	push	{r4, r5, r6}
    61fe:	482b      	ldr	r0, [pc, #172]	; (62ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    6200:	2500      	movs	r5, #0
    6202:	7801      	ldrb	r1, [r0, #0]
    6204:	1e49      	subs	r1, r1, #1
    6206:	b24b      	sxtb	r3, r1
    6208:	2b00      	cmp	r3, #0
    620a:	db46      	blt.n	629a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    620c:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    6210:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6214:	f011 0f01 	tst.w	r1, #1
    6218:	d03b      	beq.n	6292 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    621a:	7842      	ldrb	r2, [r0, #1]
    621c:	b2d9      	uxtb	r1, r3
    621e:	1e52      	subs	r2, r2, #1
    6220:	7042      	strb	r2, [r0, #1]
    6222:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6226:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    622a:	f890 c002 	ldrb.w	ip, [r0, #2]
    622e:	2200      	movs	r2, #0
    6230:	f1bc 0f00 	cmp.w	ip, #0
    6234:	d90b      	bls.n	624e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    6236:	1884      	adds	r4, r0, r2
    6238:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    623c:	428e      	cmp	r6, r1
    623e:	d102      	bne.n	6246 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    6240:	2a10      	cmp	r2, #16
    6242:	d126      	bne.n	6292 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6244:	e003      	b.n	624e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    6246:	1c52      	adds	r2, r2, #1
    6248:	b2d2      	uxtb	r2, r2
    624a:	4594      	cmp	ip, r2
    624c:	d8f3      	bhi.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    624e:	7802      	ldrb	r2, [r0, #0]
    6250:	1e52      	subs	r2, r2, #1
    6252:	b2d2      	uxtb	r2, r2
    6254:	7002      	strb	r2, [r0, #0]
    6256:	428a      	cmp	r2, r1
    6258:	d01b      	beq.n	6292 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    625a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    625e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6262:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    6266:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    626a:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    626e:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6272:	7884      	ldrb	r4, [r0, #2]
    6274:	f890 c000 	ldrb.w	ip, [r0]
    6278:	2200      	movs	r2, #0
    627a:	2c00      	cmp	r4, #0
    627c:	d909      	bls.n	6292 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    627e:	1886      	adds	r6, r0, r2
    6280:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    6284:	4566      	cmp	r6, ip
    6286:	d10c      	bne.n	62a2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    6288:	2a10      	cmp	r2, #16
    628a:	bf1c      	itt	ne
    628c:	4402      	addne	r2, r0
    628e:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6292:	1e59      	subs	r1, r3, #1
    6294:	b24b      	sxtb	r3, r1
    6296:	2b00      	cmp	r3, #0
    6298:	dab8      	bge.n	620c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    629a:	4805      	ldr	r0, [pc, #20]	; (62b0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    629c:	7045      	strb	r5, [r0, #1]
    629e:	bc70      	pop	{r4, r5, r6}
    62a0:	4770      	bx	lr
    62a2:	1c52      	adds	r2, r2, #1
    62a4:	b2d2      	uxtb	r2, r2
    62a6:	4294      	cmp	r4, r2
    62a8:	d8e9      	bhi.n	627e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    62aa:	e7f2      	b.n	6292 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    62ac:	20001b99 	.word	0x20001b99
    62b0:	20000398 	.word	0x20000398

000062b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    62b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62b8:	4d25      	ldr	r5, [pc, #148]	; (6350 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    62ba:	2600      	movs	r6, #0
    62bc:	4634      	mov	r4, r6
    62be:	7828      	ldrb	r0, [r5, #0]
    62c0:	2800      	cmp	r0, #0
    62c2:	bf8c      	ite	hi
    62c4:	4f23      	ldrhi	r7, [pc, #140]	; (6354 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    62c6:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    62ca:	bf00      	nop
    62cc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    62d0:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    62d4:	f011 0f01 	tst.w	r1, #1
    62d8:	d032      	beq.n	6340 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    62da:	78aa      	ldrb	r2, [r5, #2]
    62dc:	2100      	movs	r1, #0
    62de:	4623      	mov	r3, r4
    62e0:	2a00      	cmp	r2, #0
    62e2:	d909      	bls.n	62f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    62e4:	eb05 0c01 	add.w	ip, r5, r1
    62e8:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    62ec:	459c      	cmp	ip, r3
    62ee:	d004      	beq.n	62fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    62f0:	1c49      	adds	r1, r1, #1
    62f2:	b2c9      	uxtb	r1, r1
    62f4:	428a      	cmp	r2, r1
    62f6:	d8f5      	bhi.n	62e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    62f8:	2110      	movs	r1, #16
    62fa:	428a      	cmp	r2, r1
    62fc:	bf86      	itte	hi
    62fe:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    6302:	1cd3      	addhi	r3, r2, #3
    6304:	2300      	movls	r3, #0
    6306:	2200      	movs	r2, #0
    6308:	2910      	cmp	r1, #16
    630a:	d00c      	beq.n	6326 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    630c:	eb05 0c01 	add.w	ip, r5, r1
    6310:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    6314:	f1b8 0f01 	cmp.w	r8, #1
    6318:	d004      	beq.n	6324 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    631a:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    631e:	f1bc 0f00 	cmp.w	ip, #0
    6322:	d000      	beq.n	6326 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    6324:	2201      	movs	r2, #1
    6326:	1e52      	subs	r2, r2, #1
    6328:	4213      	tst	r3, r2
    632a:	d109      	bne.n	6340 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    632c:	55b9      	strb	r1, [r7, r6]
    632e:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    6332:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    6336:	4630      	mov	r0, r6
    6338:	1c73      	adds	r3, r6, #1
    633a:	b2de      	uxtb	r6, r3
    633c:	f008 fb9c 	bl	ea78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6340:	1c60      	adds	r0, r4, #1
    6342:	b2c4      	uxtb	r4, r0
    6344:	7828      	ldrb	r0, [r5, #0]
    6346:	42a0      	cmp	r0, r4
    6348:	d8c0      	bhi.n	62cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    634e:	0000      	.short	0x0000
    6350:	20001b99 	.word	0x20001b99
    6354:	2000039c 	.word	0x2000039c
    6358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    635c:	4d0f      	ldr	r5, [pc, #60]	; (639c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    635e:	4606      	mov	r6, r0
    6360:	2400      	movs	r4, #0
    6362:	7828      	ldrb	r0, [r5, #0]
    6364:	460f      	mov	r7, r1
    6366:	2800      	cmp	r0, #0
    6368:	d912      	bls.n	6390 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    636a:	bf00      	nop
    636c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6370:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6374:	42b1      	cmp	r1, r6
    6376:	d106      	bne.n	6386 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    6378:	2206      	movs	r2, #6
    637a:	4639      	mov	r1, r7
    637c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6380:	f008 fdc6 	bl	ef10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6384:	b138      	cbz	r0, 6396 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    6386:	1c60      	adds	r0, r4, #1
    6388:	b2c4      	uxtb	r4, r0
    638a:	7828      	ldrb	r0, [r5, #0]
    638c:	42a0      	cmp	r0, r4
    638e:	d8ed      	bhi.n	636c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    6390:	2010      	movs	r0, #16
    6392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6396:	4620      	mov	r0, r4
    6398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    639c:	20001b99 	.word	0x20001b99
    63a0:	b470      	push	{r4, r5, r6}
    63a2:	4949      	ldr	r1, [pc, #292]	; (64c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    63a4:	180d      	adds	r5, r1, r0
    63a6:	788a      	ldrb	r2, [r1, #2]
    63a8:	1e52      	subs	r2, r2, #1
    63aa:	b2d3      	uxtb	r3, r2
    63ac:	708b      	strb	r3, [r1, #2]
    63ae:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    63b2:	4298      	cmp	r0, r3
    63b4:	d03d      	beq.n	6432 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    63b6:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    63ba:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    63be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    63c2:	f8dc 6003 	ldr.w	r6, [ip, #3]
    63c6:	f8c4 6003 	str.w	r6, [r4, #3]
    63ca:	f8dc 6007 	ldr.w	r6, [ip, #7]
    63ce:	f8c4 6007 	str.w	r6, [r4, #7]
    63d2:	f8dc 600b 	ldr.w	r6, [ip, #11]
    63d6:	f8c4 600b 	str.w	r6, [r4, #11]
    63da:	f8dc 600f 	ldr.w	r6, [ip, #15]
    63de:	f8c4 600f 	str.w	r6, [r4, #15]
    63e2:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    63e6:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    63ea:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    63ee:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    63f2:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    63f6:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    63fa:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    63fe:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    6402:	eb01 0c03 	add.w	ip, r1, r3
    6406:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    640a:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    640e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    6412:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    6416:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    641a:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    641e:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    6422:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    6426:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    642a:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    642e:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    6432:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6436:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    643a:	f010 0f01 	tst.w	r0, #1
    643e:	bf1c      	itt	ne
    6440:	bc70      	popne	{r4, r5, r6}
    6442:	4770      	bxne	lr
    6444:	2000      	movs	r0, #0
    6446:	788c      	ldrb	r4, [r1, #2]
    6448:	2c00      	cmp	r4, #0
    644a:	d90d      	bls.n	6468 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    644c:	180b      	adds	r3, r1, r0
    644e:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    6452:	4594      	cmp	ip, r2
    6454:	d104      	bne.n	6460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    6456:	2810      	cmp	r0, #16
    6458:	bf1c      	itt	ne
    645a:	bc70      	popne	{r4, r5, r6}
    645c:	4770      	bxne	lr
    645e:	e003      	b.n	6468 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    6460:	1c40      	adds	r0, r0, #1
    6462:	b2c0      	uxtb	r0, r0
    6464:	4284      	cmp	r4, r0
    6466:	d8f1      	bhi.n	644c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    6468:	7808      	ldrb	r0, [r1, #0]
    646a:	1e40      	subs	r0, r0, #1
    646c:	b2c0      	uxtb	r0, r0
    646e:	7008      	strb	r0, [r1, #0]
    6470:	4290      	cmp	r0, r2
    6472:	bf04      	itt	eq
    6474:	bc70      	popeq	{r4, r5, r6}
    6476:	4770      	bxeq	lr
    6478:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    647c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6480:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    6484:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    6488:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    648c:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    6490:	788c      	ldrb	r4, [r1, #2]
    6492:	780b      	ldrb	r3, [r1, #0]
    6494:	2000      	movs	r0, #0
    6496:	2c00      	cmp	r4, #0
    6498:	bf9c      	itt	ls
    649a:	bc70      	popls	{r4, r5, r6}
    649c:	4770      	bxls	lr
    649e:	bf00      	nop
    64a0:	eb01 0c00 	add.w	ip, r1, r0
    64a4:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    64a8:	459c      	cmp	ip, r3
    64aa:	d106      	bne.n	64ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    64ac:	2810      	cmp	r0, #16
    64ae:	bf1c      	itt	ne
    64b0:	4408      	addne	r0, r1
    64b2:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    64b6:	bc70      	pop	{r4, r5, r6}
    64b8:	4770      	bx	lr
    64ba:	1c40      	adds	r0, r0, #1
    64bc:	b2c0      	uxtb	r0, r0
    64be:	4284      	cmp	r4, r0
    64c0:	d8ee      	bhi.n	64a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    64c2:	bc70      	pop	{r4, r5, r6}
    64c4:	4770      	bx	lr
    64c6:	0000      	.short	0x0000
    64c8:	20001b99 	.word	0x20001b99
    64cc:	4925      	ldr	r1, [pc, #148]	; (6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    64ce:	b410      	push	{r4}
    64d0:	784a      	ldrb	r2, [r1, #1]
    64d2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    64d6:	1e52      	subs	r2, r2, #1
    64d8:	704a      	strb	r2, [r1, #1]
    64da:	2200      	movs	r2, #0
    64dc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    64e0:	f891 c002 	ldrb.w	ip, [r1, #2]
    64e4:	f1bc 0f00 	cmp.w	ip, #0
    64e8:	d90d      	bls.n	6506 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    64ea:	188b      	adds	r3, r1, r2
    64ec:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    64f0:	4284      	cmp	r4, r0
    64f2:	d104      	bne.n	64fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    64f4:	2a10      	cmp	r2, #16
    64f6:	bf1c      	itt	ne
    64f8:	bc10      	popne	{r4}
    64fa:	4770      	bxne	lr
    64fc:	e003      	b.n	6506 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    64fe:	1c52      	adds	r2, r2, #1
    6500:	b2d2      	uxtb	r2, r2
    6502:	4594      	cmp	ip, r2
    6504:	d8f1      	bhi.n	64ea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    6506:	780a      	ldrb	r2, [r1, #0]
    6508:	1e52      	subs	r2, r2, #1
    650a:	b2d2      	uxtb	r2, r2
    650c:	700a      	strb	r2, [r1, #0]
    650e:	4282      	cmp	r2, r0
    6510:	bf04      	itt	eq
    6512:	bc10      	popeq	{r4}
    6514:	4770      	bxeq	lr
    6516:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    651a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    651e:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    6522:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    6526:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    652a:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    652e:	788c      	ldrb	r4, [r1, #2]
    6530:	f891 c000 	ldrb.w	ip, [r1]
    6534:	2200      	movs	r2, #0
    6536:	2c00      	cmp	r4, #0
    6538:	bf9c      	itt	ls
    653a:	bc10      	popls	{r4}
    653c:	4770      	bxls	lr
    653e:	188b      	adds	r3, r1, r2
    6540:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    6544:	4563      	cmp	r3, ip
    6546:	d106      	bne.n	6556 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    6548:	2a10      	cmp	r2, #16
    654a:	bf1c      	itt	ne
    654c:	4411      	addne	r1, r2
    654e:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    6552:	bc10      	pop	{r4}
    6554:	4770      	bx	lr
    6556:	1c52      	adds	r2, r2, #1
    6558:	b2d2      	uxtb	r2, r2
    655a:	4294      	cmp	r4, r2
    655c:	d8ef      	bhi.n	653e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    655e:	bc10      	pop	{r4}
    6560:	4770      	bx	lr
    6562:	0000      	.short	0x0000
    6564:	20001b99 	.word	0x20001b99

00006568 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	b08c      	sub	sp, #48	; 0x30
    656c:	f100 0410 	add.w	r4, r0, #16
    6570:	461d      	mov	r5, r3
    6572:	4616      	mov	r6, r2
    6574:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    6578:	f05f 0008 	movs.w	r0, #8
    657c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6580:	f88c 2001 	strb.w	r2, [ip, #1]
    6584:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    6588:	f80c 2f02 	strb.w	r2, [ip, #2]!
    658c:	1e40      	subs	r0, r0, #1
    658e:	d1f5      	bne.n	657c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6590:	f101 0c10 	add.w	ip, r1, #16
    6594:	466c      	mov	r4, sp
    6596:	f10d 010f 	add.w	r1, sp, #15
    659a:	2008      	movs	r0, #8
    659c:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    65a0:	704a      	strb	r2, [r1, #1]
    65a2:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    65a6:	f801 2f02 	strb.w	r2, [r1, #2]!
    65aa:	1e40      	subs	r0, r0, #1
    65ac:	d1f6      	bne.n	659c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    65ae:	4620      	mov	r0, r4
    65b0:	f009 fdf5 	bl	1019e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    65b4:	b17e      	cbz	r6, 65d6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    65b6:	1e6a      	subs	r2, r5, #1
    65b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    65bc:	f05f 0108 	movs.w	r1, #8
    65c0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    65c4:	7053      	strb	r3, [r2, #1]
    65c6:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    65ca:	f802 3f02 	strb.w	r3, [r2, #2]!
    65ce:	1e49      	subs	r1, r1, #1
    65d0:	d1f6      	bne.n	65c0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    65d2:	b00c      	add	sp, #48	; 0x30
    65d4:	bd70      	pop	{r4, r5, r6, pc}
    65d6:	9808      	ldr	r0, [sp, #32]
    65d8:	6028      	str	r0, [r5, #0]
    65da:	9809      	ldr	r0, [sp, #36]	; 0x24
    65dc:	6068      	str	r0, [r5, #4]
    65de:	980a      	ldr	r0, [sp, #40]	; 0x28
    65e0:	60a8      	str	r0, [r5, #8]
    65e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    65e4:	60e8      	str	r0, [r5, #12]
    65e6:	b00c      	add	sp, #48	; 0x30
    65e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000065ec <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    65ec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    65f0:	7e44      	ldrb	r4, [r0, #25]
    65f2:	b10c      	cbz	r4, 65f8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    65f4:	2c25      	cmp	r4, #37	; 0x25
    65f6:	d903      	bls.n	6600 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    65f8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    65fc:	2012      	movs	r0, #18
    65fe:	4770      	bx	lr
    6600:	2a00      	cmp	r2, #0
    6602:	bf02      	ittt	eq
    6604:	2000      	moveq	r0, #0
    6606:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    660a:	4770      	bxeq	lr
    660c:	f891 c011 	ldrb.w	ip, [r1, #17]
    6610:	261f      	movs	r6, #31
    6612:	2301      	movs	r3, #1
    6614:	4d6c      	ldr	r5, [pc, #432]	; (67c8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6616:	f04f 0800 	mov.w	r8, #0
    661a:	f1bc 0f00 	cmp.w	ip, #0
    661e:	d073      	beq.n	6708 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6620:	f1bc 0f01 	cmp.w	ip, #1
    6624:	bf1e      	ittt	ne
    6626:	201f      	movne	r0, #31
    6628:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    662c:	4770      	bxne	lr
    662e:	f8b0 c000 	ldrh.w	ip, [r0]
    6632:	7d0a      	ldrb	r2, [r1, #20]
    6634:	7c8f      	ldrb	r7, [r1, #18]
    6636:	f891 9013 	ldrb.w	r9, [r1, #19]
    663a:	407a      	eors	r2, r7
    663c:	7d4f      	ldrb	r7, [r1, #21]
    663e:	ea87 0709 	eor.w	r7, r7, r9
    6642:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    6646:	ea82 0c0c 	eor.w	ip, r2, ip
    664a:	2700      	movs	r7, #0
    664c:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    6650:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    6654:	fa99 f9a9 	rbit	r9, r9
    6658:	fa9c fcac 	rbit	ip, ip
    665c:	ea4f 6919 	mov.w	r9, r9, lsr #24
    6660:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6664:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    6668:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    666c:	1c7f      	adds	r7, r7, #1
    666e:	4494      	add	ip, r2
    6670:	b2ff      	uxtb	r7, r7
    6672:	fa1f fc8c 	uxth.w	ip, ip
    6676:	2f03      	cmp	r7, #3
    6678:	d3e8      	bcc.n	664c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    667a:	ea8c 0c02 	eor.w	ip, ip, r2
    667e:	4f52      	ldr	r7, [pc, #328]	; (67c8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6680:	2200      	movs	r2, #0
    6682:	fbec 7205 	umlal	r7, r2, ip, r5
    6686:	0912      	lsrs	r2, r2, #4
    6688:	f06f 0524 	mvn.w	r5, #36	; 0x24
    668c:	fb02 c205 	mla	r2, r2, r5, ip
    6690:	b2d2      	uxtb	r2, r2
    6692:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    6696:	7682      	strb	r2, [r0, #26]
    6698:	f002 0507 	and.w	r5, r2, #7
    669c:	7b3f      	ldrb	r7, [r7, #12]
    669e:	fa03 f505 	lsl.w	r5, r3, r5
    66a2:	422f      	tst	r7, r5
    66a4:	bf18      	it	ne
    66a6:	76c2      	strbne	r2, [r0, #27]
    66a8:	d17e      	bne.n	67a8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    66aa:	fb04 f20c 	mul.w	r2, r4, ip
    66ae:	0c12      	lsrs	r2, r2, #16
    66b0:	1c52      	adds	r2, r2, #1
    66b2:	b2d2      	uxtb	r2, r2
    66b4:	f05f 0400 	movs.w	r4, #0
    66b8:	eb00 0c04 	add.w	ip, r0, r4
    66bc:	f89c c014 	ldrb.w	ip, [ip, #20]
    66c0:	4594      	cmp	ip, r2
    66c2:	bf3c      	itt	cc
    66c4:	eba2 020c 	subcc.w	r2, r2, ip
    66c8:	b2d2      	uxtbcc	r2, r2
    66ca:	d312      	bcc.n	66f2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    66cc:	190d      	adds	r5, r1, r4
    66ce:	f04f 0c00 	mov.w	ip, #0
    66d2:	7b2d      	ldrb	r5, [r5, #12]
    66d4:	fa03 f70c 	lsl.w	r7, r3, ip
    66d8:	423d      	tst	r5, r7
    66da:	bf1c      	itt	ne
    66dc:	1e52      	subne	r2, r2, #1
    66de:	b2d2      	uxtbne	r2, r2
    66e0:	2a00      	cmp	r2, #0
    66e2:	d069      	beq.n	67b8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    66e4:	f10c 0c01 	add.w	ip, ip, #1
    66e8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    66ec:	f1bc 0f08 	cmp.w	ip, #8
    66f0:	d3f0      	bcc.n	66d4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    66f2:	f104 0c01 	add.w	ip, r4, #1
    66f6:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    66fa:	2c05      	cmp	r4, #5
    66fc:	d3dc      	bcc.n	66b8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    66fe:	4630      	mov	r0, r6
    6700:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    6704:	4770      	bx	lr
    6706:	e7ff      	b.n	6708 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    6708:	f890 c01a 	ldrb.w	ip, [r0, #26]
    670c:	f891 4020 	ldrb.w	r4, [r1, #32]
    6710:	4647      	mov	r7, r8
    6712:	fb04 c202 	mla	r2, r4, r2, ip
    6716:	4c2c      	ldr	r4, [pc, #176]	; (67c8 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6718:	f04f 0c00 	mov.w	ip, #0
    671c:	fbe2 4c05 	umlal	r4, ip, r2, r5
    6720:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    6724:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6728:	fb0c 2204 	mla	r2, ip, r4, r2
    672c:	b2d2      	uxtb	r2, r2
    672e:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    6732:	7682      	strb	r2, [r0, #26]
    6734:	f002 0c07 	and.w	ip, r2, #7
    6738:	7b24      	ldrb	r4, [r4, #12]
    673a:	fa03 fc0c 	lsl.w	ip, r3, ip
    673e:	ea14 0f0c 	tst.w	r4, ip
    6742:	bf1f      	itttt	ne
    6744:	76c2      	strbne	r2, [r0, #27]
    6746:	4640      	movne	r0, r8
    6748:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    674c:	4770      	bxne	lr
    674e:	f890 c019 	ldrb.w	ip, [r0, #25]
    6752:	fbb2 f4fc 	udiv	r4, r2, ip
    6756:	fb0c 2214 	mls	r2, ip, r4, r2
    675a:	1c52      	adds	r2, r2, #1
    675c:	b2d2      	uxtb	r2, r2
    675e:	2400      	movs	r4, #0
    6760:	eb00 0c04 	add.w	ip, r0, r4
    6764:	f89c c014 	ldrb.w	ip, [ip, #20]
    6768:	4594      	cmp	ip, r2
    676a:	bf3c      	itt	cc
    676c:	eba2 020c 	subcc.w	r2, r2, ip
    6770:	b2d2      	uxtbcc	r2, r2
    6772:	d312      	bcc.n	679a <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    6774:	190d      	adds	r5, r1, r4
    6776:	f04f 0c00 	mov.w	ip, #0
    677a:	7b2d      	ldrb	r5, [r5, #12]
    677c:	fa03 f80c 	lsl.w	r8, r3, ip
    6780:	ea15 0f08 	tst.w	r5, r8
    6784:	bf1c      	itt	ne
    6786:	1e52      	subne	r2, r2, #1
    6788:	b2d2      	uxtbne	r2, r2
    678a:	b172      	cbz	r2, 67aa <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    678c:	f10c 0c01 	add.w	ip, ip, #1
    6790:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6794:	f1bc 0f08 	cmp.w	ip, #8
    6798:	d3f0      	bcc.n	677c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    679a:	f104 0c01 	add.w	ip, r4, #1
    679e:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    67a2:	2c05      	cmp	r4, #5
    67a4:	d3dc      	bcc.n	6760 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    67a6:	e7aa      	b.n	66fe <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    67a8:	e009      	b.n	67be <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    67aa:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    67ae:	76c1      	strb	r1, [r0, #27]
    67b0:	4638      	mov	r0, r7
    67b2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    67b6:	4770      	bx	lr
    67b8:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    67bc:	76c1      	strb	r1, [r0, #27]
    67be:	4640      	mov	r0, r8
    67c0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    67c4:	4770      	bx	lr
    67c6:	0000      	.short	0x0000
    67c8:	6eb3e453 	.word	0x6eb3e453

000067cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    67cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67d0:	2701      	movs	r7, #1
    67d2:	4604      	mov	r4, r0
    67d4:	2500      	movs	r5, #0
    67d6:	b169      	cbz	r1, 67f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    67d8:	2901      	cmp	r1, #1
    67da:	d05d      	beq.n	6898 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    67dc:	2902      	cmp	r1, #2
    67de:	d07c      	beq.n	68da <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    67e0:	2903      	cmp	r1, #3
    67e2:	bf18      	it	ne
    67e4:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67e8:	4601      	mov	r1, r0
    67ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67ee:	3078      	adds	r0, #120	; 0x78
    67f0:	f009 bfff 	b.w	107f2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    67f4:	f104 0678 	add.w	r6, r4, #120	; 0x78
    67f8:	2288      	movs	r2, #136	; 0x88
    67fa:	2100      	movs	r1, #0
    67fc:	4630      	mov	r0, r6
    67fe:	f008 fb97 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6802:	71b5      	strb	r5, [r6, #6]
    6804:	71f5      	strb	r5, [r6, #7]
    6806:	7335      	strb	r5, [r6, #12]
    6808:	7375      	strb	r5, [r6, #13]
    680a:	73f5      	strb	r5, [r6, #15]
    680c:	7435      	strb	r5, [r6, #16]
    680e:	7175      	strb	r5, [r6, #5]
    6810:	76b5      	strb	r5, [r6, #26]
    6812:	76f5      	strb	r5, [r6, #27]
    6814:	f006 fd86 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6818:	f644 112b 	movw	r1, #18731	; 0x492b
    681c:	4008      	ands	r0, r1
    681e:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    6822:	0a00      	lsrs	r0, r0, #8
    6824:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    6828:	20fe      	movs	r0, #254	; 0xfe
    682a:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    682e:	8826      	ldrh	r6, [r4, #0]
    6830:	2274      	movs	r2, #116	; 0x74
    6832:	2100      	movs	r1, #0
    6834:	4620      	mov	r0, r4
    6836:	f008 fb7b 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    683a:	8026      	strh	r6, [r4, #0]
    683c:	2101      	movs	r1, #1
    683e:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    6842:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    6846:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    684a:	2100      	movs	r1, #0
    684c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6850:	f00a fb39 	bl	10ec6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6854:	221b      	movs	r2, #27
    6856:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    685a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    685e:	66e5      	str	r5, [r4, #108]	; 0x6c
    6860:	6725      	str	r5, [r4, #112]	; 0x70
    6862:	7467      	strb	r7, [r4, #17]
    6864:	2280      	movs	r2, #128	; 0x80
    6866:	2100      	movs	r1, #0
    6868:	f504 7080 	add.w	r0, r4, #256	; 0x100
    686c:	f008 fb60 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6870:	4842      	ldr	r0, [pc, #264]	; (697c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    6872:	6060      	str	r0, [r4, #4]
    6874:	2212      	movs	r2, #18
    6876:	2100      	movs	r1, #0
    6878:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    687c:	f008 fb58 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6880:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    6884:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    6888:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    688c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    6890:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    6894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6898:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    689c:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    68a0:	6861      	ldr	r1, [r4, #4]
    68a2:	4837      	ldr	r0, [pc, #220]	; (6980 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    68a4:	460a      	mov	r2, r1
    68a6:	4408      	add	r0, r1
    68a8:	fbb0 f0f1 	udiv	r0, r0, r1
    68ac:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    68b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    68b4:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    68b8:	8963      	ldrh	r3, [r4, #10]
    68ba:	f104 0078 	add.w	r0, r4, #120	; 0x78
    68be:	f000 f8bb 	bl	6a38 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    68c2:	4621      	mov	r1, r4
    68c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
    68c8:	f009 ff93 	bl	107f2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    68cc:	f008 fafc 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    68d0:	b3f0      	cbz	r0, 6950 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    68d2:	f8d4 1012 	ldr.w	r1, [r4, #18]
    68d6:	0c08      	lsrs	r0, r1, #16
    68d8:	e000      	b.n	68dc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    68da:	e045      	b.n	6968 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    68dc:	f06f 021f 	mvn.w	r2, #31
    68e0:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    68e4:	261f      	movs	r6, #31
    68e6:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    68ea:	3954      	subs	r1, #84	; 0x54
    68ec:	bf1c      	itt	ne
    68ee:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    68f2:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    68f6:	d00a      	beq.n	690e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    68f8:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    68fc:	39aa      	subs	r1, #170	; 0xaa
    68fe:	bf1e      	ittt	ne
    6900:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    6904:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    6908:	f04f 0901 	movne.w	r9, #1
    690c:	d101      	bne.n	6912 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    690e:	f04f 0900 	mov.w	r9, #0
    6912:	f04f 0c00 	mov.w	ip, #0
    6916:	4663      	mov	r3, ip
    6918:	ea4f 010c 	mov.w	r1, ip
    691c:	ea8c 0800 	eor.w	r8, ip, r0
    6920:	ea6f 0808 	mvn.w	r8, r8
    6924:	ea48 0803 	orr.w	r8, r8, r3
    6928:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    692c:	d018      	beq.n	6960 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    692e:	f002 0801 	and.w	r8, r2, #1
    6932:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    6936:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    693a:	f006 0801 	and.w	r8, r6, #1
    693e:	085b      	lsrs	r3, r3, #1
    6940:	0852      	lsrs	r2, r2, #1
    6942:	0876      	lsrs	r6, r6, #1
    6944:	1c49      	adds	r1, r1, #1
    6946:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    694a:	2916      	cmp	r1, #22
    694c:	d3e6      	bcc.n	691c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    694e:	e000      	b.n	6952 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    6950:	e002      	b.n	6958 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    6952:	f1b9 0f00 	cmp.w	r9, #0
    6956:	d003      	beq.n	6960 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    6958:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6960:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    6964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6968:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    696c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6970:	6861      	ldr	r1, [r4, #4]
    6972:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6976:	3078      	adds	r0, #120	; 0x78
    6978:	f000 b85e 	b.w	6a38 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    697c:	003d0900 	.word	0x003d0900
    6980:	01c9c37f 	.word	0x01c9c37f

00006984 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    6984:	2a00      	cmp	r2, #0
    6986:	bf08      	it	eq
    6988:	4770      	bxeq	lr
    698a:	4411      	add	r1, r2
    698c:	1e40      	subs	r0, r0, #1
    698e:	f012 0f01 	tst.w	r2, #1
    6992:	d003      	beq.n	699c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    6994:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    6998:	f800 3f01 	strb.w	r3, [r0, #1]!
    699c:	0852      	lsrs	r2, r2, #1
    699e:	bf08      	it	eq
    69a0:	4770      	bxeq	lr
    69a2:	bf00      	nop
    69a4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    69a8:	7043      	strb	r3, [r0, #1]
    69aa:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    69ae:	f800 3f02 	strb.w	r3, [r0, #2]!
    69b2:	1e52      	subs	r2, r2, #1
    69b4:	d1f6      	bne.n	69a4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    69b6:	4770      	bx	lr

000069b8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    69b8:	b510      	push	{r4, lr}
    69ba:	2820      	cmp	r0, #32
    69bc:	bf3e      	ittt	cc
    69be:	4904      	ldrcc	r1, [pc, #16]	; (69d0 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    69c0:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    69c4:	bd10      	popcc	{r4, pc}
    69c6:	f240 1187 	movw	r1, #391	; 0x187
    69ca:	2029      	movs	r0, #41	; 0x29
    69cc:	f7fd fb5e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69d0:	20001a86 	.word	0x20001a86

000069d4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    69d4:	b510      	push	{r4, lr}
    69d6:	2820      	cmp	r0, #32
    69d8:	bf3e      	ittt	cc
    69da:	4a04      	ldrcc	r2, [pc, #16]	; (69ec <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    69dc:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    69e0:	bd10      	popcc	{r4, pc}
    69e2:	f240 118d 	movw	r1, #397	; 0x18d
    69e6:	2029      	movs	r0, #41	; 0x29
    69e8:	f7fd fb50 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69ec:	20001a86 	.word	0x20001a86

000069f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    69f0:	b430      	push	{r4, r5}
    69f2:	2200      	movs	r2, #0
    69f4:	f1a1 0c01 	sub.w	ip, r1, #1
    69f8:	f1bc 0f00 	cmp.w	ip, #0
    69fc:	dd12      	ble.n	6a24 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    69fe:	1e43      	subs	r3, r0, #1
    6a00:	f011 0f01 	tst.w	r1, #1
    6a04:	bf08      	it	eq
    6a06:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    6a0a:	785c      	ldrb	r4, [r3, #1]
    6a0c:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    6a10:	d008      	beq.n	6a24 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    6a12:	bf00      	nop
    6a14:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    6a18:	4322      	orrs	r2, r4
    6a1a:	785c      	ldrb	r4, [r3, #1]
    6a1c:	432a      	orrs	r2, r5
    6a1e:	f1bc 0c01 	subs.w	ip, ip, #1
    6a22:	d1f7      	bne.n	6a14 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    6a24:	1e49      	subs	r1, r1, #1
    6a26:	bf5c      	itt	pl
    6a28:	5c40      	ldrbpl	r0, [r0, r1]
    6a2a:	4302      	orrpl	r2, r0
    6a2c:	2a00      	cmp	r2, #0
    6a2e:	bf0c      	ite	eq
    6a30:	2001      	moveq	r0, #1
    6a32:	2000      	movne	r0, #0
    6a34:	bc30      	pop	{r4, r5}
    6a36:	4770      	bx	lr
    6a38:	b410      	push	{r4}
    6a3a:	f04f 0c00 	mov.w	ip, #0
    6a3e:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    6a42:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    6a46:	4c16      	ldr	r4, [pc, #88]	; (6aa0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    6a48:	fb0c fc01 	mul.w	ip, ip, r1
    6a4c:	fbbc fcf2 	udiv	ip, ip, r2
    6a50:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    6a54:	f242 7c10 	movw	ip, #10000	; 0x2710
    6a58:	fb03 f30c 	mul.w	r3, r3, ip
    6a5c:	fbb3 f3f2 	udiv	r3, r3, r2
    6a60:	1c5b      	adds	r3, r3, #1
    6a62:	b29b      	uxth	r3, r3
    6a64:	fb03 fc02 	mul.w	ip, r3, r2
    6a68:	8603      	strh	r3, [r0, #48]	; 0x30
    6a6a:	45a4      	cmp	ip, r4
    6a6c:	bf84      	itt	hi
    6a6e:	1e5b      	subhi	r3, r3, #1
    6a70:	8603      	strhhi	r3, [r0, #48]	; 0x30
    6a72:	4b0c      	ldr	r3, [pc, #48]	; (6aa4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    6a74:	f240 2c71 	movw	ip, #625	; 0x271
    6a78:	fbb3 f3f2 	udiv	r3, r3, r2
    6a7c:	1c5b      	adds	r3, r3, #1
    6a7e:	86c3      	strh	r3, [r0, #54]	; 0x36
    6a80:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    6a82:	fb03 f30c 	mul.w	r3, r3, ip
    6a86:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6a8a:	1e5b      	subs	r3, r3, #1
    6a8c:	fbb3 f3f2 	udiv	r3, r3, r2
    6a90:	6243      	str	r3, [r0, #36]	; 0x24
    6a92:	6a03      	ldr	r3, [r0, #32]
    6a94:	4359      	muls	r1, r3
    6a96:	fbb1 f1f2 	udiv	r1, r1, r2
    6a9a:	6201      	str	r1, [r0, #32]
    6a9c:	bc10      	pop	{r4}
    6a9e:	4770      	bx	lr
    6aa0:	01e84800 	.word	0x01e84800
    6aa4:	02625a00 	.word	0x02625a00
    6aa8:	78c3      	ldrb	r3, [r0, #3]
    6aaa:	4602      	mov	r2, r0
    6aac:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    6ab0:	bf08      	it	eq
    6ab2:	4770      	bxeq	lr
    6ab4:	2005      	movs	r0, #5
    6ab6:	7912      	ldrb	r2, [r2, #4]
    6ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6abc:	f012 0f01 	tst.w	r2, #1
    6ac0:	d037      	beq.n	6b32 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    6ac2:	2900      	cmp	r1, #0
    6ac4:	bf14      	ite	ne
    6ac6:	200b      	movne	r0, #11
    6ac8:	4770      	bxeq	lr
    6aca:	bf00      	nop
    6acc:	f012 0f02 	tst.w	r2, #2
    6ad0:	d032      	beq.n	6b38 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    6ad2:	2901      	cmp	r1, #1
    6ad4:	bf14      	ite	ne
    6ad6:	1d80      	addne	r0, r0, #6
    6ad8:	4770      	bxeq	lr
    6ada:	bf00      	nop
    6adc:	f012 0f04 	tst.w	r2, #4
    6ae0:	d02d      	beq.n	6b3e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    6ae2:	2902      	cmp	r1, #2
    6ae4:	bf14      	ite	ne
    6ae6:	1c40      	addne	r0, r0, #1
    6ae8:	4770      	bxeq	lr
    6aea:	bf00      	nop
    6aec:	f012 0f08 	tst.w	r2, #8
    6af0:	d028      	beq.n	6b44 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    6af2:	2903      	cmp	r1, #3
    6af4:	bf14      	ite	ne
    6af6:	1c80      	addne	r0, r0, #2
    6af8:	4770      	bxeq	lr
    6afa:	bf00      	nop
    6afc:	f012 0f10 	tst.w	r2, #16
    6b00:	d023      	beq.n	6b4a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    6b02:	2904      	cmp	r1, #4
    6b04:	bf14      	ite	ne
    6b06:	1cc0      	addne	r0, r0, #3
    6b08:	4770      	bxeq	lr
    6b0a:	bf00      	nop
    6b0c:	f012 0f20 	tst.w	r2, #32
    6b10:	d01e      	beq.n	6b50 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    6b12:	2905      	cmp	r1, #5
    6b14:	bf1a      	itte	ne
    6b16:	3012      	addne	r0, #18
    6b18:	b2c0      	uxtbne	r0, r0
    6b1a:	4770      	bxeq	lr
    6b1c:	f012 0f40 	tst.w	r2, #64	; 0x40
    6b20:	d019      	beq.n	6b56 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    6b22:	2906      	cmp	r1, #6
    6b24:	bf1a      	itte	ne
    6b26:	1c40      	addne	r0, r0, #1
    6b28:	b2c0      	uxtbne	r0, r0
    6b2a:	4770      	bxeq	lr
    6b2c:	2907      	cmp	r1, #7
    6b2e:	d118      	bne.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b30:	e014      	b.n	6b5c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    6b32:	2900      	cmp	r1, #0
    6b34:	d1ca      	bne.n	6acc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    6b36:	e014      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b38:	2901      	cmp	r1, #1
    6b3a:	d1cf      	bne.n	6adc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    6b3c:	e011      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b3e:	2902      	cmp	r1, #2
    6b40:	d1d4      	bne.n	6aec <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    6b42:	e00e      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b44:	2903      	cmp	r1, #3
    6b46:	d1d9      	bne.n	6afc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    6b48:	e00b      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b4a:	2904      	cmp	r1, #4
    6b4c:	d1de      	bne.n	6b0c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    6b4e:	e008      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b50:	2905      	cmp	r1, #5
    6b52:	d1e3      	bne.n	6b1c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    6b54:	e005      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b56:	2906      	cmp	r1, #6
    6b58:	d1e8      	bne.n	6b2c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    6b5a:	e002      	b.n	6b62 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b5c:	4283      	cmp	r3, r0
    6b5e:	bf88      	it	hi
    6b60:	4770      	bxhi	lr
    6b62:	2000      	movs	r0, #0
    6b64:	4770      	bx	lr
	...

00006b68 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6b68:	7841      	ldrb	r1, [r0, #1]
    6b6a:	b141      	cbz	r1, 6b7e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b6c:	78c0      	ldrb	r0, [r0, #3]
    6b6e:	2819      	cmp	r0, #25
    6b70:	d203      	bcs.n	6b7a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6b72:	4a04      	ldr	r2, [pc, #16]	; (6b84 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6b74:	5c10      	ldrb	r0, [r2, r0]
    6b76:	4288      	cmp	r0, r1
    6b78:	d101      	bne.n	6b7e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b7a:	2001      	movs	r0, #1
    6b7c:	4770      	bx	lr
    6b7e:	2000      	movs	r0, #0
    6b80:	4770      	bx	lr
    6b82:	0000      	.short	0x0000
    6b84:	00012458 	.word	0x00012458

00006b88 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6b88:	a20c      	add	r2, pc, #48	; (adr r2, 6bbc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    6b8a:	b082      	sub	sp, #8
    6b8c:	e9d2 1200 	ldrd	r1, r2, [r2]
    6b90:	e9cd 1200 	strd	r1, r2, [sp]
    6b94:	7901      	ldrb	r1, [r0, #4]
    6b96:	7940      	ldrb	r0, [r0, #5]
    6b98:	f001 0207 	and.w	r2, r1, #7
    6b9c:	4669      	mov	r1, sp
    6b9e:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6ba2:	2a01      	cmp	r2, #1
    6ba4:	d807      	bhi.n	6bb6 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    6ba6:	f000 0007 	and.w	r0, r0, #7
    6baa:	5c08      	ldrb	r0, [r1, r0]
    6bac:	2801      	cmp	r0, #1
    6bae:	bf9e      	ittt	ls
    6bb0:	2001      	movls	r0, #1
    6bb2:	b002      	addls	sp, #8
    6bb4:	4770      	bxls	lr
    6bb6:	2000      	movs	r0, #0
    6bb8:	b002      	add	sp, #8
    6bba:	4770      	bx	lr
    6bbc:	02010100 	.word	0x02010100
    6bc0:	03020201 	.word	0x03020201

00006bc4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6bc4:	b510      	push	{r4, lr}
    6bc6:	2201      	movs	r2, #1
    6bc8:	70c1      	strb	r1, [r0, #3]
    6bca:	2919      	cmp	r1, #25
    6bcc:	bf3c      	itt	cc
    6bce:	4a06      	ldrcc	r2, [pc, #24]	; (6be8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6bd0:	5c52      	ldrbcc	r2, [r2, r1]
    6bd2:	d306      	bcc.n	6be2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6bd4:	29ff      	cmp	r1, #255	; 0xff
    6bd6:	d004      	beq.n	6be2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6bd8:	f240 31b3 	movw	r1, #947	; 0x3b3
    6bdc:	202a      	movs	r0, #42	; 0x2a
    6bde:	f7fd fa55 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6be2:	7042      	strb	r2, [r0, #1]
    6be4:	bd10      	pop	{r4, pc}
    6be6:	0000      	.short	0x0000
    6be8:	00012458 	.word	0x00012458

00006bec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6bec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bf0:	b084      	sub	sp, #16
    6bf2:	9804      	ldr	r0, [sp, #16]
    6bf4:	b160      	cbz	r0, 6c10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    6bf6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6d1c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    6bfa:	2102      	movs	r1, #2
    6bfc:	f508 7014 	add.w	r0, r8, #592	; 0x250
    6c00:	f00a f805 	bl	10c0e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6c04:	b148      	cbz	r0, 6c1a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    6c06:	f240 31c3 	movw	r1, #963	; 0x3c3
    6c0a:	202b      	movs	r0, #43	; 0x2b
    6c0c:	f7fd fa3e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c10:	f240 31c2 	movw	r1, #962	; 0x3c2
    6c14:	202b      	movs	r0, #43	; 0x2b
    6c16:	f7fd fa39 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1a:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6c1e:	9000      	str	r0, [sp, #0]
    6c20:	2000      	movs	r0, #0
    6c22:	f7fd fbe7 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c26:	4604      	mov	r4, r0
    6c28:	2001      	movs	r0, #1
    6c2a:	f7fd fbe3 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c2e:	4420      	add	r0, r4
    6c30:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    6c34:	f10b 0001 	add.w	r0, fp, #1
    6c38:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    6c3c:	f04f 0900 	mov.w	r9, #0
    6c40:	4837      	ldr	r0, [pc, #220]	; (6d20 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    6c42:	6801      	ldr	r1, [r0, #0]
    6c44:	b119      	cbz	r1, 6c4e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    6c46:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6c4a:	4550      	cmp	r0, sl
    6c4c:	d006      	beq.n	6c5c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    6c4e:	4835      	ldr	r0, [pc, #212]	; (6d24 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    6c50:	6801      	ldr	r1, [r0, #0]
    6c52:	b131      	cbz	r1, 6c62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6c54:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6c58:	4558      	cmp	r0, fp
    6c5a:	d102      	bne.n	6c62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6c5c:	9804      	ldr	r0, [sp, #16]
    6c5e:	4788      	blx	r1
    6c60:	e006      	b.n	6c70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    6c62:	4831      	ldr	r0, [pc, #196]	; (6d28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    6c64:	6802      	ldr	r2, [r0, #0]
    6c66:	b12a      	cbz	r2, 6c74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6c68:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6c6c:	9904      	ldr	r1, [sp, #16]
    6c6e:	4790      	blx	r2
    6c70:	2800      	cmp	r0, #0
    6c72:	d13b      	bne.n	6cec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6c74:	f508 7414 	add.w	r4, r8, #592	; 0x250
    6c78:	2502      	movs	r5, #2
    6c7a:	2000      	movs	r0, #0
    6c7c:	f7fd fbba 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c80:	4606      	mov	r6, r0
    6c82:	2001      	movs	r0, #1
    6c84:	f7fd fbb6 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c88:	4430      	add	r0, r6
    6c8a:	b2c7      	uxtb	r7, r0
    6c8c:	2600      	movs	r6, #0
    6c8e:	f117 0f02 	cmn.w	r7, #2
    6c92:	bf18      	it	ne
    6c94:	443d      	addne	r5, r7
    6c96:	d014      	beq.n	6cc2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    6c98:	8820      	ldrh	r0, [r4, #0]
    6c9a:	1c40      	adds	r0, r0, #1
    6c9c:	b280      	uxth	r0, r0
    6c9e:	8020      	strh	r0, [r4, #0]
    6ca0:	42a8      	cmp	r0, r5
    6ca2:	bf28      	it	cs
    6ca4:	f8a4 9000 	strhcs.w	r9, [r4]
    6ca8:	8820      	ldrh	r0, [r4, #0]
    6caa:	42b8      	cmp	r0, r7
    6cac:	d301      	bcc.n	6cb2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    6cae:	42a8      	cmp	r0, r5
    6cb0:	d30b      	bcc.n	6cca <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6cb2:	a902      	add	r1, sp, #8
    6cb4:	f009 fb2d 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6cb8:	b138      	cbz	r0, 6cca <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6cba:	1c70      	adds	r0, r6, #1
    6cbc:	b2c6      	uxtb	r6, r0
    6cbe:	42b5      	cmp	r5, r6
    6cc0:	d8ea      	bhi.n	6c98 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    6cc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6cc6:	8020      	strh	r0, [r4, #0]
    6cc8:	e004      	b.n	6cd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    6cca:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    6cce:	9800      	ldr	r0, [sp, #0]
    6cd0:	4281      	cmp	r1, r0
    6cd2:	d1b5      	bne.n	6c40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    6cd4:	4815      	ldr	r0, [pc, #84]	; (6d2c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    6cd6:	6801      	ldr	r1, [r0, #0]
    6cd8:	b111      	cbz	r1, 6ce0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    6cda:	9804      	ldr	r0, [sp, #16]
    6cdc:	4788      	blx	r1
    6cde:	b928      	cbnz	r0, 6cec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6ce0:	4813      	ldr	r0, [pc, #76]	; (6d30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    6ce2:	6801      	ldr	r1, [r0, #0]
    6ce4:	b131      	cbz	r1, 6cf4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6ce6:	9804      	ldr	r0, [sp, #16]
    6ce8:	4788      	blx	r1
    6cea:	b118      	cbz	r0, 6cf4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6cec:	b005      	add	sp, #20
    6cee:	2001      	movs	r0, #1
    6cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cf4:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    6cf8:	2800      	cmp	r0, #0
    6cfa:	bf04      	itt	eq
    6cfc:	b005      	addeq	sp, #20
    6cfe:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d02:	9804      	ldr	r0, [sp, #16]
    6d04:	2121      	movs	r1, #33	; 0x21
    6d06:	f880 9001 	strb.w	r9, [r0, #1]
    6d0a:	9804      	ldr	r0, [sp, #16]
    6d0c:	7001      	strb	r1, [r0, #0]
    6d0e:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    6d12:	b005      	add	sp, #20
    6d14:	2001      	movs	r0, #1
    6d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d1a:	0000      	.short	0x0000
    6d1c:	20001314 	.word	0x20001314
    6d20:	20000354 	.word	0x20000354
    6d24:	20000364 	.word	0x20000364
    6d28:	2000035c 	.word	0x2000035c
    6d2c:	2000036c 	.word	0x2000036c
    6d30:	20000358 	.word	0x20000358

00006d34 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6d34:	b510      	push	{r4, lr}
    6d36:	4604      	mov	r4, r0
    6d38:	4815      	ldr	r0, [pc, #84]	; (6d90 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    6d3a:	6801      	ldr	r1, [r0, #0]
    6d3c:	b329      	cbz	r1, 6d8a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6d3e:	4620      	mov	r0, r4
    6d40:	4788      	blx	r1
    6d42:	b310      	cbz	r0, 6d8a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6d44:	7820      	ldrb	r0, [r4, #0]
    6d46:	2814      	cmp	r0, #20
    6d48:	d002      	beq.n	6d50 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    6d4a:	2817      	cmp	r0, #23
    6d4c:	d003      	beq.n	6d56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    6d4e:	e01a      	b.n	6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d50:	7920      	ldrb	r0, [r4, #4]
    6d52:	b928      	cbnz	r0, 6d60 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    6d54:	e017      	b.n	6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d56:	7920      	ldrb	r0, [r4, #4]
    6d58:	b1a8      	cbz	r0, 6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d5a:	f000 fe07 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6d5e:	b990      	cbnz	r0, 6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d60:	88e4      	ldrh	r4, [r4, #6]
    6d62:	2101      	movs	r1, #1
    6d64:	4620      	mov	r0, r4
    6d66:	f009 f9c8 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d6a:	b160      	cbz	r0, 6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d6c:	8800      	ldrh	r0, [r0, #0]
    6d6e:	f7fe f813 	bl	4d98 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6d72:	2101      	movs	r1, #1
    6d74:	4620      	mov	r0, r4
    6d76:	f7fd fbb5 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d7a:	b120      	cbz	r0, 6d86 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d7c:	f240 1115 	movw	r1, #277	; 0x115
    6d80:	202b      	movs	r0, #43	; 0x2b
    6d82:	f7fd f983 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d86:	2001      	movs	r0, #1
    6d88:	bd10      	pop	{r4, pc}
    6d8a:	2000      	movs	r0, #0
    6d8c:	bd10      	pop	{r4, pc}
    6d8e:	0000      	.short	0x0000
    6d90:	20000350 	.word	0x20000350

00006d94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d98:	b083      	sub	sp, #12
    6d9a:	460d      	mov	r5, r1
    6d9c:	4606      	mov	r6, r0
    6d9e:	4669      	mov	r1, sp
    6da0:	f009 fab7 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6da4:	2800      	cmp	r0, #0
    6da6:	d17d      	bne.n	6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6da8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 6f34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a0>
    6dac:	f8df a188 	ldr.w	sl, [pc, #392]	; 6f38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a4>
    6db0:	f05f 0700 	movs.w	r7, #0
    6db4:	f89d 0000 	ldrb.w	r0, [sp]
    6db8:	b180      	cbz	r0, 6ddc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6dba:	f000 fba9 	bl	7510 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    6dbe:	42b0      	cmp	r0, r6
    6dc0:	d070      	beq.n	6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6dc2:	f8da 2000 	ldr.w	r2, [sl]
    6dc6:	b31a      	cbz	r2, 6e10 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6dc8:	4629      	mov	r1, r5
    6dca:	4630      	mov	r0, r6
    6dcc:	4790      	blx	r2
    6dce:	b1f8      	cbz	r0, 6e10 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6dd0:	4628      	mov	r0, r5
    6dd2:	f000 f9e9 	bl	71a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6dd6:	2800      	cmp	r0, #0
    6dd8:	d1ec      	bne.n	6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6dda:	e0a2      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6ddc:	f005 f9d2 	bl	c184 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    6de0:	42b0      	cmp	r0, r6
    6de2:	d05f      	beq.n	6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6de4:	f8d9 2000 	ldr.w	r2, [r9]
    6de8:	b14a      	cbz	r2, 6dfe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6dea:	4629      	mov	r1, r5
    6dec:	4630      	mov	r0, r6
    6dee:	4790      	blx	r2
    6df0:	b128      	cbz	r0, 6dfe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6df2:	4628      	mov	r0, r5
    6df4:	f000 f9d8 	bl	71a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6df8:	2800      	cmp	r0, #0
    6dfa:	d1db      	bne.n	6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6dfc:	e091      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6dfe:	9801      	ldr	r0, [sp, #4]
    6e00:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6e04:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    6e08:	b968      	cbnz	r0, 6e26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6e0a:	7f20      	ldrb	r0, [r4, #28]
    6e0c:	b940      	cbnz	r0, 6e20 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    6e0e:	e00a      	b.n	6e26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6e10:	9801      	ldr	r0, [sp, #4]
    6e12:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6e16:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    6e1a:	b920      	cbnz	r0, 6e26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6e1c:	7f20      	ldrb	r0, [r4, #28]
    6e1e:	b110      	cbz	r0, 6e26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6e20:	f04f 0b01 	mov.w	fp, #1
    6e24:	e001      	b.n	6e2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    6e26:	f04f 0b00 	mov.w	fp, #0
    6e2a:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    6e2e:	2800      	cmp	r0, #0
    6e30:	bf1c      	itt	ne
    6e32:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    6e36:	f010 0f02 	tstne.w	r0, #2
    6e3a:	d017      	beq.n	6e6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6e3c:	706f      	strb	r7, [r5, #1]
    6e3e:	f04f 0001 	mov.w	r0, #1
    6e42:	7028      	strb	r0, [r5, #0]
    6e44:	712f      	strb	r7, [r5, #4]
    6e46:	f8a5 6005 	strh.w	r6, [r5, #5]
    6e4a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    6e4e:	71e8      	strb	r0, [r5, #7]
    6e50:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    6e54:	8128      	strh	r0, [r5, #8]
    6e56:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    6e5a:	8168      	strh	r0, [r5, #10]
    6e5c:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    6e60:	4628      	mov	r0, r5
    6e62:	f000 f9a1 	bl	71a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6e66:	2800      	cmp	r0, #0
    6e68:	d1a4      	bne.n	6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6e6a:	e05a      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6e6c:	4630      	mov	r0, r6
    6e6e:	f7fd fcdb 	bl	4828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6e72:	ea5f 0800 	movs.w	r8, r0
    6e76:	d01b      	beq.n	6eb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    6e78:	f008 fed8 	bl	fc2c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6e7c:	b1e8      	cbz	r0, 6eba <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    6e7e:	706f      	strb	r7, [r5, #1]
    6e80:	210f      	movs	r1, #15
    6e82:	7029      	strb	r1, [r5, #0]
    6e84:	80ee      	strh	r6, [r5, #6]
    6e86:	8128      	strh	r0, [r5, #8]
    6e88:	2101      	movs	r1, #1
    6e8a:	1e40      	subs	r0, r0, #1
    6e8c:	7129      	strb	r1, [r5, #4]
    6e8e:	b284      	uxth	r4, r0
    6e90:	2200      	movs	r2, #0
    6e92:	4611      	mov	r1, r2
    6e94:	4640      	mov	r0, r8
    6e96:	f009 f837 	bl	ff08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6e9a:	1e61      	subs	r1, r4, #1
    6e9c:	b28c      	uxth	r4, r1
    6e9e:	d2f7      	bcs.n	6e90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    6ea0:	4628      	mov	r0, r5
    6ea2:	e000      	b.n	6ea6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6ea4:	e041      	b.n	6f2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6ea6:	f000 f97f 	bl	71a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6eaa:	2800      	cmp	r0, #0
    6eac:	d182      	bne.n	6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6eae:	e038      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6eb0:	f44f 710f 	mov.w	r1, #572	; 0x23c
    6eb4:	202b      	movs	r0, #43	; 0x2b
    6eb6:	f7fd f8e9 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eba:	4630      	mov	r0, r6
    6ebc:	f7fd fc9e 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6ec0:	b148      	cbz	r0, 6ed6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x142>
    6ec2:	f1bb 0f00 	cmp.w	fp, #0
    6ec6:	d030      	beq.n	6f2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6ec8:	f008 fd92 	bl	f9f0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6ecc:	b368      	cbz	r0, 6f2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6ece:	f89d 0000 	ldrb.w	r0, [sp]
    6ed2:	b128      	cbz	r0, 6ee0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x14c>
    6ed4:	e00b      	b.n	6eee <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x15a>
    6ed6:	f240 215a 	movw	r1, #602	; 0x25a
    6eda:	202b      	movs	r0, #43	; 0x2b
    6edc:	f7fd f8d6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ee0:	9801      	ldr	r0, [sp, #4]
    6ee2:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    6ee6:	8841      	ldrh	r1, [r0, #2]
    6ee8:	42b1      	cmp	r1, r6
    6eea:	bf08      	it	eq
    6eec:	7007      	strbeq	r7, [r0, #0]
    6eee:	4630      	mov	r0, r6
    6ef0:	f7fd ff52 	bl	4d98 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6ef4:	2100      	movs	r1, #0
    6ef6:	4630      	mov	r0, r6
    6ef8:	f7fd faf4 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6efc:	2101      	movs	r1, #1
    6efe:	4630      	mov	r0, r6
    6f00:	f7fd faf0 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f04:	706f      	strb	r7, [r5, #1]
    6f06:	200c      	movs	r0, #12
    6f08:	7028      	strb	r0, [r5, #0]
    6f0a:	712f      	strb	r7, [r5, #4]
    6f0c:	f8a5 6005 	strh.w	r6, [r5, #5]
    6f10:	7f60      	ldrb	r0, [r4, #29]
    6f12:	71e8      	strb	r0, [r5, #7]
    6f14:	7727      	strb	r7, [r4, #28]
    6f16:	4628      	mov	r0, r5
    6f18:	f000 f946 	bl	71a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6f1c:	2800      	cmp	r0, #0
    6f1e:	f47f af49 	bne.w	6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6f22:	b003      	add	sp, #12
    6f24:	2001      	movs	r0, #1
    6f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f2a:	b003      	add	sp, #12
    6f2c:	2000      	movs	r0, #0
    6f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f32:	0000      	.short	0x0000
    6f34:	20000360 	.word	0x20000360
    6f38:	20000368 	.word	0x20000368

00006f3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f40:	f8df 815c 	ldr.w	r8, [pc, #348]	; 70a0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    6f44:	4681      	mov	r9, r0
    6f46:	b085      	sub	sp, #20
    6f48:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6f4c:	468a      	mov	sl, r1
    6f4e:	b130      	cbz	r0, 6f5e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6f50:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6f54:	2800      	cmp	r0, #0
    6f56:	bf04      	itt	eq
    6f58:	b005      	addeq	sp, #20
    6f5a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f5e:	2100      	movs	r1, #0
    6f60:	f208 204e 	addw	r0, r8, #590	; 0x24e
    6f64:	f009 fe53 	bl	10c0e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6f68:	2800      	cmp	r0, #0
    6f6a:	d17a      	bne.n	7062 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    6f6c:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6f70:	f04f 0b00 	mov.w	fp, #0
    6f74:	f8cd 0000 	str.w	r0, [sp]
    6f78:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6f7c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    6f80:	39ff      	subs	r1, #255	; 0xff
    6f82:	d057      	beq.n	7034 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6f84:	f8a9 0000 	strh.w	r0, [r9]
    6f88:	f889 b005 	strb.w	fp, [r9, #5]
    6f8c:	f7fd fc36 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f90:	4605      	mov	r5, r0
    6f92:	f008 fe79 	bl	fc88 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6f96:	0004      	movs	r4, r0
    6f98:	d04c      	beq.n	7034 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6f9a:	4601      	mov	r1, r0
    6f9c:	aa01      	add	r2, sp, #4
    6f9e:	4628      	mov	r0, r5
    6fa0:	f008 fe97 	bl	fcd2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6fa4:	f8a9 0002 	strh.w	r0, [r9, #2]
    6fa8:	b128      	cbz	r0, 6fb6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    6faa:	28fb      	cmp	r0, #251	; 0xfb
    6fac:	d907      	bls.n	6fbe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    6fae:	21c1      	movs	r1, #193	; 0xc1
    6fb0:	202b      	movs	r0, #43	; 0x2b
    6fb2:	f7fd f86b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fb6:	21c0      	movs	r1, #192	; 0xc0
    6fb8:	202b      	movs	r0, #43	; 0x2b
    6fba:	f7fd f867 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fbe:	9801      	ldr	r0, [sp, #4]
    6fc0:	f009 fcac 	bl	1091c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    6fc4:	2101      	movs	r1, #1
    6fc6:	2801      	cmp	r0, #1
    6fc8:	bf08      	it	eq
    6fca:	f889 1004 	strbeq.w	r1, [r9, #4]
    6fce:	d008      	beq.n	6fe2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6fd0:	2802      	cmp	r0, #2
    6fd2:	bf08      	it	eq
    6fd4:	f889 0004 	strbeq.w	r0, [r9, #4]
    6fd8:	d003      	beq.n	6fe2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6fda:	21d0      	movs	r1, #208	; 0xd0
    6fdc:	202b      	movs	r0, #43	; 0x2b
    6fde:	f7fd f855 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fe2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    6fe6:	2003      	movs	r0, #3
    6fe8:	9000      	str	r0, [sp, #0]
    6fea:	4652      	mov	r2, sl
    6fec:	4621      	mov	r1, r4
    6fee:	4628      	mov	r0, r5
    6ff0:	f008 fc94 	bl	f91c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    6ff4:	4628      	mov	r0, r5
    6ff6:	f8c9 a008 	str.w	sl, [r9, #8]
    6ffa:	f008 fdc1 	bl	fb80 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6ffe:	b188      	cbz	r0, 7024 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    7000:	2200      	movs	r2, #0
    7002:	4611      	mov	r1, r2
    7004:	4628      	mov	r0, r5
    7006:	f008 ff7f 	bl	ff08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    700a:	b178      	cbz	r0, 702c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    700c:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    7010:	b120      	cbz	r0, 701c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    7012:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    7016:	1e40      	subs	r0, r0, #1
    7018:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    701c:	b005      	add	sp, #20
    701e:	2001      	movs	r0, #1
    7020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7024:	21e0      	movs	r1, #224	; 0xe0
    7026:	202b      	movs	r0, #43	; 0x2b
    7028:	f7fd f830 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    702c:	21e5      	movs	r1, #229	; 0xe5
    702e:	202b      	movs	r0, #43	; 0x2b
    7030:	f7fd f82c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7034:	2600      	movs	r6, #0
    7036:	f208 244e 	addw	r4, r8, #590	; 0x24e
    703a:	4630      	mov	r0, r6
    703c:	f7fd f9da 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7040:	4605      	mov	r5, r0
    7042:	2001      	movs	r0, #1
    7044:	f7fd f9d6 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7048:	4428      	add	r0, r5
    704a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    704e:	4637      	mov	r7, r6
    7050:	bf18      	it	ne
    7052:	442e      	addne	r6, r5
    7054:	d016      	beq.n	7084 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    7056:	8820      	ldrh	r0, [r4, #0]
    7058:	1c40      	adds	r0, r0, #1
    705a:	b280      	uxth	r0, r0
    705c:	8020      	strh	r0, [r4, #0]
    705e:	42b0      	cmp	r0, r6
    7060:	e000      	b.n	7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    7062:	e019      	b.n	7098 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    7064:	bf28      	it	cs
    7066:	f8a4 b000 	strhcs.w	fp, [r4]
    706a:	8820      	ldrh	r0, [r4, #0]
    706c:	42a8      	cmp	r0, r5
    706e:	d301      	bcc.n	7074 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    7070:	42b0      	cmp	r0, r6
    7072:	d30b      	bcc.n	708c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    7074:	a902      	add	r1, sp, #8
    7076:	f009 f94c 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    707a:	b138      	cbz	r0, 708c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    707c:	1c78      	adds	r0, r7, #1
    707e:	b2c7      	uxtb	r7, r0
    7080:	42be      	cmp	r6, r7
    7082:	d8e8      	bhi.n	7056 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    7084:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7088:	8020      	strh	r0, [r4, #0]
    708a:	e005      	b.n	7098 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    708c:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    7090:	9800      	ldr	r0, [sp, #0]
    7092:	4281      	cmp	r1, r0
    7094:	f47f af70 	bne.w	6f78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    7098:	b005      	add	sp, #20
    709a:	2000      	movs	r0, #0
    709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70a0:	20001314 	.word	0x20001314

000070a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    70a4:	b510      	push	{r4, lr}
    70a6:	7901      	ldrb	r1, [r0, #4]
    70a8:	b161      	cbz	r1, 70c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    70aa:	2901      	cmp	r1, #1
    70ac:	bf1c      	itt	ne
    70ae:	2000      	movne	r0, #0
    70b0:	bd10      	popne	{r4, pc}
    70b2:	8842      	ldrh	r2, [r0, #2]
    70b4:	6883      	ldr	r3, [r0, #8]
    70b6:	8800      	ldrh	r0, [r0, #0]
    70b8:	f05f 0101 	movs.w	r1, #1
    70bc:	f000 f80e 	bl	70dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    70c0:	b940      	cbnz	r0, 70d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    70c2:	e004      	b.n	70ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    70c4:	8842      	ldrh	r2, [r0, #2]
    70c6:	6883      	ldr	r3, [r0, #8]
    70c8:	8800      	ldrh	r0, [r0, #0]
    70ca:	2102      	movs	r1, #2
    70cc:	e7f6      	b.n	70bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    70ce:	4902      	ldr	r1, [pc, #8]	; (70d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    70d0:	2001      	movs	r0, #1
    70d2:	7008      	strb	r0, [r1, #0]
    70d4:	2001      	movs	r0, #1
    70d6:	bd10      	pop	{r4, pc}
    70d8:	20001314 	.word	0x20001314
    70dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70e0:	b084      	sub	sp, #16
    70e2:	4689      	mov	r9, r1
    70e4:	469a      	mov	sl, r3
    70e6:	4615      	mov	r5, r2
    70e8:	4606      	mov	r6, r0
    70ea:	a902      	add	r1, sp, #8
    70ec:	f009 f911 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    70f0:	2800      	cmp	r0, #0
    70f2:	d14e      	bne.n	7192 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    70f4:	9803      	ldr	r0, [sp, #12]
    70f6:	2d00      	cmp	r5, #0
    70f8:	f100 0478 	add.w	r4, r0, #120	; 0x78
    70fc:	bf04      	itt	eq
    70fe:	2001      	moveq	r0, #1
    7100:	74e0      	strbeq	r0, [r4, #19]
    7102:	d046      	beq.n	7192 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7104:	4630      	mov	r0, r6
    7106:	f7fd fb8f 	bl	4828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    710a:	ea5f 0800 	movs.w	r8, r0
    710e:	d00d      	beq.n	712c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    7110:	4629      	mov	r1, r5
    7112:	f008 fdee 	bl	fcf2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7116:	0007      	movs	r7, r0
    7118:	d004      	beq.n	7124 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    711a:	4822      	ldr	r0, [pc, #136]	; (71a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    711c:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    7120:	4285      	cmp	r5, r0
    7122:	d907      	bls.n	7134 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    7124:	b004      	add	sp, #16
    7126:	2000      	movs	r0, #0
    7128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    712c:	2181      	movs	r1, #129	; 0x81
    712e:	202b      	movs	r0, #43	; 0x2b
    7130:	f7fc ffac 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7134:	aa01      	add	r2, sp, #4
    7136:	4639      	mov	r1, r7
    7138:	4640      	mov	r0, r8
    713a:	f008 fdca 	bl	fcd2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    713e:	9801      	ldr	r0, [sp, #4]
    7140:	2600      	movs	r6, #0
    7142:	8006      	strh	r6, [r0, #0]
    7144:	7086      	strb	r6, [r0, #2]
    7146:	7ce1      	ldrb	r1, [r4, #19]
    7148:	2900      	cmp	r1, #0
    714a:	bf18      	it	ne
    714c:	f04f 0902 	movne.w	r9, #2
    7150:	4649      	mov	r1, r9
    7152:	f009 fc50 	bl	109f6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7156:	2003      	movs	r0, #3
    7158:	9000      	str	r0, [sp, #0]
    715a:	462b      	mov	r3, r5
    715c:	4652      	mov	r2, sl
    715e:	4639      	mov	r1, r7
    7160:	4640      	mov	r0, r8
    7162:	f008 fc10 	bl	f986 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    7166:	4629      	mov	r1, r5
    7168:	4640      	mov	r0, r8
    716a:	f008 fd32 	bl	fbd2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    716e:	b1a0      	cbz	r0, 719a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    7170:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7174:	b160      	cbz	r0, 7190 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7176:	9803      	ldr	r0, [sp, #12]
    7178:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    717c:	b128      	cbz	r0, 718a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    717e:	9803      	ldr	r0, [sp, #12]
    7180:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    7184:	9803      	ldr	r0, [sp, #12]
    7186:	f009 ffb3 	bl	110f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    718a:	9803      	ldr	r0, [sp, #12]
    718c:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    7190:	74e6      	strb	r6, [r4, #19]
    7192:	b004      	add	sp, #16
    7194:	2001      	movs	r0, #1
    7196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    719a:	2197      	movs	r1, #151	; 0x97
    719c:	202b      	movs	r0, #43	; 0x2b
    719e:	f7fc ff75 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71a2:	0000      	.short	0x0000
    71a4:	20001314 	.word	0x20001314
    71a8:	b530      	push	{r4, r5, lr}
    71aa:	4604      	mov	r4, r0
    71ac:	4862      	ldr	r0, [pc, #392]	; (7338 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x294>)
    71ae:	b087      	sub	sp, #28
    71b0:	f890 1256 	ldrb.w	r1, [r0, #598]	; 0x256
    71b4:	7820      	ldrb	r0, [r4, #0]
    71b6:	f011 0f01 	tst.w	r1, #1
    71ba:	bf08      	it	eq
    71bc:	281d      	cmpeq	r0, #29
    71be:	d004      	beq.n	71ca <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x126>
    71c0:	281c      	cmp	r0, #28
    71c2:	d024      	beq.n	720e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x16a>
    71c4:	2815      	cmp	r0, #21
    71c6:	d07c      	beq.n	72c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21e>
    71c8:	e0b2      	b.n	7330 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    71ca:	88a0      	ldrh	r0, [r4, #4]
    71cc:	f8ad 0000 	strh.w	r0, [sp]
    71d0:	a902      	add	r1, sp, #8
    71d2:	f009 f89e 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71d6:	b118      	cbz	r0, 71e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x13c>
    71d8:	2151      	movs	r1, #81	; 0x51
    71da:	202b      	movs	r0, #43	; 0x2b
    71dc:	f7fc ff56 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71e0:	9803      	ldr	r0, [sp, #12]
    71e2:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    71e6:	f88d 1002 	strb.w	r1, [sp, #2]
    71ea:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    71ee:	f88d 0003 	strb.w	r0, [sp, #3]
    71f2:	2000      	movs	r0, #0
    71f4:	f8ad 0004 	strh.w	r0, [sp, #4]
    71f8:	2102      	movs	r1, #2
    71fa:	4668      	mov	r0, sp
    71fc:	f00a fccf 	bl	11b9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7200:	2800      	cmp	r0, #0
    7202:	d04c      	beq.n	729e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fa>
    7204:	f240 112b 	movw	r1, #299	; 0x12b
    7208:	202b      	movs	r0, #43	; 0x2b
    720a:	f7fc ff3f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    720e:	f011 0f02 	tst.w	r1, #2
    7212:	d011      	beq.n	7238 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>
    7214:	88a5      	ldrh	r5, [r4, #4]
    7216:	2101      	movs	r1, #1
    7218:	4628      	mov	r0, r5
    721a:	f008 ff6e 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    721e:	2800      	cmp	r0, #0
    7220:	bf1c      	itt	ne
    7222:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    7226:	2800      	cmpne	r0, #0
    7228:	d03a      	beq.n	72a0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fc>
    722a:	88a4      	ldrh	r4, [r4, #4]
    722c:	a903      	add	r1, sp, #12
    722e:	4620      	mov	r0, r4
    7230:	f00a fb8f 	bl	11952 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7234:	b1e8      	cbz	r0, 7272 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ce>
    7236:	e047      	b.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    7238:	88a4      	ldrh	r4, [r4, #4]
    723a:	a903      	add	r1, sp, #12
    723c:	4620      	mov	r0, r4
    723e:	f00a fb88 	bl	11952 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7242:	bbe8      	cbnz	r0, 72c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21c>
    7244:	f8ad 4000 	strh.w	r4, [sp]
    7248:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    724c:	f8ad 0002 	strh.w	r0, [sp, #2]
    7250:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7254:	f8ad 0004 	strh.w	r0, [sp, #4]
    7258:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    725c:	f8ad 0006 	strh.w	r0, [sp, #6]
    7260:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7264:	f8ad 0008 	strh.w	r0, [sp, #8]
    7268:	4668      	mov	r0, sp
    726a:	f00a fbe1 	bl	11a30 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    726e:	bb48      	cbnz	r0, 72c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    7270:	e04a      	b.n	7308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    7272:	f8ad 4000 	strh.w	r4, [sp]
    7276:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    727a:	f8ad 0002 	strh.w	r0, [sp, #2]
    727e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7282:	f8ad 0004 	strh.w	r0, [sp, #4]
    7286:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    728a:	f8ad 0006 	strh.w	r0, [sp, #6]
    728e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7292:	f8ad 0008 	strh.w	r0, [sp, #8]
    7296:	4668      	mov	r0, sp
    7298:	f00a fbca 	bl	11a30 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    729c:	b990      	cbnz	r0, 72c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    729e:	e033      	b.n	7308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    72a0:	2100      	movs	r1, #0
    72a2:	4628      	mov	r0, r5
    72a4:	f008 ff29 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    72a8:	2800      	cmp	r0, #0
    72aa:	bf1c      	itt	ne
    72ac:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    72b0:	2800      	cmpne	r0, #0
    72b2:	d03d      	beq.n	7330 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    72b4:	88a4      	ldrh	r4, [r4, #4]
    72b6:	a903      	add	r1, sp, #12
    72b8:	4620      	mov	r0, r4
    72ba:	f00a fb4a 	bl	11952 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    72be:	e002      	b.n	72c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x222>
    72c0:	e002      	b.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    72c2:	e024      	b.n	730e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x26a>
    72c4:	e01b      	b.n	72fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x25a>
    72c6:	b120      	cbz	r0, 72d2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x22e>
    72c8:	f44f 7199 	mov.w	r1, #306	; 0x132
    72cc:	202b      	movs	r0, #43	; 0x2b
    72ce:	f7fc fedd 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72d2:	f8ad 4000 	strh.w	r4, [sp]
    72d6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    72da:	f8ad 0002 	strh.w	r0, [sp, #2]
    72de:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    72e2:	f8ad 0004 	strh.w	r0, [sp, #4]
    72e6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    72ea:	f8ad 0006 	strh.w	r0, [sp, #6]
    72ee:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    72f2:	f8ad 0008 	strh.w	r0, [sp, #8]
    72f6:	4668      	mov	r0, sp
    72f8:	f00a fb9a 	bl	11a30 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72fc:	b120      	cbz	r0, 7308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    72fe:	f240 113b 	movw	r1, #315	; 0x13b
    7302:	202b      	movs	r0, #43	; 0x2b
    7304:	f7fc fec2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7308:	b007      	add	sp, #28
    730a:	2001      	movs	r0, #1
    730c:	bd30      	pop	{r4, r5, pc}
    730e:	f011 0f04 	tst.w	r1, #4
    7312:	bf04      	itt	eq
    7314:	7ba0      	ldrbeq	r0, [r4, #14]
    7316:	f010 0f01 	tsteq.w	r0, #1
    731a:	d0f5      	beq.n	7308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    731c:	88a0      	ldrh	r0, [r4, #4]
    731e:	4669      	mov	r1, sp
    7320:	f008 fff7 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7324:	b920      	cbnz	r0, 7330 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    7326:	9801      	ldr	r0, [sp, #4]
    7328:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    732c:	2800      	cmp	r0, #0
    732e:	d1eb      	bne.n	7308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    7330:	b007      	add	sp, #28
    7332:	2000      	movs	r0, #0
    7334:	bd30      	pop	{r4, r5, pc}
    7336:	0000      	.short	0x0000
    7338:	20001314 	.word	0x20001314

0000733c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    733c:	b570      	push	{r4, r5, r6, lr}
    733e:	4c13      	ldr	r4, [pc, #76]	; (738c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    7340:	4605      	mov	r5, r0
    7342:	7c61      	ldrb	r1, [r4, #17]
    7344:	2902      	cmp	r1, #2
    7346:	bf18      	it	ne
    7348:	2903      	cmpne	r1, #3
    734a:	d109      	bne.n	7360 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    734c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    7350:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7354:	f7fe fdaa 	bl	5eac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7358:	2808      	cmp	r0, #8
    735a:	bf1c      	itt	ne
    735c:	2001      	movne	r0, #1
    735e:	bd70      	popne	{r4, r5, r6, pc}
    7360:	7c60      	ldrb	r0, [r4, #17]
    7362:	b145      	cbz	r5, 7376 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    7364:	2800      	cmp	r0, #0
    7366:	bf16      	itet	ne
    7368:	2802      	cmpne	r0, #2
    736a:	2000      	moveq	r0, #0
    736c:	2001      	movne	r0, #1
    736e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7372:	f7fd be1b 	b.w	4fac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    7376:	2800      	cmp	r0, #0
    7378:	bf1a      	itte	ne
    737a:	2802      	cmpne	r0, #2
    737c:	2101      	movne	r1, #1
    737e:	2100      	moveq	r1, #0
    7380:	7820      	ldrb	r0, [r4, #0]
    7382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7386:	f7fd bdc5 	b.w	4f14 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    738a:	0000      	.short	0x0000
    738c:	20001574 	.word	0x20001574

00007390 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7394:	4c5c      	ldr	r4, [pc, #368]	; (7508 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    7396:	4601      	mov	r1, r0
    7398:	7c60      	ldrb	r0, [r4, #17]
    739a:	2800      	cmp	r0, #0
    739c:	bf16      	itet	ne
    739e:	2802      	cmpne	r0, #2
    73a0:	2000      	moveq	r0, #0
    73a2:	2001      	movne	r0, #1
    73a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    73a8:	b301      	cbz	r1, 73ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    73aa:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    73ae:	f7fd fdc3 	bl	4f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    73b2:	7c60      	ldrb	r0, [r4, #17]
    73b4:	2802      	cmp	r0, #2
    73b6:	bf16      	itet	ne
    73b8:	2803      	cmpne	r0, #3
    73ba:	2101      	moveq	r1, #1
    73bc:	2100      	movne	r1, #0
    73be:	74a1      	strb	r1, [r4, #18]
    73c0:	f04f 0008 	mov.w	r0, #8
    73c4:	74e0      	strb	r0, [r4, #19]
    73c6:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    73ca:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    73ce:	f04f 0501 	mov.w	r5, #1
    73d2:	f04f 0600 	mov.w	r6, #0
    73d6:	2801      	cmp	r0, #1
    73d8:	bf04      	itt	eq
    73da:	7952      	ldrbeq	r2, [r2, #5]
    73dc:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    73e0:	d013      	beq.n	740a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    73e2:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    73e6:	2801      	cmp	r0, #1
    73e8:	d008      	beq.n	73fc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    73ea:	e00c      	b.n	7406 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    73ec:	7823      	ldrb	r3, [r4, #0]
    73ee:	4601      	mov	r1, r0
    73f0:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    73f4:	4618      	mov	r0, r3
    73f6:	f7fd fd6f 	bl	4ed8 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    73fa:	e7da      	b.n	73b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    73fc:	7950      	ldrb	r0, [r2, #5]
    73fe:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7402:	2840      	cmp	r0, #64	; 0x40
    7404:	d001      	beq.n	740a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    7406:	2000      	movs	r0, #0
    7408:	e000      	b.n	740c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    740a:	2001      	movs	r0, #1
    740c:	7520      	strb	r0, [r4, #20]
    740e:	2900      	cmp	r1, #0
    7410:	bf04      	itt	eq
    7412:	78a0      	ldrbeq	r0, [r4, #2]
    7414:	f010 0f04 	tsteq.w	r0, #4
    7418:	d006      	beq.n	7428 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    741a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    741e:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7422:	f7fe fd43 	bl	5eac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7426:	74e0      	strb	r0, [r4, #19]
    7428:	6366      	str	r6, [r4, #52]	; 0x34
    742a:	f007 fc1c 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    742e:	63a0      	str	r0, [r4, #56]	; 0x38
    7430:	2700      	movs	r7, #0
    7432:	7ce0      	ldrb	r0, [r4, #19]
    7434:	f7fe fc7e 	bl	5d34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7438:	4680      	mov	r8, r0
    743a:	7ca0      	ldrb	r0, [r4, #18]
    743c:	2800      	cmp	r0, #0
    743e:	bf18      	it	ne
    7440:	f1b8 0f00 	cmpne.w	r8, #0
    7444:	d003      	beq.n	744e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    7446:	7ce0      	ldrb	r0, [r4, #19]
    7448:	f7fe fc68 	bl	5d1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    744c:	b168      	cbz	r0, 746a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    744e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    7452:	2800      	cmp	r0, #0
    7454:	bf1c      	itt	ne
    7456:	7d20      	ldrbne	r0, [r4, #20]
    7458:	2800      	cmpne	r0, #0
    745a:	d01e      	beq.n	749a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    745c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7460:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7464:	2901      	cmp	r1, #1
    7466:	d00e      	beq.n	7486 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    7468:	e012      	b.n	7490 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    746a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    746e:	463a      	mov	r2, r7
    7470:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7474:	4640      	mov	r0, r8
    7476:	f008 fefe 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    747a:	7ce1      	ldrb	r1, [r4, #19]
    747c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7480:	f7fe fc64 	bl	5d4c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    7484:	e009      	b.n	749a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    7486:	7940      	ldrb	r0, [r0, #5]
    7488:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    748c:	2840      	cmp	r0, #64	; 0x40
    748e:	d032      	beq.n	74f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    7490:	4631      	mov	r1, r6
    7492:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7496:	f008 fede 	bl	10256 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    749a:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    749e:	78a0      	ldrb	r0, [r4, #2]
    74a0:	f010 0f04 	tst.w	r0, #4
    74a4:	bf1a      	itte	ne
    74a6:	7ca0      	ldrbne	r0, [r4, #18]
    74a8:	2800      	cmpne	r0, #0
    74aa:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    74ae:	f04f 0700 	mov.w	r7, #0
    74b2:	7ce0      	ldrb	r0, [r4, #19]
    74b4:	f7fe fc9c 	bl	5df0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    74b8:	0006      	movs	r6, r0
    74ba:	bf08      	it	eq
    74bc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    74c0:	2110      	movs	r1, #16
    74c2:	f7ff fa95 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    74c6:	2800      	cmp	r0, #0
    74c8:	bf18      	it	ne
    74ca:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    74ce:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    74d2:	463a      	mov	r2, r7
    74d4:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    74d8:	4630      	mov	r0, r6
    74da:	f008 fecc 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    74de:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    74e2:	4c0a      	ldr	r4, [pc, #40]	; (750c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    74e4:	6820      	ldr	r0, [r4, #0]
    74e6:	f009 fb62 	bl	10bae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    74ea:	6820      	ldr	r0, [r4, #0]
    74ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74f0:	2101      	movs	r1, #1
    74f2:	f009 bb63 	b.w	10bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    74f6:	f7fe fc0d 	bl	5d14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    74fa:	463a      	mov	r2, r7
    74fc:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7500:	f008 feb9 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7504:	e7c9      	b.n	749a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    7506:	0000      	.short	0x0000
    7508:	20001574 	.word	0x20001574
    750c:	2000010c 	.word	0x2000010c

00007510 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    7510:	4804      	ldr	r0, [pc, #16]	; (7524 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    7512:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    7516:	2900      	cmp	r1, #0
    7518:	bf14      	ite	ne
    751a:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    751e:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    7522:	4770      	bx	lr
    7524:	20001574 	.word	0x20001574

00007528 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    7528:	480b      	ldr	r0, [pc, #44]	; (7558 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    752a:	8840      	ldrh	r0, [r0, #2]
    752c:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7530:	b131      	cbz	r1, 7540 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    7532:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7536:	2800      	cmp	r0, #0
    7538:	bf04      	itt	eq
    753a:	201f      	moveq	r0, #31
    753c:	4770      	bxeq	lr
    753e:	e002      	b.n	7546 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    7540:	f3c0 0140 	ubfx	r1, r0, #1, #1
    7544:	b109      	cbz	r1, 754a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    7546:	2000      	movs	r0, #0
    7548:	4770      	bx	lr
    754a:	f010 0f01 	tst.w	r0, #1
    754e:	bf14      	ite	ne
    7550:	20ee      	movne	r0, #238	; 0xee
    7552:	20ff      	moveq	r0, #255	; 0xff
    7554:	4770      	bx	lr
    7556:	0000      	.short	0x0000
    7558:	20001574 	.word	0x20001574

0000755c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7560:	4c41      	ldr	r4, [pc, #260]	; (7668 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    7562:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    7566:	2500      	movs	r5, #0
    7568:	b181      	cbz	r1, 758c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    756a:	7045      	strb	r5, [r0, #1]
    756c:	211b      	movs	r1, #27
    756e:	7001      	strb	r1, [r0, #0]
    7570:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    7574:	6041      	str	r1, [r0, #4]
    7576:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    757a:	6081      	str	r1, [r0, #8]
    757c:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    7580:	7301      	strb	r1, [r0, #12]
    7582:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    7586:	2001      	movs	r0, #1
    7588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    758c:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    7590:	b141      	cbz	r1, 75a4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    7592:	7045      	strb	r5, [r0, #1]
    7594:	2107      	movs	r1, #7
    7596:	7001      	strb	r1, [r0, #0]
    7598:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    759c:	6041      	str	r1, [r0, #4]
    759e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    75a2:	e05d      	b.n	7660 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    75a4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    75a8:	2114      	movs	r1, #20
    75aa:	4f30      	ldr	r7, [pc, #192]	; (766c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    75ac:	2601      	movs	r6, #1
    75ae:	b30a      	cbz	r2, 75f4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    75b0:	4680      	mov	r8, r0
    75b2:	7045      	strb	r5, [r0, #1]
    75b4:	f800 1b04 	strb.w	r1, [r0], #4
    75b8:	2220      	movs	r2, #32
    75ba:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    75be:	f7fc fbdb 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    75c2:	f888 6008 	strb.w	r6, [r8, #8]
    75c6:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    75ca:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    75ce:	2800      	cmp	r0, #0
    75d0:	d146      	bne.n	7660 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    75d2:	bf00      	nop
    75d4:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    75d8:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    75dc:	6878      	ldr	r0, [r7, #4]
    75de:	7c41      	ldrb	r1, [r0, #17]
    75e0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    75e4:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    75e8:	8800      	ldrh	r0, [r0, #0]
    75ea:	f7fd f907 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    75ee:	f008 fc3a 	bl	fe66 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    75f2:	e035      	b.n	7660 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    75f4:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    75f8:	b302      	cbz	r2, 763c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    75fa:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    75fe:	b18a      	cbz	r2, 7624 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    7600:	4680      	mov	r8, r0
    7602:	7045      	strb	r5, [r0, #1]
    7604:	f800 1b04 	strb.w	r1, [r0], #4
    7608:	2220      	movs	r2, #32
    760a:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    760e:	f7fc fbb3 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7612:	f888 6008 	strb.w	r6, [r8, #8]
    7616:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    761a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    761e:	2800      	cmp	r0, #0
    7620:	d0d8      	beq.n	75d4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    7622:	e01d      	b.n	7660 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7624:	7045      	strb	r5, [r0, #1]
    7626:	2117      	movs	r1, #23
    7628:	7001      	strb	r1, [r0, #0]
    762a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    762e:	6041      	str	r1, [r0, #4]
    7630:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    7634:	8101      	strh	r1, [r0, #8]
    7636:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    763a:	e011      	b.n	7660 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    763c:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    7640:	2900      	cmp	r1, #0
    7642:	bf04      	itt	eq
    7644:	2000      	moveq	r0, #0
    7646:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    764a:	7045      	strb	r5, [r0, #1]
    764c:	2120      	movs	r1, #32
    764e:	f800 1b04 	strb.w	r1, [r0], #4
    7652:	2222      	movs	r2, #34	; 0x22
    7654:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    7658:	f7fc fb8e 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    765c:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7660:	2001      	movs	r0, #1
    7662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7666:	0000      	.short	0x0000
    7668:	20001574 	.word	0x20001574
    766c:	2000010c 	.word	0x2000010c

00007670 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    7670:	4801      	ldr	r0, [pc, #4]	; (7678 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    7672:	6880      	ldr	r0, [r0, #8]
    7674:	4770      	bx	lr
    7676:	0000      	.short	0x0000
    7678:	20001574 	.word	0x20001574

0000767c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    767e:	4c0f      	ldr	r4, [pc, #60]	; (76bc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x40>)
    7680:	8861      	ldrh	r1, [r4, #2]
    7682:	f3c1 1200 	ubfx	r2, r1, #4, #1
    7686:	2a00      	cmp	r2, #0
    7688:	bf04      	itt	eq
    768a:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    768e:	2900      	cmpeq	r1, #0
    7690:	d111      	bne.n	76b6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x3a>
    7692:	4605      	mov	r5, r0
    7694:	f104 0018 	add.w	r0, r4, #24
    7698:	f009 fc79 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    769c:	7922      	ldrb	r2, [r4, #4]
    769e:	7963      	ldrb	r3, [r4, #5]
    76a0:	2600      	movs	r6, #0
    76a2:	4629      	mov	r1, r5
    76a4:	9600      	str	r6, [sp, #0]
    76a6:	f000 ff19 	bl	84dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    76aa:	4601      	mov	r1, r0
    76ac:	68a0      	ldr	r0, [r4, #8]
    76ae:	4281      	cmp	r1, r0
    76b0:	bf84      	itt	hi
    76b2:	4630      	movhi	r0, r6
    76b4:	bdf8      	pophi	{r3, r4, r5, r6, r7, pc}
    76b6:	2001      	movs	r0, #1
    76b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76ba:	0000      	.short	0x0000
    76bc:	20001574 	.word	0x20001574

000076c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    76c0:	b538      	push	{r3, r4, r5, lr}
    76c2:	4c0d      	ldr	r4, [pc, #52]	; (76f8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x38>)
    76c4:	f104 0018 	add.w	r0, r4, #24
    76c8:	f009 fc61 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    76cc:	8861      	ldrh	r1, [r4, #2]
    76ce:	f3c1 1200 	ubfx	r2, r1, #4, #1
    76d2:	b122      	cbz	r2, 76de <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    76d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    76d8:	2228      	movs	r2, #40	; 0x28
    76da:	f001 baa5 	b.w	8c28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    76de:	f3c1 0140 	ubfx	r1, r1, #1, #1
    76e2:	2900      	cmp	r1, #0
    76e4:	bf14      	ite	ne
    76e6:	8e61      	ldrhne	r1, [r4, #50]	; 0x32
    76e8:	8e21      	ldrheq	r1, [r4, #48]	; 0x30
    76ea:	2201      	movs	r2, #1
    76ec:	9200      	str	r2, [sp, #0]
    76ee:	7963      	ldrb	r3, [r4, #5]
    76f0:	7922      	ldrb	r2, [r4, #4]
    76f2:	f000 fef3 	bl	84dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    76f6:	bd38      	pop	{r3, r4, r5, pc}
    76f8:	20001574 	.word	0x20001574

000076fc <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    76fc:	4904      	ldr	r1, [pc, #16]	; (7710 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    76fe:	2200      	movs	r2, #0
    7700:	624a      	str	r2, [r1, #36]	; 0x24
    7702:	884b      	ldrh	r3, [r1, #2]
    7704:	2b1d      	cmp	r3, #29
    7706:	bf0c      	ite	eq
    7708:	734a      	strbeq	r2, [r1, #13]
    770a:	7348      	strbne	r0, [r1, #13]
    770c:	4770      	bx	lr
    770e:	0000      	.short	0x0000
    7710:	20001574 	.word	0x20001574

00007714 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7714:	b538      	push	{r3, r4, r5, lr}
    7716:	4d56      	ldr	r5, [pc, #344]	; (7870 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15c>)
    7718:	4604      	mov	r4, r0
    771a:	7a80      	ldrb	r0, [r0, #10]
    771c:	7468      	strb	r0, [r5, #17]
    771e:	7820      	ldrb	r0, [r4, #0]
    7720:	7028      	strb	r0, [r5, #0]
    7722:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7726:	f8ad 0000 	strh.w	r0, [sp]
    772a:	f89d 0000 	ldrb.w	r0, [sp]
    772e:	f000 0101 	and.w	r1, r0, #1
    7732:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7736:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    773a:	f3c0 0280 	ubfx	r2, r0, #2, #1
    773e:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7742:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7746:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    774a:	f3c0 1200 	ubfx	r2, r0, #4, #1
    774e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7752:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7756:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    775a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    775e:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7762:	8068      	strh	r0, [r5, #2]
    7764:	7d20      	ldrb	r0, [r4, #20]
    7766:	2801      	cmp	r0, #1
    7768:	bf18      	it	ne
    776a:	2802      	cmpne	r0, #2
    776c:	d006      	beq.n	777c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x68>
    776e:	bf00      	nop
    7770:	f240 21a1 	movw	r1, #673	; 0x2a1
    7774:	f04f 0006 	mov.w	r0, #6
    7778:	f7fc fc88 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    777c:	7128      	strb	r0, [r5, #4]
    777e:	7860      	ldrb	r0, [r4, #1]
    7780:	f010 0f10 	tst.w	r0, #16
    7784:	d009      	beq.n	779a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x86>
    7786:	7a61      	ldrb	r1, [r4, #9]
    7788:	f105 0018 	add.w	r0, r5, #24
    778c:	f009 fc52 	bl	11034 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7790:	7d20      	ldrb	r0, [r4, #20]
    7792:	2101      	movs	r1, #1
    7794:	2802      	cmp	r0, #2
    7796:	d10b      	bne.n	77b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x9c>
    7798:	e006      	b.n	77a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    779a:	7da0      	ldrb	r0, [r4, #22]
    779c:	2801      	cmp	r0, #1
    779e:	bf14      	ite	ne
    77a0:	2802      	cmpne	r0, #2
    77a2:	7168      	strbeq	r0, [r5, #5]
    77a4:	d1e4      	bne.n	7770 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x5c>
    77a6:	e7ee      	b.n	7786 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x72>
    77a8:	7d60      	ldrb	r0, [r4, #21]
    77aa:	f100 0001 	add.w	r0, r0, #1
    77ae:	b2c1      	uxtb	r1, r0
    77b0:	7ea0      	ldrb	r0, [r4, #26]
    77b2:	f100 0001 	add.w	r0, r0, #1
    77b6:	b2c2      	uxtb	r2, r0
    77b8:	f105 0018 	add.w	r0, r5, #24
    77bc:	f009 fbd0 	bl	10f60 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    77c0:	78a8      	ldrb	r0, [r5, #2]
    77c2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    77c6:	2800      	cmp	r0, #0
    77c8:	bf1c      	itt	ne
    77ca:	2000      	movne	r0, #0
    77cc:	60a8      	strne	r0, [r5, #8]
    77ce:	d01c      	beq.n	780a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    77d0:	7ca0      	ldrb	r0, [r4, #18]
    77d2:	7428      	strb	r0, [r5, #16]
    77d4:	7ae0      	ldrb	r0, [r4, #11]
    77d6:	2800      	cmp	r0, #0
    77d8:	bf16      	itet	ne
    77da:	2802      	cmpne	r0, #2
    77dc:	2000      	moveq	r0, #0
    77de:	2001      	movne	r0, #1
    77e0:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
    77e4:	68e0      	ldr	r0, [r4, #12]
    77e6:	6468      	str	r0, [r5, #68]	; 0x44
    77e8:	8a20      	ldrh	r0, [r4, #16]
    77ea:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
    77ee:	7de0      	ldrb	r0, [r4, #23]
    77f0:	f895 1020 	ldrb.w	r1, [r5, #32]
    77f4:	f360 1107 	bfi	r1, r0, #4, #4
    77f8:	f885 1020 	strb.w	r1, [r5, #32]
    77fc:	7e20      	ldrb	r0, [r4, #24]
    77fe:	2801      	cmp	r0, #1
    7800:	bf18      	it	ne
    7802:	2000      	movne	r0, #0
    7804:	7328      	strb	r0, [r5, #12]
    7806:	2000      	movs	r0, #0
    7808:	bd38      	pop	{r3, r4, r5, pc}
    780a:	7860      	ldrb	r0, [r4, #1]
    780c:	f010 0f10 	tst.w	r0, #16
    7810:	f105 0018 	add.w	r0, r5, #24
    7814:	d022      	beq.n	785c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7816:	f009 fbba 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    781a:	8869      	ldrh	r1, [r5, #2]
    781c:	2228      	movs	r2, #40	; 0x28
    781e:	f001 fa03 	bl	8c28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7822:	bf00      	nop
    7824:	f240 2171 	movw	r1, #625	; 0x271
    7828:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    782c:	fbb0 f0f1 	udiv	r0, r0, r1
    7830:	4348      	muls	r0, r1
    7832:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7836:	f240 2271 	movw	r2, #625	; 0x271
    783a:	0a09      	lsrs	r1, r1, #8
    783c:	434a      	muls	r2, r1
    783e:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7842:	f240 2371 	movw	r3, #625	; 0x271
    7846:	0a09      	lsrs	r1, r1, #8
    7848:	4359      	muls	r1, r3
    784a:	4290      	cmp	r0, r2
    784c:	bf98      	it	ls
    784e:	60aa      	strls	r2, [r5, #8]
    7850:	d9be      	bls.n	77d0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    7852:	4288      	cmp	r0, r1
    7854:	bf94      	ite	ls
    7856:	60a8      	strls	r0, [r5, #8]
    7858:	60a9      	strhi	r1, [r5, #8]
    785a:	e7b9      	b.n	77d0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    785c:	f009 fb97 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7860:	2101      	movs	r1, #1
    7862:	9100      	str	r1, [sp, #0]
    7864:	796b      	ldrb	r3, [r5, #5]
    7866:	792a      	ldrb	r2, [r5, #4]
    7868:	21fb      	movs	r1, #251	; 0xfb
    786a:	f000 fe37 	bl	84dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b4>
    786e:	e7d9      	b.n	7824 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x110>
    7870:	20001574 	.word	0x20001574

00007874 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7874:	b570      	push	{r4, r5, r6, lr}
    7876:	491b      	ldr	r1, [pc, #108]	; (78e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    7878:	2400      	movs	r4, #0
    787a:	700c      	strb	r4, [r1, #0]
    787c:	4d1a      	ldr	r5, [pc, #104]	; (78e8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    787e:	6028      	str	r0, [r5, #0]
    7880:	7808      	ldrb	r0, [r1, #0]
    7882:	b120      	cbz	r0, 788e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    7884:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    7888:	202d      	movs	r0, #45	; 0x2d
    788a:	f7fc fbff 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    788e:	22c8      	movs	r2, #200	; 0xc8
    7890:	2100      	movs	r1, #0
    7892:	4816      	ldr	r0, [pc, #88]	; (78ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    7894:	f007 fb4c 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7898:	4814      	ldr	r0, [pc, #80]	; (78ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    789a:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    789e:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    78a2:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    78a6:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    78aa:	21ff      	movs	r1, #255	; 0xff
    78ac:	f800 1b21 	strb.w	r1, [r0], #33
    78b0:	217f      	movs	r1, #127	; 0x7f
    78b2:	f800 191f 	strb.w	r1, [r0], #-31
    78b6:	2113      	movs	r1, #19
    78b8:	f820 1b5e 	strh.w	r1, [r0], #94
    78bc:	2101      	movs	r1, #1
    78be:	f800 1951 	strb.w	r1, [r0], #-81
    78c2:	f800 4b09 	strb.w	r4, [r0], #9
    78c6:	f009 fbda 	bl	1107e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    78ca:	f005 ff33 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78ce:	f005 fd59 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78d2:	68a8      	ldr	r0, [r5, #8]
    78d4:	2800      	cmp	r0, #0
    78d6:	bf18      	it	ne
    78d8:	bd70      	popne	{r4, r5, r6, pc}
    78da:	f240 21cf 	movw	r1, #719	; 0x2cf
    78de:	202d      	movs	r0, #45	; 0x2d
    78e0:	f7fc fbd4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78e4:	2000163c 	.word	0x2000163c
    78e8:	2000010c 	.word	0x2000010c
    78ec:	20001574 	.word	0x20001574

000078f0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    78f0:	4907      	ldr	r1, [pc, #28]	; (7910 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    78f2:	8848      	ldrh	r0, [r1, #2]
    78f4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    78f8:	b93a      	cbnz	r2, 790a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    78fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    78fe:	b120      	cbz	r0, 790a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    7900:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    7904:	2800      	cmp	r0, #0
    7906:	bf08      	it	eq
    7908:	4770      	bxeq	lr
    790a:	2001      	movs	r0, #1
    790c:	4770      	bx	lr
    790e:	0000      	.short	0x0000
    7910:	20001574 	.word	0x20001574

00007914 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    7914:	4807      	ldr	r0, [pc, #28]	; (7934 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    7916:	8840      	ldrh	r0, [r0, #2]
    7918:	f3c0 1100 	ubfx	r1, r0, #4, #1
    791c:	b119      	cbz	r1, 7926 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    791e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7922:	b128      	cbz	r0, 7930 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    7924:	e002      	b.n	792c <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    7926:	f3c0 0040 	ubfx	r0, r0, #1, #1
    792a:	b108      	cbz	r0, 7930 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    792c:	2000      	movs	r0, #0
    792e:	4770      	bx	lr
    7930:	2001      	movs	r0, #1
    7932:	4770      	bx	lr
    7934:	20001574 	.word	0x20001574

00007938 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    7938:	4802      	ldr	r0, [pc, #8]	; (7944 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    793a:	7880      	ldrb	r0, [r0, #2]
    793c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7940:	4770      	bx	lr
    7942:	0000      	.short	0x0000
    7944:	20001574 	.word	0x20001574

00007948 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    7948:	4802      	ldr	r0, [pc, #8]	; (7954 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    794a:	7880      	ldrb	r0, [r0, #2]
    794c:	f000 0001 	and.w	r0, r0, #1
    7950:	4770      	bx	lr
    7952:	0000      	.short	0x0000
    7954:	20001574 	.word	0x20001574

00007958 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    7958:	4803      	ldr	r0, [pc, #12]	; (7968 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    795a:	8840      	ldrh	r0, [r0, #2]
    795c:	2809      	cmp	r0, #9
    795e:	bf0c      	ite	eq
    7960:	2001      	moveq	r0, #1
    7962:	2000      	movne	r0, #0
    7964:	4770      	bx	lr
    7966:	0000      	.short	0x0000
    7968:	20001574 	.word	0x20001574

0000796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    796c:	4802      	ldr	r0, [pc, #8]	; (7978 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    796e:	7880      	ldrb	r0, [r0, #2]
    7970:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7974:	4770      	bx	lr
    7976:	0000      	.short	0x0000
    7978:	20001574 	.word	0x20001574

0000797c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    797c:	4802      	ldr	r0, [pc, #8]	; (7988 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    797e:	7880      	ldrb	r0, [r0, #2]
    7980:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7984:	4770      	bx	lr
    7986:	0000      	.short	0x0000
    7988:	20001574 	.word	0x20001574

0000798c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    798c:	4802      	ldr	r0, [pc, #8]	; (7998 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    798e:	7880      	ldrb	r0, [r0, #2]
    7990:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7994:	4770      	bx	lr
    7996:	0000      	.short	0x0000
    7998:	20001574 	.word	0x20001574

0000799c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    799c:	4902      	ldr	r1, [pc, #8]	; (79a8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    799e:	4801      	ldr	r0, [pc, #4]	; (79a4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    79a0:	6088      	str	r0, [r1, #8]
    79a2:	4770      	bx	lr
    79a4:	00008c10 	.word	0x00008c10
    79a8:	2000010c 	.word	0x2000010c

000079ac <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    79ac:	4801      	ldr	r0, [pc, #4]	; (79b4 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    79ae:	f990 000f 	ldrsb.w	r0, [r0, #15]
    79b2:	4770      	bx	lr
    79b4:	20001574 	.word	0x20001574

000079b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    79b8:	4903      	ldr	r1, [pc, #12]	; (79c8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    79ba:	7809      	ldrb	r1, [r1, #0]
    79bc:	4281      	cmp	r1, r0
    79be:	bf0c      	ite	eq
    79c0:	2001      	moveq	r0, #1
    79c2:	2000      	movne	r0, #0
    79c4:	4770      	bx	lr
    79c6:	0000      	.short	0x0000
    79c8:	20001574 	.word	0x20001574

000079cc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    79cc:	4801      	ldr	r0, [pc, #4]	; (79d4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    79ce:	6880      	ldr	r0, [r0, #8]
    79d0:	6800      	ldr	r0, [r0, #0]
    79d2:	4700      	bx	r0
    79d4:	2000010c 	.word	0x2000010c

000079d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    79d8:	4816      	ldr	r0, [pc, #88]	; (7a34 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    79da:	b510      	push	{r4, lr}
    79dc:	7800      	ldrb	r0, [r0, #0]
    79de:	2800      	cmp	r0, #0
    79e0:	bf18      	it	ne
    79e2:	240c      	movne	r4, #12
    79e4:	d001      	beq.n	79ea <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    79e6:	4620      	mov	r0, r4
    79e8:	bd10      	pop	{r4, pc}
    79ea:	2400      	movs	r4, #0
    79ec:	22c8      	movs	r2, #200	; 0xc8
    79ee:	4621      	mov	r1, r4
    79f0:	4811      	ldr	r0, [pc, #68]	; (7a38 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    79f2:	f007 fa9d 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    79f6:	4910      	ldr	r1, [pc, #64]	; (7a38 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    79f8:	2000      	movs	r0, #0
    79fa:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    79fe:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    7a02:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    7a06:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    7a0a:	22ff      	movs	r2, #255	; 0xff
    7a0c:	700a      	strb	r2, [r1, #0]
    7a0e:	227f      	movs	r2, #127	; 0x7f
    7a10:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    7a14:	2213      	movs	r2, #19
    7a16:	804a      	strh	r2, [r1, #2]
    7a18:	2201      	movs	r2, #1
    7a1a:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    7a1e:	73c8      	strb	r0, [r1, #15]
    7a20:	f101 0018 	add.w	r0, r1, #24
    7a24:	f009 fb2b 	bl	1107e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7a28:	f005 fe84 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7a2c:	f005 fcaa 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7a30:	e7d9      	b.n	79e6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7a32:	0000      	.short	0x0000
    7a34:	2000163c 	.word	0x2000163c
    7a38:	20001574 	.word	0x20001574

00007a3c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    7a3c:	4801      	ldr	r0, [pc, #4]	; (7a44 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    7a3e:	7b00      	ldrb	r0, [r0, #12]
    7a40:	4770      	bx	lr
    7a42:	0000      	.short	0x0000
    7a44:	20001574 	.word	0x20001574

00007a48 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    7a48:	4801      	ldr	r0, [pc, #4]	; (7a50 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    7a4a:	7940      	ldrb	r0, [r0, #5]
    7a4c:	4770      	bx	lr
    7a4e:	0000      	.short	0x0000
    7a50:	20001574 	.word	0x20001574

00007a54 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    7a54:	4901      	ldr	r1, [pc, #4]	; (7a5c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    7a56:	6048      	str	r0, [r1, #4]
    7a58:	4770      	bx	lr
    7a5a:	0000      	.short	0x0000
    7a5c:	2000010c 	.word	0x2000010c

00007a60 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    7a60:	4a05      	ldr	r2, [pc, #20]	; (7a78 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    7a62:	2300      	movs	r3, #0
    7a64:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    7a68:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    7a6c:	2001      	movs	r0, #1
    7a6e:	6591      	str	r1, [r2, #88]	; 0x58
    7a70:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    7a74:	4770      	bx	lr
    7a76:	0000      	.short	0x0000
    7a78:	20001574 	.word	0x20001574

00007a7c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    7a7c:	4a05      	ldr	r2, [pc, #20]	; (7a94 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    7a7e:	2300      	movs	r3, #0
    7a80:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    7a84:	65d1      	str	r1, [r2, #92]	; 0x5c
    7a86:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    7a8a:	2001      	movs	r0, #1
    7a8c:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    7a90:	4770      	bx	lr
    7a92:	0000      	.short	0x0000
    7a94:	20001574 	.word	0x20001574

00007a98 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7a98:	4805      	ldr	r0, [pc, #20]	; (7ab0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    7a9a:	b510      	push	{r4, lr}
    7a9c:	7800      	ldrb	r0, [r0, #0]
    7a9e:	2801      	cmp	r0, #1
    7aa0:	bf1c      	itt	ne
    7aa2:	2000      	movne	r0, #0
    7aa4:	bd10      	popne	{r4, pc}
    7aa6:	f000 feb7 	bl	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    7aaa:	2000      	movs	r0, #0
    7aac:	bd10      	pop	{r4, pc}
    7aae:	0000      	.short	0x0000
    7ab0:	2000163c 	.word	0x2000163c

00007ab4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    7ab4:	4901      	ldr	r1, [pc, #4]	; (7abc <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    7ab6:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    7aba:	4770      	bx	lr
    7abc:	20001574 	.word	0x20001574

00007ac0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7ac0:	4904      	ldr	r1, [pc, #16]	; (7ad4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    7ac2:	4803      	ldr	r0, [pc, #12]	; (7ad0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    7ac4:	6008      	str	r0, [r1, #0]
    7ac6:	4905      	ldr	r1, [pc, #20]	; (7adc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    7ac8:	4803      	ldr	r0, [pc, #12]	; (7ad8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    7aca:	6008      	str	r0, [r1, #0]
    7acc:	4770      	bx	lr
    7ace:	0000      	.short	0x0000
    7ad0:	00008ae9 	.word	0x00008ae9
    7ad4:	2000011c 	.word	0x2000011c
    7ad8:	0000898d 	.word	0x0000898d
    7adc:	20000118 	.word	0x20000118

00007ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    7ae0:	b570      	push	{r4, r5, r6, lr}
    7ae2:	4c10      	ldr	r4, [pc, #64]	; (7b24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    7ae4:	4e10      	ldr	r6, [pc, #64]	; (7b28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    7ae6:	2501      	movs	r5, #1
    7ae8:	78a0      	ldrb	r0, [r4, #2]
    7aea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7aee:	b130      	cbz	r0, 7afe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    7af0:	223c      	movs	r2, #60	; 0x3c
    7af2:	21ff      	movs	r1, #255	; 0xff
    7af4:	6870      	ldr	r0, [r6, #4]
    7af6:	f000 fecd 	bl	8894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x86c>
    7afa:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7afe:	78a0      	ldrb	r0, [r4, #2]
    7b00:	f010 0f01 	tst.w	r0, #1
    7b04:	bf1c      	itt	ne
    7b06:	6870      	ldrne	r0, [r6, #4]
    7b08:	8801      	ldrhne	r1, [r0, #0]
    7b0a:	f04f 023c 	mov.w	r2, #60	; 0x3c
    7b0e:	bf12      	itee	ne
    7b10:	2001      	movne	r0, #1
    7b12:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    7b16:	2000      	moveq	r0, #0
    7b18:	f000 fc16 	bl	8348 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    7b1c:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7b20:	bd70      	pop	{r4, r5, r6, pc}
    7b22:	0000      	.short	0x0000
    7b24:	20001574 	.word	0x20001574
    7b28:	2000010c 	.word	0x2000010c

00007b2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    7b2c:	4802      	ldr	r0, [pc, #8]	; (7b38 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    7b2e:	7c00      	ldrb	r0, [r0, #16]
    7b30:	2800      	cmp	r0, #0
    7b32:	bf18      	it	ne
    7b34:	2001      	movne	r0, #1
    7b36:	4770      	bx	lr
    7b38:	20001574 	.word	0x20001574
    7b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b40:	4e68      	ldr	r6, [pc, #416]	; (7ce4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    7b42:	0007      	movs	r7, r0
    7b44:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7b48:	d027      	beq.n	7b9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    7b4a:	f104 0018 	add.w	r0, r4, #24
    7b4e:	f009 fa73 	bl	11038 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7b52:	b9c0      	cbnz	r0, 7b86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    7b54:	78a0      	ldrb	r0, [r4, #2]
    7b56:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7b5a:	2800      	cmp	r0, #0
    7b5c:	d039      	beq.n	7bd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    7b5e:	f104 0018 	add.w	r0, r4, #24
    7b62:	f009 fa14 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7b66:	4605      	mov	r5, r0
    7b68:	f104 0018 	add.w	r0, r4, #24
    7b6c:	f009 fa64 	bl	11038 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7b70:	1a28      	subs	r0, r5, r0
    7b72:	b2c0      	uxtb	r0, r0
    7b74:	f009 fa90 	bl	11098 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7b78:	6871      	ldr	r1, [r6, #4]
    7b7a:	4408      	add	r0, r1
    7b7c:	6070      	str	r0, [r6, #4]
    7b7e:	f104 0018 	add.w	r0, r4, #24
    7b82:	f009 fa84 	bl	1108e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b86:	f104 0018 	add.w	r0, r4, #24
    7b8a:	f009 fa10 	bl	10fae <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7b8e:	f006 fced 	bl	e56c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7b92:	7921      	ldrb	r1, [r4, #4]
    7b94:	2025      	movs	r0, #37	; 0x25
    7b96:	f006 fccb 	bl	e530 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7b9a:	4d53      	ldr	r5, [pc, #332]	; (7ce8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    7b9c:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    7ba0:	2100      	movs	r1, #0
    7ba2:	6828      	ldr	r0, [r5, #0]
    7ba4:	8001      	strh	r1, [r0, #0]
    7ba6:	7801      	ldrb	r1, [r0, #0]
    7ba8:	f021 0120 	bic.w	r1, r1, #32
    7bac:	7001      	strb	r1, [r0, #0]
    7bae:	8861      	ldrh	r1, [r4, #2]
    7bb0:	2913      	cmp	r1, #19
    7bb2:	d02b      	beq.n	7c0c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7bb4:	dc11      	bgt.n	7bda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    7bb6:	2910      	cmp	r1, #16
    7bb8:	bf08      	it	eq
    7bba:	2102      	moveq	r1, #2
    7bbc:	d039      	beq.n	7c32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7bbe:	2912      	cmp	r1, #18
    7bc0:	bf08      	it	eq
    7bc2:	2106      	moveq	r1, #6
    7bc4:	d035      	beq.n	7c32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7bc6:	bf00      	nop
    7bc8:	f240 51a9 	movw	r1, #1449	; 0x5a9
    7bcc:	202d      	movs	r0, #45	; 0x2d
    7bce:	f7fc fa5d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7bd6:	f000 be1f 	b.w	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    7bda:	2915      	cmp	r1, #21
    7bdc:	bf18      	it	ne
    7bde:	291d      	cmpne	r1, #29
    7be0:	d1f2      	bne.n	7bc8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    7be2:	f04f 0101 	mov.w	r1, #1
    7be6:	f008 ffc0 	bl	10b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bea:	6828      	ldr	r0, [r5, #0]
    7bec:	f1b8 0f00 	cmp.w	r8, #0
    7bf0:	7801      	ldrb	r1, [r0, #0]
    7bf2:	f041 0120 	orr.w	r1, r1, #32
    7bf6:	7001      	strb	r1, [r0, #0]
    7bf8:	d011      	beq.n	7c1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7bfa:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7bfe:	f008 ffd6 	bl	10bae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7c02:	2101      	movs	r1, #1
    7c04:	6828      	ldr	r0, [r5, #0]
    7c06:	f008 ffd9 	bl	10bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7c0a:	e014      	b.n	7c36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7c0c:	2100      	movs	r1, #0
    7c0e:	f008 ffac 	bl	10b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7c12:	6828      	ldr	r0, [r5, #0]
    7c14:	7801      	ldrb	r1, [r0, #0]
    7c16:	f041 0120 	orr.w	r1, r1, #32
    7c1a:	7001      	strb	r1, [r0, #0]
    7c1c:	e00b      	b.n	7c36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7c1e:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7c22:	f008 ffc4 	bl	10bae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7c26:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    7c2a:	6828      	ldr	r0, [r5, #0]
    7c2c:	f008 ffc6 	bl	10bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7c30:	e001      	b.n	7c36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7c32:	f008 ff9a 	bl	10b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7c36:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7c3a:	6828      	ldr	r0, [r5, #0]
    7c3c:	f008 ffc7 	bl	10bce <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7c40:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7c44:	6828      	ldr	r0, [r5, #0]
    7c46:	f008 ffc9 	bl	10bdc <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7c4a:	8860      	ldrh	r0, [r4, #2]
    7c4c:	281d      	cmp	r0, #29
    7c4e:	bf18      	it	ne
    7c50:	2815      	cmpne	r0, #21
    7c52:	d004      	beq.n	7c5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7c54:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    7c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7c58:	6828      	ldr	r0, [r5, #0]
    7c5a:	f008 ff2e 	bl	10aba <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7c5e:	b1ef      	cbz	r7, 7c9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    7c60:	f104 0018 	add.w	r0, r4, #24
    7c64:	68b7      	ldr	r7, [r6, #8]
    7c66:	f009 f992 	bl	10f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c6a:	4680      	mov	r8, r0
    7c6c:	f104 0018 	add.w	r0, r4, #24
    7c70:	f009 f9e2 	bl	11038 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7c74:	eba8 0000 	sub.w	r0, r8, r0
    7c78:	1e40      	subs	r0, r0, #1
    7c7a:	b2c0      	uxtb	r0, r0
    7c7c:	8861      	ldrh	r1, [r4, #2]
    7c7e:	2228      	movs	r2, #40	; 0x28
    7c80:	f000 fff8 	bl	8c74 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7c84:	19c1      	adds	r1, r0, r7
    7c86:	78a0      	ldrb	r0, [r4, #2]
    7c88:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7c8c:	2800      	cmp	r0, #0
    7c8e:	bf1c      	itt	ne
    7c90:	6870      	ldrne	r0, [r6, #4]
    7c92:	4401      	addne	r1, r0
    7c94:	7922      	ldrb	r2, [r4, #4]
    7c96:	2000      	movs	r0, #0
    7c98:	f006 f986 	bl	dfa8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7c9c:	6828      	ldr	r0, [r5, #0]
    7c9e:	f006 f937 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ca2:	2004      	movs	r0, #4
    7ca4:	7030      	strb	r0, [r6, #0]
    7ca6:	8860      	ldrh	r0, [r4, #2]
    7ca8:	2813      	cmp	r0, #19
    7caa:	d010      	beq.n	7cce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7cac:	dc0b      	bgt.n	7cc6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    7cae:	2810      	cmp	r0, #16
    7cb0:	bf08      	it	eq
    7cb2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb6:	2812      	cmp	r0, #18
    7cb8:	d009      	beq.n	7cce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7cba:	bf00      	nop
    7cbc:	f640 4119 	movw	r1, #3097	; 0xc19
    7cc0:	202d      	movs	r0, #45	; 0x2d
    7cc2:	f7fc f9e3 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cc6:	2815      	cmp	r0, #21
    7cc8:	bf18      	it	ne
    7cca:	281d      	cmpne	r0, #29
    7ccc:	d1f6      	bne.n	7cbc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    7cce:	7923      	ldrb	r3, [r4, #4]
    7cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7cd4:	f04f 0201 	mov.w	r2, #1
    7cd8:	4611      	mov	r1, r2
    7cda:	f04f 0000 	mov.w	r0, #0
    7cde:	f006 baf7 	b.w	e2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7ce2:	0000      	.short	0x0000
    7ce4:	2000163c 	.word	0x2000163c
    7ce8:	2000010c 	.word	0x2000010c
    7cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7cf0:	4e3d      	ldr	r6, [pc, #244]	; (7de8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    7cf2:	4681      	mov	r9, r0
    7cf4:	7830      	ldrb	r0, [r6, #0]
    7cf6:	2802      	cmp	r0, #2
    7cf8:	bf1c      	itt	ne
    7cfa:	7830      	ldrbne	r0, [r6, #0]
    7cfc:	2803      	cmpne	r0, #3
    7cfe:	d005      	beq.n	7d0c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    7d00:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    7d04:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7d08:	f7fc f9c0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d0c:	4d37      	ldr	r5, [pc, #220]	; (7dec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    7d0e:	7b28      	ldrb	r0, [r5, #12]
    7d10:	b150      	cbz	r0, 7d28 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    7d12:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7d16:	f006 fba1 	bl	e45c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7d1a:	2800      	cmp	r0, #0
    7d1c:	bf04      	itt	eq
    7d1e:	207f      	moveq	r0, #127	; 0x7f
    7d20:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7d24:	f006 fb80 	bl	e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7d28:	4c31      	ldr	r4, [pc, #196]	; (7df0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    7d2a:	6820      	ldr	r0, [r4, #0]
    7d2c:	f008 fe7b 	bl	10a26 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    7d30:	4607      	mov	r7, r0
    7d32:	6860      	ldr	r0, [r4, #4]
    7d34:	f04f 0800 	mov.w	r8, #0
    7d38:	2800      	cmp	r0, #0
    7d3a:	bf18      	it	ne
    7d3c:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    7d40:	f1b9 0f00 	cmp.w	r9, #0
    7d44:	d03e      	beq.n	7dc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d46:	f006 f80b 	bl	dd60 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7d4a:	2800      	cmp	r0, #0
    7d4c:	d03a      	beq.n	7dc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d4e:	2f05      	cmp	r7, #5
    7d50:	d11b      	bne.n	7d8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d52:	6820      	ldr	r0, [r4, #0]
    7d54:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7d58:	f000 001f 	and.w	r0, r0, #31
    7d5c:	2810      	cmp	r0, #16
    7d5e:	d914      	bls.n	7d8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d60:	7ba8      	ldrb	r0, [r5, #14]
    7d62:	b190      	cbz	r0, 7d8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d64:	20ff      	movs	r0, #255	; 0xff
    7d66:	f88d 0000 	strb.w	r0, [sp]
    7d6a:	2701      	movs	r7, #1
    7d6c:	4669      	mov	r1, sp
    7d6e:	2005      	movs	r0, #5
    7d70:	f000 fb24 	bl	83bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7d74:	b330      	cbz	r0, 7dc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d76:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    7d7a:	6820      	ldr	r0, [r4, #0]
    7d7c:	2222      	movs	r2, #34	; 0x22
    7d7e:	1cc1      	adds	r1, r0, #3
    7d80:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    7d84:	f7fb fff8 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d88:	e01c      	b.n	7dc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d8a:	4641      	mov	r1, r8
    7d8c:	6820      	ldr	r0, [r4, #0]
    7d8e:	f008 fe4e 	bl	10a2e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7d92:	b1b8      	cbz	r0, 7dc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d94:	7831      	ldrb	r1, [r6, #0]
    7d96:	4638      	mov	r0, r7
    7d98:	2902      	cmp	r1, #2
    7d9a:	bf1c      	itt	ne
    7d9c:	7831      	ldrbne	r1, [r6, #0]
    7d9e:	2903      	cmpne	r1, #3
    7da0:	d005      	beq.n	7dae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    7da2:	f640 3179 	movw	r1, #2937	; 0xb79
    7da6:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7daa:	f7fc f96f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dae:	68a1      	ldr	r1, [r4, #8]
    7db0:	7832      	ldrb	r2, [r6, #0]
    7db2:	6949      	ldr	r1, [r1, #20]
    7db4:	f06f 0307 	mvn.w	r3, #7
    7db8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7dbc:	5889      	ldr	r1, [r1, r2]
    7dbe:	4788      	blx	r1
    7dc0:	4605      	mov	r5, r0
    7dc2:	e000      	b.n	7dc6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    7dc4:	2501      	movs	r5, #1
    7dc6:	7bb0      	ldrb	r0, [r6, #14]
    7dc8:	b118      	cbz	r0, 7dd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    7dca:	f005 fcb3 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7dce:	f005 fad9 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7dd2:	2d00      	cmp	r5, #0
    7dd4:	bf08      	it	eq
    7dd6:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7dda:	68a0      	ldr	r0, [r4, #8]
    7ddc:	6880      	ldr	r0, [r0, #8]
    7dde:	b001      	add	sp, #4
    7de0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7de4:	4700      	bx	r0
    7de6:	0000      	.short	0x0000
    7de8:	2000163c 	.word	0x2000163c
    7dec:	20001574 	.word	0x20001574
    7df0:	2000010c 	.word	0x2000010c
    7df4:	b538      	push	{r3, r4, r5, lr}
    7df6:	2803      	cmp	r0, #3
    7df8:	d002      	beq.n	7e00 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    7dfa:	2805      	cmp	r0, #5
    7dfc:	d067      	beq.n	7ece <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    7dfe:	e064      	b.n	7eca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7e00:	20ff      	movs	r0, #255	; 0xff
    7e02:	f88d 0000 	strb.w	r0, [sp]
    7e06:	4669      	mov	r1, sp
    7e08:	2003      	movs	r0, #3
    7e0a:	f000 fad7 	bl	83bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7e0e:	2800      	cmp	r0, #0
    7e10:	d05b      	beq.n	7eca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7e12:	4c33      	ldr	r4, [pc, #204]	; (7ee0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    7e14:	4d33      	ldr	r5, [pc, #204]	; (7ee4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    7e16:	7b20      	ldrb	r0, [r4, #12]
    7e18:	b3b0      	cbz	r0, 7e88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7e1a:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    7e1e:	bb98      	cbnz	r0, 7e88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7e20:	f89d 0000 	ldrb.w	r0, [sp]
    7e24:	2101      	movs	r1, #1
    7e26:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    7e2a:	7821      	ldrb	r1, [r4, #0]
    7e2c:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    7e30:	28ff      	cmp	r0, #255	; 0xff
    7e32:	d011      	beq.n	7e58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    7e34:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    7e38:	1e51      	subs	r1, r2, #1
    7e3a:	f7fe f80b 	bl	5e54 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7e3e:	b130      	cbz	r0, 7e4e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    7e40:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    7e44:	f040 0002 	orr.w	r0, r0, #2
    7e48:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    7e4c:	e012      	b.n	7e74 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    7e4e:	f640 6129 	movw	r1, #3625	; 0xe29
    7e52:	202d      	movs	r0, #45	; 0x2d
    7e54:	f7fc f91a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e58:	6828      	ldr	r0, [r5, #0]
    7e5a:	7801      	ldrb	r1, [r0, #0]
    7e5c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e60:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7e64:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7e68:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    7e6c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7e70:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    7e74:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    7e78:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    7e7c:	297f      	cmp	r1, #127	; 0x7f
    7e7e:	d01f      	beq.n	7ec0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    7e80:	7001      	strb	r1, [r0, #0]
    7e82:	207f      	movs	r0, #127	; 0x7f
    7e84:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    7e88:	6828      	ldr	r0, [r5, #0]
    7e8a:	2100      	movs	r1, #0
    7e8c:	8001      	strh	r1, [r0, #0]
    7e8e:	2104      	movs	r1, #4
    7e90:	f008 fe6b 	bl	10b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e94:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7e98:	6828      	ldr	r0, [r5, #0]
    7e9a:	f008 fe98 	bl	10bce <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e9e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7ea2:	6828      	ldr	r0, [r5, #0]
    7ea4:	f008 fe9a 	bl	10bdc <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7ea8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    7eaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7eac:	6828      	ldr	r0, [r5, #0]
    7eae:	f008 fe9e 	bl	10bee <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7eb2:	490d      	ldr	r1, [pc, #52]	; (7ee8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    7eb4:	2005      	movs	r0, #5
    7eb6:	7008      	strb	r0, [r1, #0]
    7eb8:	6828      	ldr	r0, [r5, #0]
    7eba:	f006 f829 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ebe:	e00c      	b.n	7eda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7ec0:	f640 41cb 	movw	r1, #3275	; 0xccb
    7ec4:	202d      	movs	r0, #45	; 0x2d
    7ec6:	f7fc f8e1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eca:	2001      	movs	r0, #1
    7ecc:	bd38      	pop	{r3, r4, r5, pc}
    7ece:	4807      	ldr	r0, [pc, #28]	; (7eec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    7ed0:	6800      	ldr	r0, [r0, #0]
    7ed2:	b110      	cbz	r0, 7eda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7ed4:	4780      	blx	r0
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d0f7      	beq.n	7eca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7eda:	2000      	movs	r0, #0
    7edc:	bd38      	pop	{r3, r4, r5, pc}
    7ede:	0000      	.short	0x0000
    7ee0:	20001574 	.word	0x20001574
    7ee4:	2000010c 	.word	0x2000010c
    7ee8:	2000163c 	.word	0x2000163c
    7eec:	2000011c 	.word	0x2000011c
    7ef0:	b510      	push	{r4, lr}
    7ef2:	b990      	cbnz	r0, 7f1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7ef4:	2900      	cmp	r1, #0
    7ef6:	bf08      	it	eq
    7ef8:	bd10      	popeq	{r4, pc}
    7efa:	f000 feed 	bl	8cd8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7efe:	b160      	cbz	r0, 7f1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7f00:	4808      	ldr	r0, [pc, #32]	; (7f24 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    7f02:	4909      	ldr	r1, [pc, #36]	; (7f28 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    7f04:	6880      	ldr	r0, [r0, #8]
    7f06:	7809      	ldrb	r1, [r1, #0]
    7f08:	6900      	ldr	r0, [r0, #16]
    7f0a:	f06f 020f 	mvn.w	r2, #15
    7f0e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7f12:	5840      	ldr	r0, [r0, r1]
    7f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f18:	4700      	bx	r0
    7f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f1e:	f000 bc7b 	b.w	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    7f22:	0000      	.short	0x0000
    7f24:	2000010c 	.word	0x2000010c
    7f28:	2000163c 	.word	0x2000163c
    7f2c:	b570      	push	{r4, r5, r6, lr}
    7f2e:	4c1a      	ldr	r4, [pc, #104]	; (7f98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    7f30:	2500      	movs	r5, #0
    7f32:	8860      	ldrh	r0, [r4, #2]
    7f34:	2810      	cmp	r0, #16
    7f36:	d011      	beq.n	7f5c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    7f38:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    7f3c:	7bb0      	ldrb	r0, [r6, #14]
    7f3e:	b120      	cbz	r0, 7f4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    7f40:	f005 fa4c 	bl	d3dc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7f44:	2040      	movs	r0, #64	; 0x40
    7f46:	f005 fc05 	bl	d754 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7f4a:	4814      	ldr	r0, [pc, #80]	; (7f9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    7f4c:	6800      	ldr	r0, [r0, #0]
    7f4e:	f005 ffdf 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f52:	78a0      	ldrb	r0, [r4, #2]
    7f54:	f010 0f04 	tst.w	r0, #4
    7f58:	d005      	beq.n	7f66 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    7f5a:	e011      	b.n	7f80 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    7f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f60:	2001      	movs	r0, #1
    7f62:	f7ff bdeb 	b.w	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7f66:	7c20      	ldrb	r0, [r4, #16]
    7f68:	2801      	cmp	r0, #1
    7f6a:	bf14      	ite	ne
    7f6c:	2803      	cmpne	r0, #3
    7f6e:	2510      	moveq	r5, #16
    7f70:	f045 020e 	orr.w	r2, r5, #14
    7f74:	f04f 0100 	mov.w	r1, #0
    7f78:	7923      	ldrb	r3, [r4, #4]
    7f7a:	4608      	mov	r0, r1
    7f7c:	f006 f9a8 	bl	e2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f80:	7b20      	ldrb	r0, [r4, #12]
    7f82:	2800      	cmp	r0, #0
    7f84:	bf18      	it	ne
    7f86:	f006 fa5b 	blne	e440 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    7f8a:	2000      	movs	r0, #0
    7f8c:	f005 fe2e 	bl	dbec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f90:	2002      	movs	r0, #2
    7f92:	7030      	strb	r0, [r6, #0]
    7f94:	bd70      	pop	{r4, r5, r6, pc}
    7f96:	0000      	.short	0x0000
    7f98:	20001574 	.word	0x20001574
    7f9c:	2000010c 	.word	0x2000010c
    7fa0:	b570      	push	{r4, r5, r6, lr}
    7fa2:	4d1e      	ldr	r5, [pc, #120]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7fa4:	7b28      	ldrb	r0, [r5, #12]
    7fa6:	b150      	cbz	r0, 7fbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    7fa8:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7fac:	f006 fa56 	bl	e45c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7fb0:	2800      	cmp	r0, #0
    7fb2:	bf04      	itt	eq
    7fb4:	207f      	moveq	r0, #127	; 0x7f
    7fb6:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7fba:	f006 fa35 	bl	e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7fbe:	4c18      	ldr	r4, [pc, #96]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fc0:	7ba0      	ldrb	r0, [r4, #14]
    7fc2:	b118      	cbz	r0, 7fcc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    7fc4:	f005 fbb6 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7fc8:	f005 f9dc 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7fcc:	f000 fe84 	bl	8cd8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7fd0:	b1a0      	cbz	r0, 7ffc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7fd2:	8868      	ldrh	r0, [r5, #2]
    7fd4:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7fd8:	2900      	cmp	r1, #0
    7fda:	bf04      	itt	eq
    7fdc:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    7fe0:	2800      	cmpeq	r0, #0
    7fe2:	d00b      	beq.n	7ffc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7fe4:	7820      	ldrb	r0, [r4, #0]
    7fe6:	2802      	cmp	r0, #2
    7fe8:	bf1c      	itt	ne
    7fea:	7820      	ldrbne	r0, [r4, #0]
    7fec:	2803      	cmpne	r0, #3
    7fee:	d009      	beq.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7ff0:	f640 21b5 	movw	r1, #2741	; 0xab5
    7ff4:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7ff8:	f7fc f848 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8000:	f000 bc0a 	b.w	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    8004:	4807      	ldr	r0, [pc, #28]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    8006:	7821      	ldrb	r1, [r4, #0]
    8008:	6880      	ldr	r0, [r0, #8]
    800a:	68c0      	ldr	r0, [r0, #12]
    800c:	f06f 0207 	mvn.w	r2, #7
    8010:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8014:	5840      	ldr	r0, [r0, r1]
    8016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    801a:	4700      	bx	r0
    801c:	20001574 	.word	0x20001574
    8020:	2000163c 	.word	0x2000163c
    8024:	2000010c 	.word	0x2000010c

00008028 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    8028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    802c:	4ea1      	ldr	r6, [pc, #644]	; (82b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28c>)
    802e:	b087      	sub	sp, #28
    8030:	7830      	ldrb	r0, [r6, #0]
    8032:	2800      	cmp	r0, #0
    8034:	d17d      	bne.n	8132 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    8036:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    803a:	7820      	ldrb	r0, [r4, #0]
    803c:	28ff      	cmp	r0, #255	; 0xff
    803e:	d078      	beq.n	8132 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10a>
    8040:	2500      	movs	r5, #0
    8042:	81b5      	strh	r5, [r6, #12]
    8044:	6075      	str	r5, [r6, #4]
    8046:	7075      	strb	r5, [r6, #1]
    8048:	70b5      	strb	r5, [r6, #2]
    804a:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    804e:	4628      	mov	r0, r5
    8050:	f005 fe70 	bl	dd34 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    8054:	4898      	ldr	r0, [pc, #608]	; (82b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    8056:	af01      	add	r7, sp, #4
    8058:	f100 010c 	add.w	r1, r0, #12
    805c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 82bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>
    8060:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8064:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    8068:	69c0      	ldr	r0, [r0, #28]
    806a:	9005      	str	r0, [sp, #20]
    806c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    8070:	6840      	ldr	r0, [r0, #4]
    8072:	9004      	str	r0, [sp, #16]
    8074:	a801      	add	r0, sp, #4
    8076:	f005 fd79 	bl	db6c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    807a:	f005 feab 	bl	ddd4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    807e:	f005 fb59 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8082:	f005 f97f 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8086:	488e      	ldr	r0, [pc, #568]	; (82c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    8088:	f006 fa12 	bl	e4b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    808c:	488d      	ldr	r0, [pc, #564]	; (82c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    808e:	f006 fa1b 	bl	e4c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8092:	2000      	movs	r0, #0
    8094:	f7fb fec4 	bl	3e20 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    8098:	f104 0018 	add.w	r0, r4, #24
    809c:	f008 fff7 	bl	1108e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    80a0:	f104 0018 	add.w	r0, r4, #24
    80a4:	f008 ff83 	bl	10fae <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    80a8:	f006 fa60 	bl	e56c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    80ac:	7921      	ldrb	r1, [r4, #4]
    80ae:	2025      	movs	r0, #37	; 0x25
    80b0:	f006 fa3e 	bl	e530 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    80b4:	f994 000f 	ldrsb.w	r0, [r4, #15]
    80b8:	f005 ff24 	bl	df04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    80bc:	7921      	ldrb	r1, [r4, #4]
    80be:	2000      	movs	r0, #0
    80c0:	f005 fbee 	bl	d8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    80c4:	2701      	movs	r7, #1
    80c6:	60b0      	str	r0, [r6, #8]
    80c8:	2800      	cmp	r0, #0
    80ca:	bf08      	it	eq
    80cc:	7037      	strbeq	r7, [r6, #0]
    80ce:	f000 80ed 	beq.w	82ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    80d2:	210f      	movs	r1, #15
    80d4:	2005      	movs	r0, #5
    80d6:	f005 fb6b 	bl	d7b0 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    80da:	7d20      	ldrb	r0, [r4, #20]
    80dc:	2800      	cmp	r0, #0
    80de:	bf01      	itttt	eq
    80e0:	7ca0      	ldrbeq	r0, [r4, #18]
    80e2:	2800      	cmpeq	r0, #0
    80e4:	78a0      	ldrbeq	r0, [r4, #2]
    80e6:	f010 0f04 	tsteq.w	r0, #4
    80ea:	d06b      	beq.n	81c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    80ec:	f006 fdbb 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    80f0:	4681      	mov	r9, r0
    80f2:	4649      	mov	r1, r9
    80f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    80f6:	f7f9 fc47 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    80fa:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 82c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    80fe:	4682      	mov	sl, r0
    8100:	fb90 f0fb 	sdiv	r0, r0, fp
    8104:	fb0b a010 	mls	r0, fp, r0, sl
    8108:	4241      	negs	r1, r0
    810a:	4648      	mov	r0, r9
    810c:	f7f9 fc06 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8110:	63a0      	str	r0, [r4, #56]	; 0x38
    8112:	fb9a f0fb 	sdiv	r0, sl, fp
    8116:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8118:	4408      	add	r0, r1
    811a:	6360      	str	r0, [r4, #52]	; 0x34
    811c:	f7fe f808 	bl	6130 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8120:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8122:	4288      	cmp	r0, r1
    8124:	d86a      	bhi.n	81fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    8126:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    812a:	f04f 0901 	mov.w	r9, #1
    812e:	7ce0      	ldrb	r0, [r4, #19]
    8130:	e000      	b.n	8134 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
    8132:	e01a      	b.n	816a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    8134:	f7fd fdfe 	bl	5d34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8138:	4682      	mov	sl, r0
    813a:	7ca0      	ldrb	r0, [r4, #18]
    813c:	2800      	cmp	r0, #0
    813e:	bf18      	it	ne
    8140:	f1ba 0f00 	cmpne.w	sl, #0
    8144:	d003      	beq.n	814e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x126>
    8146:	7ce0      	ldrb	r0, [r4, #19]
    8148:	f7fd fde8 	bl	5d1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    814c:	b188      	cbz	r0, 8172 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x14a>
    814e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    8152:	2800      	cmp	r0, #0
    8154:	bf1c      	itt	ne
    8156:	7d20      	ldrbne	r0, [r4, #20]
    8158:	2800      	cmpne	r0, #0
    815a:	d022      	beq.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    815c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8160:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8164:	2801      	cmp	r0, #1
    8166:	d012      	beq.n	818e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    8168:	e016      	b.n	8198 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    816a:	b007      	add	sp, #28
    816c:	200c      	movs	r0, #12
    816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8172:	463a      	mov	r2, r7
    8174:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    8178:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    817c:	4650      	mov	r0, sl
    817e:	f008 f87a 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8182:	7ce1      	ldrb	r1, [r4, #19]
    8184:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8188:	f7fd fde0 	bl	5d4c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    818c:	e009      	b.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    818e:	7948      	ldrb	r0, [r1, #5]
    8190:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8194:	2840      	cmp	r0, #64	; 0x40
    8196:	d016      	beq.n	81c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    8198:	4649      	mov	r1, r9
    819a:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    819e:	f008 f85a 	bl	10256 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    81a2:	78a0      	ldrb	r0, [r4, #2]
    81a4:	f010 0f04 	tst.w	r0, #4
    81a8:	bf1c      	itt	ne
    81aa:	7ca0      	ldrbne	r0, [r4, #18]
    81ac:	2800      	cmpne	r0, #0
    81ae:	d025      	beq.n	81fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    81b0:	7ce0      	ldrb	r0, [r4, #19]
    81b2:	f7fd fe1d 	bl	5df0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    81b6:	ea5f 0900 	movs.w	r9, r0
    81ba:	d01f      	beq.n	81fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    81bc:	2110      	movs	r1, #16
    81be:	f7fe fc17 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    81c2:	b140      	cbz	r0, 81d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    81c4:	e01a      	b.n	81fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    81c6:	f7fd fda5 	bl	5d14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    81ca:	463a      	mov	r2, r7
    81cc:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    81d0:	f008 f851 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    81d4:	e7e5      	b.n	81a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    81d6:	463a      	mov	r2, r7
    81d8:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    81dc:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    81e0:	4648      	mov	r0, r9
    81e2:	f008 f848 	bl	10276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    81e6:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    81ea:	f8d8 0000 	ldr.w	r0, [r8]
    81ee:	f008 fcde 	bl	10bae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    81f2:	2101      	movs	r1, #1
    81f4:	f8d8 0000 	ldr.w	r0, [r8]
    81f8:	f008 fce0 	bl	10bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    81fc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8200:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8204:	f006 f948 	bl	e498 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    8208:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    820c:	b340      	cbz	r0, 8260 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    820e:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    8212:	8620      	strh	r0, [r4, #48]	; 0x30
    8214:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8216:	62a0      	str	r0, [r4, #40]	; 0x28
    8218:	78a0      	ldrb	r0, [r4, #2]
    821a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    821e:	b9e8      	cbnz	r0, 825c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x234>
    8220:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    8224:	2102      	movs	r1, #2
    8226:	f3c0 070b 	ubfx	r7, r0, #0, #12
    822a:	f8ad 7000 	strh.w	r7, [sp]
    822e:	4668      	mov	r0, sp
    8230:	f7fc fd2c 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    8234:	b128      	cbz	r0, 8242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x21a>
    8236:	f8bd 0000 	ldrh.w	r0, [sp]
    823a:	f3c0 000b 	ubfx	r0, r0, #0, #12
    823e:	42b8      	cmp	r0, r7
    8240:	d104      	bne.n	824c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x224>
    8242:	f8bd 0000 	ldrh.w	r0, [sp]
    8246:	1c40      	adds	r0, r0, #1
    8248:	f8ad 0000 	strh.w	r0, [sp]
    824c:	f8bd 0000 	ldrh.w	r0, [sp]
    8250:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    8254:	f360 010b 	bfi	r1, r0, #0, #12
    8258:	f8a4 101f 	strh.w	r1, [r4, #31]
    825c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    8260:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    8264:	b130      	cbz	r0, 8274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    8266:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    826a:	8660      	strh	r0, [r4, #50]	; 0x32
    826c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    826e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8270:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    8274:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    8278:	6a61      	ldr	r1, [r4, #36]	; 0x24
    827a:	f3c0 000b 	ubfx	r0, r0, #0, #12
    827e:	fa50 f081 	uxtab	r0, r0, r1
    8282:	7fa1      	ldrb	r1, [r4, #30]
    8284:	4b11      	ldr	r3, [pc, #68]	; (82cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a4>)
    8286:	4408      	add	r0, r1
    8288:	461a      	mov	r2, r3
    828a:	2100      	movs	r1, #0
    828c:	fbe0 2103 	umlal	r2, r1, r0, r3
    8290:	0909      	lsrs	r1, r1, #4
    8292:	f06f 0224 	mvn.w	r2, #36	; 0x24
    8296:	fb01 0002 	mla	r0, r1, r2, r0
    829a:	77a0      	strb	r0, [r4, #30]
    829c:	f7fe f80a 	bl	62b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    82a0:	2103      	movs	r1, #3
    82a2:	f8d8 0000 	ldr.w	r0, [r8]
    82a6:	f7fd fd21 	bl	5cec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    82aa:	73b0      	strb	r0, [r6, #14]
    82ac:	b007      	add	sp, #28
    82ae:	2000      	movs	r0, #0
    82b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82b4:	2000163c 	.word	0x2000163c
    82b8:	00008be0 	.word	0x00008be0
    82bc:	2000010c 	.word	0x2000010c
    82c0:	00008be8 	.word	0x00008be8
    82c4:	00008be5 	.word	0x00008be5
    82c8:	000f4240 	.word	0x000f4240
    82cc:	6eb3e453 	.word	0x6eb3e453
    82d0:	b570      	push	{r4, r5, r6, lr}
    82d2:	4d1b      	ldr	r5, [pc, #108]	; (8340 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>)
    82d4:	7828      	ldrb	r0, [r5, #0]
    82d6:	2800      	cmp	r0, #0
    82d8:	bf08      	it	eq
    82da:	bd70      	popeq	{r4, r5, r6, pc}
    82dc:	7828      	ldrb	r0, [r5, #0]
    82de:	4c19      	ldr	r4, [pc, #100]	; (8344 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>)
    82e0:	2802      	cmp	r0, #2
    82e2:	bf1c      	itt	ne
    82e4:	7828      	ldrbne	r0, [r5, #0]
    82e6:	2803      	cmpne	r0, #3
    82e8:	d112      	bne.n	8310 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    82ea:	7b20      	ldrb	r0, [r4, #12]
    82ec:	b150      	cbz	r0, 8304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    82ee:	f104 0021 	add.w	r0, r4, #33	; 0x21
    82f2:	f006 f8b3 	bl	e45c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    82f6:	2800      	cmp	r0, #0
    82f8:	bf04      	itt	eq
    82fa:	207f      	moveq	r0, #127	; 0x7f
    82fc:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    8300:	f006 f892 	bl	e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    8304:	7ba8      	ldrb	r0, [r5, #14]
    8306:	b118      	cbz	r0, 8310 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    8308:	f005 fa14 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    830c:	f005 f83a 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8310:	f7fb fd72 	bl	3df8 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    8314:	f000 fce0 	bl	8cd8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8318:	b168      	cbz	r0, 8336 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    831a:	78a0      	ldrb	r0, [r4, #2]
    831c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8320:	b920      	cbnz	r0, 832c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    8322:	f104 0018 	add.w	r0, r4, #24
    8326:	f008 fe87 	bl	11038 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    832a:	b120      	cbz	r0, 8336 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    832c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8330:	2001      	movs	r0, #1
    8332:	f7ff bc03 	b.w	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    8336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    833a:	f000 ba6d 	b.w	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    833e:	0000      	.short	0x0000
    8340:	2000163c 	.word	0x2000163c
    8344:	20001574 	.word	0x20001574
    8348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    834c:	4b19      	ldr	r3, [pc, #100]	; (83b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>)
    834e:	2600      	movs	r6, #0
    8350:	2701      	movs	r7, #1
    8352:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    8356:	781c      	ldrb	r4, [r3, #0]
    8358:	f893 c00d 	ldrb.w	ip, [r3, #13]
    835c:	b1b8      	cbz	r0, 838e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x366>
    835e:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    8362:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    8366:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    836a:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    836e:	f1bc 0f00 	cmp.w	ip, #0
    8372:	bf0c      	ite	eq
    8374:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    8378:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    837c:	480e      	ldr	r0, [pc, #56]	; (83b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>)
    837e:	6840      	ldr	r0, [r0, #4]
    8380:	8800      	ldrh	r0, [r0, #0]
    8382:	f7fc fa3b 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    838a:	f007 bd72 	b.w	fe72 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    838e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8392:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    8396:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    839a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    839e:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    83a2:	f1bc 0f00 	cmp.w	ip, #0
    83a6:	bf14      	ite	ne
    83a8:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    83ac:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    83b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83b4:	20001574 	.word	0x20001574
    83b8:	2000010c 	.word	0x2000010c
    83bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83c0:	4c43      	ldr	r4, [pc, #268]	; (84d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>)
    83c2:	4680      	mov	r8, r0
    83c4:	460f      	mov	r7, r1
    83c6:	8860      	ldrh	r0, [r4, #2]
    83c8:	f1b8 0f03 	cmp.w	r8, #3
    83cc:	bf08      	it	eq
    83ce:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    83d2:	d008      	beq.n	83e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    83d4:	f000 0501 	and.w	r5, r0, #1
    83d8:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    83dc:	2800      	cmp	r0, #0
    83de:	bf18      	it	ne
    83e0:	f04f 0901 	movne.w	r9, #1
    83e4:	d101      	bne.n	83ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    83e6:	f04f 0900 	mov.w	r9, #0
    83ea:	f005 f9db 	bl	d7a4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    83ee:	4606      	mov	r6, r0
    83f0:	f1b8 0f03 	cmp.w	r8, #3
    83f4:	bf0c      	ite	eq
    83f6:	f04f 0802 	moveq.w	r8, #2
    83fa:	f04f 0801 	movne.w	r8, #1
    83fe:	ea35 0009 	bics.w	r0, r5, r9
    8402:	bf08      	it	eq
    8404:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8408:	4832      	ldr	r0, [pc, #200]	; (84d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>)
    840a:	7b80      	ldrb	r0, [r0, #14]
    840c:	b138      	cbz	r0, 841e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    840e:	f007 ff6a 	bl	102e6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    8412:	7038      	strb	r0, [r7, #0]
    8414:	28ff      	cmp	r0, #255	; 0xff
    8416:	d002      	beq.n	841e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f6>
    8418:	f7fd fd36 	bl	5e88 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    841c:	4306      	orrs	r6, r0
    841e:	4d2e      	ldr	r5, [pc, #184]	; (84d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>)
    8420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    8424:	6828      	ldr	r0, [r5, #0]
    8426:	7801      	ldrb	r1, [r0, #0]
    8428:	f3c1 1180 	ubfx	r1, r1, #6, #1
    842c:	4291      	cmp	r1, r2
    842e:	d109      	bne.n	8444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    8430:	2206      	movs	r2, #6
    8432:	f104 0144 	add.w	r1, r4, #68	; 0x44
    8436:	1cc0      	adds	r0, r0, #3
    8438:	f006 fd6a 	bl	ef10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    843c:	2800      	cmp	r0, #0
    843e:	bf08      	it	eq
    8440:	2001      	moveq	r0, #1
    8442:	d000      	beq.n	8446 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41e>
    8444:	2000      	movs	r0, #0
    8446:	7839      	ldrb	r1, [r7, #0]
    8448:	29ff      	cmp	r1, #255	; 0xff
    844a:	d004      	beq.n	8456 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    844c:	b9b8      	cbnz	r0, 847e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    844e:	7ce0      	ldrb	r0, [r4, #19]
    8450:	4288      	cmp	r0, r1
    8452:	d116      	bne.n	8482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    8454:	e013      	b.n	847e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    8456:	b1a0      	cbz	r0, 8482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    8458:	6829      	ldr	r1, [r5, #0]
    845a:	f811 0b03 	ldrb.w	r0, [r1], #3
    845e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8462:	f7fd fd23 	bl	5eac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8466:	4607      	mov	r7, r0
    8468:	f7fd fe76 	bl	6158 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    846c:	b138      	cbz	r0, 847e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    846e:	4638      	mov	r0, r7
    8470:	f7fd fcbe 	bl	5df0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8474:	b118      	cbz	r0, 847e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x456>
    8476:	2110      	movs	r1, #16
    8478:	f7fe faba 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    847c:	b108      	cbz	r0, 8482 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45a>
    847e:	2001      	movs	r0, #1
    8480:	e000      	b.n	8484 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    8482:	2000      	movs	r0, #0
    8484:	78a1      	ldrb	r1, [r4, #2]
    8486:	f011 0f04 	tst.w	r1, #4
    848a:	d001      	beq.n	8490 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x468>
    848c:	b1e0      	cbz	r0, 84c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    848e:	e018      	b.n	84c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    8490:	b9be      	cbnz	r6, 84c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    8492:	7c20      	ldrb	r0, [r4, #16]
    8494:	2800      	cmp	r0, #0
    8496:	bf18      	it	ne
    8498:	4540      	cmpne	r0, r8
    849a:	d115      	bne.n	84c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    849c:	6829      	ldr	r1, [r5, #0]
    849e:	f811 0b03 	ldrb.w	r0, [r1], #3
    84a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    84a6:	f7fd fd01 	bl	5eac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    84aa:	4604      	mov	r4, r0
    84ac:	f7fd fe54 	bl	6158 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    84b0:	b138      	cbz	r0, 84c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    84b2:	4620      	mov	r0, r4
    84b4:	f7fd fc9c 	bl	5df0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    84b8:	b118      	cbz	r0, 84c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49a>
    84ba:	2110      	movs	r1, #16
    84bc:	f7fe fa98 	bl	69f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    84c0:	b110      	cbz	r0, 84c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    84c2:	2001      	movs	r0, #1
    84c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84c8:	2000      	movs	r0, #0
    84ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84ce:	0000      	.short	0x0000
    84d0:	20001574 	.word	0x20001574
    84d4:	2000163c 	.word	0x2000163c
    84d8:	2000010c 	.word	0x2000010c
    84dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84e0:	2a02      	cmp	r2, #2
    84e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    84e6:	bf0c      	ite	eq
    84e8:	f44f 7c7a 	moveq.w	ip, #1000	; 0x3e8
    84ec:	f640 0c34 	movwne	ip, #2100	; 0x834
    84f0:	f24a 14df 	movw	r4, #41439	; 0xa1df
    84f4:	44a4      	add	ip, r4
    84f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    84fa:	fbbc f6f4 	udiv	r6, ip, r4
    84fe:	2a08      	cmp	r2, #8
    8500:	bf08      	it	eq
    8502:	2440      	moveq	r4, #64	; 0x40
    8504:	d00a      	beq.n	851c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    8506:	2a04      	cmp	r2, #4
    8508:	bf08      	it	eq
    850a:	2410      	moveq	r4, #16
    850c:	d006      	beq.n	851c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    850e:	2a02      	cmp	r2, #2
    8510:	bf06      	itte	eq
    8512:	2404      	moveq	r4, #4
    8514:	f04f 0c12 	moveq.w	ip, #18
    8518:	2408      	movne	r4, #8
    851a:	d001      	beq.n	8520 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    851c:	f04f 0c19 	mov.w	ip, #25
    8520:	fb14 f50c 	smulbb	r5, r4, ip
    8524:	2400      	movs	r4, #0
    8526:	272e      	movs	r7, #46	; 0x2e
    8528:	f04f 0c40 	mov.w	ip, #64	; 0x40
    852c:	2a08      	cmp	r2, #8
    852e:	bf04      	itt	eq
    8530:	4667      	moveq	r7, ip
    8532:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    8536:	d009      	beq.n	854c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x524>
    8538:	2a04      	cmp	r2, #4
    853a:	bf08      	it	eq
    853c:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    8540:	d004      	beq.n	854c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x524>
    8542:	4627      	mov	r7, r4
    8544:	2a02      	cmp	r2, #2
    8546:	bf0c      	ite	eq
    8548:	2218      	moveq	r2, #24
    854a:	2228      	movne	r2, #40	; 0x28
    854c:	443a      	add	r2, r7
    854e:	442a      	add	r2, r5
    8550:	fb02 6200 	mla	r2, r2, r0, r6
    8554:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    8558:	eb05 10c0 	add.w	r0, r5, r0, lsl #7
    855c:	4402      	add	r2, r0
    855e:	48ad      	ldr	r0, [pc, #692]	; (8814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ec>)
    8560:	f101 050b 	add.w	r5, r1, #11
    8564:	f244 2655 	movw	r6, #16981	; 0x4255
    8568:	7880      	ldrb	r0, [r0, #2]
    856a:	fb05 f506 	mul.w	r5, r5, r6
    856e:	f010 0701 	ands.w	r7, r0, #1
    8572:	ea4f 5895 	mov.w	r8, r5, lsr #22
    8576:	f3c0 0040 	ubfx	r0, r0, #1, #1
    857a:	f04f 0a10 	mov.w	sl, #16
    857e:	f44f 75c8 	mov.w	r5, #400	; 0x190
    8582:	f44f 76bf 	mov.w	r6, #382	; 0x17e
    8586:	bf08      	it	eq
    8588:	2800      	cmpeq	r0, #0
    858a:	f000 80f5 	beq.w	8778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x750>
    858e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    8592:	b1b8      	cbz	r0, 85c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59c>
    8594:	2b08      	cmp	r3, #8
    8596:	bf04      	itt	eq
    8598:	46ab      	moveq	fp, r5
    859a:	2040      	moveq	r0, #64	; 0x40
    859c:	d00c      	beq.n	85b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x590>
    859e:	2b04      	cmp	r3, #4
    85a0:	bf04      	itt	eq
    85a2:	46b3      	moveq	fp, r6
    85a4:	2010      	moveq	r0, #16
    85a6:	d007      	beq.n	85b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x590>
    85a8:	2b02      	cmp	r3, #2
    85aa:	bf07      	ittee	eq
    85ac:	f104 0b18 	addeq.w	fp, r4, #24
    85b0:	2004      	moveq	r0, #4
    85b2:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    85b6:	2008      	movne	r0, #8
    85b8:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
    85bc:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
    85c0:	4458      	add	r0, fp
    85c2:	e018      	b.n	85f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ce>
    85c4:	f1b9 0f00 	cmp.w	r9, #0
    85c8:	d017      	beq.n	85fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d2>
    85ca:	2b08      	cmp	r3, #8
    85cc:	bf04      	itt	eq
    85ce:	46ab      	moveq	fp, r5
    85d0:	2040      	moveq	r0, #64	; 0x40
    85d2:	d00c      	beq.n	85ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c6>
    85d4:	2b04      	cmp	r3, #4
    85d6:	bf04      	itt	eq
    85d8:	46b3      	moveq	fp, r6
    85da:	2010      	moveq	r0, #16
    85dc:	d007      	beq.n	85ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c6>
    85de:	2b02      	cmp	r3, #2
    85e0:	bf07      	ittee	eq
    85e2:	f104 0b18 	addeq.w	fp, r4, #24
    85e6:	2004      	moveq	r0, #4
    85e8:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    85ec:	2008      	movne	r0, #8
    85ee:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    85f2:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    85f6:	4410      	add	r0, r2
    85f8:	e020      	b.n	863c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x614>
    85fa:	29ff      	cmp	r1, #255	; 0xff
    85fc:	bf34      	ite	cc
    85fe:	4608      	movcc	r0, r1
    8600:	20ff      	movcs	r0, #255	; 0xff
    8602:	f100 0b05 	add.w	fp, r0, #5
    8606:	2b08      	cmp	r3, #8
    8608:	bf04      	itt	eq
    860a:	4660      	moveq	r0, ip
    860c:	fb0b 2200 	mlaeq	r2, fp, r0, r2
    8610:	d04c      	beq.n	86ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x684>
    8612:	2b04      	cmp	r3, #4
    8614:	bf04      	itt	eq
    8616:	fb0b 220a 	mlaeq	r2, fp, sl, r2
    861a:	202e      	moveq	r0, #46	; 0x2e
    861c:	d046      	beq.n	86ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x684>
    861e:	2b02      	cmp	r3, #2
    8620:	bf0c      	ite	eq
    8622:	2004      	moveq	r0, #4
    8624:	2008      	movne	r0, #8
    8626:	fb0b 2200 	mla	r2, fp, r0, r2
    862a:	bf07      	ittee	eq
    862c:	4620      	moveq	r0, r4
    862e:	f04f 0b18 	moveq.w	fp, #24
    8632:	2000      	movne	r0, #0
    8634:	f04f 0b28 	movne.w	fp, #40	; 0x28
    8638:	4458      	add	r0, fp
    863a:	4410      	add	r0, r2
    863c:	309c      	adds	r0, #156	; 0x9c
    863e:	2b08      	cmp	r3, #8
    8640:	bf04      	itt	eq
    8642:	462a      	moveq	r2, r5
    8644:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    8648:	d00f      	beq.n	866a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x642>
    864a:	2b04      	cmp	r3, #4
    864c:	bf04      	itt	eq
    864e:	4632      	moveq	r2, r6
    8650:	f04f 0b10 	moveq.w	fp, #16
    8654:	d009      	beq.n	866a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x642>
    8656:	2b02      	cmp	r3, #2
    8658:	bf07      	ittee	eq
    865a:	f104 0218 	addeq.w	r2, r4, #24
    865e:	f04f 0b04 	moveq.w	fp, #4
    8662:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    8666:	f04f 0b08 	movne.w	fp, #8
    866a:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
    866e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    8672:	eb02 024b 	add.w	r2, r2, fp, lsl #1
    8676:	4410      	add	r0, r2
    8678:	3098      	adds	r0, #152	; 0x98
    867a:	b1d7      	cbz	r7, 86b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x68a>
    867c:	2b08      	cmp	r3, #8
    867e:	bf08      	it	eq
    8680:	2140      	moveq	r1, #64	; 0x40
    8682:	d00c      	beq.n	869e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x676>
    8684:	2b04      	cmp	r3, #4
    8686:	bf04      	itt	eq
    8688:	4635      	moveq	r5, r6
    868a:	2110      	moveq	r1, #16
    868c:	d007      	beq.n	869e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x676>
    868e:	2b02      	cmp	r3, #2
    8690:	bf07      	ittee	eq
    8692:	f104 0518 	addeq.w	r5, r4, #24
    8696:	2104      	moveq	r1, #4
    8698:	f104 0528 	addne.w	r5, r4, #40	; 0x28
    869c:	2108      	movne	r1, #8
    869e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    86a2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    86a6:	4429      	add	r1, r5
    86a8:	4408      	add	r0, r1
    86aa:	e062      	b.n	8772 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74a>
    86ac:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    86b0:	e7c2      	b.n	8638 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x610>
    86b2:	f1b9 0f00 	cmp.w	r9, #0
    86b6:	d01b      	beq.n	86f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c8>
    86b8:	2b08      	cmp	r3, #8
    86ba:	bf04      	itt	eq
    86bc:	462a      	moveq	r2, r5
    86be:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    86c2:	d00f      	beq.n	86e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    86c4:	2b04      	cmp	r3, #4
    86c6:	bf04      	itt	eq
    86c8:	4632      	moveq	r2, r6
    86ca:	f04f 0c10 	moveq.w	ip, #16
    86ce:	d009      	beq.n	86e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    86d0:	2b02      	cmp	r3, #2
    86d2:	bf07      	ittee	eq
    86d4:	f104 0218 	addeq.w	r2, r4, #24
    86d8:	f04f 0c04 	moveq.w	ip, #4
    86dc:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    86e0:	f04f 0c08 	movne.w	ip, #8
    86e4:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    86e8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    86ec:	4410      	add	r0, r2
    86ee:	e020      	b.n	8732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70a>
    86f0:	29ff      	cmp	r1, #255	; 0xff
    86f2:	bf34      	ite	cc
    86f4:	460a      	movcc	r2, r1
    86f6:	22ff      	movcs	r2, #255	; 0xff
    86f8:	1d52      	adds	r2, r2, #5
    86fa:	2b08      	cmp	r3, #8
    86fc:	bf08      	it	eq
    86fe:	fb02 000c 	mlaeq	r0, r2, ip, r0
    8702:	d01f      	beq.n	8744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x71c>
    8704:	2b04      	cmp	r3, #4
    8706:	bf04      	itt	eq
    8708:	fb02 000a 	mlaeq	r0, r2, sl, r0
    870c:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    8710:	d018      	beq.n	8744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x71c>
    8712:	2b02      	cmp	r3, #2
    8714:	bf0c      	ite	eq
    8716:	f04f 0c04 	moveq.w	ip, #4
    871a:	f04f 0c08 	movne.w	ip, #8
    871e:	fb02 000c 	mla	r0, r2, ip, r0
    8722:	bf07      	ittee	eq
    8724:	46a4      	moveq	ip, r4
    8726:	2218      	moveq	r2, #24
    8728:	f04f 0c00 	movne.w	ip, #0
    872c:	2228      	movne	r2, #40	; 0x28
    872e:	4462      	add	r2, ip
    8730:	4410      	add	r0, r2
    8732:	29eb      	cmp	r1, #235	; 0xeb
    8734:	d91d      	bls.n	8772 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74a>
    8736:	2b08      	cmp	r3, #8
    8738:	d00a      	beq.n	8750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    873a:	2b04      	cmp	r3, #4
    873c:	d005      	beq.n	874a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x722>
    873e:	2b02      	cmp	r3, #2
    8740:	d008      	beq.n	8754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x72c>
    8742:	e00b      	b.n	875c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x734>
    8744:	f44f 72a8 	mov.w	r2, #336	; 0x150
    8748:	e7f1      	b.n	872e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x706>
    874a:	4635      	mov	r5, r6
    874c:	2110      	movs	r1, #16
    874e:	e008      	b.n	8762 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x73a>
    8750:	2140      	movs	r1, #64	; 0x40
    8752:	e006      	b.n	8762 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x73a>
    8754:	f104 0518 	add.w	r5, r4, #24
    8758:	2104      	movs	r1, #4
    875a:	e002      	b.n	8762 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x73a>
    875c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    8760:	2108      	movs	r1, #8
    8762:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    8766:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    876a:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    876e:	fb08 0001 	mla	r0, r8, r1, r0
    8772:	30e9      	adds	r0, #233	; 0xe9
    8774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8778:	f502 70a5 	add.w	r0, r2, #330	; 0x14a
    877c:	f1b9 0f00 	cmp.w	r9, #0
    8780:	d01b      	beq.n	87ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x792>
    8782:	2b08      	cmp	r3, #8
    8784:	bf04      	itt	eq
    8786:	462a      	moveq	r2, r5
    8788:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    878c:	d00f      	beq.n	87ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x786>
    878e:	2b04      	cmp	r3, #4
    8790:	bf04      	itt	eq
    8792:	4632      	moveq	r2, r6
    8794:	f04f 0c10 	moveq.w	ip, #16
    8798:	d009      	beq.n	87ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x786>
    879a:	2b02      	cmp	r3, #2
    879c:	bf07      	ittee	eq
    879e:	f104 0218 	addeq.w	r2, r4, #24
    87a2:	f04f 0c04 	moveq.w	ip, #4
    87a6:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    87aa:	f04f 0c08 	movne.w	ip, #8
    87ae:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    87b2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    87b6:	4410      	add	r0, r2
    87b8:	e020      	b.n	87fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d4>
    87ba:	29ff      	cmp	r1, #255	; 0xff
    87bc:	bf34      	ite	cc
    87be:	460a      	movcc	r2, r1
    87c0:	22ff      	movcs	r2, #255	; 0xff
    87c2:	1d52      	adds	r2, r2, #5
    87c4:	2b08      	cmp	r3, #8
    87c6:	bf08      	it	eq
    87c8:	fb02 000c 	mlaeq	r0, r2, ip, r0
    87cc:	d01f      	beq.n	880e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7e6>
    87ce:	2b04      	cmp	r3, #4
    87d0:	bf04      	itt	eq
    87d2:	fb02 000a 	mlaeq	r0, r2, sl, r0
    87d6:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    87da:	d018      	beq.n	880e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7e6>
    87dc:	2b02      	cmp	r3, #2
    87de:	bf0c      	ite	eq
    87e0:	f04f 0c04 	moveq.w	ip, #4
    87e4:	f04f 0c08 	movne.w	ip, #8
    87e8:	fb02 000c 	mla	r0, r2, ip, r0
    87ec:	bf07      	ittee	eq
    87ee:	46a4      	moveq	ip, r4
    87f0:	2218      	moveq	r2, #24
    87f2:	f04f 0c00 	movne.w	ip, #0
    87f6:	2228      	movne	r2, #40	; 0x28
    87f8:	4462      	add	r2, ip
    87fa:	4410      	add	r0, r2
    87fc:	29eb      	cmp	r1, #235	; 0xeb
    87fe:	d9b8      	bls.n	8772 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74a>
    8800:	2b08      	cmp	r3, #8
    8802:	d0a5      	beq.n	8750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
    8804:	2b04      	cmp	r3, #4
    8806:	d0a0      	beq.n	874a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x722>
    8808:	2b02      	cmp	r3, #2
    880a:	d1a7      	bne.n	875c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x734>
    880c:	e7a2      	b.n	8754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x72c>
    880e:	f44f 72a8 	mov.w	r2, #336	; 0x150
    8812:	e7f1      	b.n	87f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7d0>
    8814:	20001574 	.word	0x20001574
    8818:	b570      	push	{r4, r5, r6, lr}
    881a:	4c1c      	ldr	r4, [pc, #112]	; (888c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x864>)
    881c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    8820:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8822:	1c40      	adds	r0, r0, #1
    8824:	6260      	str	r0, [r4, #36]	; 0x24
    8826:	7ba8      	ldrb	r0, [r5, #14]
    8828:	2600      	movs	r6, #0
    882a:	b120      	cbz	r0, 8836 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x80e>
    882c:	f004 ff82 	bl	d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8830:	f004 fda8 	bl	d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8834:	73ae      	strb	r6, [r5, #14]
    8836:	702e      	strb	r6, [r5, #0]
    8838:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    883c:	b120      	cbz	r0, 8848 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x820>
    883e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8842:	2001      	movs	r0, #1
    8844:	f000 ba80 	b.w	8d48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8848:	7b60      	ldrb	r0, [r4, #13]
    884a:	b1d0      	cbz	r0, 8882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x85a>
    884c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    884e:	4288      	cmp	r0, r1
    8850:	d817      	bhi.n	8882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x85a>
    8852:	2001      	movs	r0, #1
    8854:	f000 fa78 	bl	8d48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8858:	78a0      	ldrb	r0, [r4, #2]
    885a:	f010 0f01 	tst.w	r0, #1
    885e:	d008      	beq.n	8872 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x84a>
    8860:	480b      	ldr	r0, [pc, #44]	; (8890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x868>)
    8862:	2243      	movs	r2, #67	; 0x43
    8864:	6840      	ldr	r0, [r0, #4]
    8866:	8801      	ldrh	r1, [r0, #0]
    8868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    886c:	2001      	movs	r0, #1
    886e:	f7ff bd6b 	b.w	8348 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8876:	2243      	movs	r2, #67	; 0x43
    8878:	f64f 71ff 	movw	r1, #65535	; 0xffff
    887c:	2000      	movs	r0, #0
    887e:	f7ff bd63 	b.w	8348 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8886:	2000      	movs	r0, #0
    8888:	f000 ba5e 	b.w	8d48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    888c:	20001574 	.word	0x20001574
    8890:	2000010c 	.word	0x2000010c
    8894:	b570      	push	{r4, r5, r6, lr}
    8896:	4c3a      	ldr	r4, [pc, #232]	; (8980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x958>)
    8898:	4605      	mov	r5, r0
    889a:	460e      	mov	r6, r1
    889c:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    88a0:	b120      	cbz	r0, 88ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x884>
    88a2:	f640 21e9 	movw	r1, #2793	; 0xae9
    88a6:	202d      	movs	r0, #45	; 0x2d
    88a8:	f7fb fbf0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ac:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    88b0:	8828      	ldrh	r0, [r5, #0]
    88b2:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    88b6:	2a00      	cmp	r2, #0
    88b8:	bf18      	it	ne
    88ba:	bd70      	popne	{r4, r5, r6, pc}
    88bc:	6868      	ldr	r0, [r5, #4]
    88be:	f007 fd4c 	bl	1035a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    88c2:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    88c6:	8928      	ldrh	r0, [r5, #8]
    88c8:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    88cc:	8968      	ldrh	r0, [r5, #10]
    88ce:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    88d2:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    88d6:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    88da:	7ca0      	ldrb	r0, [r4, #18]
    88dc:	2500      	movs	r5, #0
    88de:	b150      	cbz	r0, 88f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ce>
    88e0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    88e4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    88e8:	2901      	cmp	r1, #1
    88ea:	d104      	bne.n	88f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ce>
    88ec:	7940      	ldrb	r0, [r0, #5]
    88ee:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    88f2:	2840      	cmp	r0, #64	; 0x40
    88f4:	d02d      	beq.n	8952 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92a>
    88f6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    88fa:	b148      	cbz	r0, 8910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e8>
    88fc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8900:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8904:	2901      	cmp	r1, #1
    8906:	bf04      	itt	eq
    8908:	7940      	ldrbeq	r0, [r0, #5]
    890a:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    890e:	d020      	beq.n	8952 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92a>
    8910:	481c      	ldr	r0, [pc, #112]	; (8984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x95c>)
    8912:	f009 fd99 	bl	12448 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    8916:	481c      	ldr	r0, [pc, #112]	; (8988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x960>)
    8918:	2eff      	cmp	r6, #255	; 0xff
    891a:	6800      	ldr	r0, [r0, #0]
    891c:	7801      	ldrb	r1, [r0, #0]
    891e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8922:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    8926:	f8d0 1003 	ldr.w	r1, [r0, #3]
    892a:	d020      	beq.n	896e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x946>
    892c:	67e1      	str	r1, [r4, #124]	; 0x7c
    892e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8932:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    8936:	f104 0270 	add.w	r2, r4, #112	; 0x70
    893a:	1e51      	subs	r1, r2, #1
    893c:	4630      	mov	r0, r6
    893e:	f7fd fa89 	bl	5e54 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8942:	b178      	cbz	r0, 8964 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x93c>
    8944:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8948:	f040 0002 	orr.w	r0, r0, #2
    894c:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    8950:	bd70      	pop	{r4, r5, r6, pc}
    8952:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    8956:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    895a:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    895e:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    8962:	e7d8      	b.n	8916 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ee>
    8964:	f640 310a 	movw	r1, #2826	; 0xb0a
    8968:	202d      	movs	r0, #45	; 0x2d
    896a:	f7fb fb8f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    896e:	6721      	str	r1, [r4, #112]	; 0x70
    8970:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8974:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    8978:	67e5      	str	r5, [r4, #124]	; 0x7c
    897a:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    897e:	bd70      	pop	{r4, r5, r6, pc}
    8980:	20001574 	.word	0x20001574
    8984:	200015ea 	.word	0x200015ea
    8988:	2000010c 	.word	0x2000010c
    898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8990:	b084      	sub	sp, #16
    8992:	4c52      	ldr	r4, [pc, #328]	; (8adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xab4>)
    8994:	20ff      	movs	r0, #255	; 0xff
    8996:	f88d 0000 	strb.w	r0, [sp]
    899a:	6820      	ldr	r0, [r4, #0]
    899c:	f04f 0901 	mov.w	r9, #1
    89a0:	7801      	ldrb	r1, [r0, #0]
    89a2:	f3c1 1880 	ubfx	r8, r1, #6, #1
    89a6:	f8d0 1003 	ldr.w	r1, [r0, #3]
    89aa:	9101      	str	r1, [sp, #4]
    89ac:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    89b0:	f8ad 0008 	strh.w	r0, [sp, #8]
    89b4:	4669      	mov	r1, sp
    89b6:	2005      	movs	r0, #5
    89b8:	f7ff fd00 	bl	83bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    89bc:	2800      	cmp	r0, #0
    89be:	d07d      	beq.n	8abc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa94>
    89c0:	e9d4 0500 	ldrd	r0, r5, [r4]
    89c4:	4f46      	ldr	r7, [pc, #280]	; (8ae0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xab8>)
    89c6:	f8d0 100f 	ldr.w	r1, [r0, #15]
    89ca:	797e      	ldrb	r6, [r7, #5]
    89cc:	f8c5 1012 	str.w	r1, [r5, #18]
    89d0:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    89d4:	82e9      	strh	r1, [r5, #22]
    89d6:	7d41      	ldrb	r1, [r0, #21]
    89d8:	7629      	strb	r1, [r5, #24]
    89da:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    89de:	f007 fcb0 	bl	10342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    89e2:	4682      	mov	sl, r0
    89e4:	6068      	str	r0, [r5, #4]
    89e6:	6820      	ldr	r0, [r4, #0]
    89e8:	4651      	mov	r1, sl
    89ea:	7d80      	ldrb	r0, [r0, #22]
    89ec:	f007 fef7 	bl	107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    89f0:	8368      	strh	r0, [r5, #26]
    89f2:	6820      	ldr	r0, [r4, #0]
    89f4:	4651      	mov	r1, sl
    89f6:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    89fa:	f007 fee7 	bl	107cc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    89fe:	61e8      	str	r0, [r5, #28]
    8a00:	6820      	ldr	r0, [r4, #0]
    8a02:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    8a06:	8129      	strh	r1, [r5, #8]
    8a08:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8a0c:	8169      	strh	r1, [r5, #10]
    8a0e:	f100 011f 	add.w	r1, r0, #31
    8a12:	f105 000c 	add.w	r0, r5, #12
    8a16:	f009 fd12 	bl	1243e <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    8a1a:	6820      	ldr	r0, [r4, #0]
    8a1c:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8a20:	f001 011f 	and.w	r1, r1, #31
    8a24:	f885 1020 	strb.w	r1, [r5, #32]
    8a28:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8a2c:	0940      	lsrs	r0, r0, #5
    8a2e:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
    8a32:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    8a36:	f885 6067 	strb.w	r6, [r5, #103]	; 0x67
    8a3a:	2101      	movs	r1, #1
    8a3c:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
    8a40:	2100      	movs	r1, #0
    8a42:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8a46:	f008 fa3e 	bl	10ec6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8a4a:	7bf8      	ldrb	r0, [r7, #15]
    8a4c:	f885 006a 	strb.w	r0, [r5, #106]	; 0x6a
    8a50:	2200      	movs	r2, #0
    8a52:	f89d 1000 	ldrb.w	r1, [sp]
    8a56:	6860      	ldr	r0, [r4, #4]
    8a58:	f7ff ff1c 	bl	8894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x86c>
    8a5c:	2106      	movs	r1, #6
    8a5e:	6860      	ldr	r0, [r4, #4]
    8a60:	f000 fb86 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8a64:	481f      	ldr	r0, [pc, #124]	; (8ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xabc>)
    8a66:	2100      	movs	r1, #0
    8a68:	ad01      	add	r5, sp, #4
    8a6a:	6806      	ldr	r6, [r0, #0]
    8a6c:	6820      	ldr	r0, [r4, #0]
    8a6e:	8001      	strh	r1, [r0, #0]
    8a70:	2108      	movs	r1, #8
    8a72:	f008 f87a 	bl	10b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8a76:	2100      	movs	r1, #0
    8a78:	6820      	ldr	r0, [r4, #0]
    8a7a:	f008 f815 	bl	10aa8 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    8a7e:	4631      	mov	r1, r6
    8a80:	6820      	ldr	r0, [r4, #0]
    8a82:	f008 f844 	bl	10b0e <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8a86:	2306      	movs	r3, #6
    8a88:	2200      	movs	r2, #0
    8a8a:	f107 013d 	add.w	r1, r7, #61	; 0x3d
    8a8e:	6820      	ldr	r0, [r4, #0]
    8a90:	f008 f823 	bl	10ada <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8a94:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
    8a98:	6820      	ldr	r0, [r4, #0]
    8a9a:	f008 f89f 	bl	10bdc <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8a9e:	4641      	mov	r1, r8
    8aa0:	6820      	ldr	r0, [r4, #0]
    8aa2:	f008 f88b 	bl	10bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8aa6:	2306      	movs	r3, #6
    8aa8:	2201      	movs	r2, #1
    8aaa:	4629      	mov	r1, r5
    8aac:	6820      	ldr	r0, [r4, #0]
    8aae:	f008 f814 	bl	10ada <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8ab2:	7979      	ldrb	r1, [r7, #5]
    8ab4:	20ff      	movs	r0, #255	; 0xff
    8ab6:	f005 fd3b 	bl	e530 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    8aba:	e000      	b.n	8abe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa96>
    8abc:	e007      	b.n	8ace <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa6>
    8abe:	6820      	ldr	r0, [r4, #0]
    8ac0:	f005 fa26 	bl	df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8ac4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    8ac8:	2009      	movs	r0, #9
    8aca:	7008      	strb	r0, [r1, #0]
    8acc:	e001      	b.n	8ad2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaaa>
    8ace:	f7ff fea3 	bl	8818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7f0>
    8ad2:	b004      	add	sp, #16
    8ad4:	4648      	mov	r0, r9
    8ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ada:	0000      	.short	0x0000
    8adc:	2000010c 	.word	0x2000010c
    8ae0:	20001574 	.word	0x20001574
    8ae4:	00008be0 	.word	0x00008be0
    8ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8aec:	20ff      	movs	r0, #255	; 0xff
    8aee:	f88d 0000 	strb.w	r0, [sp]
    8af2:	2701      	movs	r7, #1
    8af4:	4669      	mov	r1, sp
    8af6:	2005      	movs	r0, #5
    8af8:	f7ff fc60 	bl	83bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    8afc:	2800      	cmp	r0, #0
    8afe:	bf08      	it	eq
    8b00:	2700      	moveq	r7, #0
    8b02:	d065      	beq.n	8bd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba8>
    8b04:	4d34      	ldr	r5, [pc, #208]	; (8bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbb0>)
    8b06:	2601      	movs	r6, #1
    8b08:	6828      	ldr	r0, [r5, #0]
    8b0a:	686c      	ldr	r4, [r5, #4]
    8b0c:	7802      	ldrb	r2, [r0, #0]
    8b0e:	7c61      	ldrb	r1, [r4, #17]
    8b10:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8b14:	4011      	ands	r1, r2
    8b16:	7461      	strb	r1, [r4, #17]
    8b18:	f8d0 100f 	ldr.w	r1, [r0, #15]
    8b1c:	f8c4 1012 	str.w	r1, [r4, #18]
    8b20:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    8b24:	82e1      	strh	r1, [r4, #22]
    8b26:	7d41      	ldrb	r1, [r0, #21]
    8b28:	7621      	strb	r1, [r4, #24]
    8b2a:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8b2e:	f007 fc08 	bl	10342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8b32:	4680      	mov	r8, r0
    8b34:	6060      	str	r0, [r4, #4]
    8b36:	6828      	ldr	r0, [r5, #0]
    8b38:	4641      	mov	r1, r8
    8b3a:	7d80      	ldrb	r0, [r0, #22]
    8b3c:	f007 fe4f 	bl	107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8b40:	8360      	strh	r0, [r4, #26]
    8b42:	6828      	ldr	r0, [r5, #0]
    8b44:	4641      	mov	r1, r8
    8b46:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8b4a:	f007 fe3f 	bl	107cc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8b4e:	61e0      	str	r0, [r4, #28]
    8b50:	6828      	ldr	r0, [r5, #0]
    8b52:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    8b56:	8121      	strh	r1, [r4, #8]
    8b58:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8b5c:	8161      	strh	r1, [r4, #10]
    8b5e:	f100 011f 	add.w	r1, r0, #31
    8b62:	f104 000c 	add.w	r0, r4, #12
    8b66:	f009 fc6a 	bl	1243e <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    8b6a:	6828      	ldr	r0, [r5, #0]
    8b6c:	46b0      	mov	r8, r6
    8b6e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8b72:	f001 011f 	and.w	r1, r1, #31
    8b76:	f884 1020 	strb.w	r1, [r4, #32]
    8b7a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8b7e:	0940      	lsrs	r0, r0, #5
    8b80:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    8b84:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
    8b88:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    8b8c:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
    8b90:	2100      	movs	r1, #0
    8b92:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8b96:	f008 f996 	bl	10ec6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8b9a:	4e10      	ldr	r6, [pc, #64]	; (8bdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbb4>)
    8b9c:	2200      	movs	r2, #0
    8b9e:	7bf0      	ldrb	r0, [r6, #15]
    8ba0:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    8ba4:	f89d 1000 	ldrb.w	r1, [sp]
    8ba8:	6868      	ldr	r0, [r5, #4]
    8baa:	f7ff fe73 	bl	8894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x86c>
    8bae:	f886 8068 	strb.w	r8, [r6, #104]	; 0x68
    8bb2:	f896 206a 	ldrb.w	r2, [r6, #106]	; 0x6a
    8bb6:	f8b6 106c 	ldrh.w	r1, [r6, #108]	; 0x6c
    8bba:	2001      	movs	r0, #1
    8bbc:	f7ff fbc4 	bl	8348 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    8bc0:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
    8bc4:	2000      	movs	r0, #0
    8bc6:	7008      	strb	r0, [r1, #0]
    8bc8:	2105      	movs	r1, #5
    8bca:	6868      	ldr	r0, [r5, #4]
    8bcc:	f000 fad0 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8bd0:	4638      	mov	r0, r7
    8bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bd6:	0000      	.short	0x0000
    8bd8:	2000010c 	.word	0x2000010c
    8bdc:	20001574 	.word	0x20001574
    8be0:	00000003 	.word	0x00000003
    8be4:	55555501 	.word	0x55555501
    8be8:	8e89bed6 	.word	0x8e89bed6
    8bec:	00007fa1 	.word	0x00007fa1
    8bf0:	00007ced 	.word	0x00007ced
    8bf4:	00007ef1 	.word	0x00007ef1
    8bf8:	00000000 	.word	0x00000000
    8bfc:	000090c9 	.word	0x000090c9
    8c00:	00007df5 	.word	0x00007df5
    8c04:	00007f2d 	.word	0x00007f2d
    8c08:	00010f39 	.word	0x00010f39
    8c0c:	00010f3f 	.word	0x00010f3f
    8c10:	00010f45 	.word	0x00010f45
    8c14:	000082d1 	.word	0x000082d1
    8c18:	00010f5b 	.word	0x00010f5b
    8c1c:	00008c0c 	.word	0x00008c0c
    8c20:	00008c04 	.word	0x00008c04
    8c24:	00008c00 	.word	0x00008c00

00008c28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8c28:	b510      	push	{r4, lr}
    8c2a:	1e42      	subs	r2, r0, #1
    8c2c:	2a02      	cmp	r2, #2
    8c2e:	d903      	bls.n	8c38 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8c30:	21ca      	movs	r1, #202	; 0xca
    8c32:	202f      	movs	r0, #47	; 0x2f
    8c34:	f7fb fa2a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c38:	1e40      	subs	r0, r0, #1
    8c3a:	2910      	cmp	r1, #16
    8c3c:	bf02      	ittt	eq
    8c3e:	490a      	ldreq	r1, [pc, #40]	; (8c68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8c40:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    8c44:	bd10      	popeq	{r4, pc}
    8c46:	2912      	cmp	r1, #18
    8c48:	bf14      	ite	ne
    8c4a:	2913      	cmpne	r1, #19
    8c4c:	4907      	ldreq	r1, [pc, #28]	; (8c6c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    8c4e:	d007      	beq.n	8c60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8c50:	2915      	cmp	r1, #21
    8c52:	bf08      	it	eq
    8c54:	4906      	ldreq	r1, [pc, #24]	; (8c70 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    8c56:	d003      	beq.n	8c60 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8c58:	21d8      	movs	r1, #216	; 0xd8
    8c5a:	202f      	movs	r0, #47	; 0x2f
    8c5c:	f7fb fa16 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c60:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8c64:	bd10      	pop	{r4, pc}
    8c66:	0000      	.short	0x0000
    8c68:	000110b8 	.word	0x000110b8
    8c6c:	000110b2 	.word	0x000110b2
    8c70:	000110be 	.word	0x000110be

00008c74 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8c74:	1e42      	subs	r2, r0, #1
    8c76:	b510      	push	{r4, lr}
    8c78:	b2d2      	uxtb	r2, r2
    8c7a:	2a01      	cmp	r2, #1
    8c7c:	d905      	bls.n	8c8a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    8c7e:	291d      	cmp	r1, #29
    8c80:	d01e      	beq.n	8cc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8c82:	21ee      	movs	r1, #238	; 0xee
    8c84:	202f      	movs	r0, #47	; 0x2f
    8c86:	f7fb fa01 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c8a:	2913      	cmp	r1, #19
    8c8c:	d014      	beq.n	8cb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8c8e:	dc08      	bgt.n	8ca2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8c90:	2910      	cmp	r1, #16
    8c92:	bf02      	ittt	eq
    8c94:	480d      	ldreq	r0, [pc, #52]	; (8ccc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    8c96:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    8c9a:	bd10      	popeq	{r4, pc}
    8c9c:	2912      	cmp	r1, #18
    8c9e:	d00b      	beq.n	8cb8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8ca0:	e005      	b.n	8cae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    8ca2:	2915      	cmp	r1, #21
    8ca4:	bf08      	it	eq
    8ca6:	480a      	ldreq	r0, [pc, #40]	; (8cd0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    8ca8:	d007      	beq.n	8cba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    8caa:	291d      	cmp	r1, #29
    8cac:	d008      	beq.n	8cc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8cae:	f44f 7181 	mov.w	r1, #258	; 0x102
    8cb2:	202f      	movs	r0, #47	; 0x2f
    8cb4:	f7fb f9ea 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cb8:	4806      	ldr	r0, [pc, #24]	; (8cd4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    8cba:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8cbe:	bd10      	pop	{r4, pc}
    8cc0:	f240 315a 	movw	r1, #858	; 0x35a
    8cc4:	fb10 f001 	smulbb	r0, r0, r1
    8cc8:	bd10      	pop	{r4, pc}
    8cca:	0000      	.short	0x0000
    8ccc:	000110a6 	.word	0x000110a6
    8cd0:	000110ae 	.word	0x000110ae
    8cd4:	000110aa 	.word	0x000110aa

00008cd8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    8cd8:	b570      	push	{r4, r5, r6, lr}
    8cda:	4c1a      	ldr	r4, [pc, #104]	; (8d44 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    8cdc:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8ce0:	2800      	cmp	r0, #0
    8ce2:	bf1c      	itt	ne
    8ce4:	2000      	movne	r0, #0
    8ce6:	bd70      	popne	{r4, r5, r6, pc}
    8ce8:	7a20      	ldrb	r0, [r4, #8]
    8cea:	b138      	cbz	r0, 8cfc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    8cec:	68e1      	ldr	r1, [r4, #12]
    8cee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8cf0:	4288      	cmp	r0, r1
    8cf2:	d903      	bls.n	8cfc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    8cf4:	f7fe fef4 	bl	7ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8cf8:	2000      	movs	r0, #0
    8cfa:	bd70      	pop	{r4, r5, r6, pc}
    8cfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8cfe:	b1f8      	cbz	r0, 8d40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8d00:	f7fe fcb6 	bl	7670 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8d04:	4605      	mov	r5, r0
    8d06:	f7fe fcdb 	bl	76c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8d0a:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8d0e:	4428      	add	r0, r5
    8d10:	f242 7110 	movw	r1, #10000	; 0x2710
    8d14:	1846      	adds	r6, r0, r1
    8d16:	f005 ffa6 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8d1a:	4605      	mov	r5, r0
    8d1c:	4629      	mov	r1, r5
    8d1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8d20:	f7f8 fe32 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8d24:	6325      	str	r5, [r4, #48]	; 0x30
    8d26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8d28:	1982      	adds	r2, r0, r6
    8d2a:	4291      	cmp	r1, r2
    8d2c:	bf24      	itt	cs
    8d2e:	1a08      	subcs	r0, r1, r0
    8d30:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    8d32:	d205      	bcs.n	8d40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8d34:	2001      	movs	r0, #1
    8d36:	62e0      	str	r0, [r4, #44]	; 0x2c
    8d38:	f7fe fed2 	bl	7ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8d3c:	2000      	movs	r0, #0
    8d3e:	bd70      	pop	{r4, r5, r6, pc}
    8d40:	2001      	movs	r0, #1
    8d42:	bd70      	pop	{r4, r5, r6, pc}
    8d44:	2000164c 	.word	0x2000164c

00008d48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d4a:	4f25      	ldr	r7, [pc, #148]	; (8de0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    8d4c:	4c25      	ldr	r4, [pc, #148]	; (8de4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    8d4e:	2500      	movs	r5, #0
    8d50:	b130      	cbz	r0, 8d60 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    8d52:	2801      	cmp	r0, #1
    8d54:	d039      	beq.n	8dca <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    8d56:	f240 7153 	movw	r1, #1875	; 0x753
    8d5a:	2030      	movs	r0, #48	; 0x30
    8d5c:	f7fb f996 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d60:	7860      	ldrb	r0, [r4, #1]
    8d62:	2600      	movs	r6, #0
    8d64:	b160      	cbz	r0, 8d80 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    8d66:	2101      	movs	r1, #1
    8d68:	4668      	mov	r0, sp
    8d6a:	f7fb ff8f 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    8d6e:	f89d 0000 	ldrb.w	r0, [sp]
    8d72:	f242 7110 	movw	r1, #10000	; 0x2710
    8d76:	0200      	lsls	r0, r0, #8
    8d78:	fbb0 f2f1 	udiv	r2, r0, r1
    8d7c:	fb01 0612 	mls	r6, r1, r2, r0
    8d80:	f7fe fc76 	bl	7670 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8d84:	1981      	adds	r1, r0, r6
    8d86:	6a20      	ldr	r0, [r4, #32]
    8d88:	f7f8 fdc8 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8d8c:	6220      	str	r0, [r4, #32]
    8d8e:	7525      	strb	r5, [r4, #20]
    8d90:	77e5      	strb	r5, [r4, #31]
    8d92:	2003      	movs	r0, #3
    8d94:	77a0      	strb	r0, [r4, #30]
    8d96:	2064      	movs	r0, #100	; 0x64
    8d98:	83a0      	strh	r0, [r4, #28]
    8d9a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8d9e:	b928      	cbnz	r0, 8dac <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    8da0:	7820      	ldrb	r0, [r4, #0]
    8da2:	f104 0114 	add.w	r1, r4, #20
    8da6:	f7f8 ff0d 	bl	1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8daa:	b148      	cbz	r0, 8dc0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    8dac:	84a5      	strh	r5, [r4, #36]	; 0x24
    8dae:	f004 ffdd 	bl	dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8db2:	f7f9 fd7b 	bl	28ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8db6:	7978      	ldrb	r0, [r7, #5]
    8db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8dbc:	f7fa bf5a 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8dc0:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
    8dc4:	2030      	movs	r0, #48	; 0x30
    8dc6:	f7fb f961 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dca:	7225      	strb	r5, [r4, #8]
    8dcc:	f004 ffce 	bl	dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8dd0:	f7f9 fd6c 	bl	28ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8dd4:	7978      	ldrb	r0, [r7, #5]
    8dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8dda:	f7fa bf4b 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8dde:	0000      	.short	0x0000
    8de0:	20000120 	.word	0x20000120
    8de4:	2000164c 	.word	0x2000164c

00008de8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    8de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8dec:	4d48      	ldr	r5, [pc, #288]	; (8f10 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    8dee:	4606      	mov	r6, r0
    8df0:	460f      	mov	r7, r1
    8df2:	7c28      	ldrb	r0, [r5, #16]
    8df4:	2800      	cmp	r0, #0
    8df6:	d150      	bne.n	8e9a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8df8:	4846      	ldr	r0, [pc, #280]	; (8f14 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    8dfa:	f7f9 fd35 	bl	2868 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8dfe:	2820      	cmp	r0, #32
    8e00:	d04b      	beq.n	8e9a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8e02:	2400      	movs	r4, #0
    8e04:	602c      	str	r4, [r5, #0]
    8e06:	606c      	str	r4, [r5, #4]
    8e08:	60ac      	str	r4, [r5, #8]
    8e0a:	60ec      	str	r4, [r5, #12]
    8e0c:	612c      	str	r4, [r5, #16]
    8e0e:	616c      	str	r4, [r5, #20]
    8e10:	61ac      	str	r4, [r5, #24]
    8e12:	61ec      	str	r4, [r5, #28]
    8e14:	622c      	str	r4, [r5, #32]
    8e16:	626c      	str	r4, [r5, #36]	; 0x24
    8e18:	62ac      	str	r4, [r5, #40]	; 0x28
    8e1a:	62ec      	str	r4, [r5, #44]	; 0x2c
    8e1c:	632c      	str	r4, [r5, #48]	; 0x30
    8e1e:	636c      	str	r4, [r5, #52]	; 0x34
    8e20:	63ac      	str	r4, [r5, #56]	; 0x38
    8e22:	7028      	strb	r0, [r5, #0]
    8e24:	f04f 0803 	mov.w	r8, #3
    8e28:	606e      	str	r6, [r5, #4]
    8e2a:	f885 8010 	strb.w	r8, [r5, #16]
    8e2e:	b15e      	cbz	r6, 8e48 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    8e30:	2101      	movs	r1, #1
    8e32:	f506 7098 	add.w	r0, r6, #304	; 0x130
    8e36:	f7fb ff3f 	bl	4cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    8e3a:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    8e3e:	f000 0007 	and.w	r0, r0, #7
    8e42:	1c40      	adds	r0, r0, #1
    8e44:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    8e48:	2064      	movs	r0, #100	; 0x64
    8e4a:	83a8      	strh	r0, [r5, #28]
    8e4c:	f885 801e 	strb.w	r8, [r5, #30]
    8e50:	77ec      	strb	r4, [r5, #31]
    8e52:	752c      	strb	r4, [r5, #20]
    8e54:	f7f8 feac 	bl	1bb0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8e58:	8ba9      	ldrh	r1, [r5, #28]
    8e5a:	4288      	cmp	r0, r1
    8e5c:	bf98      	it	ls
    8e5e:	4608      	movls	r0, r1
    8e60:	f200 60c2 	addw	r0, r0, #1730	; 0x6c2
    8e64:	b286      	uxth	r6, r0
    8e66:	f7fe fd81 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8e6a:	f04f 0801 	mov.w	r8, #1
    8e6e:	b1f8      	cbz	r0, 8eb0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    8e70:	61af      	str	r7, [r5, #24]
    8e72:	f005 fef8 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8e76:	4631      	mov	r1, r6
    8e78:	f7f8 fd50 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8e7c:	6228      	str	r0, [r5, #32]
    8e7e:	706c      	strb	r4, [r5, #1]
    8e80:	f885 8008 	strb.w	r8, [r5, #8]
    8e84:	f7fe fd68 	bl	7958 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    8e88:	b150      	cbz	r0, 8ea0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    8e8a:	f7fe fc19 	bl	76c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8e8e:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8e92:	1a38      	subs	r0, r7, r0
    8e94:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    8e98:	e007      	b.n	8eaa <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    8e9a:	200c      	movs	r0, #12
    8e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ea0:	f008 f8fe 	bl	110a0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8ea4:	1a38      	subs	r0, r7, r0
    8ea6:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
    8eaa:	62ec      	str	r4, [r5, #44]	; 0x2c
    8eac:	60e8      	str	r0, [r5, #12]
    8eae:	e01d      	b.n	8eec <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    8eb0:	f7fe fc06 	bl	76c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8eb4:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8eb8:	61a8      	str	r0, [r5, #24]
    8eba:	f885 8001 	strb.w	r8, [r5, #1]
    8ebe:	f005 fed2 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8ec2:	4680      	mov	r8, r0
    8ec4:	2101      	movs	r1, #1
    8ec6:	4668      	mov	r0, sp
    8ec8:	f7fb feee 	bl	4ca8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    8ecc:	f89d 0000 	ldrb.w	r0, [sp]
    8ed0:	f242 7110 	movw	r1, #10000	; 0x2710
    8ed4:	0200      	lsls	r0, r0, #8
    8ed6:	fbb0 f2f1 	udiv	r2, r0, r1
    8eda:	fb01 0012 	mls	r0, r1, r2, r0
    8ede:	1981      	adds	r1, r0, r6
    8ee0:	4640      	mov	r0, r8
    8ee2:	f7f8 fd1b 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8ee6:	6228      	str	r0, [r5, #32]
    8ee8:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    8eec:	7828      	ldrb	r0, [r5, #0]
    8eee:	f105 0114 	add.w	r1, r5, #20
    8ef2:	f7f8 fe67 	bl	1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8ef6:	b130      	cbz	r0, 8f06 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    8ef8:	84ac      	strh	r4, [r5, #36]	; 0x24
    8efa:	2000      	movs	r0, #0
    8efc:	f7fe fdda 	bl	7ab4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8f00:	2000      	movs	r0, #0
    8f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f06:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    8f0a:	2030      	movs	r0, #48	; 0x30
    8f0c:	f7fb f8be 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f10:	2000164c 	.word	0x2000164c
    8f14:	00009a25 	.word	0x00009a25

00008f18 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8f18:	b510      	push	{r4, lr}
    8f1a:	4c11      	ldr	r4, [pc, #68]	; (8f60 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    8f1c:	7c20      	ldrb	r0, [r4, #16]
    8f1e:	b158      	cbz	r0, 8f38 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    8f20:	2001      	movs	r0, #1
    8f22:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    8f26:	f7fe fdc5 	bl	7ab4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8f2a:	7c20      	ldrb	r0, [r4, #16]
    8f2c:	2803      	cmp	r0, #3
    8f2e:	d005      	beq.n	8f3c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    8f30:	7c60      	ldrb	r0, [r4, #17]
    8f32:	2800      	cmp	r0, #0
    8f34:	bf08      	it	eq
    8f36:	bd10      	popeq	{r4, pc}
    8f38:	200c      	movs	r0, #12
    8f3a:	bd10      	pop	{r4, pc}
    8f3c:	7820      	ldrb	r0, [r4, #0]
    8f3e:	f7f9 fa5d 	bl	23fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8f42:	7820      	ldrb	r0, [r4, #0]
    8f44:	f7f9 fb88 	bl	2658 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8f48:	7820      	ldrb	r0, [r4, #0]
    8f4a:	f7f9 fb63 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8f4e:	b110      	cbz	r0, 8f56 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    8f50:	2000      	movs	r0, #0
    8f52:	7420      	strb	r0, [r4, #16]
    8f54:	bd10      	pop	{r4, pc}
    8f56:	f240 11ef 	movw	r1, #495	; 0x1ef
    8f5a:	2030      	movs	r0, #48	; 0x30
    8f5c:	f7fb f896 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f60:	2000164c 	.word	0x2000164c

00008f64 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    8f64:	4801      	ldr	r0, [pc, #4]	; (8f6c <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    8f66:	6840      	ldr	r0, [r0, #4]
    8f68:	4770      	bx	lr
    8f6a:	0000      	.short	0x0000
    8f6c:	2000164c 	.word	0x2000164c

00008f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    8f70:	4802      	ldr	r0, [pc, #8]	; (8f7c <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    8f72:	7c00      	ldrb	r0, [r0, #16]
    8f74:	2800      	cmp	r0, #0
    8f76:	bf18      	it	ne
    8f78:	2001      	movne	r0, #1
    8f7a:	4770      	bx	lr
    8f7c:	2000164c 	.word	0x2000164c

00008f80 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8f80:	4906      	ldr	r1, [pc, #24]	; (8f9c <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    8f82:	7148      	strb	r0, [r1, #5]
    8f84:	2000      	movs	r0, #0
    8f86:	7088      	strb	r0, [r1, #2]
    8f88:	2201      	movs	r2, #1
    8f8a:	700a      	strb	r2, [r1, #0]
    8f8c:	7048      	strb	r0, [r1, #1]
    8f8e:	710a      	strb	r2, [r1, #4]
    8f90:	70c8      	strb	r0, [r1, #3]
    8f92:	4903      	ldr	r1, [pc, #12]	; (8fa0 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    8f94:	7408      	strb	r0, [r1, #16]
    8f96:	f000 b805 	b.w	8fa4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8f9a:	0000      	.short	0x0000
    8f9c:	20000120 	.word	0x20000120
    8fa0:	2000164c 	.word	0x2000164c

00008fa4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    8fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fa8:	4c3d      	ldr	r4, [pc, #244]	; (90a0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    8faa:	b084      	sub	sp, #16
    8fac:	7c20      	ldrb	r0, [r4, #16]
    8fae:	2601      	movs	r6, #1
    8fb0:	2500      	movs	r5, #0
    8fb2:	b148      	cbz	r0, 8fc8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8fb4:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    8fb8:	2001      	movs	r0, #1
    8fba:	f7fe fd7b 	bl	7ab4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8fbe:	7c20      	ldrb	r0, [r4, #16]
    8fc0:	2803      	cmp	r0, #3
    8fc2:	bf18      	it	ne
    8fc4:	7c60      	ldrbne	r0, [r4, #17]
    8fc6:	d00b      	beq.n	8fe0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    8fc8:	4f36      	ldr	r7, [pc, #216]	; (90a4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    8fca:	70fe      	strb	r6, [r7, #3]
    8fcc:	4669      	mov	r1, sp
    8fce:	2001      	movs	r0, #1
    8fd0:	f007 f89d 	bl	1010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8fd4:	2800      	cmp	r0, #0
    8fd6:	bf08      	it	eq
    8fd8:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8fdc:	d040      	beq.n	9060 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8fde:	e03a      	b.n	9056 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    8fe0:	7820      	ldrb	r0, [r4, #0]
    8fe2:	f7f9 fa0b 	bl	23fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8fe6:	7820      	ldrb	r0, [r4, #0]
    8fe8:	f7f9 fb36 	bl	2658 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8fec:	7820      	ldrb	r0, [r4, #0]
    8fee:	f7f9 fb11 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8ff2:	2800      	cmp	r0, #0
    8ff4:	bf18      	it	ne
    8ff6:	7425      	strbne	r5, [r4, #16]
    8ff8:	d1e6      	bne.n	8fc8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8ffa:	f240 11ef 	movw	r1, #495	; 0x1ef
    8ffe:	2030      	movs	r0, #48	; 0x30
    9000:	f7fb f844 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9004:	9802      	ldr	r0, [sp, #8]
    9006:	2800      	cmp	r0, #0
    9008:	bf1c      	itt	ne
    900a:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    900e:	2900      	cmpne	r1, #0
    9010:	d026      	beq.n	9060 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    9012:	8800      	ldrh	r0, [r0, #0]
    9014:	42b0      	cmp	r0, r6
    9016:	bf18      	it	ne
    9018:	f04f 0820 	movne.w	r8, #32
    901c:	d03b      	beq.n	9096 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    901e:	2101      	movs	r1, #1
    9020:	f007 f86b 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9024:	0004      	movs	r4, r0
    9026:	d021      	beq.n	906c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    9028:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    902c:	f7f9 fb14 	bl	2658 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9030:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    9034:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9038:	f64f 71ff 	movw	r1, #65535	; 0xffff
    903c:	f7fd fcca 	bl	69d4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9040:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9044:	f7f9 fae6 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9048:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    904c:	4669      	mov	r1, sp
    904e:	2001      	movs	r0, #1
    9050:	f007 f85d 	bl	1010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    9054:	b1d0      	cbz	r0, 908c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    9056:	f240 111d 	movw	r1, #285	; 0x11d
    905a:	2030      	movs	r0, #48	; 0x30
    905c:	f7fb f816 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9060:	4668      	mov	r0, sp
    9062:	f7fb fa19 	bl	4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9066:	2800      	cmp	r0, #0
    9068:	d0cc      	beq.n	9004 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    906a:	e014      	b.n	9096 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    906c:	f240 113d 	movw	r1, #317	; 0x13d
    9070:	2030      	movs	r0, #48	; 0x30
    9072:	f7fb f80b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9076:	9802      	ldr	r0, [sp, #8]
    9078:	2800      	cmp	r0, #0
    907a:	bf1c      	itt	ne
    907c:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    9080:	2900      	cmpne	r1, #0
    9082:	d003      	beq.n	908c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    9084:	8800      	ldrh	r0, [r0, #0]
    9086:	42b0      	cmp	r0, r6
    9088:	d1c9      	bne.n	901e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    908a:	e004      	b.n	9096 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    908c:	4668      	mov	r0, sp
    908e:	f7fb fa03 	bl	4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9092:	2800      	cmp	r0, #0
    9094:	d0ef      	beq.n	9076 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    9096:	70fd      	strb	r5, [r7, #3]
    9098:	b004      	add	sp, #16
    909a:	2000      	movs	r0, #0
    909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90a0:	2000164c 	.word	0x2000164c
    90a4:	20000120 	.word	0x20000120

000090a8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    90a8:	4806      	ldr	r0, [pc, #24]	; (90c4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    90aa:	7c00      	ldrb	r0, [r0, #16]
    90ac:	2800      	cmp	r0, #0
    90ae:	bf1c      	itt	ne
    90b0:	2000      	movne	r0, #0
    90b2:	4770      	bxne	lr
    90b4:	b510      	push	{r4, lr}
    90b6:	2001      	movs	r0, #1
    90b8:	f007 f80d 	bl	100d6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    90bc:	f080 0001 	eor.w	r0, r0, #1
    90c0:	bd10      	pop	{r4, pc}
    90c2:	0000      	.short	0x0000
    90c4:	2000164c 	.word	0x2000164c

000090c8 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    90c8:	4904      	ldr	r1, [pc, #16]	; (90dc <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    90ca:	788a      	ldrb	r2, [r1, #2]
    90cc:	2a02      	cmp	r2, #2
    90ce:	bf07      	ittee	eq
    90d0:	6949      	ldreq	r1, [r1, #20]
    90d2:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    90d6:	4902      	ldrne	r1, [pc, #8]	; (90e0 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    90d8:	6288      	strne	r0, [r1, #40]	; 0x28
    90da:	4770      	bx	lr
    90dc:	20000120 	.word	0x20000120
    90e0:	2000164c 	.word	0x2000164c

000090e4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    90e4:	4901      	ldr	r1, [pc, #4]	; (90ec <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    90e6:	7008      	strb	r0, [r1, #0]
    90e8:	4770      	bx	lr
    90ea:	0000      	.short	0x0000
    90ec:	20000120 	.word	0x20000120

000090f0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    90f0:	4901      	ldr	r1, [pc, #4]	; (90f8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    90f2:	7048      	strb	r0, [r1, #1]
    90f4:	4770      	bx	lr
    90f6:	0000      	.short	0x0000
    90f8:	20000120 	.word	0x20000120

000090fc <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    90fc:	4905      	ldr	r1, [pc, #20]	; (9114 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    90fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9102:	fbb1 f1f2 	udiv	r1, r1, r2
    9106:	b510      	push	{r4, lr}
    9108:	f201 210d 	addw	r1, r1, #525	; 0x20d
    910c:	f007 fef5 	bl	10efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    9110:	b280      	uxth	r0, r0
    9112:	bd10      	pop	{r4, pc}
    9114:	0001527d 	.word	0x0001527d

00009118 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    9118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    911c:	4c13      	ldr	r4, [pc, #76]	; (916c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    911e:	4606      	mov	r6, r0
    9120:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    9124:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    9128:	7860      	ldrb	r0, [r4, #1]
    912a:	b120      	cbz	r0, 9136 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    912c:	463a      	mov	r2, r7
    912e:	4628      	mov	r0, r5
    9130:	f007 f924 	bl	1037c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    9134:	4605      	mov	r5, r0
    9136:	68a0      	ldr	r0, [r4, #8]
    9138:	4285      	cmp	r5, r0
    913a:	d005      	beq.n	9148 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    913c:	6921      	ldr	r1, [r4, #16]
    913e:	1a28      	subs	r0, r5, r0
    9140:	4408      	add	r0, r1
    9142:	6120      	str	r0, [r4, #16]
    9144:	f7f9 fc4a 	bl	29dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9148:	60a5      	str	r5, [r4, #8]
    914a:	42af      	cmp	r7, r5
    914c:	d80a      	bhi.n	9164 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    914e:	6870      	ldr	r0, [r6, #4]
    9150:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9154:	4281      	cmp	r1, r0
    9156:	bf9c      	itt	ls
    9158:	78e0      	ldrbls	r0, [r4, #3]
    915a:	2800      	cmpls	r0, #0
    915c:	bf04      	itt	eq
    915e:	2001      	moveq	r0, #1
    9160:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    9164:	f04f 0000 	mov.w	r0, #0
    9168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    916c:	20000120 	.word	0x20000120

00009170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    9170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9174:	4a67      	ldr	r2, [pc, #412]	; (9314 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a4>)
    9176:	2304      	movs	r3, #4
    9178:	2600      	movs	r6, #0
    917a:	4d67      	ldr	r5, [pc, #412]	; (9318 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a8>)
    917c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    917e:	2908      	cmp	r1, #8
    9180:	d27e      	bcs.n	9280 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x110>
    9182:	e8df f001 	tbb	[pc, r1]
    9186:	2c08      	.short	0x2c08
    9188:	b1311b04 	.word	0xb1311b04
    918c:	bbb7      	.short	0xbbb7
    918e:	4604      	mov	r4, r0
    9190:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    9194:	e006      	b.n	91a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    9196:	4604      	mov	r4, r0
    9198:	78e8      	ldrb	r0, [r5, #3]
    919a:	2800      	cmp	r0, #0
    919c:	bf18      	it	ne
    919e:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    91a2:	d00d      	beq.n	91c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x50>
    91a4:	f004 fde2 	bl	dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    91a8:	f7f9 fb80 	bl	28ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    91ac:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    91b0:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    91b4:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    91b8:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    91bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91c0:	9600      	str	r6, [sp, #0]
    91c2:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    91c6:	2301      	movs	r3, #1
    91c8:	2200      	movs	r2, #0
    91ca:	4620      	mov	r0, r4
    91cc:	f000 f8f8 	bl	93c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    91d0:	2800      	cmp	r0, #0
    91d2:	d0e7      	beq.n	91a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    91d4:	f240 619e 	movw	r1, #1694	; 0x69e
    91d8:	2030      	movs	r0, #48	; 0x30
    91da:	f7fa ff57 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91de:	2103      	movs	r1, #3
    91e0:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    91e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91e8:	f004 fdb4 	bl	dd54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    91ec:	696c      	ldr	r4, [r5, #20]
    91ee:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    91f2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    91f6:	f009 f88a 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    91fa:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    91fe:	1a08      	subs	r0, r1, r0
    9200:	68a9      	ldr	r1, [r5, #8]
    9202:	4401      	add	r1, r0
    9204:	60a9      	str	r1, [r5, #8]
    9206:	68e9      	ldr	r1, [r5, #12]
    9208:	4408      	add	r0, r1
    920a:	60e8      	str	r0, [r5, #12]
    920c:	696c      	ldr	r4, [r5, #20]
    920e:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    9212:	2800      	cmp	r0, #0
    9214:	bf08      	it	eq
    9216:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    921a:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    921e:	2803      	cmp	r0, #3
    9220:	bf18      	it	ne
    9222:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9226:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    922a:	7829      	ldrb	r1, [r5, #0]
    922c:	290c      	cmp	r1, #12
    922e:	d206      	bcs.n	923e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xce>
    9230:	483a      	ldr	r0, [pc, #232]	; (931c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1ac>)
    9232:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    9236:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    923a:	290c      	cmp	r1, #12
    923c:	d304      	bcc.n	9248 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd8>
    923e:	f44f 7147 	mov.w	r1, #796	; 0x31c
    9242:	2006      	movs	r0, #6
    9244:	f7fa ff22 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9248:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    924c:	1898      	adds	r0, r3, r2
    924e:	b285      	uxth	r5, r0
    9250:	f502 60c8 	add.w	r0, r2, #1600	; 0x640
    9254:	fa1f f980 	uxth.w	r9, r0
    9258:	4640      	mov	r0, r8
    925a:	f009 f858 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    925e:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9262:	1a0f      	subs	r7, r1, r0
    9264:	4640      	mov	r0, r8
    9266:	f009 f860 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    926a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    926e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9272:	fbb0 f0fa 	udiv	r0, r0, sl
    9276:	1a3f      	subs	r7, r7, r0
    9278:	4640      	mov	r0, r8
    927a:	f009 f848 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    927e:	e000      	b.n	9282 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x112>
    9280:	e043      	b.n	930a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19a>
    9282:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    9286:	eba1 0b00 	sub.w	fp, r1, r0
    928a:	4640      	mov	r0, r8
    928c:	f009 f84d 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9290:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9294:	4408      	add	r0, r1
    9296:	fbb0 f0fa 	udiv	r0, r0, sl
    929a:	ebab 0000 	sub.w	r0, fp, r0
    929e:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    92a2:	4369      	muls	r1, r5
    92a4:	fbb1 f1f9 	udiv	r1, r1, r9
    92a8:	2229      	movs	r2, #41	; 0x29
    92aa:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    92ae:	3160      	adds	r1, #96	; 0x60
    92b0:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    92b4:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    92b8:	4297      	cmp	r7, r2
    92ba:	d301      	bcc.n	92c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    92bc:	4287      	cmp	r7, r0
    92be:	d901      	bls.n	92c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>
    92c0:	f7fa fb4a 	bl	3958 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    92c4:	4629      	mov	r1, r5
    92c6:	6860      	ldr	r0, [r4, #4]
    92c8:	f005 fd01 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    92cc:	6861      	ldr	r1, [r4, #4]
    92ce:	f641 524c 	movw	r2, #7500	; 0x1d4c
    92d2:	4291      	cmp	r1, r2
    92d4:	bf34      	ite	cc
    92d6:	2102      	movcc	r1, #2
    92d8:	2100      	movcs	r1, #0
    92da:	4408      	add	r0, r1
    92dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    92e0:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    92e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92ec:	2100      	movs	r1, #0
    92ee:	4610      	mov	r0, r2
    92f0:	f000 b816 	b.w	9320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    92f4:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    92f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92fc:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    9300:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9304:	2101      	movs	r1, #1
    9306:	f000 b80b 	b.w	9320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    930a:	f240 7141 	movw	r1, #1857	; 0x741
    930e:	2030      	movs	r0, #48	; 0x30
    9310:	f7fa febc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9314:	2000164c 	.word	0x2000164c
    9318:	20000120 	.word	0x20000120
    931c:	000111be 	.word	0x000111be
    9320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9324:	4c24      	ldr	r4, [pc, #144]	; (93b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x248>)
    9326:	2500      	movs	r5, #0
    9328:	4680      	mov	r8, r0
    932a:	7225      	strb	r5, [r4, #8]
    932c:	6a26      	ldr	r6, [r4, #32]
    932e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    9332:	7425      	strb	r5, [r4, #16]
    9334:	2701      	movs	r7, #1
    9336:	7467      	strb	r7, [r4, #17]
    9338:	4639      	mov	r1, r7
    933a:	6860      	ldr	r0, [r4, #4]
    933c:	f7fd fa46 	bl	67cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9340:	6861      	ldr	r1, [r4, #4]
    9342:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    9346:	7820      	ldrb	r0, [r4, #0]
    9348:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    934c:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    9350:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    9354:	8809      	ldrh	r1, [r1, #0]
    9356:	f7fd fb3d 	bl	69d4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    935a:	6864      	ldr	r4, [r4, #4]
    935c:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    9360:	2300      	movs	r3, #0
    9362:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    9366:	461a      	mov	r2, r3
    9368:	4619      	mov	r1, r3
    936a:	4620      	mov	r0, r4
    936c:	9500      	str	r5, [sp, #0]
    936e:	f000 f827 	bl	93c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9372:	b120      	cbz	r0, 937e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20e>
    9374:	f240 210e 	movw	r1, #526	; 0x20e
    9378:	2030      	movs	r0, #48	; 0x30
    937a:	f7fa fe87 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    937e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    9382:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    9386:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    938a:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    938e:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    9392:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    9396:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    939a:	1e40      	subs	r0, r0, #1
    939c:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    93a0:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    93a4:	f004 fce2 	bl	dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    93a8:	f7f9 fa80 	bl	28ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    93ac:	4803      	ldr	r0, [pc, #12]	; (93bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    93ae:	7940      	ldrb	r0, [r0, #5]
    93b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    93b4:	f7fa bc5e 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    93b8:	2000164c 	.word	0x2000164c
    93bc:	20000120 	.word	0x20000120
    93c0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93c4:	b085      	sub	sp, #20
    93c6:	4604      	mov	r4, r0
    93c8:	2000      	movs	r0, #0
    93ca:	9000      	str	r0, [sp, #0]
    93cc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    93d0:	469b      	mov	fp, r3
    93d2:	e9cd 3002 	strd	r3, r0, [sp, #8]
    93d6:	48ff      	ldr	r0, [pc, #1020]	; (97d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    93d8:	4689      	mov	r9, r1
    93da:	7800      	ldrb	r0, [r0, #0]
    93dc:	280c      	cmp	r0, #12
    93de:	d279      	bcs.n	94d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    93e0:	49fd      	ldr	r1, [pc, #1012]	; (97d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    93e2:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    93e6:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    93ea:	280c      	cmp	r0, #12
    93ec:	d272      	bcs.n	94d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    93ee:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    93f2:	4410      	add	r0, r2
    93f4:	b285      	uxth	r5, r0
    93f6:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    93fa:	280d      	cmp	r0, #13
    93fc:	bf0c      	ite	eq
    93fe:	2001      	moveq	r0, #1
    9400:	2000      	movne	r0, #0
    9402:	9004      	str	r0, [sp, #16]
    9404:	9807      	ldr	r0, [sp, #28]
    9406:	2800      	cmp	r0, #0
    9408:	bf04      	itt	eq
    940a:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    940e:	2803      	cmpeq	r0, #3
    9410:	d128      	bne.n	9464 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    9412:	9804      	ldr	r0, [sp, #16]
    9414:	b330      	cbz	r0, 9464 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    9416:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    941a:	4548      	cmp	r0, r9
    941c:	d122      	bne.n	9464 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    941e:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    9422:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    9426:	6860      	ldr	r0, [r4, #4]
    9428:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    942c:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    9430:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    9434:	4408      	add	r0, r1
    9436:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    943a:	4620      	mov	r0, r4
    943c:	f000 fd16 	bl	9e6c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    9440:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    9444:	61e0      	str	r0, [r4, #28]
    9446:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    944a:	8360      	strh	r0, [r4, #26]
    944c:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    9450:	6060      	str	r0, [r4, #4]
    9452:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9456:	8120      	strh	r0, [r4, #8]
    9458:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    945c:	8160      	strh	r0, [r4, #10]
    945e:	2002      	movs	r0, #2
    9460:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9464:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    9468:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    946c:	eba9 0000 	sub.w	r0, r9, r0
    9470:	fa0f f880 	sxth.w	r8, r0
    9474:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    9478:	eba9 0000 	sub.w	r0, r9, r0
    947c:	b207      	sxth	r7, r0
    947e:	2f00      	cmp	r7, #0
    9480:	da09      	bge.n	9496 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x326>
    9482:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    9486:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    948a:	2001      	movs	r0, #1
    948c:	9002      	str	r0, [sp, #8]
    948e:	2000      	movs	r0, #0
    9490:	4647      	mov	r7, r8
    9492:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    9496:	48cf      	ldr	r0, [pc, #828]	; (97d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9498:	f04f 0a00 	mov.w	sl, #0
    949c:	7900      	ldrb	r0, [r0, #4]
    949e:	2800      	cmp	r0, #0
    94a0:	d07e      	beq.n	95a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    94a2:	f7fa fa77 	bl	3994 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    94a6:	2800      	cmp	r0, #0
    94a8:	d07a      	beq.n	95a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    94aa:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    94ae:	2802      	cmp	r0, #2
    94b0:	d37f      	bcc.n	95b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    94b2:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    94b6:	2802      	cmp	r0, #2
    94b8:	d07b      	beq.n	95b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    94ba:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    94be:	2800      	cmp	r0, #0
    94c0:	d177      	bne.n	95b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    94c2:	6860      	ldr	r0, [r4, #4]
    94c4:	f641 514c 	movw	r1, #7500	; 0x1d4c
    94c8:	4288      	cmp	r0, r1
    94ca:	d372      	bcc.n	95b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    94cc:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    94d0:	290c      	cmp	r1, #12
    94d2:	d304      	bcc.n	94de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36e>
    94d4:	f44f 7147 	mov.w	r1, #796	; 0x31c
    94d8:	2006      	movs	r0, #6
    94da:	f7fa fdd7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94de:	4abe      	ldr	r2, [pc, #760]	; (97d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    94e0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    94e4:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    94e8:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    94ec:	b289      	uxth	r1, r1
    94ee:	460d      	mov	r5, r1
    94f0:	2a01      	cmp	r2, #1
    94f2:	d017      	beq.n	9524 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    94f4:	f005 fbeb 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    94f8:	4601      	mov	r1, r0
    94fa:	6862      	ldr	r2, [r4, #4]
    94fc:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9500:	4282      	cmp	r2, r0
    9502:	bf2c      	ite	cs
    9504:	2000      	movcs	r0, #0
    9506:	2002      	movcc	r0, #2
    9508:	4408      	add	r0, r1
    950a:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    950e:	b280      	uxth	r0, r0
    9510:	4442      	add	r2, r8
    9512:	1bd1      	subs	r1, r2, r7
    9514:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9518:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    951c:	1a82      	subs	r2, r0, r2
    951e:	fb01 aa02 	mla	sl, r1, r2, sl
    9522:	e043      	b.n	95ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x43c>
    9524:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    9528:	2803      	cmp	r0, #3
    952a:	d056      	beq.n	95da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x46a>
    952c:	48ab      	ldr	r0, [pc, #684]	; (97dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    952e:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    9532:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    9536:	f006 fffa 	bl	1052e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    953a:	69e1      	ldr	r1, [r4, #28]
    953c:	4408      	add	r0, r1
    953e:	9001      	str	r0, [sp, #4]
    9540:	4629      	mov	r1, r5
    9542:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9546:	f005 fbc2 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    954a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    954e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9552:	1a82      	subs	r2, r0, r2
    9554:	fb01 aa02 	mla	sl, r1, r2, sl
    9558:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    955c:	4629      	mov	r1, r5
    955e:	9801      	ldr	r0, [sp, #4]
    9560:	f005 fbb5 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9564:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9568:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    956c:	1a41      	subs	r1, r0, r1
    956e:	448a      	add	sl, r1
    9570:	4629      	mov	r1, r5
    9572:	6860      	ldr	r0, [r4, #4]
    9574:	f005 fbab 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9578:	4601      	mov	r1, r0
    957a:	6862      	ldr	r2, [r4, #4]
    957c:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9580:	4282      	cmp	r2, r0
    9582:	bf34      	ite	cc
    9584:	2002      	movcc	r0, #2
    9586:	2000      	movcs	r0, #0
    9588:	4408      	add	r0, r1
    958a:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    958e:	4442      	add	r2, r8
    9590:	1bd1      	subs	r1, r2, r7
    9592:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    9596:	1a89      	subs	r1, r1, r2
    9598:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    959c:	1a82      	subs	r2, r0, r2
    959e:	e000      	b.n	95a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x432>
    95a0:	e007      	b.n	95b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    95a2:	1e49      	subs	r1, r1, #1
    95a4:	fb01 aa02 	mla	sl, r1, r2, sl
    95a8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    95ac:	2001      	movs	r0, #1
    95ae:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    95b2:	f8cd a004 	str.w	sl, [sp, #4]
    95b6:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    95ba:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    95be:	b190      	cbz	r0, 95e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x476>
    95c0:	2801      	cmp	r0, #1
    95c2:	f000 80ed 	beq.w	97a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    95c6:	2802      	cmp	r0, #2
    95c8:	d079      	beq.n	96be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x54e>
    95ca:	2803      	cmp	r0, #3
    95cc:	f000 811b 	beq.w	9806 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x696>
    95d0:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    95d4:	2030      	movs	r0, #48	; 0x30
    95d6:	f7fa fd59 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95da:	69e1      	ldr	r1, [r4, #28]
    95dc:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    95e0:	4408      	add	r0, r1
    95e2:	9001      	str	r0, [sp, #4]
    95e4:	e7ac      	b.n	9540 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d0>
    95e6:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    95ea:	2800      	cmp	r0, #0
    95ec:	d062      	beq.n	96b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x544>
    95ee:	487b      	ldr	r0, [pc, #492]	; (97dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    95f0:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    95f4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    95f8:	f006 ff99 	bl	1052e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    95fc:	4607      	mov	r7, r0
    95fe:	69e0      	ldr	r0, [r4, #28]
    9600:	4629      	mov	r1, r5
    9602:	4438      	add	r0, r7
    9604:	f005 fb63 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9608:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    960c:	4629      	mov	r1, r5
    960e:	6860      	ldr	r0, [r4, #4]
    9610:	f005 fb5d 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9614:	6862      	ldr	r2, [r4, #4]
    9616:	f641 514c 	movw	r1, #7500	; 0x1d4c
    961a:	428a      	cmp	r2, r1
    961c:	bf2c      	ite	cs
    961e:	2100      	movcs	r1, #0
    9620:	2102      	movcc	r1, #2
    9622:	4408      	add	r0, r1
    9624:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9628:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    962c:	f008 fe7d 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9630:	f64d 7141 	movw	r1, #57153	; 0xdf41
    9634:	4408      	add	r0, r1
    9636:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    963a:	fbb0 f0f5 	udiv	r0, r0, r5
    963e:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    9642:	f44f 71a8 	mov.w	r1, #336	; 0x150
    9646:	4620      	mov	r0, r4
    9648:	f007 fbf3 	bl	10e32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    964c:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9650:	9000      	str	r0, [sp, #0]
    9652:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9656:	f008 fe68 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    965a:	4450      	add	r0, sl
    965c:	fbb0 f0f5 	udiv	r0, r0, r5
    9660:	69e1      	ldr	r1, [r4, #28]
    9662:	9a00      	ldr	r2, [sp, #0]
    9664:	4439      	add	r1, r7
    9666:	1a09      	subs	r1, r1, r0
    9668:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    966c:	1a09      	subs	r1, r1, r0
    966e:	4411      	add	r1, r2
    9670:	3920      	subs	r1, #32
    9672:	9100      	str	r1, [sp, #0]
    9674:	0040      	lsls	r0, r0, #1
    9676:	8b61      	ldrh	r1, [r4, #26]
    9678:	3060      	adds	r0, #96	; 0x60
    967a:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    967e:	1847      	adds	r7, r0, r1
    9680:	4640      	mov	r0, r8
    9682:	f008 fe52 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9686:	4450      	add	r0, sl
    9688:	fbb0 f5f5 	udiv	r5, r0, r5
    968c:	4640      	mov	r0, r8
    968e:	f008 fe3e 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9692:	4950      	ldr	r1, [pc, #320]	; (97d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9694:	4428      	add	r0, r5
    9696:	4438      	add	r0, r7
    9698:	6188      	str	r0, [r1, #24]
    969a:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    969e:	9900      	ldr	r1, [sp, #0]
    96a0:	1a08      	subs	r0, r1, r0
    96a2:	f5b0 7ff5 	cmp.w	r0, #490	; 0x1ea
    96a6:	f200 8122 	bhi.w	98ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    96aa:	f240 41c2 	movw	r1, #1218	; 0x4c2
    96ae:	2030      	movs	r0, #48	; 0x30
    96b0:	f7fa fcec 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96b4:	f240 41a2 	movw	r1, #1186	; 0x4a2
    96b8:	2030      	movs	r0, #48	; 0x30
    96ba:	f7fa fce7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96be:	69e1      	ldr	r1, [r4, #28]
    96c0:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    96c4:	4408      	add	r0, r1
    96c6:	4629      	mov	r1, r5
    96c8:	f005 fb01 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    96cc:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    96d0:	4629      	mov	r1, r5
    96d2:	6860      	ldr	r0, [r4, #4]
    96d4:	f005 fafb 	bl	ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    96d8:	6862      	ldr	r2, [r4, #4]
    96da:	f641 514c 	movw	r1, #7500	; 0x1d4c
    96de:	428a      	cmp	r2, r1
    96e0:	bf34      	ite	cc
    96e2:	2102      	movcc	r1, #2
    96e4:	2100      	movcs	r1, #0
    96e6:	4408      	add	r0, r1
    96e8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    96ec:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    96f0:	f008 fe1b 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    96f4:	f64d 7141 	movw	r1, #57153	; 0xdf41
    96f8:	4408      	add	r0, r1
    96fa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    96fe:	fbb0 f0f7 	udiv	r0, r0, r7
    9702:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    9706:	f44f 71a8 	mov.w	r1, #336	; 0x150
    970a:	4620      	mov	r0, r4
    970c:	f007 fb91 	bl	10e32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    9710:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9714:	b9e0      	cbnz	r0, 9750 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    9716:	f1bb 0f00 	cmp.w	fp, #0
    971a:	d019      	beq.n	9750 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    971c:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    9720:	4628      	mov	r0, r5
    9722:	f008 fe02 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9726:	4450      	add	r0, sl
    9728:	fbb0 f0f7 	udiv	r0, r0, r7
    972c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9730:	69e2      	ldr	r2, [r4, #28]
    9732:	4408      	add	r0, r1
    9734:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    9738:	4411      	add	r1, r2
    973a:	eba1 0800 	sub.w	r8, r1, r0
    973e:	4628      	mov	r0, r5
    9740:	f008 fde5 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9744:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9748:	1a08      	subs	r0, r1, r0
    974a:	4440      	add	r0, r8
    974c:	3820      	subs	r0, #32
    974e:	e006      	b.n	975e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ee>
    9750:	69e1      	ldr	r1, [r4, #28]
    9752:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9756:	4408      	add	r0, r1
    9758:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    975c:	1a40      	subs	r0, r0, r1
    975e:	9000      	str	r0, [sp, #0]
    9760:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    9764:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    9768:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    976c:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9770:	fb01 0002 	mla	r0, r1, r2, r0
    9774:	0040      	lsls	r0, r0, #1
    9776:	8b61      	ldrh	r1, [r4, #26]
    9778:	3060      	adds	r0, #96	; 0x60
    977a:	1845      	adds	r5, r0, r1
    977c:	4640      	mov	r0, r8
    977e:	f008 fdd4 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9782:	4450      	add	r0, sl
    9784:	fbb0 f7f7 	udiv	r7, r0, r7
    9788:	4640      	mov	r0, r8
    978a:	f008 fdc0 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    978e:	4911      	ldr	r1, [pc, #68]	; (97d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9790:	4438      	add	r0, r7
    9792:	4428      	add	r0, r5
    9794:	6188      	str	r0, [r1, #24]
    9796:	2001      	movs	r0, #1
    9798:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    979c:	e0a7      	b.n	98ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    979e:	bf00      	nop
    97a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    97a4:	6860      	ldr	r0, [r4, #4]
    97a6:	1a80      	subs	r0, r0, r2
    97a8:	4378      	muls	r0, r7
    97aa:	9000      	str	r0, [sp, #0]
    97ac:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    97b0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    97b4:	4440      	add	r0, r8
    97b6:	1a40      	subs	r0, r0, r1
    97b8:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    97bc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    97c0:	1e40      	subs	r0, r0, #1
    97c2:	fb0c 3101 	mla	r1, ip, r1, r3
    97c6:	fb00 1002 	mla	r0, r0, r2, r1
    97ca:	0040      	lsls	r0, r0, #1
    97cc:	8b61      	ldrh	r1, [r4, #26]
    97ce:	3060      	adds	r0, #96	; 0x60
    97d0:	1845      	adds	r5, r0, r1
    97d2:	e005      	b.n	97e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x670>
    97d4:	20000120 	.word	0x20000120
    97d8:	000111be 	.word	0x000111be
    97dc:	2000164c 	.word	0x2000164c
    97e0:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    97e4:	4638      	mov	r0, r7
    97e6:	f008 fda0 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    97ea:	eb00 010a 	add.w	r1, r0, sl
    97ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    97f2:	fbb1 f8f0 	udiv	r8, r1, r0
    97f6:	4638      	mov	r0, r7
    97f8:	f008 fd89 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    97fc:	4987      	ldr	r1, [pc, #540]	; (9a1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    97fe:	4440      	add	r0, r8
    9800:	4428      	add	r0, r5
    9802:	6188      	str	r0, [r1, #24]
    9804:	e073      	b.n	98ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9806:	6860      	ldr	r0, [r4, #4]
    9808:	4378      	muls	r0, r7
    980a:	9000      	str	r0, [sp, #0]
    980c:	f1bb 0f00 	cmp.w	fp, #0
    9810:	d007      	beq.n	9822 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6b2>
    9812:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    9816:	2900      	cmp	r1, #0
    9818:	bf04      	itt	eq
    981a:	2100      	moveq	r1, #0
    981c:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    9820:	d003      	beq.n	982a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    9822:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    9826:	2900      	cmp	r1, #0
    9828:	d161      	bne.n	98ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    982a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    982e:	fb07 0011 	mls	r0, r7, r1, r0
    9832:	9000      	str	r0, [sp, #0]
    9834:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    9838:	2824      	cmp	r0, #36	; 0x24
    983a:	bf1c      	itt	ne
    983c:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    9840:	2824      	cmpne	r0, #36	; 0x24
    9842:	d10b      	bne.n	985c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    9844:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    9848:	eba9 0000 	sub.w	r0, r9, r0
    984c:	b200      	sxth	r0, r0
    984e:	2800      	cmp	r0, #0
    9850:	db04      	blt.n	985c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    9852:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    9856:	2800      	cmp	r0, #0
    9858:	bf18      	it	ne
    985a:	9003      	strne	r0, [sp, #12]
    985c:	9802      	ldr	r0, [sp, #8]
    985e:	b300      	cbz	r0, 98a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    9860:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9864:	b9e8      	cbnz	r0, 98a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    9866:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    986a:	2800      	cmp	r0, #0
    986c:	bf1c      	itt	ne
    986e:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    9872:	2800      	cmpne	r0, #0
    9874:	d07c      	beq.n	9970 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x800>
    9876:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    987a:	f008 fd56 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    987e:	eb00 010a 	add.w	r1, r0, sl
    9882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9886:	fbb1 f0f0 	udiv	r0, r1, r0
    988a:	9900      	ldr	r1, [sp, #0]
    988c:	1a0d      	subs	r5, r1, r0
    988e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9892:	f008 fd3c 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9896:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    989a:	1a08      	subs	r0, r1, r0
    989c:	4428      	add	r0, r5
    989e:	3820      	subs	r0, #32
    98a0:	9000      	str	r0, [sp, #0]
    98a2:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    98a6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    98aa:	4440      	add	r0, r8
    98ac:	4348      	muls	r0, r1
    98ae:	0040      	lsls	r0, r0, #1
    98b0:	9f03      	ldr	r7, [sp, #12]
    98b2:	f100 0560 	add.w	r5, r0, #96	; 0x60
    98b6:	4638      	mov	r0, r7
    98b8:	f008 fd37 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    98bc:	eb00 010a 	add.w	r1, r0, sl
    98c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    98c4:	fbb1 f8f0 	udiv	r8, r1, r0
    98c8:	4638      	mov	r0, r7
    98ca:	f008 fd20 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    98ce:	4953      	ldr	r1, [pc, #332]	; (9a1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    98d0:	4440      	add	r0, r8
    98d2:	4428      	add	r0, r5
    98d4:	6188      	str	r0, [r1, #24]
    98d6:	6860      	ldr	r0, [r4, #4]
    98d8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    98dc:	4288      	cmp	r0, r1
    98de:	d206      	bcs.n	98ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    98e0:	466b      	mov	r3, sp
    98e2:	4a4f      	ldr	r2, [pc, #316]	; (9a20 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8b0>)
    98e4:	4629      	mov	r1, r5
    98e6:	f006 ff60 	bl	107aa <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    98ea:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    98ee:	e9dd 1000 	ldrd	r1, r0, [sp]
    98f2:	1a08      	subs	r0, r1, r0
    98f4:	9000      	str	r0, [sp, #0]
    98f6:	4a49      	ldr	r2, [pc, #292]	; (9a1c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    98f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    98fc:	6860      	ldr	r0, [r4, #4]
    98fe:	6991      	ldr	r1, [r2, #24]
    9900:	1ac0      	subs	r0, r0, r3
    9902:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    9906:	61d0      	str	r0, [r2, #28]
    9908:	4281      	cmp	r1, r0
    990a:	bf98      	it	ls
    990c:	4608      	movls	r0, r1
    990e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    9912:	2000      	movs	r0, #0
    9914:	7030      	strb	r0, [r6, #0]
    9916:	2064      	movs	r0, #100	; 0x64
    9918:	8130      	strh	r0, [r6, #8]
    991a:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    991e:	9900      	ldr	r1, [sp, #0]
    9920:	f7f7 fffc 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9924:	60f0      	str	r0, [r6, #12]
    9926:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    992a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    992c:	4408      	add	r0, r1
    992e:	6070      	str	r0, [r6, #4]
    9930:	68f0      	ldr	r0, [r6, #12]
    9932:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    9936:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    993a:	f000 facb 	bl	9ed4 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    993e:	b110      	cbz	r0, 9946 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7d6>
    9940:	6870      	ldr	r0, [r6, #4]
    9942:	301e      	adds	r0, #30
    9944:	6070      	str	r0, [r6, #4]
    9946:	2001      	movs	r0, #1
    9948:	72b0      	strb	r0, [r6, #10]
    994a:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    994e:	eba1 0109 	sub.w	r1, r1, r9
    9952:	b209      	sxth	r1, r1
    9954:	2900      	cmp	r1, #0
    9956:	bfc4      	itt	gt
    9958:	2103      	movgt	r1, #3
    995a:	72b1      	strbgt	r1, [r6, #10]
    995c:	9904      	ldr	r1, [sp, #16]
    995e:	b3c9      	cbz	r1, 99d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x864>
    9960:	f1bb 0f00 	cmp.w	fp, #0
    9964:	d027      	beq.n	99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9966:	bf00      	nop
    9968:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    996c:	2a00      	cmp	r2, #0
    996e:	e000      	b.n	9972 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x802>
    9970:	e031      	b.n	99d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x866>
    9972:	bf0c      	ite	eq
    9974:	2100      	moveq	r1, #0
    9976:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    997a:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    997e:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    9982:	1c49      	adds	r1, r1, #1
    9984:	4359      	muls	r1, r3
    9986:	4291      	cmp	r1, r2
    9988:	d215      	bcs.n	99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    998a:	7ab1      	ldrb	r1, [r6, #10]
    998c:	1e49      	subs	r1, r1, #1
    998e:	2900      	cmp	r1, #0
    9990:	dd11      	ble.n	99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9992:	72b0      	strb	r0, [r6, #10]
    9994:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    9998:	2101      	movs	r1, #1
    999a:	1c40      	adds	r0, r0, #1
    999c:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    99a0:	f504 7098 	add.w	r0, r4, #304	; 0x130
    99a4:	f7fb f972 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    99a8:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    99ac:	f000 0007 	and.w	r0, r0, #7
    99b0:	1c40      	adds	r0, r0, #1
    99b2:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    99b6:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    99ba:	4631      	mov	r1, r6
    99bc:	f7f8 f902 	bl	1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    99c0:	b338      	cbz	r0, 9a12 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a2>
    99c2:	9807      	ldr	r0, [sp, #28]
    99c4:	f080 0001 	eor.w	r0, r0, #1
    99c8:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    99cc:	b009      	add	sp, #36	; 0x24
    99ce:	2000      	movs	r0, #0
    99d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99d4:	e004      	b.n	99e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    99d6:	f240 5113 	movw	r1, #1299	; 0x513
    99da:	2030      	movs	r0, #48	; 0x30
    99dc:	f7fa fb56 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99e0:	f1bb 0f00 	cmp.w	fp, #0
    99e4:	d1c0      	bne.n	9968 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f8>
    99e6:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    99ea:	2800      	cmp	r0, #0
    99ec:	d0e3      	beq.n	99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    99ee:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    99f2:	6860      	ldr	r0, [r4, #4]
    99f4:	1a41      	subs	r1, r0, r1
    99f6:	4630      	mov	r0, r6
    99f8:	f006 fe0f 	bl	1061a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    99fc:	0400      	lsls	r0, r0, #16
    99fe:	0c00      	lsrs	r0, r0, #16
    9a00:	d0d9      	beq.n	99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9a02:	9912      	ldr	r1, [sp, #72]	; 0x48
    9a04:	2900      	cmp	r1, #0
    9a06:	bf18      	it	ne
    9a08:	8008      	strhne	r0, [r1, #0]
    9a0a:	2001      	movs	r0, #1
    9a0c:	b009      	add	sp, #36	; 0x24
    9a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a12:	f240 5175 	movw	r1, #1397	; 0x575
    9a16:	2030      	movs	r0, #48	; 0x30
    9a18:	f7fa fb38 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a1c:	20000120 	.word	0x20000120
    9a20:	20000138 	.word	0x20000138
    9a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a28:	4cfd      	ldr	r4, [pc, #1012]	; (9e20 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb0>)
    9a2a:	468a      	mov	sl, r1
    9a2c:	b083      	sub	sp, #12
    9a2e:	7c21      	ldrb	r1, [r4, #16]
    9a30:	2702      	movs	r7, #2
    9a32:	4dfc      	ldr	r5, [pc, #1008]	; (9e24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb4>)
    9a34:	2600      	movs	r6, #0
    9a36:	f04f 0801 	mov.w	r8, #1
    9a3a:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    9a3e:	2903      	cmp	r1, #3
    9a40:	bf04      	itt	eq
    9a42:	7821      	ldrbeq	r1, [r4, #0]
    9a44:	4281      	cmpeq	r1, r0
    9a46:	f040 80e3 	bne.w	9c10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa0>
    9a4a:	6860      	ldr	r0, [r4, #4]
    9a4c:	6168      	str	r0, [r5, #20]
    9a4e:	7c20      	ldrb	r0, [r4, #16]
    9a50:	2803      	cmp	r0, #3
    9a52:	d003      	beq.n	9a5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    9a54:	21d2      	movs	r1, #210	; 0xd2
    9a56:	2030      	movs	r0, #48	; 0x30
    9a58:	f7fa fb18 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a5c:	f04f 0903 	mov.w	r9, #3
    9a60:	f1ba 0f08 	cmp.w	sl, #8
    9a64:	f080 80d0 	bcs.w	9c08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    9a68:	e8df f00a 	tbb	[pc, sl]
    9a6c:	39391604 	.word	0x39391604
    9a70:	c7becef6 	.word	0xc7becef6
    9a74:	62a6      	str	r6, [r4, #40]	; 0x28
    9a76:	f7fd ffa9 	bl	79cc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9a7a:	b120      	cbz	r0, 9a86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x916>
    9a7c:	f240 2169 	movw	r1, #617	; 0x269
    9a80:	2030      	movs	r0, #48	; 0x30
    9a82:	f7fa fb03 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a86:	69a0      	ldr	r0, [r4, #24]
    9a88:	38f9      	subs	r0, #249	; 0xf9
    9a8a:	f7f8 ffa7 	bl	29dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9a8e:	f885 9002 	strb.w	r9, [r5, #2]
    9a92:	b003      	add	sp, #12
    9a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a98:	f7fd ff68 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9a9c:	b998      	cbnz	r0, 9ac6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x956>
    9a9e:	f7fd fe0f 	bl	76c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9aa2:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    9aa6:	69a0      	ldr	r0, [r4, #24]
    9aa8:	42a8      	cmp	r0, r5
    9aaa:	d20b      	bcs.n	9ac4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    9aac:	1a28      	subs	r0, r5, r0
    9aae:	2104      	movs	r1, #4
    9ab0:	f7f7 fe3c 	bl	172c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9ab4:	b130      	cbz	r0, 9ac4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    9ab6:	61a5      	str	r5, [r4, #24]
    9ab8:	b003      	add	sp, #12
    9aba:	2000      	movs	r0, #0
    9abc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ac0:	f7ff b942 	b.w	8d48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9ac4:	61a5      	str	r5, [r4, #24]
    9ac6:	f7fd ffe7 	bl	7a98 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9aca:	2800      	cmp	r0, #0
    9acc:	bf04      	itt	eq
    9ace:	b003      	addeq	sp, #12
    9ad0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ad4:	f240 219d 	movw	r1, #669	; 0x29d
    9ad8:	2030      	movs	r0, #48	; 0x30
    9ada:	f7fa fad7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ade:	2064      	movs	r0, #100	; 0x64
    9ae0:	83a0      	strh	r0, [r4, #28]
    9ae2:	7526      	strb	r6, [r4, #20]
    9ae4:	77e6      	strb	r6, [r4, #31]
    9ae6:	7a20      	ldrb	r0, [r4, #8]
    9ae8:	f04f 0a01 	mov.w	sl, #1
    9aec:	f242 7b10 	movw	fp, #10000	; 0x2710
    9af0:	b158      	cbz	r0, 9b0a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x99a>
    9af2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9af6:	6a20      	ldr	r0, [r4, #32]
    9af8:	f7f7 ff10 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9afc:	6220      	str	r0, [r4, #32]
    9afe:	2100      	movs	r1, #0
    9b00:	f104 0014 	add.w	r0, r4, #20
    9b04:	f006 fd89 	bl	1061a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9b08:	e019      	b.n	9b3e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ce>
    9b0a:	2101      	movs	r1, #1
    9b0c:	4668      	mov	r0, sp
    9b0e:	f7fb f8cb 	bl	4ca8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    9b12:	f89d 0000 	ldrb.w	r0, [sp]
    9b16:	0200      	lsls	r0, r0, #8
    9b18:	fbb0 f1fb 	udiv	r1, r0, fp
    9b1c:	fb0b 0a11 	mls	sl, fp, r1, r0
    9b20:	f7fd fda6 	bl	7670 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9b24:	4482      	add	sl, r0
    9b26:	4651      	mov	r1, sl
    9b28:	6a20      	ldr	r0, [r4, #32]
    9b2a:	f7f7 fef7 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9b2e:	6220      	str	r0, [r4, #32]
    9b30:	4651      	mov	r1, sl
    9b32:	f104 0014 	add.w	r0, r4, #20
    9b36:	f006 fd70 	bl	1061a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9b3a:	f100 0a01 	add.w	sl, r0, #1
    9b3e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9b40:	1c41      	adds	r1, r0, #1
    9b42:	290a      	cmp	r1, #10
    9b44:	bf3c      	itt	cc
    9b46:	4450      	addcc	r0, sl
    9b48:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    9b4a:	6860      	ldr	r0, [r4, #4]
    9b4c:	b128      	cbz	r0, 9b5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ea>
    9b4e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9b50:	1c40      	adds	r0, r0, #1
    9b52:	280a      	cmp	r0, #10
    9b54:	bf28      	it	cs
    9b56:	77a7      	strbcs	r7, [r4, #30]
    9b58:	d201      	bcs.n	9b5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ee>
    9b5a:	f884 901e 	strb.w	r9, [r4, #30]
    9b5e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    9b62:	bb40      	cbnz	r0, 9bb6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    9b64:	7a20      	ldrb	r0, [r4, #8]
    9b66:	b130      	cbz	r0, 9b76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9b68:	68e1      	ldr	r1, [r4, #12]
    9b6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9b6c:	4288      	cmp	r0, r1
    9b6e:	d902      	bls.n	9b76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9b70:	f7fd ffb6 	bl	7ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9b74:	e01f      	b.n	9bb6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    9b76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9b78:	b338      	cbz	r0, 9bca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    9b7a:	f7fd fd79 	bl	7670 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9b7e:	4607      	mov	r7, r0
    9b80:	f7fd fd9e 	bl	76c0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9b84:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    9b88:	4438      	add	r0, r7
    9b8a:	eb00 090b 	add.w	r9, r0, fp
    9b8e:	f005 f86a 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9b92:	4607      	mov	r7, r0
    9b94:	4639      	mov	r1, r7
    9b96:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9b98:	f7f7 fef6 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9b9c:	6327      	str	r7, [r4, #48]	; 0x30
    9b9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9ba0:	eb00 0209 	add.w	r2, r0, r9
    9ba4:	4291      	cmp	r1, r2
    9ba6:	bf24      	itt	cs
    9ba8:	1a08      	subcs	r0, r1, r0
    9baa:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    9bac:	d20d      	bcs.n	9bca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    9bae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    9bb2:	f7fd ff95 	bl	7ae0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9bb6:	7820      	ldrb	r0, [r4, #0]
    9bb8:	f7f8 fd2c 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9bbc:	7426      	strb	r6, [r4, #16]
    9bbe:	7968      	ldrb	r0, [r5, #5]
    9bc0:	b003      	add	sp, #12
    9bc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bc6:	f7fa b855 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9bca:	f814 0b14 	ldrb.w	r0, [r4], #20
    9bce:	4621      	mov	r1, r4
    9bd0:	f7f7 fff8 	bl	1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9bd4:	2800      	cmp	r0, #0
    9bd6:	bf1c      	itt	ne
    9bd8:	b003      	addne	sp, #12
    9bda:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bde:	f240 6174 	movw	r1, #1652	; 0x674
    9be2:	2030      	movs	r0, #48	; 0x30
    9be4:	f7fa fa52 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9be8:	f004 fb4e 	bl	e288 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    9bec:	f004 fcc4 	bl	e578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9bf0:	f8cb 7280 	str.w	r7, [fp, #640]	; 0x280
    9bf4:	b003      	add	sp, #12
    9bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bfa:	4608      	mov	r0, r1
    9bfc:	f7f8 fd0a 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9c00:	7426      	strb	r6, [r4, #16]
    9c02:	b003      	add	sp, #12
    9c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c08:	21f3      	movs	r1, #243	; 0xf3
    9c0a:	2030      	movs	r0, #48	; 0x30
    9c0c:	f7fa fa3e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c10:	4681      	mov	r9, r0
    9c12:	f7fc fed1 	bl	69b8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    9c16:	2101      	movs	r1, #1
    9c18:	f006 fa6f 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9c1c:	0004      	movs	r4, r0
    9c1e:	d009      	beq.n	9c34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    9c20:	4648      	mov	r0, r9
    9c22:	f7fc fec9 	bl	69b8 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    9c26:	8821      	ldrh	r1, [r4, #0]
    9c28:	4288      	cmp	r0, r1
    9c2a:	d007      	beq.n	9c3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xacc>
    9c2c:	219b      	movs	r1, #155	; 0x9b
    9c2e:	2030      	movs	r0, #48	; 0x30
    9c30:	f7fa fa2c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c34:	219a      	movs	r1, #154	; 0x9a
    9c36:	2030      	movs	r0, #48	; 0x30
    9c38:	f7fa fa28 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c3c:	f04f 0920 	mov.w	r9, #32
    9c40:	616c      	str	r4, [r5, #20]
    9c42:	f1ba 0f08 	cmp.w	sl, #8
    9c46:	f080 810c 	bcs.w	9e62 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9c4a:	e8df f00a 	tbb	[pc, sl]
    9c4e:	5506      	.short	0x5506
    9c50:	ed5a5f5f 	.word	0xed5a5f5f
    9c54:	ee04      	.short	0xee04
    9c56:	e7c7      	b.n	9be8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa78>
    9c58:	e053      	b.n	9d02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb92>
    9c5a:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    9c5e:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    9c62:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    9c66:	4620      	mov	r0, r4
    9c68:	b191      	cbz	r1, 9c90 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb20>
    9c6a:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    9c6e:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    9c72:	428a      	cmp	r2, r1
    9c74:	d107      	bne.n	9c86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb16>
    9c76:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    9c7a:	1a51      	subs	r1, r2, r1
    9c7c:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c80:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    9c84:	e00f      	b.n	9ca6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb36>
    9c86:	1a51      	subs	r1, r2, r1
    9c88:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c8c:	b291      	uxth	r1, r2
    9c8e:	e008      	b.n	9ca2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb32>
    9c90:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9c94:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    9c98:	1a89      	subs	r1, r1, r2
    9c9a:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c9e:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9ca2:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    9ca6:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    9caa:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    9cae:	f000 f9bd 	bl	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    9cb2:	f7f7 ff7d 	bl	1bb0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9cb6:	2864      	cmp	r0, #100	; 0x64
    9cb8:	bf98      	it	ls
    9cba:	2064      	movls	r0, #100	; 0x64
    9cbc:	f200 18b9 	addw	r8, r0, #441	; 0x1b9
    9cc0:	4620      	mov	r0, r4
    9cc2:	f240 221d 	movw	r2, #541	; 0x21d
    9cc6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9cc8:	f007 f820 	bl	10d0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9ccc:	4606      	mov	r6, r0
    9cce:	4642      	mov	r2, r8
    9cd0:	4620      	mov	r0, r4
    9cd2:	6861      	ldr	r1, [r4, #4]
    9cd4:	f007 f81a 	bl	10d0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9cd8:	4601      	mov	r1, r0
    9cda:	60e8      	str	r0, [r5, #12]
    9cdc:	428e      	cmp	r6, r1
    9cde:	bf38      	it	cc
    9ce0:	4631      	movcc	r1, r6
    9ce2:	60a9      	str	r1, [r5, #8]
    9ce4:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    9ce8:	38bd      	subs	r0, #189	; 0xbd
    9cea:	6128      	str	r0, [r5, #16]
    9cec:	f7f8 fe76 	bl	29dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9cf0:	70af      	strb	r7, [r5, #2]
    9cf2:	b003      	add	sp, #12
    9cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cf8:	b003      	add	sp, #12
    9cfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cfe:	f000 bb4b 	b.w	a398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    9d02:	b003      	add	sp, #12
    9d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d08:	f004 bc36 	b.w	e578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9d0c:	f004 ffab 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9d10:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    9d14:	4601      	mov	r1, r0
    9d16:	4610      	mov	r0, r2
    9d18:	f7f7 fe36 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9d1c:	6861      	ldr	r1, [r4, #4]
    9d1e:	2900      	cmp	r1, #0
    9d20:	bf14      	ite	ne
    9d22:	fbb0 f0f1 	udivne	r0, r0, r1
    9d26:	4630      	moveq	r0, r6
    9d28:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9d2c:	290d      	cmp	r1, #13
    9d2e:	d011      	beq.n	9d54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe4>
    9d30:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9d34:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
    9d38:	180b      	adds	r3, r1, r0
    9d3a:	1ad3      	subs	r3, r2, r3
    9d3c:	b21b      	sxth	r3, r3
    9d3e:	2b00      	cmp	r3, #0
    9d40:	bfae      	itee	ge
    9d42:	1c50      	addge	r0, r2, #1
    9d44:	1c40      	addlt	r0, r0, #1
    9d46:	4408      	addlt	r0, r1
    9d48:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9d4c:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    9d50:	b978      	cbnz	r0, 9d72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9d52:	e005      	b.n	9d60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbf0>
    9d54:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9d58:	1c40      	adds	r0, r0, #1
    9d5a:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9d5e:	e008      	b.n	9d72 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9d60:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9d64:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    9d68:	4288      	cmp	r0, r1
    9d6a:	bf04      	itt	eq
    9d6c:	1c40      	addeq	r0, r0, #1
    9d6e:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    9d72:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    9d76:	f10d 0a04 	add.w	sl, sp, #4
    9d7a:	1c40      	adds	r0, r0, #1
    9d7c:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    9d80:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    9d84:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    9d88:	1a40      	subs	r0, r0, r1
    9d8a:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9d8e:	1e40      	subs	r0, r0, #1
    9d90:	4408      	add	r0, r1
    9d92:	b287      	uxth	r7, r0
    9d94:	e034      	b.n	9e00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc90>
    9d96:	2300      	movs	r3, #0
    9d98:	461a      	mov	r2, r3
    9d9a:	4620      	mov	r0, r4
    9d9c:	f8cd a000 	str.w	sl, [sp]
    9da0:	f7ff fb0e 	bl	93c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9da4:	b130      	cbz	r0, 9db4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc44>
    9da6:	2801      	cmp	r0, #1
    9da8:	d023      	beq.n	9df2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc82>
    9daa:	f240 6124 	movw	r1, #1572	; 0x624
    9dae:	2030      	movs	r0, #48	; 0x30
    9db0:	f7fa f96c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9db4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9db6:	2800      	cmp	r0, #0
    9db8:	bf04      	itt	eq
    9dba:	b003      	addeq	sp, #12
    9dbc:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dc0:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9dc4:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    9dc8:	1a80      	subs	r0, r0, r2
    9dca:	b201      	sxth	r1, r0
    9dcc:	2900      	cmp	r1, #0
    9dce:	bfdc      	itt	le
    9dd0:	b003      	addle	sp, #12
    9dd2:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dd6:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    9dda:	4401      	add	r1, r0
    9ddc:	1e49      	subs	r1, r1, #1
    9dde:	fb91 f1f0 	sdiv	r1, r1, r0
    9de2:	b289      	uxth	r1, r1
    9de4:	fb01 2000 	mla	r0, r1, r0, r2
    9de8:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    9dec:	b003      	add	sp, #12
    9dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9df2:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9df6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9dfa:	4408      	add	r0, r1
    9dfc:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9e00:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    9e04:	1a78      	subs	r0, r7, r1
    9e06:	b200      	sxth	r0, r0
    9e08:	2800      	cmp	r0, #0
    9e0a:	dac4      	bge.n	9d96 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc26>
    9e0c:	2008      	movs	r0, #8
    9e0e:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    9e12:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    9e16:	4620      	mov	r0, r4
    9e18:	f007 fae5 	bl	113e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9e1c:	e00d      	b.n	9e3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9e1e:	e004      	b.n	9e2a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcba>
    9e20:	2000164c 	.word	0x2000164c
    9e24:	20000120 	.word	0x20000120
    9e28:	e01b      	b.n	9e62 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9e2a:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9e2e:	2804      	cmp	r0, #4
    9e30:	d003      	beq.n	9e3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9e32:	21bf      	movs	r1, #191	; 0xbf
    9e34:	2030      	movs	r0, #48	; 0x30
    9e36:	f7fa f929 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e3a:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    9e3e:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9e42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e46:	f7fc fdc5 	bl	69d4 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9e4a:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9e4e:	f7f8 fbe1 	bl	2614 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9e52:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    9e56:	7968      	ldrb	r0, [r5, #5]
    9e58:	b003      	add	sp, #12
    9e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e5e:	f7f9 bf09 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9e62:	21c7      	movs	r1, #199	; 0xc7
    9e64:	2030      	movs	r0, #48	; 0x30
    9e66:	f7fa f911 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
	...

00009e6c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    9e6c:	b510      	push	{r4, lr}
    9e6e:	4604      	mov	r4, r0
    9e70:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    9e74:	6861      	ldr	r1, [r4, #4]
    9e76:	4288      	cmp	r0, r1
    9e78:	d109      	bne.n	9e8e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9e7a:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    9e7e:	8922      	ldrh	r2, [r4, #8]
    9e80:	4291      	cmp	r1, r2
    9e82:	d104      	bne.n	9e8e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9e84:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    9e88:	8962      	ldrh	r2, [r4, #10]
    9e8a:	4291      	cmp	r1, r2
    9e8c:	d015      	beq.n	9eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    9e8e:	8821      	ldrh	r1, [r4, #0]
    9e90:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    9e94:	f006 fa61 	bl	1035a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9e98:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    9e9c:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9ea0:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    9ea4:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    9ea8:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    9eac:	2001      	movs	r0, #1
    9eae:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    9eb2:	4807      	ldr	r0, [pc, #28]	; (9ed0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    9eb4:	7940      	ldrb	r0, [r0, #5]
    9eb6:	f7f9 fedd 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9eba:	2102      	movs	r1, #2
    9ebc:	4620      	mov	r0, r4
    9ebe:	f7fc fc85 	bl	67cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9ec2:	2000      	movs	r0, #0
    9ec4:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9ec8:	2003      	movs	r0, #3
    9eca:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    9ece:	bd10      	pop	{r4, pc}
    9ed0:	20000140 	.word	0x20000140

00009ed4 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    9ed4:	4802      	ldr	r0, [pc, #8]	; (9ee0 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    9ed6:	6980      	ldr	r0, [r0, #24]
    9ed8:	2800      	cmp	r0, #0
    9eda:	bf18      	it	ne
    9edc:	2001      	movne	r0, #1
    9ede:	4770      	bx	lr
    9ee0:	20000140 	.word	0x20000140

00009ee4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9ee4:	4806      	ldr	r0, [pc, #24]	; (9f00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    9ee6:	4905      	ldr	r1, [pc, #20]	; (9efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9ee8:	6501      	str	r1, [r0, #80]	; 0x50
    9eea:	4906      	ldr	r1, [pc, #24]	; (9f04 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9eec:	6541      	str	r1, [r0, #84]	; 0x54
    9eee:	4807      	ldr	r0, [pc, #28]	; (9f0c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    9ef0:	4905      	ldr	r1, [pc, #20]	; (9f08 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    9ef2:	6501      	str	r1, [r0, #80]	; 0x50
    9ef4:	4906      	ldr	r1, [pc, #24]	; (9f10 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    9ef6:	6541      	str	r1, [r0, #84]	; 0x54
    9ef8:	4770      	bx	lr
    9efa:	0000      	.short	0x0000
    9efc:	0000b581 	.word	0x0000b581
    9f00:	20000160 	.word	0x20000160
    9f04:	0000b659 	.word	0x0000b659
    9f08:	0000be59 	.word	0x0000be59
    9f0c:	200001c4 	.word	0x200001c4
    9f10:	0000be89 	.word	0x0000be89

00009f14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9f14:	491d      	ldr	r1, [pc, #116]	; (9f8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9f16:	2200      	movs	r2, #0
    9f18:	618a      	str	r2, [r1, #24]
    9f1a:	61ca      	str	r2, [r1, #28]
    9f1c:	7148      	strb	r0, [r1, #5]
    9f1e:	481d      	ldr	r0, [pc, #116]	; (9f94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9f20:	491b      	ldr	r1, [pc, #108]	; (9f90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9f22:	6081      	str	r1, [r0, #8]
    9f24:	491c      	ldr	r1, [pc, #112]	; (9f98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9f26:	6041      	str	r1, [r0, #4]
    9f28:	491c      	ldr	r1, [pc, #112]	; (9f9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9f2a:	6001      	str	r1, [r0, #0]
    9f2c:	491c      	ldr	r1, [pc, #112]	; (9fa0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9f2e:	6281      	str	r1, [r0, #40]	; 0x28
    9f30:	491c      	ldr	r1, [pc, #112]	; (9fa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9f32:	62c1      	str	r1, [r0, #44]	; 0x2c
    9f34:	491c      	ldr	r1, [pc, #112]	; (9fa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9f36:	60c1      	str	r1, [r0, #12]
    9f38:	491c      	ldr	r1, [pc, #112]	; (9fac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9f3a:	6181      	str	r1, [r0, #24]
    9f3c:	491c      	ldr	r1, [pc, #112]	; (9fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9f3e:	6301      	str	r1, [r0, #48]	; 0x30
    9f40:	491c      	ldr	r1, [pc, #112]	; (9fb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9f42:	6201      	str	r1, [r0, #32]
    9f44:	491c      	ldr	r1, [pc, #112]	; (9fb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9f46:	64c1      	str	r1, [r0, #76]	; 0x4c
    9f48:	491c      	ldr	r1, [pc, #112]	; (9fbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9f4a:	6481      	str	r1, [r0, #72]	; 0x48
    9f4c:	491c      	ldr	r1, [pc, #112]	; (9fc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9f4e:	6441      	str	r1, [r0, #68]	; 0x44
    9f50:	491c      	ldr	r1, [pc, #112]	; (9fc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9f52:	6341      	str	r1, [r0, #52]	; 0x34
    9f54:	491c      	ldr	r1, [pc, #112]	; (9fc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9f56:	61c1      	str	r1, [r0, #28]
    9f58:	481d      	ldr	r0, [pc, #116]	; (9fd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9f5a:	491c      	ldr	r1, [pc, #112]	; (9fcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9f5c:	6081      	str	r1, [r0, #8]
    9f5e:	491d      	ldr	r1, [pc, #116]	; (9fd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9f60:	61c1      	str	r1, [r0, #28]
    9f62:	491d      	ldr	r1, [pc, #116]	; (9fd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9f64:	6241      	str	r1, [r0, #36]	; 0x24
    9f66:	491d      	ldr	r1, [pc, #116]	; (9fdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9f68:	62c1      	str	r1, [r0, #44]	; 0x2c
    9f6a:	491d      	ldr	r1, [pc, #116]	; (9fe0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    9f6c:	6101      	str	r1, [r0, #16]
    9f6e:	491d      	ldr	r1, [pc, #116]	; (9fe4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9f70:	6141      	str	r1, [r0, #20]
    9f72:	491d      	ldr	r1, [pc, #116]	; (9fe8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9f74:	6441      	str	r1, [r0, #68]	; 0x44
    9f76:	6341      	str	r1, [r0, #52]	; 0x34
    9f78:	491c      	ldr	r1, [pc, #112]	; (9fec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9f7a:	6181      	str	r1, [r0, #24]
    9f7c:	491c      	ldr	r1, [pc, #112]	; (9ff0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    9f7e:	6301      	str	r1, [r0, #48]	; 0x30
    9f80:	491c      	ldr	r1, [pc, #112]	; (9ff4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9f82:	6481      	str	r1, [r0, #72]	; 0x48
    9f84:	491c      	ldr	r1, [pc, #112]	; (9ff8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9f86:	64c1      	str	r1, [r0, #76]	; 0x4c
    9f88:	4770      	bx	lr
    9f8a:	0000      	.short	0x0000
    9f8c:	20000140 	.word	0x20000140
    9f90:	0000bba5 	.word	0x0000bba5
    9f94:	20000160 	.word	0x20000160
    9f98:	0000b30d 	.word	0x0000b30d
    9f9c:	0000b371 	.word	0x0000b371
    9fa0:	0000b74d 	.word	0x0000b74d
    9fa4:	0000b79d 	.word	0x0000b79d
    9fa8:	0000b42d 	.word	0x0000b42d
    9fac:	0000bb69 	.word	0x0000bb69
    9fb0:	0000bd15 	.word	0x0000bd15
    9fb4:	0000b4d9 	.word	0x0000b4d9
    9fb8:	0000b71d 	.word	0x0000b71d
    9fbc:	0000b6e9 	.word	0x0000b6e9
    9fc0:	0000bab1 	.word	0x0000bab1
    9fc4:	0000bb19 	.word	0x0000bb19
    9fc8:	0000bbdd 	.word	0x0000bbdd
    9fcc:	0000c075 	.word	0x0000c075
    9fd0:	200001c4 	.word	0x200001c4
    9fd4:	0000c09d 	.word	0x0000c09d
    9fd8:	0000be15 	.word	0x0000be15
    9fdc:	0000bf31 	.word	0x0000bf31
    9fe0:	0000bde9 	.word	0x0000bde9
    9fe4:	0000bfd9 	.word	0x0000bfd9
    9fe8:	0000bfb5 	.word	0x0000bfb5
    9fec:	0000bffd 	.word	0x0000bffd
    9ff0:	0000c111 	.word	0x0000c111
    9ff4:	0000becd 	.word	0x0000becd
    9ff8:	0000befd 	.word	0x0000befd

00009ffc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9ffc:	4806      	ldr	r0, [pc, #24]	; (a018 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9ffe:	4905      	ldr	r1, [pc, #20]	; (a014 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    a000:	6581      	str	r1, [r0, #88]	; 0x58
    a002:	4906      	ldr	r1, [pc, #24]	; (a01c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    a004:	6601      	str	r1, [r0, #96]	; 0x60
    a006:	4807      	ldr	r0, [pc, #28]	; (a024 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    a008:	4905      	ldr	r1, [pc, #20]	; (a020 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    a00a:	6581      	str	r1, [r0, #88]	; 0x58
    a00c:	4906      	ldr	r1, [pc, #24]	; (a028 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    a00e:	65c1      	str	r1, [r0, #92]	; 0x5c
    a010:	4770      	bx	lr
    a012:	0000      	.short	0x0000
    a014:	0000b7bd 	.word	0x0000b7bd
    a018:	20000160 	.word	0x20000160
    a01c:	0000b89d 	.word	0x0000b89d
    a020:	0000bf5d 	.word	0x0000bf5d
    a024:	200001c4 	.word	0x200001c4
    a028:	0000bf8d 	.word	0x0000bf8d

0000a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    a02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a030:	2701      	movs	r7, #1
    a032:	4cd1      	ldr	r4, [pc, #836]	; (a378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    a034:	2500      	movs	r5, #0
    a036:	f367 0907 	bfi	r9, r7, #0, #8
    a03a:	80e5      	strh	r5, [r4, #6]
    a03c:	70e5      	strb	r5, [r4, #3]
    a03e:	7125      	strb	r5, [r4, #4]
    a040:	7025      	strb	r5, [r4, #0]
    a042:	60e0      	str	r0, [r4, #12]
    a044:	4606      	mov	r6, r0
    a046:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    a04a:	8800      	ldrh	r0, [r0, #0]
    a04c:	f7fa fbec 	bl	4828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a050:	ea5f 0a00 	movs.w	sl, r0
    a054:	d010      	beq.n	a078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    a056:	68e0      	ldr	r0, [r4, #12]
    a058:	8800      	ldrh	r0, [r0, #0]
    a05a:	f7fa ff17 	bl	4e8c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    a05e:	68e0      	ldr	r0, [r4, #12]
    a060:	8800      	ldrh	r0, [r0, #0]
    a062:	f7fa feb9 	bl	4dd8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    a066:	68e0      	ldr	r0, [r4, #12]
    a068:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    a06c:	b1a1      	cbz	r1, a098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    a06e:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a072:	29fe      	cmp	r1, #254	; 0xfe
    a074:	d005      	beq.n	a082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    a076:	e014      	b.n	a0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    a078:	f640 319e 	movw	r1, #2974	; 0xb9e
    a07c:	2031      	movs	r0, #49	; 0x31
    a07e:	f7fa f805 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a082:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    a086:	b189      	cbz	r1, a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    a088:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a08c:	2301      	movs	r3, #1
    a08e:	4619      	mov	r1, r3
    a090:	3078      	adds	r0, #120	; 0x78
    a092:	f006 f989 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a096:	b188      	cbz	r0, a0bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    a098:	68e0      	ldr	r0, [r4, #12]
    a09a:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    a09e:	28fe      	cmp	r0, #254	; 0xfe
    a0a0:	d004      	beq.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    a0a2:	68e0      	ldr	r0, [r4, #12]
    a0a4:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    a0a8:	f000 fbcc 	bl	a844 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ac>
    a0ac:	68e0      	ldr	r0, [r4, #12]
    a0ae:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    a0b2:	2900      	cmp	r1, #0
    a0b4:	bf18      	it	ne
    a0b6:	8125      	strhne	r5, [r4, #8]
    a0b8:	d11b      	bne.n	a0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    a0ba:	e00f      	b.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    a0bc:	68e0      	ldr	r0, [r4, #12]
    a0be:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    a0c2:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    a0c6:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a0ca:	2100      	movs	r1, #0
    a0cc:	2002      	movs	r0, #2
    a0ce:	f001 f879 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a0d2:	68e0      	ldr	r0, [r4, #12]
    a0d4:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    a0d8:	2002      	movs	r0, #2
    a0da:	e7e5      	b.n	a0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    a0dc:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    a0e0:	b929      	cbnz	r1, a0ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    a0e2:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    a0e4:	8902      	ldrh	r2, [r0, #8]
    a0e6:	4291      	cmp	r1, r2
    a0e8:	bf88      	it	hi
    a0ea:	8121      	strhhi	r1, [r4, #8]
    a0ec:	d801      	bhi.n	a0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    a0ee:	8901      	ldrh	r1, [r0, #8]
    a0f0:	8121      	strh	r1, [r4, #8]
    a0f2:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a0f6:	1e49      	subs	r1, r1, #1
    a0f8:	fa1f f881 	uxth.w	r8, r1
    a0fc:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a100:	4441      	add	r1, r8
    a102:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    a106:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    a10a:	2900      	cmp	r1, #0
    a10c:	bf1c      	itt	ne
    a10e:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    a112:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    a116:	d104      	bne.n	a122 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    a118:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    a11c:	4441      	add	r1, r8
    a11e:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    a122:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a126:	4441      	add	r1, r8
    a128:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a12c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a130:	b939      	cbnz	r1, a142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    a132:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a136:	2301      	movs	r3, #1
    a138:	2106      	movs	r1, #6
    a13a:	3078      	adds	r0, #120	; 0x78
    a13c:	f006 f934 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a140:	b128      	cbz	r0, a14e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    a142:	68e0      	ldr	r0, [r4, #12]
    a144:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a148:	4441      	add	r1, r8
    a14a:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a14e:	68e0      	ldr	r0, [r4, #12]
    a150:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    a154:	2901      	cmp	r1, #1
    a156:	bf9c      	itt	ls
    a158:	1c49      	addls	r1, r1, #1
    a15a:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    a15e:	f1b8 0f00 	cmp.w	r8, #0
    a162:	bf18      	it	ne
    a164:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a168:	4650      	mov	r0, sl
    a16a:	f005 fc41 	bl	f9f0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a16e:	4680      	mov	r8, r0
    a170:	68e0      	ldr	r0, [r4, #12]
    a172:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    a176:	b199      	cbz	r1, a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a178:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a17c:	8922      	ldrh	r2, [r4, #8]
    a17e:	4291      	cmp	r1, r2
    a180:	d20e      	bcs.n	a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a182:	f1b8 0f00 	cmp.w	r8, #0
    a186:	bf1c      	itt	ne
    a188:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    a18c:	2900      	cmpne	r1, #0
    a18e:	d007      	beq.n	a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a190:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    a194:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    a198:	4281      	cmp	r1, r0
    a19a:	bf28      	it	cs
    a19c:	f7fa ff16 	blcs	4fcc <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    a1a0:	68e2      	ldr	r2, [r4, #12]
    a1a2:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    a1a6:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a1aa:	280b      	cmp	r0, #11
    a1ac:	bf18      	it	ne
    a1ae:	280c      	cmpne	r0, #12
    a1b0:	d118      	bne.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    a1b2:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    a1b6:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    a1ba:	eba1 0103 	sub.w	r1, r1, r3
    a1be:	b209      	sxth	r1, r1
    a1c0:	2900      	cmp	r1, #0
    a1c2:	db0f      	blt.n	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    a1c4:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    a1c8:	f102 000c 	add.w	r0, r2, #12
    a1cc:	f008 f937 	bl	1243e <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    a1d0:	2103      	movs	r1, #3
    a1d2:	68e0      	ldr	r0, [r4, #12]
    a1d4:	f7fc fafa 	bl	67cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a1d8:	68e0      	ldr	r0, [r4, #12]
    a1da:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a1de:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    a1e2:	e093      	b.n	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a1e4:	2824      	cmp	r0, #36	; 0x24
    a1e6:	d146      	bne.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    a1e8:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    a1ec:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    a1f0:	1a40      	subs	r0, r0, r1
    a1f2:	b200      	sxth	r0, r0
    a1f4:	2800      	cmp	r0, #0
    a1f6:	db3e      	blt.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    a1f8:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a1fc:	2800      	cmp	r0, #0
    a1fe:	bf14      	ite	ne
    a200:	f04f 0a01 	movne.w	sl, #1
    a204:	f04f 0a00 	moveq.w	sl, #0
    a208:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a20c:	2900      	cmp	r1, #0
    a20e:	bf14      	ite	ne
    a210:	f04f 0c01 	movne.w	ip, #1
    a214:	f04f 0c00 	moveq.w	ip, #0
    a218:	f1ba 0f00 	cmp.w	sl, #0
    a21c:	bf08      	it	eq
    a21e:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    a222:	f1bc 0f00 	cmp.w	ip, #0
    a226:	bf08      	it	eq
    a228:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    a22c:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    a230:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    a234:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    a238:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a23c:	2801      	cmp	r0, #1
    a23e:	d005      	beq.n	a24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    a240:	f1ba 0f00 	cmp.w	sl, #0
    a244:	bf08      	it	eq
    a246:	f1bc 0f00 	cmpeq.w	ip, #0
    a24a:	d003      	beq.n	a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    a24c:	f04f 0000 	mov.w	r0, #0
    a250:	f001 f82e 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a254:	68e0      	ldr	r0, [r4, #12]
    a256:	f006 fda0 	bl	10d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a25a:	b130      	cbz	r0, a26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    a25c:	68e1      	ldr	r1, [r4, #12]
    a25e:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a262:	8808      	ldrh	r0, [r1, #0]
    a264:	3128      	adds	r1, #40	; 0x28
    a266:	f006 fd1b 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a26a:	68e0      	ldr	r0, [r4, #12]
    a26c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a270:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    a274:	e04a      	b.n	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a276:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    a27a:	2824      	cmp	r0, #36	; 0x24
    a27c:	bf18      	it	ne
    a27e:	2825      	cmpne	r0, #37	; 0x25
    a280:	d144      	bne.n	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a282:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    a286:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    a28a:	eba0 0001 	sub.w	r0, r0, r1
    a28e:	b200      	sxth	r0, r0
    a290:	2800      	cmp	r0, #0
    a292:	db3b      	blt.n	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a294:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a298:	2800      	cmp	r0, #0
    a29a:	bf14      	ite	ne
    a29c:	f04f 0a01 	movne.w	sl, #1
    a2a0:	f04f 0a00 	moveq.w	sl, #0
    a2a4:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a2a8:	2900      	cmp	r1, #0
    a2aa:	bf14      	ite	ne
    a2ac:	f04f 0c01 	movne.w	ip, #1
    a2b0:	f04f 0c00 	moveq.w	ip, #0
    a2b4:	f1ba 0f00 	cmp.w	sl, #0
    a2b8:	bf08      	it	eq
    a2ba:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    a2be:	f1bc 0f00 	cmp.w	ip, #0
    a2c2:	bf08      	it	eq
    a2c4:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    a2c8:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    a2cc:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    a2d0:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    a2d4:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a2d8:	2801      	cmp	r0, #1
    a2da:	d005      	beq.n	a2e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    a2dc:	f1ba 0f00 	cmp.w	sl, #0
    a2e0:	bf08      	it	eq
    a2e2:	f1bc 0f00 	cmpeq.w	ip, #0
    a2e6:	d003      	beq.n	a2f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    a2e8:	f04f 0000 	mov.w	r0, #0
    a2ec:	f000 ffe0 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a2f0:	68e0      	ldr	r0, [r4, #12]
    a2f2:	f006 fd52 	bl	10d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a2f6:	b130      	cbz	r0, a306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    a2f8:	68e1      	ldr	r1, [r4, #12]
    a2fa:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a2fe:	8808      	ldrh	r0, [r1, #0]
    a300:	3128      	adds	r1, #40	; 0x28
    a302:	f006 fccd 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a306:	68e0      	ldr	r0, [r4, #12]
    a308:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    a30c:	68e1      	ldr	r1, [r4, #12]
    a30e:	f101 0078 	add.w	r0, r1, #120	; 0x78
    a312:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    a316:	f7fc f969 	bl	65ec <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    a31a:	68e0      	ldr	r0, [r4, #12]
    a31c:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    a320:	2900      	cmp	r1, #0
    a322:	bf18      	it	ne
    a324:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    a328:	f1b8 0f00 	cmp.w	r8, #0
    a32c:	bf17      	itett	ne
    a32e:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    a332:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    a336:	2800      	cmpne	r0, #0
    a338:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a33c:	480f      	ldr	r0, [pc, #60]	; (a37c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    a33e:	9000      	str	r0, [sp, #0]
    a340:	4b0f      	ldr	r3, [pc, #60]	; (a380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    a342:	4a10      	ldr	r2, [pc, #64]	; (a384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    a344:	4631      	mov	r1, r6
    a346:	4648      	mov	r0, r9
    a348:	f7fa fe9a 	bl	5080 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    a34c:	69e1      	ldr	r1, [r4, #28]
    a34e:	2900      	cmp	r1, #0
    a350:	bf1c      	itt	ne
    a352:	7860      	ldrbne	r0, [r4, #1]
    a354:	f003 fa0c 	blne	d770 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    a358:	68e0      	ldr	r0, [r4, #12]
    a35a:	2301      	movs	r3, #1
    a35c:	2105      	movs	r1, #5
    a35e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a362:	3078      	adds	r0, #120	; 0x78
    a364:	f006 f820 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a368:	2800      	cmp	r0, #0
    a36a:	bf08      	it	eq
    a36c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a370:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a374:	f7fa be7e 	b.w	5074 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    a378:	20000140 	.word	0x20000140
    a37c:	0000aa09 	.word	0x0000aa09
    a380:	0000a3b5 	.word	0x0000a3b5
    a384:	0000b1fd 	.word	0x0000b1fd

0000a388 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    a388:	4802      	ldr	r0, [pc, #8]	; (a394 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    a38a:	2100      	movs	r1, #0
    a38c:	6181      	str	r1, [r0, #24]
    a38e:	61c1      	str	r1, [r0, #28]
    a390:	4608      	mov	r0, r1
    a392:	4770      	bx	lr
    a394:	20000140 	.word	0x20000140

0000a398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    a398:	4805      	ldr	r0, [pc, #20]	; (a3b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    a39a:	68c0      	ldr	r0, [r0, #12]
    a39c:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    a3a0:	b118      	cbz	r0, a3aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    a3a2:	2100      	movs	r1, #0
    a3a4:	4608      	mov	r0, r1
    a3a6:	f000 bb2f 	b.w	aa08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x670>
    a3aa:	f7fb b81f 	b.w	53ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    a3ae:	0000      	.short	0x0000
    a3b0:	20000140 	.word	0x20000140
    a3b4:	490d      	ldr	r1, [pc, #52]	; (a3ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    a3b6:	4602      	mov	r2, r0
    a3b8:	78c8      	ldrb	r0, [r1, #3]
    a3ba:	790b      	ldrb	r3, [r1, #4]
    a3bc:	4318      	orrs	r0, r3
    a3be:	d113      	bne.n	a3e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a3c0:	4608      	mov	r0, r1
    a3c2:	68c0      	ldr	r0, [r0, #12]
    a3c4:	b14a      	cbz	r2, a3da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    a3c6:	7989      	ldrb	r1, [r1, #6]
    a3c8:	f011 0f08 	tst.w	r1, #8
    a3cc:	d003      	beq.n	a3d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    a3ce:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a3d2:	2808      	cmp	r0, #8
    a3d4:	d008      	beq.n	a3e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a3d6:	2001      	movs	r0, #1
    a3d8:	4770      	bx	lr
    a3da:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    a3de:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    a3e0:	428a      	cmp	r2, r1
    a3e2:	d801      	bhi.n	a3e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a3e4:	f7fe be98 	b.w	9118 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    a3e8:	2000      	movs	r0, #0
    a3ea:	4770      	bx	lr
    a3ec:	20000140 	.word	0x20000140
    a3f0:	b570      	push	{r4, r5, r6, lr}
    a3f2:	4cf8      	ldr	r4, [pc, #992]	; (a7d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x43c>)
    a3f4:	68e0      	ldr	r0, [r4, #12]
    a3f6:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a3fa:	29fe      	cmp	r1, #254	; 0xfe
    a3fc:	bf06      	itte	eq
    a3fe:	78e1      	ldrbeq	r1, [r4, #3]
    a400:	2900      	cmpeq	r1, #0
    a402:	bd70      	popne	{r4, r5, r6, pc}
    a404:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a408:	f04f 0301 	mov.w	r3, #1
    a40c:	4619      	mov	r1, r3
    a40e:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a412:	f005 ffc9 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a416:	2800      	cmp	r0, #0
    a418:	bf18      	it	ne
    a41a:	bd70      	popne	{r4, r5, r6, pc}
    a41c:	68e0      	ldr	r0, [r4, #12]
    a41e:	2500      	movs	r5, #0
    a420:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    a424:	b159      	cbz	r1, a43e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    a426:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    a42a:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    a42e:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a436:	2100      	movs	r1, #0
    a438:	2002      	movs	r0, #2
    a43a:	f000 bec3 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a43e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a442:	2301      	movs	r3, #1
    a444:	2104      	movs	r1, #4
    a446:	3078      	adds	r0, #120	; 0x78
    a448:	f005 ffae 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a44c:	0006      	movs	r6, r0
    a44e:	68e0      	ldr	r0, [r4, #12]
    a450:	d00b      	beq.n	a46a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2>
    a452:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a456:	2910      	cmp	r1, #16
    a458:	d07d      	beq.n	a556 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be>
    a45a:	2914      	cmp	r1, #20
    a45c:	d07c      	beq.n	a558 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    a45e:	2915      	cmp	r1, #21
    a460:	d07b      	beq.n	a55a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    a462:	291b      	cmp	r1, #27
    a464:	d07a      	beq.n	a55c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    a466:	f000 b8f1 	b.w	a64c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a46a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a46e:	f011 0f01 	tst.w	r1, #1
    a472:	d005      	beq.n	a480 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8>
    a474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a478:	2101      	movs	r1, #1
    a47a:	2009      	movs	r0, #9
    a47c:	f000 bea2 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a480:	f011 0f02 	tst.w	r1, #2
    a484:	d00b      	beq.n	a49e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106>
    a486:	2101      	movs	r1, #1
    a488:	200c      	movs	r0, #12
    a48a:	f000 fe9b 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a48e:	68e0      	ldr	r0, [r4, #12]
    a490:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a494:	f041 0101 	orr.w	r1, r1, #1
    a498:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a49c:	bd70      	pop	{r4, r5, r6, pc}
    a49e:	f011 0f04 	tst.w	r1, #4
    a4a2:	d005      	beq.n	a4b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x118>
    a4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4a8:	2101      	movs	r1, #1
    a4aa:	2013      	movs	r0, #19
    a4ac:	f000 be8a 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a4b0:	f011 0f08 	tst.w	r1, #8
    a4b4:	d009      	beq.n	a4ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132>
    a4b6:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    a4ba:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4c2:	2101      	movs	r1, #1
    a4c4:	2007      	movs	r0, #7
    a4c6:	f000 be7d 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a4ca:	f011 0f30 	tst.w	r1, #48	; 0x30
    a4ce:	d07d      	beq.n	a5cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a4d0:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a4d4:	2900      	cmp	r1, #0
    a4d6:	d179      	bne.n	a5cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a4d8:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a4dc:	b1c9      	cbz	r1, a512 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a>
    a4de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a4e2:	2924      	cmp	r1, #36	; 0x24
    a4e4:	bf1b      	ittet	ne
    a4e6:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a4ea:	2924      	cmpne	r1, #36	; 0x24
    a4ec:	2301      	moveq	r3, #1
    a4ee:	2300      	movne	r3, #0
    a4f0:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a4f4:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a4f8:	f006 fbfa 	bl	10cf0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a4fc:	68e0      	ldr	r0, [r4, #12]
    a4fe:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a502:	f021 0120 	bic.w	r1, r1, #32
    a506:	f041 0110 	orr.w	r1, r1, #16
    a50a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a50e:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a512:	68e0      	ldr	r0, [r4, #12]
    a514:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a518:	f011 0f10 	tst.w	r1, #16
    a51c:	d056      	beq.n	a5cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a51e:	f006 fc3c 	bl	10d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a522:	68e1      	ldr	r1, [r4, #12]
    a524:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    a528:	2801      	cmp	r0, #1
    a52a:	bf04      	itt	eq
    a52c:	2002      	moveq	r0, #2
    a52e:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    a532:	d008      	beq.n	a546 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae>
    a534:	8808      	ldrh	r0, [r1, #0]
    a536:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a53a:	3128      	adds	r1, #40	; 0x28
    a53c:	f006 fbb0 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a540:	7960      	ldrb	r0, [r4, #5]
    a542:	f7f9 fb97 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a546:	68e0      	ldr	r0, [r4, #12]
    a548:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a54c:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a550:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a554:	e003      	b.n	a55e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    a556:	e00a      	b.n	a56e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    a558:	e00f      	b.n	a57a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    a55a:	e02b      	b.n	a5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21c>
    a55c:	e060      	b.n	a620 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x288>
    a55e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a566:	2101      	movs	r1, #1
    a568:	2015      	movs	r0, #21
    a56a:	f000 be2b 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a572:	2101      	movs	r1, #1
    a574:	200b      	movs	r0, #11
    a576:	f000 be25 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a57a:	f7fa fb81 	bl	4c80 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>
    a57e:	280c      	cmp	r0, #12
    a580:	bf38      	it	cc
    a582:	bd70      	popcc	{r4, r5, r6, pc}
    a584:	2108      	movs	r1, #8
    a586:	68e0      	ldr	r0, [r4, #12]
    a588:	f500 7092 	add.w	r0, r0, #292	; 0x124
    a58c:	f7fa fb7e 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a590:	b158      	cbz	r0, a5aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a592:	68e0      	ldr	r0, [r4, #12]
    a594:	2104      	movs	r1, #4
    a596:	30ec      	adds	r0, #236	; 0xec
    a598:	f7fa fb78 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a59c:	b128      	cbz	r0, a5aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a59e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5a2:	2101      	movs	r1, #1
    a5a4:	2004      	movs	r0, #4
    a5a6:	f000 be0d 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a5aa:	f240 719c 	movw	r1, #1948	; 0x79c
    a5ae:	2031      	movs	r0, #49	; 0x31
    a5b0:	f7f9 fd6c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5b4:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a5b8:	2901      	cmp	r1, #1
    a5ba:	d00d      	beq.n	a5d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x240>
    a5bc:	2902      	cmp	r1, #2
    a5be:	bf18      	it	ne
    a5c0:	bd70      	popne	{r4, r5, r6, pc}
    a5c2:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a5c6:	b1e9      	cbz	r1, a604 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
    a5c8:	2106      	movs	r1, #6
    a5ca:	e000      	b.n	a5ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    a5cc:	e02e      	b.n	a62c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x294>
    a5ce:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a5d2:	2101      	movs	r1, #1
    a5d4:	2002      	movs	r0, #2
    a5d6:	e01d      	b.n	a614 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x27c>
    a5d8:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a5dc:	2900      	cmp	r1, #0
    a5de:	bf18      	it	ne
    a5e0:	bd70      	popne	{r4, r5, r6, pc}
    a5e2:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    a5e6:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    a5ea:	2200      	movs	r2, #0
    a5ec:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a5f0:	f7fb ffba 	bl	6568 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a5f4:	2101      	movs	r1, #1
    a5f6:	2005      	movs	r0, #5
    a5f8:	f000 fde4 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a5fc:	68e0      	ldr	r0, [r4, #12]
    a5fe:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a602:	bd70      	pop	{r4, r5, r6, pc}
    a604:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a608:	f010 0f04 	tst.w	r0, #4
    a60c:	bf14      	ite	ne
    a60e:	2011      	movne	r0, #17
    a610:	200d      	moveq	r0, #13
    a612:	2101      	movs	r1, #1
    a614:	f000 fdd6 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a618:	68e0      	ldr	r0, [r4, #12]
    a61a:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a61e:	bd70      	pop	{r4, r5, r6, pc}
    a620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a624:	2101      	movs	r1, #1
    a626:	2006      	movs	r0, #6
    a628:	f000 bdcc 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a62c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a630:	2921      	cmp	r1, #33	; 0x21
    a632:	d10b      	bne.n	a64c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a634:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a638:	2902      	cmp	r1, #2
    a63a:	d01d      	beq.n	a678 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a63c:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a640:	2901      	cmp	r1, #1
    a642:	bf04      	itt	eq
    a644:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    a648:	2800      	cmpeq	r0, #0
    a64a:	d015      	beq.n	a678 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a64c:	68e0      	ldr	r0, [r4, #12]
    a64e:	f04f 0301 	mov.w	r3, #1
    a652:	f04f 0100 	mov.w	r1, #0
    a656:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a65a:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a65e:	f005 fea3 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a662:	b1c8      	cbz	r0, a698 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a664:	68e0      	ldr	r0, [r4, #12]
    a666:	2301      	movs	r3, #1
    a668:	2104      	movs	r1, #4
    a66a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a66e:	3078      	adds	r0, #120	; 0x78
    a670:	f005 fe9a 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a674:	b130      	cbz	r0, a684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2ec>
    a676:	e00f      	b.n	a698 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a67c:	2101      	movs	r1, #1
    a67e:	2017      	movs	r0, #23
    a680:	f000 bda0 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a684:	68e0      	ldr	r0, [r4, #12]
    a686:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    a68a:	b128      	cbz	r0, a698 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a690:	2100      	movs	r1, #0
    a692:	2012      	movs	r0, #18
    a694:	f000 bd96 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a698:	68e0      	ldr	r0, [r4, #12]
    a69a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a69e:	2a0a      	cmp	r2, #10
    a6a0:	d015      	beq.n	a6ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x336>
    a6a2:	2e00      	cmp	r6, #0
    a6a4:	bf18      	it	ne
    a6a6:	bd70      	popne	{r4, r5, r6, pc}
    a6a8:	2301      	movs	r3, #1
    a6aa:	2100      	movs	r1, #0
    a6ac:	3078      	adds	r0, #120	; 0x78
    a6ae:	f005 fe7b 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6b2:	2800      	cmp	r0, #0
    a6b4:	d07e      	beq.n	a7b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a6b6:	68e0      	ldr	r0, [r4, #12]
    a6b8:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    a6bc:	b189      	cbz	r1, a6e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x34a>
    a6be:	2100      	movs	r1, #0
    a6c0:	200e      	movs	r0, #14
    a6c2:	f000 fd7f 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a6c6:	68e0      	ldr	r0, [r4, #12]
    a6c8:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    a6cc:	bd70      	pop	{r4, r5, r6, pc}
    a6ce:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a6d2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a6da:	2100      	movs	r1, #0
    a6dc:	2007      	movs	r0, #7
    a6de:	f000 bd71 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a6e2:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a6e6:	b121      	cbz	r1, a6f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x35a>
    a6e8:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a6ec:	f011 0f03 	tst.w	r1, #3
    a6f0:	d00e      	beq.n	a710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x378>
    a6f2:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a6f6:	b111      	cbz	r1, a6fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x366>
    a6f8:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a6fc:	b1c1      	cbz	r1, a730 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x398>
    a6fe:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a702:	2901      	cmp	r1, #1
    a704:	bf04      	itt	eq
    a706:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    a70a:	2900      	cmpeq	r1, #0
    a70c:	d17c      	bne.n	a808 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a70e:	e02f      	b.n	a770 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d8>
    a710:	f04f 0100 	mov.w	r1, #0
    a714:	f04f 000c 	mov.w	r0, #12
    a718:	f000 fd54 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a71c:	68e0      	ldr	r0, [r4, #12]
    a71e:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a722:	f041 0101 	orr.w	r1, r1, #1
    a726:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a72a:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a72e:	bd70      	pop	{r4, r5, r6, pc}
    a730:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a734:	2924      	cmp	r1, #36	; 0x24
    a736:	bf1d      	ittte	ne
    a738:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a73c:	2924      	cmpne	r1, #36	; 0x24
    a73e:	2300      	movne	r3, #0
    a740:	2301      	moveq	r3, #1
    a742:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a746:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a74a:	f006 fad1 	bl	10cf0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a74e:	68e0      	ldr	r0, [r4, #12]
    a750:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a754:	2100      	movs	r1, #0
    a756:	2014      	movs	r0, #20
    a758:	f000 fd34 	bl	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a75c:	68e0      	ldr	r0, [r4, #12]
    a75e:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a762:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a766:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a76a:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a76e:	bd70      	pop	{r4, r5, r6, pc}
    a770:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a774:	2301      	movs	r3, #1
    a776:	210b      	movs	r1, #11
    a778:	3078      	adds	r0, #120	; 0x78
    a77a:	f005 fe15 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a77e:	b9c8      	cbnz	r0, a7b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a780:	68e0      	ldr	r0, [r4, #12]
    a782:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    a786:	2901      	cmp	r1, #1
    a788:	bf18      	it	ne
    a78a:	2902      	cmpne	r1, #2
    a78c:	d006      	beq.n	a79c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x404>
    a78e:	bf00      	nop
    a790:	f240 218f 	movw	r1, #655	; 0x28f
    a794:	f04f 0006 	mov.w	r0, #6
    a798:	f7f9 fc78 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a79c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a7a0:	2a01      	cmp	r2, #1
    a7a2:	bf18      	it	ne
    a7a4:	2a02      	cmpne	r2, #2
    a7a6:	d1f3      	bne.n	a790 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3f8>
    a7a8:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    a7ac:	2901      	cmp	r1, #1
    a7ae:	d006      	beq.n	a7be <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x426>
    a7b0:	2902      	cmp	r1, #2
    a7b2:	e000      	b.n	a7b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41e>
    a7b4:	e028      	b.n	a808 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a7b6:	bf08      	it	eq
    a7b8:	2b02      	cmpeq	r3, #2
    a7ba:	d002      	beq.n	a7c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42a>
    a7bc:	e00e      	b.n	a7dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a7be:	2b01      	cmp	r3, #1
    a7c0:	d10c      	bne.n	a7dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a7c2:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    a7c6:	2a01      	cmp	r2, #1
    a7c8:	d006      	beq.n	a7d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x440>
    a7ca:	2a02      	cmp	r2, #2
    a7cc:	bf08      	it	eq
    a7ce:	2902      	cmpeq	r1, #2
    a7d0:	d00d      	beq.n	a7ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a7d2:	e003      	b.n	a7dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a7d4:	20000140 	.word	0x20000140
    a7d8:	2901      	cmp	r1, #1
    a7da:	d008      	beq.n	a7ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a7dc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7e0:	2301      	movs	r3, #1
    a7e2:	2103      	movs	r1, #3
    a7e4:	3078      	adds	r0, #120	; 0x78
    a7e6:	f005 fddf 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7ea:	b968      	cbnz	r0, a808 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a7ec:	e003      	b.n	a7f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45e>
    a7ee:	2000      	movs	r0, #0
    a7f0:	f000 fd5e 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a7f4:	e008      	b.n	a808 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a7f6:	68e0      	ldr	r0, [r4, #12]
    a7f8:	2301      	movs	r3, #1
    a7fa:	2102      	movs	r1, #2
    a7fc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a800:	3078      	adds	r0, #120	; 0x78
    a802:	f005 fdd1 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a806:	b1b0      	cbz	r0, a836 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x49e>
    a808:	68e0      	ldr	r0, [r4, #12]
    a80a:	2301      	movs	r3, #1
    a80c:	2100      	movs	r1, #0
    a80e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a812:	3078      	adds	r0, #120	; 0x78
    a814:	f005 fdc8 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a818:	2800      	cmp	r0, #0
    a81a:	bf08      	it	eq
    a81c:	bd70      	popeq	{r4, r5, r6, pc}
    a81e:	68e0      	ldr	r0, [r4, #12]
    a820:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    a824:	2800      	cmp	r0, #0
    a826:	bf08      	it	eq
    a828:	bd70      	popeq	{r4, r5, r6, pc}
    a82a:	2100      	movs	r1, #0
    a82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a830:	20ff      	movs	r0, #255	; 0xff
    a832:	f000 bcc7 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a83a:	2100      	movs	r1, #0
    a83c:	2016      	movs	r0, #22
    a83e:	f000 bcc1 	b.w	b1c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a842:	0000      	movs	r0, r0
    a844:	b570      	push	{r4, r5, r6, lr}
    a846:	b084      	sub	sp, #16
    a848:	4605      	mov	r5, r0
    a84a:	4668      	mov	r0, sp
    a84c:	f7fa fb08 	bl	4e60 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a850:	b318      	cbz	r0, a89a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a852:	2222      	movs	r2, #34	; 0x22
    a854:	2100      	movs	r1, #0
    a856:	9800      	ldr	r0, [sp, #0]
    a858:	f004 fb6a 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a85c:	2103      	movs	r1, #3
    a85e:	9800      	ldr	r0, [sp, #0]
    a860:	f006 f8c9 	bl	109f6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a864:	9800      	ldr	r0, [sp, #0]
    a866:	7801      	ldrb	r1, [r0, #0]
    a868:	f021 0110 	bic.w	r1, r1, #16
    a86c:	7001      	strb	r1, [r0, #0]
    a86e:	4629      	mov	r1, r5
    a870:	f7fc f9a8 	bl	6bc4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a874:	2200      	movs	r2, #0
    a876:	4c63      	ldr	r4, [pc, #396]	; (aa04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x66c>)
    a878:	f644 162f 	movw	r6, #18735	; 0x492f
    a87c:	2d0e      	cmp	r5, #14
    a87e:	d06e      	beq.n	a95e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c6>
    a880:	dc10      	bgt.n	a8a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50c>
    a882:	f1a5 0002 	sub.w	r0, r5, #2
    a886:	280c      	cmp	r0, #12
    a888:	d21e      	bcs.n	a8c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a88a:	e8df f000 	tbb	[pc, r0]
    a88e:	1d22      	.short	0x1d22
    a890:	22b0b048 	.word	0x22b0b048
    a894:	b01d551d 	.word	0xb01d551d
    a898:	3b27      	.short	0x3b27
    a89a:	f640 1164 	movw	r1, #2404	; 0x964
    a89e:	2031      	movs	r0, #49	; 0x31
    a8a0:	f7f9 fbf4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a4:	2d15      	cmp	r5, #21
    a8a6:	d05b      	beq.n	a960 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a8a8:	dc08      	bgt.n	a8bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x524>
    a8aa:	2d11      	cmp	r5, #17
    a8ac:	d021      	beq.n	a8f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55a>
    a8ae:	2d12      	cmp	r5, #18
    a8b0:	bf18      	it	ne
    a8b2:	2d13      	cmpne	r5, #19
    a8b4:	d03f      	beq.n	a936 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59e>
    a8b6:	2d14      	cmp	r5, #20
    a8b8:	d052      	beq.n	a960 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a8ba:	e005      	b.n	a8c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a8bc:	2d16      	cmp	r5, #22
    a8be:	d025      	beq.n	a90c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
    a8c0:	2d17      	cmp	r5, #23
    a8c2:	d066      	beq.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5fa>
    a8c4:	2dff      	cmp	r5, #255	; 0xff
    a8c6:	d076      	beq.n	a9b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
    a8c8:	f640 11d6 	movw	r1, #2518	; 0x9d6
    a8cc:	2031      	movs	r0, #49	; 0x31
    a8ce:	f7f9 fbdd 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8d2:	68e1      	ldr	r1, [r4, #12]
    a8d4:	9800      	ldr	r0, [sp, #0]
    a8d6:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    a8da:	e015      	b.n	a908 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x570>
    a8dc:	9800      	ldr	r0, [sp, #0]
    a8de:	210b      	movs	r1, #11
    a8e0:	7101      	strb	r1, [r0, #4]
    a8e2:	2159      	movs	r1, #89	; 0x59
    a8e4:	7141      	strb	r1, [r0, #5]
    a8e6:	7182      	strb	r2, [r0, #6]
    a8e8:	2137      	movs	r1, #55	; 0x37
    a8ea:	71c1      	strb	r1, [r0, #7]
    a8ec:	2111      	movs	r1, #17
    a8ee:	7201      	strb	r1, [r0, #8]
    a8f0:	e07d      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a8f2:	2103      	movs	r1, #3
    a8f4:	9800      	ldr	r0, [sp, #0]
    a8f6:	f006 f85a 	bl	109ae <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a8fa:	2106      	movs	r1, #6
    a8fc:	9800      	ldr	r0, [sp, #0]
    a8fe:	f006 f858 	bl	109b2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a902:	e074      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a904:	9800      	ldr	r0, [sp, #0]
    a906:	2106      	movs	r1, #6
    a908:	7101      	strb	r1, [r0, #4]
    a90a:	e070      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a90c:	68e1      	ldr	r1, [r4, #12]
    a90e:	9800      	ldr	r0, [sp, #0]
    a910:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    a914:	7102      	strb	r2, [r0, #4]
    a916:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    a91a:	7141      	strb	r1, [r0, #5]
    a91c:	e067      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a91e:	68e0      	ldr	r0, [r4, #12]
    a920:	f500 7192 	add.w	r1, r0, #292	; 0x124
    a924:	9800      	ldr	r0, [sp, #0]
    a926:	f006 f857 	bl	109d8 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a92a:	68e0      	ldr	r0, [r4, #12]
    a92c:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    a930:	9800      	ldr	r0, [sp, #0]
    a932:	f006 f84e 	bl	109d2 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a936:	e05a      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a938:	9202      	str	r2, [sp, #8]
    a93a:	9203      	str	r2, [sp, #12]
    a93c:	f002 fcf2 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a940:	68e1      	ldr	r1, [r4, #12]
    a942:	4030      	ands	r0, r6
    a944:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a948:	4001      	ands	r1, r0
    a94a:	f88d 1008 	strb.w	r1, [sp, #8]
    a94e:	0a00      	lsrs	r0, r0, #8
    a950:	f88d 0009 	strb.w	r0, [sp, #9]
    a954:	a902      	add	r1, sp, #8
    a956:	9800      	ldr	r0, [sp, #0]
    a958:	f006 f848 	bl	109ec <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a95c:	e047      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a95e:	e02b      	b.n	a9b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x620>
    a960:	68e0      	ldr	r0, [r4, #12]
    a962:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a966:	9800      	ldr	r0, [sp, #0]
    a968:	f006 f84d 	bl	10a06 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a96c:	68e0      	ldr	r0, [r4, #12]
    a96e:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    a972:	9800      	ldr	r0, [sp, #0]
    a974:	f006 f84b 	bl	10a0e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a978:	68e0      	ldr	r0, [r4, #12]
    a97a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    a97e:	9800      	ldr	r0, [sp, #0]
    a980:	f006 f849 	bl	10a16 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a984:	68e0      	ldr	r0, [r4, #12]
    a986:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    a98a:	9800      	ldr	r0, [sp, #0]
    a98c:	f006 f847 	bl	10a1e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a990:	e02d      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a992:	68e0      	ldr	r0, [r4, #12]
    a994:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a998:	2901      	cmp	r1, #1
    a99a:	9900      	ldr	r1, [sp, #0]
    a99c:	bf14      	ite	ne
    a99e:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    a9a2:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    a9a6:	710a      	strb	r2, [r1, #4]
    a9a8:	bf14      	ite	ne
    a9aa:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    a9ae:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    a9b2:	7148      	strb	r0, [r1, #5]
    a9b4:	e01b      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a9b6:	e012      	b.n	a9de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x646>
    a9b8:	9202      	str	r2, [sp, #8]
    a9ba:	9203      	str	r2, [sp, #12]
    a9bc:	f002 fcb2 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a9c0:	68e1      	ldr	r1, [r4, #12]
    a9c2:	4030      	ands	r0, r6
    a9c4:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a9c8:	4001      	ands	r1, r0
    a9ca:	f88d 1008 	strb.w	r1, [sp, #8]
    a9ce:	0a00      	lsrs	r0, r0, #8
    a9d0:	f88d 0009 	strb.w	r0, [sp, #9]
    a9d4:	a902      	add	r1, sp, #8
    a9d6:	9800      	ldr	r0, [sp, #0]
    a9d8:	f006 f803 	bl	109e2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a9dc:	e007      	b.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a9de:	68e0      	ldr	r0, [r4, #12]
    a9e0:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    a9e4:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    a9e8:	9800      	ldr	r0, [sp, #0]
    a9ea:	f005 ffe4 	bl	109b6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a9ee:	f7fa fa0f 	bl	4e10 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a9f2:	2800      	cmp	r0, #0
    a9f4:	bf1c      	itt	ne
    a9f6:	b004      	addne	sp, #16
    a9f8:	bd70      	popne	{r4, r5, r6, pc}
    a9fa:	f640 11da 	movw	r1, #2522	; 0x9da
    a9fe:	2031      	movs	r0, #49	; 0x31
    aa00:	f7f9 fb44 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa04:	20000140 	.word	0x20000140
    aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa0c:	4cff      	ldr	r4, [pc, #1020]	; (ae0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>)
    aa0e:	4682      	mov	sl, r0
    aa10:	b087      	sub	sp, #28
    aa12:	68e0      	ldr	r0, [r4, #12]
    aa14:	460d      	mov	r5, r1
    aa16:	8800      	ldrh	r0, [r0, #0]
    aa18:	f7f9 ff06 	bl	4828 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    aa1c:	9005      	str	r0, [sp, #20]
    aa1e:	b178      	cbz	r0, aa40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a8>
    aa20:	78e0      	ldrb	r0, [r4, #3]
    aa22:	4328      	orrs	r0, r5
    aa24:	70e0      	strb	r0, [r4, #3]
    aa26:	88e0      	ldrh	r0, [r4, #6]
    aa28:	f04f 0500 	mov.w	r5, #0
    aa2c:	f410 7f80 	tst.w	r0, #256	; 0x100
    aa30:	68e0      	ldr	r0, [r4, #12]
    aa32:	bf1c      	itt	ne
    aa34:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    aa38:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    aa3c:	d005      	beq.n	aa4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b2>
    aa3e:	e009      	b.n	aa54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6bc>
    aa40:	f640 516c 	movw	r1, #3436	; 0xd6c
    aa44:	2031      	movs	r0, #49	; 0x31
    aa46:	f7f9 fb21 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa4a:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    aa4e:	1c49      	adds	r1, r1, #1
    aa50:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    aa54:	68e0      	ldr	r0, [r4, #12]
    aa56:	2701      	movs	r7, #1
    aa58:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aa5c:	b939      	cbnz	r1, aa6e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    aa5e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa62:	2301      	movs	r3, #1
    aa64:	2106      	movs	r1, #6
    aa66:	3078      	adds	r0, #120	; 0x78
    aa68:	f005 fc9e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa6c:	b340      	cbz	r0, aac0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aa6e:	88e0      	ldrh	r0, [r4, #6]
    aa70:	f410 6f00 	tst.w	r0, #2048	; 0x800
    aa74:	d007      	beq.n	aa86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ee>
    aa76:	68e0      	ldr	r0, [r4, #12]
    aa78:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aa7c:	2900      	cmp	r1, #0
    aa7e:	bf18      	it	ne
    aa80:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    aa84:	d11c      	bne.n	aac0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aa86:	68e0      	ldr	r0, [r4, #12]
    aa88:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    aa8c:	1c49      	adds	r1, r1, #1
    aa8e:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    aa92:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    aa96:	428a      	cmp	r2, r1
    aa98:	bf2c      	ite	cs
    aa9a:	1a53      	subcs	r3, r2, r1
    aa9c:	2300      	movcc	r3, #0
    aa9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    aaa2:	f10c 0c05 	add.w	ip, ip, #5
    aaa6:	4563      	cmp	r3, ip
    aaa8:	bf98      	it	ls
    aaaa:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    aaae:	4291      	cmp	r1, r2
    aab0:	d306      	bcc.n	aac0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aab2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    aab6:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    aaba:	7960      	ldrb	r0, [r4, #5]
    aabc:	f7f9 f8da 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aac0:	88e0      	ldrh	r0, [r4, #6]
    aac2:	f04f 0602 	mov.w	r6, #2
    aac6:	f410 7f40 	tst.w	r0, #768	; 0x300
    aaca:	d011      	beq.n	aaf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aacc:	68e0      	ldr	r0, [r4, #12]
    aace:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    aad2:	b111      	cbz	r1, aada <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    aad4:	2903      	cmp	r1, #3
    aad6:	d006      	beq.n	aae6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74e>
    aad8:	e00a      	b.n	aaf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aada:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    aade:	2101      	movs	r1, #1
    aae0:	f7fe fb46 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aae4:	e004      	b.n	aaf0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aae6:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    aaea:	2101      	movs	r1, #1
    aaec:	f7fe fb40 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aaf0:	68e0      	ldr	r0, [r4, #12]
    aaf2:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    aaf6:	2901      	cmp	r1, #1
    aaf8:	d105      	bne.n	ab06 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x76e>
    aafa:	88e1      	ldrh	r1, [r4, #6]
    aafc:	f411 6f80 	tst.w	r1, #1024	; 0x400
    ab00:	bf18      	it	ne
    ab02:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    ab06:	f04f 0808 	mov.w	r8, #8
    ab0a:	f1ba 0f00 	cmp.w	sl, #0
    ab0e:	f040 8295 	bne.w	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    ab12:	88e1      	ldrh	r1, [r4, #6]
    ab14:	f011 0f40 	tst.w	r1, #64	; 0x40
    ab18:	bf18      	it	ne
    ab1a:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    ab1e:	d104      	bne.n	ab2a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x792>
    ab20:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    ab24:	1c52      	adds	r2, r2, #1
    ab26:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    ab2a:	78e2      	ldrb	r2, [r4, #3]
    ab2c:	2a00      	cmp	r2, #0
    ab2e:	d178      	bne.n	ac22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88a>
    ab30:	f011 0f08 	tst.w	r1, #8
    ab34:	f04f 0b20 	mov.w	fp, #32
    ab38:	d045      	beq.n	abc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x82e>
    ab3a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    ab3e:	29fe      	cmp	r1, #254	; 0xfe
    ab40:	d00d      	beq.n	ab5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7c6>
    ab42:	21fe      	movs	r1, #254	; 0xfe
    ab44:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    ab48:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ab4c:	2919      	cmp	r1, #25
    ab4e:	d00b      	beq.n	ab68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d0>
    ab50:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    ab54:	291f      	cmp	r1, #31
    ab56:	d019      	beq.n	ab8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7f4>
    ab58:	2927      	cmp	r1, #39	; 0x27
    ab5a:	d026      	beq.n	abaa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x812>
    ab5c:	e02b      	b.n	abb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    ab5e:	f240 7144 	movw	r1, #1860	; 0x744
    ab62:	2031      	movs	r0, #49	; 0x31
    ab64:	f7f9 fa92 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab68:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    ab6c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ab70:	1e49      	subs	r1, r1, #1
    ab72:	b249      	sxtb	r1, r1
    ab74:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ab78:	2900      	cmp	r1, #0
    ab7a:	bfa8      	it	ge
    ab7c:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    ab80:	dae6      	bge.n	ab50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    ab82:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ab86:	2031      	movs	r0, #49	; 0x31
    ab88:	f7f9 fa80 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab8c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ab90:	f005 fc76 	bl	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    ab94:	2800      	cmp	r0, #0
    ab96:	bf1d      	ittte	ne
    ab98:	2026      	movne	r0, #38	; 0x26
    ab9a:	68e1      	ldrne	r1, [r4, #12]
    ab9c:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    aba0:	68e0      	ldreq	r0, [r4, #12]
    aba2:	bf08      	it	eq
    aba4:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    aba8:	e005      	b.n	abb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    abaa:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    abae:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    abb2:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    abb6:	68e0      	ldr	r0, [r4, #12]
    abb8:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    abbc:	2908      	cmp	r1, #8
    abbe:	bf04      	itt	eq
    abc0:	7026      	strbeq	r6, [r4, #0]
    abc2:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    abc6:	2000      	movs	r0, #0
    abc8:	79a1      	ldrb	r1, [r4, #6]
    abca:	f011 0f01 	tst.w	r1, #1
    abce:	d060      	beq.n	ac92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    abd0:	6960      	ldr	r0, [r4, #20]
    abd2:	2301      	movs	r3, #1
    abd4:	2105      	movs	r1, #5
    abd6:	f890 9003 	ldrb.w	r9, [r0, #3]
    abda:	68e0      	ldr	r0, [r4, #12]
    abdc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abe0:	3078      	adds	r0, #120	; 0x78
    abe2:	f005 fbe1 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abe6:	b160      	cbz	r0, ac02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x86a>
    abe8:	f1a9 0002 	sub.w	r0, r9, #2
    abec:	280a      	cmp	r0, #10
    abee:	d206      	bcs.n	abfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x866>
    abf0:	e8df f000 	tbb	[pc, r0]
    abf4:	05050707 	.word	0x05050707
    abf8:	05050707 	.word	0x05050707
    abfc:	0707      	.short	0x0707
    abfe:	4646      	mov	r6, r8
    ac00:	e048      	b.n	ac94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    ac02:	6960      	ldr	r0, [r4, #20]
    ac04:	f7fb ffb0 	bl	6b68 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    ac08:	b160      	cbz	r0, ac24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88c>
    ac0a:	6960      	ldr	r0, [r4, #20]
    ac0c:	f890 9003 	ldrb.w	r9, [r0, #3]
    ac10:	f1b9 0f00 	cmp.w	r9, #0
    ac14:	bf1c      	itt	ne
    ac16:	f1b9 0f01 	cmpne.w	r9, #1
    ac1a:	f1b9 0f16 	cmpne.w	r9, #22
    ac1e:	d005      	beq.n	ac2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x894>
    ac20:	e01a      	b.n	ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    ac22:	e069      	b.n	acf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    ac24:	f000 fc8e 	bl	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    ac28:	4606      	mov	r6, r0
    ac2a:	e033      	b.n	ac94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    ac2c:	68e0      	ldr	r0, [r4, #12]
    ac2e:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    ac32:	f005 fc25 	bl	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    ac36:	b178      	cbz	r0, ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    ac38:	68e1      	ldr	r1, [r4, #12]
    ac3a:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    ac3e:	281f      	cmp	r0, #31
    ac40:	d00a      	beq.n	ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    ac42:	2820      	cmp	r0, #32
    ac44:	bf04      	itt	eq
    ac46:	2026      	moveq	r0, #38	; 0x26
    ac48:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    ac4c:	d004      	beq.n	ac58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    ac4e:	f1b9 0f16 	cmp.w	r9, #22
    ac52:	bf08      	it	eq
    ac54:	465e      	moveq	r6, fp
    ac56:	e01d      	b.n	ac94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    ac58:	f1b9 0f19 	cmp.w	r9, #25
    ac5c:	d205      	bcs.n	ac6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    ac5e:	486c      	ldr	r0, [pc, #432]	; (ae10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa78>)
    ac60:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    ac64:	b108      	cbz	r0, ac6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    ac66:	4780      	blx	r0
    ac68:	e00b      	b.n	ac82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    ac6a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ac6e:	d106      	bne.n	ac7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    ac70:	69a0      	ldr	r0, [r4, #24]
    ac72:	b120      	cbz	r0, ac7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    ac74:	68e0      	ldr	r0, [r4, #12]
    ac76:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    ac7a:	2000      	movs	r0, #0
    ac7c:	e001      	b.n	ac82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    ac7e:	f000 fc61 	bl	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    ac82:	68e1      	ldr	r1, [r4, #12]
    ac84:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    ac88:	1c52      	adds	r2, r2, #1
    ac8a:	f143 0300 	adc.w	r3, r3, #0
    ac8e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ac92:	4606      	mov	r6, r0
    ac94:	70e6      	strb	r6, [r4, #3]
    ac96:	bb7e      	cbnz	r6, acf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    ac98:	88e0      	ldrh	r0, [r4, #6]
    ac9a:	f010 0f04 	tst.w	r0, #4
    ac9e:	d005      	beq.n	acac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x914>
    aca0:	68e1      	ldr	r1, [r4, #12]
    aca2:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    aca6:	2907      	cmp	r1, #7
    aca8:	bf08      	it	eq
    acaa:	7027      	strbeq	r7, [r4, #0]
    acac:	f010 0f02 	tst.w	r0, #2
    acb0:	d016      	beq.n	ace0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    acb2:	6920      	ldr	r0, [r4, #16]
    acb4:	78c1      	ldrb	r1, [r0, #3]
    acb6:	2919      	cmp	r1, #25
    acb8:	d205      	bcs.n	acc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    acba:	4856      	ldr	r0, [pc, #344]	; (ae14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa7c>)
    acbc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    acc0:	b108      	cbz	r0, acc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    acc2:	4780      	blx	r0
    acc4:	e00c      	b.n	ace0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    acc6:	29ff      	cmp	r1, #255	; 0xff
    acc8:	d004      	beq.n	acd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x93c>
    acca:	f240 713a 	movw	r1, #1850	; 0x73a
    acce:	2031      	movs	r0, #49	; 0x31
    acd0:	f7f9 f9dc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acd4:	68e0      	ldr	r0, [r4, #12]
    acd6:	2127      	movs	r1, #39	; 0x27
    acd8:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    acdc:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    ace0:	79a0      	ldrb	r0, [r4, #6]
    ace2:	f010 0f10 	tst.w	r0, #16
    ace6:	d007      	beq.n	acf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    ace8:	68e0      	ldr	r0, [r4, #12]
    acea:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acee:	290b      	cmp	r1, #11
    acf0:	bf04      	itt	eq
    acf2:	210c      	moveq	r1, #12
    acf4:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    acf8:	7920      	ldrb	r0, [r4, #4]
    acfa:	f010 0f08 	tst.w	r0, #8
    acfe:	d011      	beq.n	ad24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    ad00:	68e0      	ldr	r0, [r4, #12]
    ad02:	2301      	movs	r3, #1
    ad04:	2105      	movs	r1, #5
    ad06:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad0a:	3078      	adds	r0, #120	; 0x78
    ad0c:	f005 fb4c 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad10:	b128      	cbz	r0, ad1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x986>
    ad12:	f884 8003 	strb.w	r8, [r4, #3]
    ad16:	68e0      	ldr	r0, [r4, #12]
    ad18:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    ad1c:	e002      	b.n	ad24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    ad1e:	2000      	movs	r0, #0
    ad20:	f7fa fac6 	bl	52b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    ad24:	69a0      	ldr	r0, [r4, #24]
    ad26:	b3e8      	cbz	r0, ada4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0c>
    ad28:	9500      	str	r5, [sp, #0]
    ad2a:	9501      	str	r5, [sp, #4]
    ad2c:	9502      	str	r5, [sp, #8]
    ad2e:	9503      	str	r5, [sp, #12]
    ad30:	9504      	str	r5, [sp, #16]
    ad32:	68e0      	ldr	r0, [r4, #12]
    ad34:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    ad38:	f007 faf7 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ad3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ad40:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    ad44:	fbb0 f6f1 	udiv	r6, r0, r1
    ad48:	68e0      	ldr	r0, [r4, #12]
    ad4a:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    ad4e:	f007 fade 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ad52:	4430      	add	r0, r6
    ad54:	f8ad 0006 	strh.w	r0, [sp, #6]
    ad58:	68e0      	ldr	r0, [r4, #12]
    ad5a:	8801      	ldrh	r1, [r0, #0]
    ad5c:	f8ad 1000 	strh.w	r1, [sp]
    ad60:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    ad64:	f8ad 1004 	strh.w	r1, [sp, #4]
    ad68:	6840      	ldr	r0, [r0, #4]
    ad6a:	f005 faf6 	bl	1035a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ad6e:	f8ad 0002 	strh.w	r0, [sp, #2]
    ad72:	68e0      	ldr	r0, [r4, #12]
    ad74:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    ad78:	b130      	cbz	r0, ad88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    ad7a:	6960      	ldr	r0, [r4, #20]
    ad7c:	1cc1      	adds	r1, r0, #3
    ad7e:	9103      	str	r1, [sp, #12]
    ad80:	f005 fdca 	bl	10918 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    ad84:	f88d 0010 	strb.w	r0, [sp, #16]
    ad88:	68e0      	ldr	r0, [r4, #12]
    ad8a:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    ad8e:	f88d 0008 	strb.w	r0, [sp, #8]
    ad92:	69a1      	ldr	r1, [r4, #24]
    ad94:	4668      	mov	r0, sp
    ad96:	4788      	blx	r1
    ad98:	68e0      	ldr	r0, [r4, #12]
    ad9a:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    ad9e:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    ada2:	e000      	b.n	ada6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0e>
    ada4:	e021      	b.n	adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ada6:	9903      	ldr	r1, [sp, #12]
    ada8:	b1f9      	cbz	r1, adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    adaa:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    adae:	b9e1      	cbnz	r1, adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    adb0:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    adb4:	2927      	cmp	r1, #39	; 0x27
    adb6:	d018      	beq.n	adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    adb8:	f89d 1010 	ldrb.w	r1, [sp, #16]
    adbc:	9a03      	ldr	r2, [sp, #12]
    adbe:	b1a1      	cbz	r1, adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    adc0:	7813      	ldrb	r3, [r2, #0]
    adc2:	2bff      	cmp	r3, #255	; 0xff
    adc4:	d006      	beq.n	add4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa3c>
    adc6:	2b07      	cmp	r3, #7
    adc8:	bf02      	ittt	eq
    adca:	2902      	cmpeq	r1, #2
    adcc:	7851      	ldrbeq	r1, [r2, #1]
    adce:	29ff      	cmpeq	r1, #255	; 0xff
    add0:	d002      	beq.n	add8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
    add2:	e00a      	b.n	adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    add4:	291b      	cmp	r1, #27
    add6:	d808      	bhi.n	adea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    add8:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    addc:	9903      	ldr	r1, [sp, #12]
    adde:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    ade2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ade6:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    adea:	f7ff fb01 	bl	a3f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    adee:	f7fa f8ff 	bl	4ff0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    adf2:	b138      	cbz	r0, ae04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6c>
    adf4:	68e0      	ldr	r0, [r4, #12]
    adf6:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    adfa:	2900      	cmp	r1, #0
    adfc:	bf08      	it	eq
    adfe:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    ae02:	d00c      	beq.n	ae1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa86>
    ae04:	68e0      	ldr	r0, [r4, #12]
    ae06:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    ae0a:	e005      	b.n	ae18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    ae0c:	20000140 	.word	0x20000140
    ae10:	20000160 	.word	0x20000160
    ae14:	200001c4 	.word	0x200001c4
    ae18:	1c49      	adds	r1, r1, #1
    ae1a:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    ae1e:	f7fa f8e1 	bl	4fe4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    ae22:	b140      	cbz	r0, ae36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    ae24:	68e1      	ldr	r1, [r4, #12]
    ae26:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    ae2a:	2802      	cmp	r0, #2
    ae2c:	bf9c      	itt	ls
    ae2e:	1c40      	addls	r0, r0, #1
    ae30:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    ae34:	d804      	bhi.n	ae40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa8>
    ae36:	68e0      	ldr	r0, [r4, #12]
    ae38:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    ae3c:	2802      	cmp	r0, #2
    ae3e:	d906      	bls.n	ae4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xab6>
    ae40:	68e0      	ldr	r0, [r4, #12]
    ae42:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    ae46:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    ae4a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    ae4e:	68e0      	ldr	r0, [r4, #12]
    ae50:	2301      	movs	r3, #1
    ae52:	2100      	movs	r1, #0
    ae54:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae58:	3078      	adds	r0, #120	; 0x78
    ae5a:	f005 faa5 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae5e:	b920      	cbnz	r0, ae6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad2>
    ae60:	68e0      	ldr	r0, [r4, #12]
    ae62:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ae66:	280c      	cmp	r0, #12
    ae68:	d168      	bne.n	af3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae6a:	68e0      	ldr	r0, [r4, #12]
    ae6c:	2301      	movs	r3, #1
    ae6e:	2100      	movs	r1, #0
    ae70:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    ae74:	3078      	adds	r0, #120	; 0x78
    ae76:	f005 fa97 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae7a:	b3e0      	cbz	r0, aef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    ae7c:	68e0      	ldr	r0, [r4, #12]
    ae7e:	2301      	movs	r3, #1
    ae80:	2100      	movs	r1, #0
    ae82:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ae86:	3078      	adds	r0, #120	; 0x78
    ae88:	f005 fa8e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae8c:	b398      	cbz	r0, aef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    ae8e:	68e0      	ldr	r0, [r4, #12]
    ae90:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    ae94:	2902      	cmp	r1, #2
    ae96:	bf04      	itt	eq
    ae98:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    ae9c:	2800      	cmpeq	r0, #0
    ae9e:	d14d      	bne.n	af3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    aea0:	9805      	ldr	r0, [sp, #20]
    aea2:	f004 fda5 	bl	f9f0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    aea6:	b330      	cbz	r0, aef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    aea8:	68e1      	ldr	r1, [r4, #12]
    aeaa:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    aeae:	28fe      	cmp	r0, #254	; 0xfe
    aeb0:	d144      	bne.n	af3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    aeb2:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    aeb6:	2801      	cmp	r0, #1
    aeb8:	d940      	bls.n	af3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    aeba:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    aebe:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    aec2:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    aec6:	1e83      	subs	r3, r0, #2
    aec8:	429a      	cmp	r2, r3
    aeca:	bfaf      	iteee	ge
    aecc:	2001      	movge	r0, #1
    aece:	1a80      	sublt	r0, r0, r2
    aed0:	1e40      	sublt	r0, r0, #1
    aed2:	b280      	uxthlt	r0, r0
    aed4:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    aed8:	8923      	ldrh	r3, [r4, #8]
    aeda:	429a      	cmp	r2, r3
    aedc:	bf2f      	iteee	cs
    aede:	2201      	movcs	r2, #1
    aee0:	1a9a      	subcc	r2, r3, r2
    aee2:	1c52      	addcc	r2, r2, #1
    aee4:	b292      	uxthcc	r2, r2
    aee6:	4290      	cmp	r0, r2
    aee8:	bf88      	it	hi
    aeea:	4610      	movhi	r0, r2
    aeec:	2801      	cmp	r0, #1
    aeee:	bf08      	it	eq
    aef0:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    aef4:	e000      	b.n	aef8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
    aef6:	e021      	b.n	af3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    aef8:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    aefc:	b96a      	cbnz	r2, af1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aefe:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    af00:	b15a      	cbz	r2, af1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    af02:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    af06:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    af0a:	1ad2      	subs	r2, r2, r3
    af0c:	b212      	sxth	r2, r2
    af0e:	2a00      	cmp	r2, #0
    af10:	dd03      	ble.n	af1a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    af12:	4282      	cmp	r2, r0
    af14:	bfd8      	it	le
    af16:	4610      	movle	r0, r2
    af18:	b280      	uxth	r0, r0
    af1a:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    af1e:	b18a      	cbz	r2, af44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    af20:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    af24:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    af28:	428a      	cmp	r2, r1
    af2a:	bf2f      	iteee	cs
    af2c:	2101      	movcs	r1, #1
    af2e:	1a89      	subcc	r1, r1, r2
    af30:	1c49      	addcc	r1, r1, #1
    af32:	b289      	uxthcc	r1, r1
    af34:	4288      	cmp	r0, r1
    af36:	bf88      	it	hi
    af38:	4608      	movhi	r0, r1
    af3a:	e003      	b.n	af44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    af3c:	68e1      	ldr	r1, [r4, #12]
    af3e:	2001      	movs	r0, #1
    af40:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    af44:	78a1      	ldrb	r1, [r4, #2]
    af46:	2900      	cmp	r1, #0
    af48:	bf18      	it	ne
    af4a:	2801      	cmpne	r0, #1
    af4c:	bf9c      	itt	ls
    af4e:	68e1      	ldrls	r1, [r4, #12]
    af50:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    af54:	d903      	bls.n	af5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbc6>
    af56:	68e0      	ldr	r0, [r4, #12]
    af58:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    af5c:	2001      	movs	r0, #1
    af5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    af62:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    af66:	4408      	add	r0, r1
    af68:	b280      	uxth	r0, r0
    af6a:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    af6e:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    af72:	2a00      	cmp	r2, #0
    af74:	bf18      	it	ne
    af76:	2a01      	cmpne	r2, #1
    af78:	d009      	beq.n	af8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    af7a:	2a02      	cmp	r2, #2
    af7c:	bf18      	it	ne
    af7e:	2a03      	cmpne	r2, #3
    af80:	d008      	beq.n	af94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbfc>
    af82:	f640 2158 	movw	r1, #2648	; 0xa58
    af86:	f04f 0031 	mov.w	r0, #49	; 0x31
    af8a:	f7f9 f87f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af8e:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    af92:	e053      	b.n	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    af94:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    af98:	2a08      	cmp	r2, #8
    af9a:	d022      	beq.n	afe2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4a>
    af9c:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    afa0:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    afa4:	2600      	movs	r6, #0
    afa6:	1c82      	adds	r2, r0, #2
    afa8:	4291      	cmp	r1, r2
    afaa:	d306      	bcc.n	afba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc22>
    afac:	1a08      	subs	r0, r1, r0
    afae:	1e80      	subs	r0, r0, #2
    afb0:	0406      	lsls	r6, r0, #16
    afb2:	0c36      	lsrs	r6, r6, #16
    afb4:	bf1c      	itt	ne
    afb6:	1e70      	subne	r0, r6, #1
    afb8:	b286      	uxthne	r6, r0
    afba:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    afbe:	b158      	cbz	r0, afd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc40>
    afc0:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    afc4:	2301      	movs	r3, #1
    afc6:	2109      	movs	r1, #9
    afc8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    afcc:	f005 f9ec 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afd0:	2800      	cmp	r0, #0
    afd2:	bf08      	it	eq
    afd4:	2600      	moveq	r6, #0
    afd6:	d02b      	beq.n	b030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc98>
    afd8:	68e0      	ldr	r0, [r4, #12]
    afda:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    afde:	b999      	cbnz	r1, b008 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc70>
    afe0:	e00a      	b.n	aff8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc60>
    afe2:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    afe6:	2a03      	cmp	r2, #3
    afe8:	d3d1      	bcc.n	af8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    afea:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    afee:	4408      	add	r0, r1
    aff0:	1c40      	adds	r0, r0, #1
    aff2:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    aff6:	e021      	b.n	b03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aff8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    affc:	2301      	movs	r3, #1
    affe:	2106      	movs	r1, #6
    b000:	3078      	adds	r0, #120	; 0x78
    b002:	f005 f9d1 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b006:	b178      	cbz	r0, b028 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc90>
    b008:	68e1      	ldr	r1, [r4, #12]
    b00a:	2000      	movs	r0, #0
    b00c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    b010:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    b014:	1c8b      	adds	r3, r1, #2
    b016:	429a      	cmp	r2, r3
    b018:	d303      	bcc.n	b022 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8a>
    b01a:	1a50      	subs	r0, r2, r1
    b01c:	1e80      	subs	r0, r0, #2
    b01e:	bf18      	it	ne
    b020:	1e40      	subne	r0, r0, #1
    b022:	42b0      	cmp	r0, r6
    b024:	bf38      	it	cc
    b026:	b286      	uxthcc	r6, r0
    b028:	2e00      	cmp	r6, #0
    b02a:	bf1c      	itt	ne
    b02c:	1e70      	subne	r0, r6, #1
    b02e:	b286      	uxthne	r6, r0
    b030:	68e0      	ldr	r0, [r4, #12]
    b032:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    b036:	4431      	add	r1, r6
    b038:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    b03c:	79a0      	ldrb	r0, [r4, #6]
    b03e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    b042:	2800      	cmp	r0, #0
    b044:	68e0      	ldr	r0, [r4, #12]
    b046:	bf18      	it	ne
    b048:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    b04c:	d106      	bne.n	b05c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcc4>
    b04e:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    b052:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    b056:	4411      	add	r1, r2
    b058:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    b05c:	68e0      	ldr	r0, [r4, #12]
    b05e:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    b062:	b939      	cbnz	r1, b074 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcdc>
    b064:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b068:	2301      	movs	r3, #1
    b06a:	4619      	mov	r1, r3
    b06c:	3078      	adds	r0, #120	; 0x78
    b06e:	f005 f99b 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b072:	b138      	cbz	r0, b084 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcec>
    b074:	68e0      	ldr	r0, [r4, #12]
    b076:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    b07a:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    b07e:	4411      	add	r1, r2
    b080:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    b084:	68e0      	ldr	r0, [r4, #12]
    b086:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    b08a:	b132      	cbz	r2, b09a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd02>
    b08c:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b090:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    b094:	4419      	add	r1, r3
    b096:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    b09a:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    b09e:	2b00      	cmp	r3, #0
    b0a0:	dd06      	ble.n	b0b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd18>
    b0a2:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    b0a6:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    b0aa:	4461      	add	r1, ip
    b0ac:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b0b0:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    b0b4:	f1ba 0f00 	cmp.w	sl, #0
    b0b8:	bf18      	it	ne
    b0ba:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    b0be:	d14c      	bne.n	b15a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    b0c0:	7821      	ldrb	r1, [r4, #0]
    b0c2:	2902      	cmp	r1, #2
    b0c4:	d011      	beq.n	b0ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd52>
    b0c6:	2901      	cmp	r1, #1
    b0c8:	bf08      	it	eq
    b0ca:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    b0ce:	d042      	beq.n	b156 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    b0d0:	78e1      	ldrb	r1, [r4, #3]
    b0d2:	b339      	cbz	r1, b124 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8c>
    b0d4:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b0d8:	f011 0f14 	tst.w	r1, #20
    b0dc:	bf18      	it	ne
    b0de:	211e      	movne	r1, #30
    b0e0:	d009      	beq.n	b0f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd5e>
    b0e2:	bf00      	nop
    b0e4:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b0e8:	e052      	b.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b0ea:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    b0ee:	2906      	cmp	r1, #6
    b0f0:	bf18      	it	ne
    b0f2:	2116      	movne	r1, #22
    b0f4:	e02f      	b.n	b156 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    b0f6:	f011 0f08 	tst.w	r1, #8
    b0fa:	bf18      	it	ne
    b0fc:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    b100:	d146      	bne.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b102:	f011 0f20 	tst.w	r1, #32
    b106:	bf18      	it	ne
    b108:	2123      	movne	r1, #35	; 0x23
    b10a:	d1eb      	bne.n	b0e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4c>
    b10c:	f011 0f03 	tst.w	r1, #3
    b110:	bf1c      	itt	ne
    b112:	212a      	movne	r1, #42	; 0x2a
    b114:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    b118:	d13a      	bne.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b11a:	f640 41ab 	movw	r1, #3243	; 0xcab
    b11e:	2031      	movs	r0, #49	; 0x31
    b120:	f7f8 ffb4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b124:	b12a      	cbz	r2, b132 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd9a>
    b126:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b12a:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b12e:	4291      	cmp	r1, r2
    b130:	d210      	bcs.n	b154 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    b132:	2b00      	cmp	r3, #0
    b134:	dd05      	ble.n	b142 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdaa>
    b136:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    b13a:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b13e:	4291      	cmp	r1, r2
    b140:	d208      	bcs.n	b154 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    b142:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    b146:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    b14a:	428a      	cmp	r2, r1
    b14c:	d308      	bcc.n	b160 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    b14e:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    b152:	b12a      	cbz	r2, b160 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    b154:	2122      	movs	r1, #34	; 0x22
    b156:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b15a:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b15e:	e017      	b.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b160:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b164:	b13a      	cbz	r2, b176 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdde>
    b166:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    b16a:	428a      	cmp	r2, r1
    b16c:	bf28      	it	cs
    b16e:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    b172:	d2f2      	bcs.n	b15a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    b174:	e009      	b.n	b18a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    b176:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    b17a:	2906      	cmp	r1, #6
    b17c:	d305      	bcc.n	b18a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    b17e:	213e      	movs	r1, #62	; 0x3e
    b180:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b184:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b188:	e002      	b.n	b190 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b18a:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    b18e:	b171      	cbz	r1, b1ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe16>
    b190:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b194:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b198:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    b19c:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    b1a0:	2900      	cmp	r1, #0
    b1a2:	bf14      	ite	ne
    b1a4:	2102      	movne	r1, #2
    b1a6:	2103      	moveq	r1, #3
    b1a8:	f7fd ffe2 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b1ac:	e002      	b.n	b1b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    b1ae:	2100      	movs	r1, #0
    b1b0:	f7fd ffde 	bl	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b1b4:	68e0      	ldr	r0, [r4, #12]
    b1b6:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    b1ba:	b007      	add	sp, #28
    b1bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1c0:	f7f9 be10 	b.w	4de4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    b1c4:	4a0c      	ldr	r2, [pc, #48]	; (b1f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe60>)
    b1c6:	b510      	push	{r4, lr}
    b1c8:	68d2      	ldr	r2, [r2, #12]
    b1ca:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    b1ce:	2bfe      	cmp	r3, #254	; 0xfe
    b1d0:	d004      	beq.n	b1dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe44>
    b1d2:	f640 11ed 	movw	r1, #2541	; 0x9ed
    b1d6:	2031      	movs	r0, #49	; 0x31
    b1d8:	f7f8 ff58 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1dc:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    b1e0:	2000      	movs	r0, #0
    b1e2:	2900      	cmp	r1, #0
    b1e4:	bf1c      	itt	ne
    b1e6:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    b1ea:	bd10      	popne	{r4, pc}
    b1ec:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    b1f0:	2001      	movs	r0, #1
    b1f2:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    b1f6:	bd10      	pop	{r4, pc}
    b1f8:	20000140 	.word	0x20000140
    b1fc:	b570      	push	{r4, r5, r6, lr}
    b1fe:	4a2b      	ldr	r2, [pc, #172]	; (b2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf14>)
    b200:	4603      	mov	r3, r0
    b202:	88d0      	ldrh	r0, [r2, #6]
    b204:	4318      	orrs	r0, r3
    b206:	80d0      	strh	r0, [r2, #6]
    b208:	4610      	mov	r0, r2
    b20a:	2b40      	cmp	r3, #64	; 0x40
    b20c:	68c0      	ldr	r0, [r0, #12]
    b20e:	d011      	beq.n	b234 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9c>
    b210:	f013 0f02 	tst.w	r3, #2
    b214:	f04f 0400 	mov.w	r4, #0
    b218:	f04f 0c01 	mov.w	ip, #1
    b21c:	f003 0501 	and.w	r5, r3, #1
    b220:	d00d      	beq.n	b23e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    b222:	2d00      	cmp	r5, #0
    b224:	bf08      	it	eq
    b226:	6111      	streq	r1, [r2, #16]
    b228:	d026      	beq.n	b278 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xee0>
    b22a:	f640 41fe 	movw	r1, #3326	; 0xcfe
    b22e:	2031      	movs	r0, #49	; 0x31
    b230:	f7f8 ff2c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b238:	2104      	movs	r1, #4
    b23a:	f7fd bf99 	b.w	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b23e:	b1b5      	cbz	r5, b26e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b240:	6151      	str	r1, [r2, #20]
    b242:	78c9      	ldrb	r1, [r1, #3]
    b244:	2906      	cmp	r1, #6
    b246:	d009      	beq.n	b25c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xec4>
    b248:	290b      	cmp	r1, #11
    b24a:	bf01      	itttt	eq
    b24c:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    b250:	2911      	cmpeq	r1, #17
    b252:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    b256:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    b25a:	e008      	b.n	b26e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b25c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b260:	2917      	cmp	r1, #23
    b262:	d104      	bne.n	b26e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b264:	2100      	movs	r1, #0
    b266:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    b26a:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    b26e:	f013 0f02 	tst.w	r3, #2
    b272:	bf18      	it	ne
    b274:	6911      	ldrne	r1, [r2, #16]
    b276:	d013      	beq.n	b2a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b278:	78c9      	ldrb	r1, [r1, #3]
    b27a:	2905      	cmp	r1, #5
    b27c:	d007      	beq.n	b28e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef6>
    b27e:	290b      	cmp	r1, #11
    b280:	bf02      	ittt	eq
    b282:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    b286:	2910      	cmpeq	r1, #16
    b288:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    b28c:	e008      	b.n	b2a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b28e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b292:	2915      	cmp	r1, #21
    b294:	d104      	bne.n	b2a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b296:	2100      	movs	r1, #0
    b298:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    b29c:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    b2a0:	f013 0f20 	tst.w	r3, #32
    b2a4:	bf1c      	itt	ne
    b2a6:	2008      	movne	r0, #8
    b2a8:	7110      	strbne	r0, [r2, #4]
    b2aa:	bd70      	pop	{r4, r5, r6, pc}
    b2ac:	20000140 	.word	0x20000140
    b2b0:	4a15      	ldr	r2, [pc, #84]	; (b308 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>)
    b2b2:	b510      	push	{r4, lr}
    b2b4:	68d1      	ldr	r1, [r2, #12]
    b2b6:	880b      	ldrh	r3, [r1, #0]
    b2b8:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    b2bc:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    b2c0:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    b2c4:	2801      	cmp	r0, #1
    b2c6:	bf18      	it	ne
    b2c8:	2802      	cmpne	r0, #2
    b2ca:	d005      	beq.n	b2d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf40>
    b2cc:	f240 218f 	movw	r1, #655	; 0x28f
    b2d0:	f04f 0006 	mov.w	r0, #6
    b2d4:	f7f8 feda 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2d8:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    b2dc:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    b2e0:	2801      	cmp	r0, #1
    b2e2:	bf18      	it	ne
    b2e4:	2802      	cmpne	r0, #2
    b2e6:	d1f1      	bne.n	b2cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf34>
    b2e8:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    b2ec:	f04f 0001 	mov.w	r0, #1
    b2f0:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    b2f4:	f04f 0000 	mov.w	r0, #0
    b2f8:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    b2fc:	7950      	ldrb	r0, [r2, #5]
    b2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b302:	f7f8 bcb7 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b306:	0000      	.short	0x0000
    b308:	20000140 	.word	0x20000140
    b30c:	b510      	push	{r4, lr}
    b30e:	4c17      	ldr	r4, [pc, #92]	; (b36c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd4>)
    b310:	2301      	movs	r3, #1
    b312:	2100      	movs	r1, #0
    b314:	68e0      	ldr	r0, [r4, #12]
    b316:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b31a:	3078      	adds	r0, #120	; 0x78
    b31c:	f005 f844 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b320:	2800      	cmp	r0, #0
    b322:	bf04      	itt	eq
    b324:	2001      	moveq	r0, #1
    b326:	bd10      	popeq	{r4, pc}
    b328:	6960      	ldr	r0, [r4, #20]
    b32a:	f005 fad1 	bl	108d0 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    b32e:	68e1      	ldr	r1, [r4, #12]
    b330:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    b334:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b338:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b33c:	1a80      	subs	r0, r0, r2
    b33e:	b200      	sxth	r0, r0
    b340:	2201      	movs	r2, #1
    b342:	4283      	cmp	r3, r0
    b344:	bfa8      	it	ge
    b346:	2800      	cmpge	r0, #0
    b348:	dd09      	ble.n	b35e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc6>
    b34a:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    b34e:	6960      	ldr	r0, [r4, #20]
    b350:	f005 fab9 	bl	108c6 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    b354:	68e1      	ldr	r1, [r4, #12]
    b356:	200b      	movs	r0, #11
    b358:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b35c:	e004      	b.n	b368 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    b35e:	2028      	movs	r0, #40	; 0x28
    b360:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b364:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    b368:	2000      	movs	r0, #0
    b36a:	bd10      	pop	{r4, pc}
    b36c:	20000140 	.word	0x20000140
    b370:	b570      	push	{r4, r5, r6, lr}
    b372:	4c2d      	ldr	r4, [pc, #180]	; (b428 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1090>)
    b374:	2301      	movs	r3, #1
    b376:	2100      	movs	r1, #0
    b378:	68e0      	ldr	r0, [r4, #12]
    b37a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b37e:	3078      	adds	r0, #120	; 0x78
    b380:	f005 f812 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b384:	2800      	cmp	r0, #0
    b386:	bf04      	itt	eq
    b388:	2001      	moveq	r0, #1
    b38a:	bd70      	popeq	{r4, r5, r6, pc}
    b38c:	68e0      	ldr	r0, [r4, #12]
    b38e:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    b392:	6960      	ldr	r0, [r4, #20]
    b394:	f005 fa6c 	bl	10870 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    b398:	2800      	cmp	r0, #0
    b39a:	d039      	beq.n	b410 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>
    b39c:	6960      	ldr	r0, [r4, #20]
    b39e:	68e1      	ldr	r1, [r4, #12]
    b3a0:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    b3a4:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    b3a8:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    b3ac:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    b3b0:	1ad2      	subs	r2, r2, r3
    b3b2:	b212      	sxth	r2, r2
    b3b4:	2301      	movs	r3, #1
    b3b6:	4594      	cmp	ip, r2
    b3b8:	bfa8      	it	ge
    b3ba:	2a00      	cmpge	r2, #0
    b3bc:	dd2c      	ble.n	b418 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
    b3be:	f005 fa8a 	bl	108d6 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    b3c2:	f004 ffbe 	bl	10342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b3c6:	4605      	mov	r5, r0
    b3c8:	68e0      	ldr	r0, [r4, #12]
    b3ca:	4629      	mov	r1, r5
    b3cc:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    b3d0:	6960      	ldr	r0, [r4, #20]
    b3d2:	7900      	ldrb	r0, [r0, #4]
    b3d4:	f005 fa03 	bl	107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    b3d8:	68e1      	ldr	r1, [r4, #12]
    b3da:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    b3de:	6960      	ldr	r0, [r4, #20]
    b3e0:	4629      	mov	r1, r5
    b3e2:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    b3e6:	f005 f9f1 	bl	107cc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    b3ea:	68e1      	ldr	r1, [r4, #12]
    b3ec:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    b3f0:	6960      	ldr	r0, [r4, #20]
    b3f2:	f005 fa73 	bl	108dc <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    b3f6:	68e1      	ldr	r1, [r4, #12]
    b3f8:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    b3fc:	6960      	ldr	r0, [r4, #20]
    b3fe:	f005 fa70 	bl	108e2 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    b402:	68e1      	ldr	r1, [r4, #12]
    b404:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    b408:	200d      	movs	r0, #13
    b40a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b40e:	e008      	b.n	b422 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108a>
    b410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b414:	f000 b896 	b.w	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b418:	2028      	movs	r0, #40	; 0x28
    b41a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b41e:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    b422:	2000      	movs	r0, #0
    b424:	bd70      	pop	{r4, r5, r6, pc}
    b426:	0000      	.short	0x0000
    b428:	20000140 	.word	0x20000140
    b42c:	b510      	push	{r4, lr}
    b42e:	4c29      	ldr	r4, [pc, #164]	; (b4d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x113c>)
    b430:	2301      	movs	r3, #1
    b432:	2100      	movs	r1, #0
    b434:	68e0      	ldr	r0, [r4, #12]
    b436:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b43a:	3078      	adds	r0, #120	; 0x78
    b43c:	f004 ffb4 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b440:	b970      	cbnz	r0, b460 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    b442:	68e0      	ldr	r0, [r4, #12]
    b444:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b448:	2a12      	cmp	r2, #18
    b44a:	d009      	beq.n	b460 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    b44c:	2301      	movs	r3, #1
    b44e:	2105      	movs	r1, #5
    b450:	3078      	adds	r0, #120	; 0x78
    b452:	f004 ffa9 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b456:	2800      	cmp	r0, #0
    b458:	bf0c      	ite	eq
    b45a:	2001      	moveq	r0, #1
    b45c:	2008      	movne	r0, #8
    b45e:	bd10      	pop	{r4, pc}
    b460:	68e0      	ldr	r0, [r4, #12]
    b462:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    b466:	b939      	cbnz	r1, b478 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e0>
    b468:	2100      	movs	r1, #0
    b46a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b46e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b472:	1c49      	adds	r1, r1, #1
    b474:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b478:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b47c:	6960      	ldr	r0, [r4, #20]
    b47e:	f005 fa3f 	bl	10900 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    b482:	68e0      	ldr	r0, [r4, #12]
    b484:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    b488:	6960      	ldr	r0, [r4, #20]
    b48a:	f005 fa30 	bl	108ee <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    b48e:	68e0      	ldr	r0, [r4, #12]
    b490:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    b494:	b121      	cbz	r1, b4a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1108>
    b496:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b49a:	2031      	movs	r0, #49	; 0x31
    b49c:	f7f8 fdf6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4a0:	8801      	ldrh	r1, [r0, #0]
    b4a2:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b4a6:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    b4aa:	6960      	ldr	r0, [r4, #20]
    b4ac:	f005 fa23 	bl	108f6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    b4b0:	68e0      	ldr	r0, [r4, #12]
    b4b2:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    b4b6:	6960      	ldr	r0, [r4, #20]
    b4b8:	f005 fa16 	bl	108e8 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    b4bc:	68e0      	ldr	r0, [r4, #12]
    b4be:	2101      	movs	r1, #1
    b4c0:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    b4c4:	2114      	movs	r1, #20
    b4c6:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b4ca:	7960      	ldrb	r0, [r4, #5]
    b4cc:	f7f8 fbd2 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b4d0:	2000      	movs	r0, #0
    b4d2:	bd10      	pop	{r4, pc}
    b4d4:	20000140 	.word	0x20000140
    b4d8:	b510      	push	{r4, lr}
    b4da:	4c19      	ldr	r4, [pc, #100]	; (b540 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a8>)
    b4dc:	b082      	sub	sp, #8
    b4de:	68e0      	ldr	r0, [r4, #12]
    b4e0:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b4e4:	f010 0f01 	tst.w	r0, #1
    b4e8:	bf1e      	ittt	ne
    b4ea:	2001      	movne	r0, #1
    b4ec:	b002      	addne	sp, #8
    b4ee:	bd10      	popne	{r4, pc}
    b4f0:	4669      	mov	r1, sp
    b4f2:	6960      	ldr	r0, [r4, #20]
    b4f4:	f005 fa0b 	bl	1090e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    b4f8:	f001 ff14 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b4fc:	f644 112f 	movw	r1, #18735	; 0x492f
    b500:	4001      	ands	r1, r0
    b502:	f89d 0000 	ldrb.w	r0, [sp]
    b506:	ea00 0201 	and.w	r2, r0, r1
    b50a:	68e0      	ldr	r0, [r4, #12]
    b50c:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    b510:	f89d 2001 	ldrb.w	r2, [sp, #1]
    b514:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    b518:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    b51c:	2100      	movs	r1, #0
    b51e:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b522:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b526:	1c49      	adds	r1, r1, #1
    b528:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b52c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b530:	f041 0101 	orr.w	r1, r1, #1
    b534:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b538:	b002      	add	sp, #8
    b53a:	2000      	movs	r0, #0
    b53c:	bd10      	pop	{r4, pc}
    b53e:	0000      	.short	0x0000
    b540:	20000140 	.word	0x20000140
    b544:	4a0d      	ldr	r2, [pc, #52]	; (b57c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e4>)
    b546:	68d0      	ldr	r0, [r2, #12]
    b548:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b54c:	f011 0f08 	tst.w	r1, #8
    b550:	bf1c      	itt	ne
    b552:	2001      	movne	r0, #1
    b554:	4770      	bxne	lr
    b556:	f041 0108 	orr.w	r1, r1, #8
    b55a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b55e:	6951      	ldr	r1, [r2, #20]
    b560:	78c9      	ldrb	r1, [r1, #3]
    b562:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    b566:	2100      	movs	r1, #0
    b568:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b56c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b570:	1c49      	adds	r1, r1, #1
    b572:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b576:	2000      	movs	r0, #0
    b578:	4770      	bx	lr
    b57a:	0000      	.short	0x0000
    b57c:	20000140 	.word	0x20000140
    b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b582:	4c34      	ldr	r4, [pc, #208]	; (b654 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>)
    b584:	68e0      	ldr	r0, [r4, #12]
    b586:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b58a:	f010 0f30 	tst.w	r0, #48	; 0x30
    b58e:	bf1c      	itt	ne
    b590:	2001      	movne	r0, #1
    b592:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    b594:	6960      	ldr	r0, [r4, #20]
    b596:	f005 f9d7 	bl	10948 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b59a:	2800      	cmp	r0, #0
    b59c:	d030      	beq.n	b600 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1268>
    b59e:	6960      	ldr	r0, [r4, #20]
    b5a0:	f005 f9c4 	bl	1092c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b5a4:	4605      	mov	r5, r0
    b5a6:	6960      	ldr	r0, [r4, #20]
    b5a8:	f005 f9c4 	bl	10934 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b5ac:	4606      	mov	r6, r0
    b5ae:	6960      	ldr	r0, [r4, #20]
    b5b0:	f005 f9ba 	bl	10928 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b5b4:	4607      	mov	r7, r0
    b5b6:	6960      	ldr	r0, [r4, #20]
    b5b8:	f005 f9ba 	bl	10930 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b5bc:	4601      	mov	r1, r0
    b5be:	9500      	str	r5, [sp, #0]
    b5c0:	68e0      	ldr	r0, [r4, #12]
    b5c2:	4633      	mov	r3, r6
    b5c4:	463a      	mov	r2, r7
    b5c6:	3028      	adds	r0, #40	; 0x28
    b5c8:	f005 fca2 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b5cc:	79a0      	ldrb	r0, [r4, #6]
    b5ce:	f010 0f02 	tst.w	r0, #2
    b5d2:	d003      	beq.n	b5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1244>
    b5d4:	6920      	ldr	r0, [r4, #16]
    b5d6:	78c0      	ldrb	r0, [r0, #3]
    b5d8:	2814      	cmp	r0, #20
    b5da:	d015      	beq.n	b608 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b5dc:	68e1      	ldr	r1, [r4, #12]
    b5de:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b5e2:	281c      	cmp	r0, #28
    b5e4:	d010      	beq.n	b608 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b5e6:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b5ea:	2801      	cmp	r0, #1
    b5ec:	d010      	beq.n	b610 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b5ee:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    b5f2:	2800      	cmp	r0, #0
    b5f4:	bf04      	itt	eq
    b5f6:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    b5fa:	2800      	cmpeq	r0, #0
    b5fc:	d010      	beq.n	b620 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>
    b5fe:	e007      	b.n	b610 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b604:	f7ff bf9e 	b.w	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b608:	68e1      	ldr	r1, [r4, #12]
    b60a:	2001      	movs	r0, #1
    b60c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    b610:	68e0      	ldr	r0, [r4, #12]
    b612:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b616:	f041 0110 	orr.w	r1, r1, #16
    b61a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b61e:	e00e      	b.n	b63e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12a6>
    b620:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b624:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    b628:	f040 0020 	orr.w	r0, r0, #32
    b62c:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b630:	f831 0b28 	ldrh.w	r0, [r1], #40
    b634:	f005 fc74 	bl	10f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    b638:	7960      	ldrb	r0, [r4, #5]
    b63a:	f7f8 fb1b 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b63e:	68e0      	ldr	r0, [r4, #12]
    b640:	2100      	movs	r1, #0
    b642:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b646:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b64a:	1c49      	adds	r1, r1, #1
    b64c:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b650:	2000      	movs	r0, #0
    b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b654:	20000140 	.word	0x20000140
    b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b65a:	4c22      	ldr	r4, [pc, #136]	; (b6e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134c>)
    b65c:	2301      	movs	r3, #1
    b65e:	210a      	movs	r1, #10
    b660:	68e0      	ldr	r0, [r4, #12]
    b662:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b666:	3078      	adds	r0, #120	; 0x78
    b668:	f004 fe9e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b66c:	2800      	cmp	r0, #0
    b66e:	bf04      	itt	eq
    b670:	2001      	moveq	r0, #1
    b672:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    b674:	6960      	ldr	r0, [r4, #20]
    b676:	f005 f967 	bl	10948 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b67a:	b1c8      	cbz	r0, b6b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1318>
    b67c:	6960      	ldr	r0, [r4, #20]
    b67e:	f005 f955 	bl	1092c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b682:	4605      	mov	r5, r0
    b684:	6960      	ldr	r0, [r4, #20]
    b686:	f005 f955 	bl	10934 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b68a:	4606      	mov	r6, r0
    b68c:	6960      	ldr	r0, [r4, #20]
    b68e:	f005 f94b 	bl	10928 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b692:	4607      	mov	r7, r0
    b694:	6960      	ldr	r0, [r4, #20]
    b696:	f005 f94b 	bl	10930 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b69a:	4601      	mov	r1, r0
    b69c:	9500      	str	r5, [sp, #0]
    b69e:	68e0      	ldr	r0, [r4, #12]
    b6a0:	4633      	mov	r3, r6
    b6a2:	463a      	mov	r2, r7
    b6a4:	3028      	adds	r0, #40	; 0x28
    b6a6:	f005 fc33 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b6aa:	68e0      	ldr	r0, [r4, #12]
    b6ac:	f005 fb75 	bl	10d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b6b0:	68e1      	ldr	r1, [r4, #12]
    b6b2:	2000      	movs	r0, #0
    b6b4:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b6b8:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b6bc:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b6c0:	2801      	cmp	r0, #1
    b6c2:	bf04      	itt	eq
    b6c4:	2002      	moveq	r0, #2
    b6c6:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b6ca:	d008      	beq.n	b6de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1346>
    b6cc:	8808      	ldrh	r0, [r1, #0]
    b6ce:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b6d2:	3128      	adds	r1, #40	; 0x28
    b6d4:	f005 fae4 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b6d8:	7960      	ldrb	r0, [r4, #5]
    b6da:	f7f8 facb 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b6de:	2000      	movs	r0, #0
    b6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6e2:	0000      	.short	0x0000
    b6e4:	20000140 	.word	0x20000140
    b6e8:	480b      	ldr	r0, [pc, #44]	; (b718 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1380>)
    b6ea:	68c0      	ldr	r0, [r0, #12]
    b6ec:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b6f0:	f011 0f04 	tst.w	r1, #4
    b6f4:	bf1c      	itt	ne
    b6f6:	2001      	movne	r0, #1
    b6f8:	4770      	bxne	lr
    b6fa:	2200      	movs	r2, #0
    b6fc:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    b700:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b704:	f041 0104 	orr.w	r1, r1, #4
    b708:	1c52      	adds	r2, r2, #1
    b70a:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b70e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b712:	2000      	movs	r0, #0
    b714:	4770      	bx	lr
    b716:	0000      	.short	0x0000
    b718:	20000140 	.word	0x20000140
    b71c:	b510      	push	{r4, lr}
    b71e:	4c0a      	ldr	r4, [pc, #40]	; (b748 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b0>)
    b720:	2301      	movs	r3, #1
    b722:	2109      	movs	r1, #9
    b724:	68e0      	ldr	r0, [r4, #12]
    b726:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b72a:	3078      	adds	r0, #120	; 0x78
    b72c:	f004 fe3c 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b730:	2800      	cmp	r0, #0
    b732:	bf08      	it	eq
    b734:	bd10      	popeq	{r4, pc}
    b736:	2000      	movs	r0, #0
    b738:	68e1      	ldr	r1, [r4, #12]
    b73a:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    b73e:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b742:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b746:	bd10      	pop	{r4, pc}
    b748:	20000140 	.word	0x20000140
    b74c:	b510      	push	{r4, lr}
    b74e:	4c12      	ldr	r4, [pc, #72]	; (b798 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1400>)
    b750:	2301      	movs	r3, #1
    b752:	2100      	movs	r1, #0
    b754:	68e0      	ldr	r0, [r4, #12]
    b756:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b75a:	3078      	adds	r0, #120	; 0x78
    b75c:	f004 fe24 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b760:	b168      	cbz	r0, b77e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13e6>
    b762:	68e0      	ldr	r0, [r4, #12]
    b764:	2100      	movs	r1, #0
    b766:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b76a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b76e:	1c49      	adds	r1, r1, #1
    b770:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b774:	2110      	movs	r1, #16
    b776:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b77a:	2000      	movs	r0, #0
    b77c:	bd10      	pop	{r4, pc}
    b77e:	68e0      	ldr	r0, [r4, #12]
    b780:	2301      	movs	r3, #1
    b782:	2105      	movs	r1, #5
    b784:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b788:	3078      	adds	r0, #120	; 0x78
    b78a:	f004 fe0d 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b78e:	2800      	cmp	r0, #0
    b790:	bf14      	ite	ne
    b792:	2008      	movne	r0, #8
    b794:	2001      	moveq	r0, #1
    b796:	bd10      	pop	{r4, pc}
    b798:	20000140 	.word	0x20000140
    b79c:	4806      	ldr	r0, [pc, #24]	; (b7b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1420>)
    b79e:	68c0      	ldr	r0, [r0, #12]
    b7a0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b7a4:	2911      	cmp	r1, #17
    b7a6:	bf1c      	itt	ne
    b7a8:	2002      	movne	r0, #2
    b7aa:	4770      	bxne	lr
    b7ac:	2112      	movs	r1, #18
    b7ae:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b7b2:	2000      	movs	r0, #0
    b7b4:	4770      	bx	lr
    b7b6:	0000      	.short	0x0000
    b7b8:	20000140 	.word	0x20000140
    b7bc:	b570      	push	{r4, r5, r6, lr}
    b7be:	4c36      	ldr	r4, [pc, #216]	; (b898 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1500>)
    b7c0:	2301      	movs	r3, #1
    b7c2:	210b      	movs	r1, #11
    b7c4:	68e0      	ldr	r0, [r4, #12]
    b7c6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b7ca:	3078      	adds	r0, #120	; 0x78
    b7cc:	f004 fdec 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b7d0:	bb58      	cbnz	r0, b82a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b7d2:	68e0      	ldr	r0, [r4, #12]
    b7d4:	2301      	movs	r3, #1
    b7d6:	2100      	movs	r1, #0
    b7d8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b7dc:	3078      	adds	r0, #120	; 0x78
    b7de:	f004 fde3 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b7e2:	2800      	cmp	r0, #0
    b7e4:	bf04      	itt	eq
    b7e6:	2001      	moveq	r0, #1
    b7e8:	bd70      	popeq	{r4, r5, r6, pc}
    b7ea:	68e0      	ldr	r0, [r4, #12]
    b7ec:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b7f0:	2824      	cmp	r0, #36	; 0x24
    b7f2:	d01a      	beq.n	b82a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b7f4:	6960      	ldr	r0, [r4, #20]
    b7f6:	f005 f8c2 	bl	1097e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    b7fa:	b1c0      	cbz	r0, b82e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1496>
    b7fc:	68e0      	ldr	r0, [r4, #12]
    b7fe:	2500      	movs	r5, #0
    b800:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b804:	f041 0104 	orr.w	r1, r1, #4
    b808:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b80c:	6961      	ldr	r1, [r4, #20]
    b80e:	794a      	ldrb	r2, [r1, #5]
    b810:	f002 0207 	and.w	r2, r2, #7
    b814:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    b818:	7909      	ldrb	r1, [r1, #4]
    b81a:	f001 0107 	and.w	r1, r1, #7
    b81e:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    b822:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    b826:	b133      	cbz	r3, b836 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x149e>
    b828:	e029      	b.n	b87e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b82a:	2020      	movs	r0, #32
    b82c:	bd70      	pop	{r4, r5, r6, pc}
    b82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b832:	f7ff be87 	b.w	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b836:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    b83a:	2b01      	cmp	r3, #1
    b83c:	d01f      	beq.n	b87e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b83e:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    b842:	f100 0366 	add.w	r3, r0, #102	; 0x66
    b846:	f04f 0c01 	mov.w	ip, #1
    b84a:	428e      	cmp	r6, r1
    b84c:	bf01      	itttt	eq
    b84e:	7819      	ldrbeq	r1, [r3, #0]
    b850:	4291      	cmpeq	r1, r2
    b852:	2102      	moveq	r1, #2
    b854:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    b858:	d011      	beq.n	b87e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b85a:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    b85e:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    b862:	8802      	ldrh	r2, [r0, #0]
    b864:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    b868:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    b86c:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    b870:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    b874:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    b878:	7960      	ldrb	r0, [r4, #5]
    b87a:	f7f8 f9fb 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b87e:	68e0      	ldr	r0, [r4, #12]
    b880:	2121      	movs	r1, #33	; 0x21
    b882:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b886:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b88a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b88e:	1c49      	adds	r1, r1, #1
    b890:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b894:	2000      	movs	r0, #0
    b896:	bd70      	pop	{r4, r5, r6, pc}
    b898:	20000140 	.word	0x20000140
    b89c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8a0:	4c82      	ldr	r4, [pc, #520]	; (baac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1714>)
    b8a2:	68e0      	ldr	r0, [r4, #12]
    b8a4:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b8a8:	2920      	cmp	r1, #32
    b8aa:	bf0c      	ite	eq
    b8ac:	2501      	moveq	r5, #1
    b8ae:	2500      	movne	r5, #0
    b8b0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b8b4:	2922      	cmp	r1, #34	; 0x22
    b8b6:	bf08      	it	eq
    b8b8:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    b8bc:	d006      	beq.n	b8cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1534>
    b8be:	2d00      	cmp	r5, #0
    b8c0:	bf12      	itee	ne
    b8c2:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    b8c6:	2002      	moveq	r0, #2
    b8c8:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8cc:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b8d0:	f041 0104 	orr.w	r1, r1, #4
    b8d4:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b8d8:	6960      	ldr	r0, [r4, #20]
    b8da:	f7fb f955 	bl	6b88 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    b8de:	f04f 0a01 	mov.w	sl, #1
    b8e2:	f04f 0800 	mov.w	r8, #0
    b8e6:	2800      	cmp	r0, #0
    b8e8:	d052      	beq.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b8ea:	6967      	ldr	r7, [r4, #20]
    b8ec:	4638      	mov	r0, r7
    b8ee:	f005 f819 	bl	10924 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    b8f2:	4681      	mov	r9, r0
    b8f4:	4638      	mov	r0, r7
    b8f6:	f005 f821 	bl	1093c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    b8fa:	4607      	mov	r7, r0
    b8fc:	f004 fe08 	bl	10510 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b900:	b1e8      	cbz	r0, b93e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b902:	68e2      	ldr	r2, [r4, #12]
    b904:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b908:	4281      	cmp	r1, r0
    b90a:	d018      	beq.n	b93e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b90c:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    b910:	2b01      	cmp	r3, #1
    b912:	d028      	beq.n	b966 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ce>
    b914:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    b918:	423b      	tst	r3, r7
    b91a:	d039      	beq.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b91c:	2d00      	cmp	r5, #0
    b91e:	bf04      	itt	eq
    b920:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    b924:	423a      	tsteq	r2, r7
    b926:	d10a      	bne.n	b93e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b928:	b311      	cbz	r1, b970 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    b92a:	2904      	cmp	r1, #4
    b92c:	bf18      	it	ne
    b92e:	2804      	cmpne	r0, #4
    b930:	d023      	beq.n	b97a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e2>
    b932:	2908      	cmp	r1, #8
    b934:	bf18      	it	ne
    b936:	2808      	cmpne	r0, #8
    b938:	d022      	beq.n	b980 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e8>
    b93a:	4281      	cmp	r1, r0
    b93c:	d828      	bhi.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b93e:	4648      	mov	r0, r9
    b940:	f004 fde6 	bl	10510 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b944:	0001      	movs	r1, r0
    b946:	d040      	beq.n	b9ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b948:	68e0      	ldr	r0, [r4, #12]
    b94a:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b94e:	428a      	cmp	r2, r1
    b950:	d03b      	beq.n	b9ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b952:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b956:	2901      	cmp	r1, #1
    b958:	d015      	beq.n	b986 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ee>
    b95a:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    b95e:	ea10 0f09 	tst.w	r0, r9
    b962:	d015      	beq.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b964:	e031      	b.n	b9ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b966:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    b96a:	423b      	tst	r3, r7
    b96c:	d1d6      	bne.n	b91c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1584>
    b96e:	e00f      	b.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b970:	f240 1181 	movw	r1, #385	; 0x181
    b974:	2006      	movs	r0, #6
    b976:	f7f8 fb89 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b97a:	4281      	cmp	r1, r0
    b97c:	d308      	bcc.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b97e:	e7de      	b.n	b93e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b980:	4281      	cmp	r1, r0
    b982:	d305      	bcc.n	b990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b984:	e7db      	b.n	b93e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b986:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    b98a:	ea10 0f09 	tst.w	r0, r9
    b98e:	d11c      	bne.n	b9ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b990:	68e0      	ldr	r0, [r4, #12]
    b992:	2700      	movs	r7, #0
    b994:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b998:	2901      	cmp	r1, #1
    b99a:	bf0a      	itet	eq
    b99c:	201e      	moveq	r0, #30
    b99e:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b9a2:	f7ff fc85 	bleq	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b9a6:	b38d      	cbz	r5, ba0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1674>
    b9a8:	6960      	ldr	r0, [r4, #20]
    b9aa:	78c1      	ldrb	r1, [r0, #3]
    b9ac:	68e0      	ldr	r0, [r4, #12]
    b9ae:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b9b2:	fa0a f101 	lsl.w	r1, sl, r1
    b9b6:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    b9ba:	d028      	beq.n	ba0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1676>
    b9bc:	210a      	movs	r1, #10
    b9be:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    b9c2:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    b9c6:	b338      	cbz	r0, ba18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>
    b9c8:	e039      	b.n	ba3e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16a6>
    b9ca:	466a      	mov	r2, sp
    b9cc:	6961      	ldr	r1, [r4, #20]
    b9ce:	68e0      	ldr	r0, [r4, #12]
    b9d0:	f004 fe81 	bl	106d6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    b9d4:	b3b0      	cbz	r0, ba44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ac>
    b9d6:	6960      	ldr	r0, [r4, #20]
    b9d8:	f004 ffae 	bl	10938 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    b9dc:	68e1      	ldr	r1, [r4, #12]
    b9de:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b9e2:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b9e6:	1a80      	subs	r0, r0, r2
    b9e8:	b200      	sxth	r0, r0
    b9ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    b9ee:	4282      	cmp	r2, r0
    b9f0:	bfa8      	it	ge
    b9f2:	2800      	cmpge	r0, #0
    b9f4:	dd3d      	ble.n	ba72 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16da>
    b9f6:	f89d 0000 	ldrb.w	r0, [sp]
    b9fa:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    b9fe:	f89d 0001 	ldrb.w	r0, [sp, #1]
    ba02:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    ba06:	2024      	movs	r0, #36	; 0x24
    ba08:	7030      	strb	r0, [r6, #0]
    ba0a:	e037      	b.n	ba7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    ba0c:	e009      	b.n	ba22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168a>
    ba0e:	f240 31c7 	movw	r1, #967	; 0x3c7
    ba12:	2031      	movs	r0, #49	; 0x31
    ba14:	f7f8 fb3a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba18:	f240 31cf 	movw	r1, #975	; 0x3cf
    ba1c:	2031      	movs	r0, #49	; 0x31
    ba1e:	f7f8 fb35 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba22:	f886 8000 	strb.w	r8, [r6]
    ba26:	68e1      	ldr	r1, [r4, #12]
    ba28:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    ba2c:	1e40      	subs	r0, r0, #1
    ba2e:	b240      	sxtb	r0, r0
    ba30:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    ba34:	2800      	cmp	r0, #0
    ba36:	db31      	blt.n	ba9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1704>
    ba38:	f7ff fd84 	bl	b544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    ba3c:	4607      	mov	r7, r0
    ba3e:	4638      	mov	r0, r7
    ba40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba44:	e7ff      	b.n	ba46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ae>
    ba46:	68e0      	ldr	r0, [r4, #12]
    ba48:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    ba4c:	2901      	cmp	r1, #1
    ba4e:	bf18      	it	ne
    ba50:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    ba54:	d007      	beq.n	ba66 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ce>
    ba56:	68e0      	ldr	r0, [r4, #12]
    ba58:	f100 0185 	add.w	r1, r0, #133	; 0x85
    ba5c:	428e      	cmp	r6, r1
    ba5e:	bf08      	it	eq
    ba60:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    ba64:	e00a      	b.n	ba7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    ba66:	2000      	movs	r0, #0
    ba68:	f7ff fc22 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    ba6c:	f886 8000 	strb.w	r8, [r6]
    ba70:	e7f1      	b.n	ba56 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16be>
    ba72:	2028      	movs	r0, #40	; 0x28
    ba74:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ba78:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    ba7c:	68e0      	ldr	r0, [r4, #12]
    ba7e:	f100 0185 	add.w	r1, r0, #133	; 0x85
    ba82:	428e      	cmp	r6, r1
    ba84:	bf18      	it	ne
    ba86:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    ba8a:	d10c      	bne.n	baa6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    ba8c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ba90:	1e49      	subs	r1, r1, #1
    ba92:	b249      	sxtb	r1, r1
    ba94:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ba98:	2900      	cmp	r1, #0
    ba9a:	da04      	bge.n	baa6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    ba9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
    baa0:	2031      	movs	r0, #49	; 0x31
    baa2:	f7f8 faf3 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baa6:	2000      	movs	r0, #0
    baa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baac:	20000140 	.word	0x20000140
    bab0:	b510      	push	{r4, lr}
    bab2:	4c18      	ldr	r4, [pc, #96]	; (bb14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x177c>)
    bab4:	68e0      	ldr	r0, [r4, #12]
    bab6:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    baba:	f041 0104 	orr.w	r1, r1, #4
    babe:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    bac2:	6960      	ldr	r0, [r4, #20]
    bac4:	f004 ff6f 	bl	109a6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    bac8:	2816      	cmp	r0, #22
    baca:	d10a      	bne.n	bae2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    bacc:	6960      	ldr	r0, [r4, #20]
    bace:	f004 ff6c 	bl	109aa <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    bad2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bad6:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    bada:	2920      	cmp	r1, #32
    badc:	d003      	beq.n	bae6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174e>
    bade:	2926      	cmp	r1, #38	; 0x26
    bae0:	d004      	beq.n	baec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1754>
    bae2:	2000      	movs	r0, #0
    bae4:	bd10      	pop	{r4, pc}
    bae6:	f7ff fbe3 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    baea:	e00c      	b.n	bb06 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x176e>
    baec:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    baf0:	2301      	movs	r3, #1
    baf2:	210b      	movs	r1, #11
    baf4:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    baf8:	f004 fc56 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bafc:	2800      	cmp	r0, #0
    bafe:	bf04      	itt	eq
    bb00:	202a      	moveq	r0, #42	; 0x2a
    bb02:	f7ff fbd5 	bleq	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bb06:	2000      	movs	r0, #0
    bb08:	68e1      	ldr	r1, [r4, #12]
    bb0a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bb0e:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bb12:	bd10      	pop	{r4, pc}
    bb14:	20000140 	.word	0x20000140
    bb18:	b510      	push	{r4, lr}
    bb1a:	4c12      	ldr	r4, [pc, #72]	; (bb64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17cc>)
    bb1c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bb20:	6960      	ldr	r0, [r4, #20]
    bb22:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    bb26:	7900      	ldrb	r0, [r0, #4]
    bb28:	2920      	cmp	r1, #32
    bb2a:	d017      	beq.n	bb5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c4>
    bb2c:	2926      	cmp	r1, #38	; 0x26
    bb2e:	bf1c      	itt	ne
    bb30:	2000      	movne	r0, #0
    bb32:	bd10      	popne	{r4, pc}
    bb34:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    bb38:	2301      	movs	r3, #1
    bb3a:	210b      	movs	r1, #11
    bb3c:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    bb40:	f004 fc32 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bb44:	2800      	cmp	r0, #0
    bb46:	bf04      	itt	eq
    bb48:	202a      	moveq	r0, #42	; 0x2a
    bb4a:	f7ff fbb1 	bleq	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bb4e:	2000      	movs	r0, #0
    bb50:	68e1      	ldr	r1, [r4, #12]
    bb52:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bb56:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bb5a:	bd10      	pop	{r4, pc}
    bb5c:	f7ff fba8 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bb60:	e7f5      	b.n	bb4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17b6>
    bb62:	0000      	.short	0x0000
    bb64:	20000140 	.word	0x20000140
    bb68:	480d      	ldr	r0, [pc, #52]	; (bba0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1808>)
    bb6a:	b510      	push	{r4, lr}
    bb6c:	68c0      	ldr	r0, [r0, #12]
    bb6e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bb72:	2917      	cmp	r1, #23
    bb74:	bf1c      	itt	ne
    bb76:	2002      	movne	r0, #2
    bb78:	bd10      	popne	{r4, pc}
    bb7a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bb7e:	1e49      	subs	r1, r1, #1
    bb80:	b249      	sxtb	r1, r1
    bb82:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bb86:	2900      	cmp	r1, #0
    bb88:	da04      	bge.n	bb94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17fc>
    bb8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bb8e:	2031      	movs	r0, #49	; 0x31
    bb90:	f7f8 fa7c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb94:	211b      	movs	r1, #27
    bb96:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bb9a:	2000      	movs	r0, #0
    bb9c:	bd10      	pop	{r4, pc}
    bb9e:	0000      	.short	0x0000
    bba0:	20000140 	.word	0x20000140
    bba4:	b510      	push	{r4, lr}
    bba6:	4c0c      	ldr	r4, [pc, #48]	; (bbd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    bba8:	2301      	movs	r3, #1
    bbaa:	4619      	mov	r1, r3
    bbac:	68e0      	ldr	r0, [r4, #12]
    bbae:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bbb2:	3078      	adds	r0, #120	; 0x78
    bbb4:	f004 fbf8 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bbb8:	2800      	cmp	r0, #0
    bbba:	bf1c      	itt	ne
    bbbc:	2000      	movne	r0, #0
    bbbe:	bd10      	popne	{r4, pc}
    bbc0:	6960      	ldr	r0, [r4, #20]
    bbc2:	f004 febd 	bl	10940 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    bbc6:	68e1      	ldr	r1, [r4, #12]
    bbc8:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    bbcc:	2007      	movs	r0, #7
    bbce:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    bbd2:	2000      	movs	r0, #0
    bbd4:	bd10      	pop	{r4, pc}
    bbd6:	0000      	.short	0x0000
    bbd8:	20000140 	.word	0x20000140
    bbdc:	b570      	push	{r4, r5, r6, lr}
    bbde:	4c4c      	ldr	r4, [pc, #304]	; (bd10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1978>)
    bbe0:	2600      	movs	r6, #0
    bbe2:	4621      	mov	r1, r4
    bbe4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bbe8:	6949      	ldr	r1, [r1, #20]
    bbea:	2001      	movs	r0, #1
    bbec:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    bbf0:	7909      	ldrb	r1, [r1, #4]
    bbf2:	4635      	mov	r5, r6
    bbf4:	2a0e      	cmp	r2, #14
    bbf6:	bf08      	it	eq
    bbf8:	2912      	cmpeq	r1, #18
    bbfa:	d01d      	beq.n	bc38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18a0>
    bbfc:	2a1c      	cmp	r2, #28
    bbfe:	bf08      	it	eq
    bc00:	2914      	cmpeq	r1, #20
    bc02:	d029      	beq.n	bc58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    bc04:	2a04      	cmp	r2, #4
    bc06:	bf08      	it	eq
    bc08:	290e      	cmpeq	r1, #14
    bc0a:	d043      	beq.n	bc94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18fc>
    bc0c:	2a20      	cmp	r2, #32
    bc0e:	bf08      	it	eq
    bc10:	2916      	cmpeq	r1, #22
    bc12:	d050      	beq.n	bcb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    bc14:	2a26      	cmp	r2, #38	; 0x26
    bc16:	bf08      	it	eq
    bc18:	2916      	cmpeq	r1, #22
    bc1a:	d04c      	beq.n	bcb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    bc1c:	2917      	cmp	r1, #23
    bc1e:	bf04      	itt	eq
    bc20:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    bc24:	2a22      	cmpeq	r2, #34	; 0x22
    bc26:	d059      	beq.n	bcdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1944>
    bc28:	69a2      	ldr	r2, [r4, #24]
    bc2a:	2a00      	cmp	r2, #0
    bc2c:	d054      	beq.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc2e:	29ff      	cmp	r1, #255	; 0xff
    bc30:	bf08      	it	eq
    bc32:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    bc36:	e04f      	b.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc38:	2301      	movs	r3, #1
    bc3a:	2109      	movs	r1, #9
    bc3c:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    bc40:	f004 fbb2 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bc44:	2800      	cmp	r0, #0
    bc46:	d047      	beq.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc48:	68e0      	ldr	r0, [r4, #12]
    bc4a:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    bc4e:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    bc52:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bc56:	e03f      	b.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc58:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bc5c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bc60:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    bc64:	f021 0120 	bic.w	r1, r1, #32
    bc68:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    bc6c:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    bc70:	2801      	cmp	r0, #1
    bc72:	bf04      	itt	eq
    bc74:	2002      	moveq	r0, #2
    bc76:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    bc7a:	d02d      	beq.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc7c:	f8bc 0000 	ldrh.w	r0, [ip]
    bc80:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    bc84:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    bc88:	f005 f80a 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    bc8c:	7960      	ldrb	r0, [r4, #5]
    bc8e:	f7f7 fff1 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bc92:	e021      	b.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc94:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bc98:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bc9c:	f8bc 1000 	ldrh.w	r1, [ip]
    bca0:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    bca4:	211a      	movs	r1, #26
    bca6:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    bcaa:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    bcae:	7960      	ldrb	r0, [r4, #5]
    bcb0:	f7f7 ffe0 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bcb4:	e010      	b.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bcb6:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bcba:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bcbe:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    bcc2:	2821      	cmp	r0, #33	; 0x21
    bcc4:	d008      	beq.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bcc6:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    bcca:	f020 0009 	bic.w	r0, r0, #9
    bcce:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    bcd2:	201a      	movs	r0, #26
    bcd4:	f7ff faec 	bl	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bcd8:	4630      	mov	r0, r6
    bcda:	bd70      	pop	{r4, r5, r6, pc}
    bcdc:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    bce0:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    bce4:	1e40      	subs	r0, r0, #1
    bce6:	b240      	sxtb	r0, r0
    bce8:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    bcec:	2800      	cmp	r0, #0
    bcee:	da04      	bge.n	bcfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1962>
    bcf0:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bcf4:	2031      	movs	r0, #49	; 0x31
    bcf6:	f7f8 f9c9 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcfa:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    bcfe:	2801      	cmp	r0, #1
    bd00:	bf04      	itt	eq
    bd02:	2000      	moveq	r0, #0
    bd04:	f7ff fad4 	bleq	b2b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bd08:	68e0      	ldr	r0, [r4, #12]
    bd0a:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    bd0e:	e7e3      	b.n	bcd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bd10:	20000140 	.word	0x20000140
    bd14:	b570      	push	{r4, r5, r6, lr}
    bd16:	4c33      	ldr	r4, [pc, #204]	; (bde4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a4c>)
    bd18:	68e0      	ldr	r0, [r4, #12]
    bd1a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bd1e:	f011 0f02 	tst.w	r1, #2
    bd22:	d00a      	beq.n	bd3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
    bd24:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bd28:	2301      	movs	r3, #1
    bd2a:	2108      	movs	r1, #8
    bd2c:	3078      	adds	r0, #120	; 0x78
    bd2e:	f004 fb3b 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bd32:	2800      	cmp	r0, #0
    bd34:	bf04      	itt	eq
    bd36:	2001      	moveq	r0, #1
    bd38:	bd70      	popeq	{r4, r5, r6, pc}
    bd3a:	68e0      	ldr	r0, [r4, #12]
    bd3c:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    bd40:	f010 0f02 	tst.w	r0, #2
    bd44:	d114      	bne.n	bd70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d8>
    bd46:	6960      	ldr	r0, [r4, #20]
    bd48:	f004 fdfc 	bl	10944 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    bd4c:	68e1      	ldr	r1, [r4, #12]
    bd4e:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    bd52:	6960      	ldr	r0, [r4, #20]
    bd54:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    bd58:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    bd5c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    bd60:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    bd64:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    bd68:	f040 0002 	orr.w	r0, r0, #2
    bd6c:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    bd70:	68e0      	ldr	r0, [r4, #12]
    bd72:	f04f 0500 	mov.w	r5, #0
    bd76:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    bd7a:	f011 0f01 	tst.w	r1, #1
    bd7e:	d114      	bne.n	bdaa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a12>
    bd80:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bd84:	f011 0f02 	tst.w	r1, #2
    bd88:	d004      	beq.n	bd94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fc>
    bd8a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    bd8e:	2031      	movs	r0, #49	; 0x31
    bd90:	f7f8 f97c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd94:	f041 0102 	orr.w	r1, r1, #2
    bd98:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bd9c:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    bda0:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bda4:	1c49      	adds	r1, r1, #1
    bda6:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bdaa:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bdae:	2906      	cmp	r1, #6
    bdb0:	d106      	bne.n	bdc0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    bdb2:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bdb6:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    bdba:	7960      	ldrb	r0, [r4, #5]
    bdbc:	f7f7 ff5a 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bdc0:	68e0      	ldr	r0, [r4, #12]
    bdc2:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    bdc6:	b159      	cbz	r1, bde0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a48>
    bdc8:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    bdcc:	7960      	ldrb	r0, [r4, #5]
    bdce:	f7f7 ff51 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bdd2:	68e0      	ldr	r0, [r4, #12]
    bdd4:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bdd8:	2900      	cmp	r1, #0
    bdda:	bf08      	it	eq
    bddc:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    bde0:	2000      	movs	r0, #0
    bde2:	bd70      	pop	{r4, r5, r6, pc}
    bde4:	20000140 	.word	0x20000140
    bde8:	4809      	ldr	r0, [pc, #36]	; (be10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a78>)
    bdea:	b510      	push	{r4, lr}
    bdec:	68c0      	ldr	r0, [r0, #12]
    bdee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bdf2:	2914      	cmp	r1, #20
    bdf4:	d004      	beq.n	be00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a68>
    bdf6:	f240 6187 	movw	r1, #1671	; 0x687
    bdfa:	2031      	movs	r0, #49	; 0x31
    bdfc:	f7f8 f946 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be00:	2101      	movs	r1, #1
    be02:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    be06:	2115      	movs	r1, #21
    be08:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    be0c:	bd10      	pop	{r4, pc}
    be0e:	0000      	.short	0x0000
    be10:	20000140 	.word	0x20000140
    be14:	480f      	ldr	r0, [pc, #60]	; (be54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abc>)
    be16:	b510      	push	{r4, lr}
    be18:	68c0      	ldr	r0, [r0, #12]
    be1a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    be1e:	f011 0f01 	tst.w	r1, #1
    be22:	d011      	beq.n	be48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ab0>
    be24:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    be28:	1e52      	subs	r2, r2, #1
    be2a:	b252      	sxtb	r2, r2
    be2c:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    be30:	2a00      	cmp	r2, #0
    be32:	bfa2      	ittt	ge
    be34:	f021 0101 	bicge.w	r1, r1, #1
    be38:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    be3c:	bd10      	popge	{r4, pc}
    be3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    be42:	2031      	movs	r0, #49	; 0x31
    be44:	f7f8 f922 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be48:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    be4c:	2031      	movs	r0, #49	; 0x31
    be4e:	f7f8 f91d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be52:	0000      	.short	0x0000
    be54:	20000140 	.word	0x20000140
    be58:	b510      	push	{r4, lr}
    be5a:	4c0a      	ldr	r4, [pc, #40]	; (be84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>)
    be5c:	2301      	movs	r3, #1
    be5e:	2100      	movs	r1, #0
    be60:	68e0      	ldr	r0, [r4, #12]
    be62:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    be66:	3078      	adds	r0, #120	; 0x78
    be68:	f004 fa9e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be6c:	b120      	cbz	r0, be78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae0>
    be6e:	68e1      	ldr	r1, [r4, #12]
    be70:	201c      	movs	r0, #28
    be72:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    be76:	bd10      	pop	{r4, pc}
    be78:	f240 61f5 	movw	r1, #1781	; 0x6f5
    be7c:	2031      	movs	r0, #49	; 0x31
    be7e:	f7f8 f905 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be82:	0000      	.short	0x0000
    be84:	20000140 	.word	0x20000140
    be88:	480f      	ldr	r0, [pc, #60]	; (bec8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b30>)
    be8a:	b510      	push	{r4, lr}
    be8c:	68c0      	ldr	r0, [r0, #12]
    be8e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    be92:	f001 0230 	and.w	r2, r1, #48	; 0x30
    be96:	2a10      	cmp	r2, #16
    be98:	d004      	beq.n	bea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    be9a:	f240 61fc 	movw	r1, #1788	; 0x6fc
    be9e:	2031      	movs	r0, #49	; 0x31
    bea0:	f7f8 f8f4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bea4:	f021 0110 	bic.w	r1, r1, #16
    bea8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    beac:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    beb0:	1e49      	subs	r1, r1, #1
    beb2:	b249      	sxtb	r1, r1
    beb4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    beb8:	2900      	cmp	r1, #0
    beba:	bfa8      	it	ge
    bebc:	bd10      	popge	{r4, pc}
    bebe:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bec2:	2031      	movs	r0, #49	; 0x31
    bec4:	f7f8 f8e2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bec8:	20000140 	.word	0x20000140
    becc:	b510      	push	{r4, lr}
    bece:	4c0a      	ldr	r4, [pc, #40]	; (bef8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b60>)
    bed0:	2301      	movs	r3, #1
    bed2:	2100      	movs	r1, #0
    bed4:	68e0      	ldr	r0, [r4, #12]
    bed6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    beda:	3078      	adds	r0, #120	; 0x78
    bedc:	f004 fa64 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bee0:	b120      	cbz	r0, beec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b54>
    bee2:	68e1      	ldr	r1, [r4, #12]
    bee4:	200e      	movs	r0, #14
    bee6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    beea:	bd10      	pop	{r4, pc}
    beec:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    bef0:	2031      	movs	r0, #49	; 0x31
    bef2:	f7f8 f8cb 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bef6:	0000      	.short	0x0000
    bef8:	20000140 	.word	0x20000140
    befc:	480b      	ldr	r0, [pc, #44]	; (bf2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b94>)
    befe:	68c0      	ldr	r0, [r0, #12]
    bf00:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bf04:	f021 0104 	bic.w	r1, r1, #4
    bf08:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bf0c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bf10:	1e49      	subs	r1, r1, #1
    bf12:	b249      	sxtb	r1, r1
    bf14:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bf18:	2900      	cmp	r1, #0
    bf1a:	bfa8      	it	ge
    bf1c:	4770      	bxge	lr
    bf1e:	b510      	push	{r4, lr}
    bf20:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bf24:	2031      	movs	r0, #49	; 0x31
    bf26:	f7f8 f8b1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf2a:	0000      	.short	0x0000
    bf2c:	20000140 	.word	0x20000140
    bf30:	4809      	ldr	r0, [pc, #36]	; (bf58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc0>)
    bf32:	b510      	push	{r4, lr}
    bf34:	68c0      	ldr	r0, [r0, #12]
    bf36:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bf3a:	2910      	cmp	r1, #16
    bf3c:	d004      	beq.n	bf48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>
    bf3e:	f240 617f 	movw	r1, #1663	; 0x67f
    bf42:	2031      	movs	r0, #49	; 0x31
    bf44:	f7f8 f8a2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf48:	2101      	movs	r1, #1
    bf4a:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    bf4e:	2111      	movs	r1, #17
    bf50:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bf54:	bd10      	pop	{r4, pc}
    bf56:	0000      	.short	0x0000
    bf58:	20000140 	.word	0x20000140
    bf5c:	b510      	push	{r4, lr}
    bf5e:	4c0a      	ldr	r4, [pc, #40]	; (bf88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf0>)
    bf60:	2301      	movs	r3, #1
    bf62:	2100      	movs	r1, #0
    bf64:	68e0      	ldr	r0, [r4, #12]
    bf66:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bf6a:	3078      	adds	r0, #120	; 0x78
    bf6c:	f004 fa1c 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf70:	b120      	cbz	r0, bf7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be4>
    bf72:	68e1      	ldr	r1, [r4, #12]
    bf74:	201f      	movs	r0, #31
    bf76:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bf7a:	bd10      	pop	{r4, pc}
    bf7c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    bf80:	2031      	movs	r0, #49	; 0x31
    bf82:	f7f8 f883 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf86:	0000      	.short	0x0000
    bf88:	20000140 	.word	0x20000140
    bf8c:	4808      	ldr	r0, [pc, #32]	; (bfb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>)
    bf8e:	b510      	push	{r4, lr}
    bf90:	68c0      	ldr	r0, [r0, #12]
    bf92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bf96:	2921      	cmp	r1, #33	; 0x21
    bf98:	bf11      	iteee	ne
    bf9a:	2900      	cmpne	r1, #0
    bf9c:	2122      	moveq	r1, #34	; 0x22
    bf9e:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bfa2:	bd10      	popeq	{r4, pc}
    bfa4:	f240 710f 	movw	r1, #1807	; 0x70f
    bfa8:	f04f 0031 	mov.w	r0, #49	; 0x31
    bfac:	f7f8 f86e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb0:	20000140 	.word	0x20000140
    bfb4:	4807      	ldr	r0, [pc, #28]	; (bfd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c3c>)
    bfb6:	b510      	push	{r4, lr}
    bfb8:	68c0      	ldr	r0, [r0, #12]
    bfba:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bfbe:	2915      	cmp	r1, #21
    bfc0:	bf02      	ittt	eq
    bfc2:	2119      	moveq	r1, #25
    bfc4:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bfc8:	bd10      	popeq	{r4, pc}
    bfca:	f240 6194 	movw	r1, #1684	; 0x694
    bfce:	2031      	movs	r0, #49	; 0x31
    bfd0:	f7f8 f85c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfd4:	20000140 	.word	0x20000140
    bfd8:	4807      	ldr	r0, [pc, #28]	; (bff8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c60>)
    bfda:	b510      	push	{r4, lr}
    bfdc:	68c0      	ldr	r0, [r0, #12]
    bfde:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bfe2:	2915      	cmp	r1, #21
    bfe4:	bf02      	ittt	eq
    bfe6:	2117      	moveq	r1, #23
    bfe8:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bfec:	bd10      	popeq	{r4, pc}
    bfee:	f240 618e 	movw	r1, #1678	; 0x68e
    bff2:	2031      	movs	r0, #49	; 0x31
    bff4:	f7f8 f84a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bff8:	20000140 	.word	0x20000140
    bffc:	b570      	push	{r4, r5, r6, lr}
    bffe:	4d1c      	ldr	r5, [pc, #112]	; (c070 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cd8>)
    c000:	68e8      	ldr	r0, [r5, #12]
    c002:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    c006:	291b      	cmp	r1, #27
    c008:	d004      	beq.n	c014 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c7c>
    c00a:	f240 61ae 	movw	r1, #1710	; 0x6ae
    c00e:	2031      	movs	r0, #49	; 0x31
    c010:	f7f8 f83c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c014:	2400      	movs	r4, #0
    c016:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    c01a:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    c01e:	b121      	cbz	r1, c02a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c92>
    c020:	f240 61b2 	movw	r1, #1714	; 0x6b2
    c024:	2031      	movs	r0, #49	; 0x31
    c026:	f7f8 f831 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c02a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    c02e:	b141      	cbz	r1, c042 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1caa>
    c030:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    c034:	8801      	ldrh	r1, [r0, #0]
    c036:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    c03a:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    c03e:	210e      	movs	r1, #14
    c040:	e008      	b.n	c054 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    c042:	8801      	ldrh	r1, [r0, #0]
    c044:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    c048:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    c04c:	2101      	movs	r1, #1
    c04e:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    c052:	210d      	movs	r1, #13
    c054:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    c058:	8800      	ldrh	r0, [r0, #0]
    c05a:	f7f8 fbcf 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    c05e:	f003 ff08 	bl	fe72 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    c062:	7968      	ldrb	r0, [r5, #5]
    c064:	f7f7 fe06 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c068:	68e8      	ldr	r0, [r5, #12]
    c06a:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    c06e:	bd70      	pop	{r4, r5, r6, pc}
    c070:	20000140 	.word	0x20000140
    c074:	b510      	push	{r4, lr}
    c076:	4c08      	ldr	r4, [pc, #32]	; (c098 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    c078:	2301      	movs	r3, #1
    c07a:	4619      	mov	r1, r3
    c07c:	68e0      	ldr	r0, [r4, #12]
    c07e:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    c082:	3078      	adds	r0, #120	; 0x78
    c084:	f004 f990 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c088:	2800      	cmp	r0, #0
    c08a:	bf18      	it	ne
    c08c:	bd10      	popne	{r4, pc}
    c08e:	2008      	movs	r0, #8
    c090:	68e1      	ldr	r1, [r4, #12]
    c092:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    c096:	bd10      	pop	{r4, pc}
    c098:	20000140 	.word	0x20000140
    c09c:	481b      	ldr	r0, [pc, #108]	; (c10c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d74>)
    c09e:	b510      	push	{r4, lr}
    c0a0:	6901      	ldr	r1, [r0, #16]
    c0a2:	68c0      	ldr	r0, [r0, #12]
    c0a4:	2200      	movs	r2, #0
    c0a6:	7909      	ldrb	r1, [r1, #4]
    c0a8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c0ac:	2b0a      	cmp	r3, #10
    c0ae:	bf01      	itttt	eq
    c0b0:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    c0b4:	428b      	cmpeq	r3, r1
    c0b6:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c0ba:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    c0be:	bf08      	it	eq
    c0c0:	bd10      	popeq	{r4, pc}
    c0c2:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    c0c6:	f013 0f08 	tst.w	r3, #8
    c0ca:	d012      	beq.n	c0f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d5a>
    c0cc:	f023 0108 	bic.w	r1, r3, #8
    c0d0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c0d4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c0d8:	f1a1 0101 	sub.w	r1, r1, #1
    c0dc:	b249      	sxtb	r1, r1
    c0de:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c0e2:	2900      	cmp	r1, #0
    c0e4:	bfa8      	it	ge
    c0e6:	bd10      	popge	{r4, pc}
    c0e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c0ec:	2031      	movs	r0, #49	; 0x31
    c0ee:	f7f7 ffcd 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0f2:	29ff      	cmp	r1, #255	; 0xff
    c0f4:	d004      	beq.n	c100 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d68>
    c0f6:	f240 616a 	movw	r1, #1642	; 0x66a
    c0fa:	2031      	movs	r0, #49	; 0x31
    c0fc:	f7f7 ffc6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c100:	2127      	movs	r1, #39	; 0x27
    c102:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    c106:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    c10a:	bd10      	pop	{r4, pc}
    c10c:	20000140 	.word	0x20000140
    c110:	b510      	push	{r4, lr}
    c112:	4c1b      	ldr	r4, [pc, #108]	; (c180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1de8>)
    c114:	68e0      	ldr	r0, [r4, #12]
    c116:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    c11a:	f011 0f02 	tst.w	r1, #2
    c11e:	d01d      	beq.n	c15c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>
    c120:	2100      	movs	r1, #0
    c122:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    c126:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    c12a:	68e0      	ldr	r0, [r4, #12]
    c12c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c130:	f011 0f02 	tst.w	r1, #2
    c134:	bf08      	it	eq
    c136:	bd10      	popeq	{r4, pc}
    c138:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    c13c:	1e52      	subs	r2, r2, #1
    c13e:	b252      	sxtb	r2, r2
    c140:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    c144:	2a00      	cmp	r2, #0
    c146:	bfa2      	ittt	ge
    c148:	f021 0102 	bicge.w	r1, r1, #2
    c14c:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    c150:	bd10      	popge	{r4, pc}
    c152:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c156:	2031      	movs	r0, #49	; 0x31
    c158:	f7f7 ff98 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c15c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c160:	2301      	movs	r3, #1
    c162:	2100      	movs	r1, #0
    c164:	3078      	adds	r0, #120	; 0x78
    c166:	f004 f91f 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c16a:	b120      	cbz	r0, c176 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dde>
    c16c:	68e1      	ldr	r1, [r4, #12]
    c16e:	2006      	movs	r0, #6
    c170:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c174:	e7d9      	b.n	c12a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d92>
    c176:	f240 61d4 	movw	r1, #1748	; 0x6d4
    c17a:	2031      	movs	r0, #49	; 0x31
    c17c:	f7f7 ff86 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c180:	20000140 	.word	0x20000140

0000c184 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    c184:	4804      	ldr	r0, [pc, #16]	; (c198 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    c186:	6840      	ldr	r0, [r0, #4]
    c188:	7801      	ldrb	r1, [r0, #0]
    c18a:	2900      	cmp	r1, #0
    c18c:	bf14      	ite	ne
    c18e:	8880      	ldrhne	r0, [r0, #4]
    c190:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    c194:	4770      	bx	lr
    c196:	0000      	.short	0x0000
    c198:	20000228 	.word	0x20000228

0000c19c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    c19c:	4902      	ldr	r1, [pc, #8]	; (c1a8 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    c19e:	6849      	ldr	r1, [r1, #4]
    c1a0:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    c1a4:	4770      	bx	lr
    c1a6:	0000      	.short	0x0000
    c1a8:	20000228 	.word	0x20000228

0000c1ac <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    c1ac:	4802      	ldr	r0, [pc, #8]	; (c1b8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    c1ae:	6840      	ldr	r0, [r0, #4]
    c1b0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    c1b4:	4770      	bx	lr
    c1b6:	0000      	.short	0x0000
    c1b8:	20000228 	.word	0x20000228

0000c1bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    c1bc:	480c      	ldr	r0, [pc, #48]	; (c1f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    c1be:	6841      	ldr	r1, [r0, #4]
    c1c0:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    c1c4:	2803      	cmp	r0, #3
    c1c6:	d004      	beq.n	c1d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    c1c8:	2801      	cmp	r0, #1
    c1ca:	bf18      	it	ne
    c1cc:	2802      	cmpne	r0, #2
    c1ce:	d007      	beq.n	c1e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    c1d0:	e004      	b.n	c1dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    c1d2:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    c1d6:	2801      	cmp	r0, #1
    c1d8:	bf08      	it	eq
    c1da:	4770      	bxeq	lr
    c1dc:	2000      	movs	r0, #0
    c1de:	4770      	bx	lr
    c1e0:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    c1e4:	2801      	cmp	r0, #1
    c1e6:	bf14      	ite	ne
    c1e8:	2803      	cmpne	r0, #3
    c1ea:	2001      	moveq	r0, #1
    c1ec:	d1f6      	bne.n	c1dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    c1ee:	4770      	bx	lr
    c1f0:	20000228 	.word	0x20000228

0000c1f4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    c1f4:	4806      	ldr	r0, [pc, #24]	; (c210 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    c1f6:	7800      	ldrb	r0, [r0, #0]
    c1f8:	2800      	cmp	r0, #0
    c1fa:	bf1c      	itt	ne
    c1fc:	2000      	movne	r0, #0
    c1fe:	4770      	bxne	lr
    c200:	b510      	push	{r4, lr}
    c202:	2000      	movs	r0, #0
    c204:	f003 ff67 	bl	100d6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    c208:	f080 0001 	eor.w	r0, r0, #1
    c20c:	bd10      	pop	{r4, pc}
    c20e:	0000      	.short	0x0000
    c210:	2000173c 	.word	0x2000173c

0000c214 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    c214:	4901      	ldr	r1, [pc, #4]	; (c21c <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    c216:	6048      	str	r0, [r1, #4]
    c218:	4770      	bx	lr
    c21a:	0000      	.short	0x0000
    c21c:	20001720 	.word	0x20001720

0000c220 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    c220:	4901      	ldr	r1, [pc, #4]	; (c228 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    c222:	7048      	strb	r0, [r1, #1]
    c224:	4770      	bx	lr
    c226:	0000      	.short	0x0000
    c228:	20001720 	.word	0x20001720

0000c22c <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    c22c:	4905      	ldr	r1, [pc, #20]	; (c244 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    c22e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c232:	fbb1 f1f2 	udiv	r1, r1, r2
    c236:	b510      	push	{r4, lr}
    c238:	f201 11df 	addw	r1, r1, #479	; 0x1df
    c23c:	f004 fe5d 	bl	10efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    c240:	b280      	uxth	r0, r0
    c242:	bd10      	pop	{r4, pc}
    c244:	00012105 	.word	0x00012105

0000c248 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    c248:	4801      	ldr	r0, [pc, #4]	; (c250 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    c24a:	7800      	ldrb	r0, [r0, #0]
    c24c:	4770      	bx	lr
    c24e:	0000      	.short	0x0000
    c250:	2000173c 	.word	0x2000173c

0000c254 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    c254:	4a01      	ldr	r2, [pc, #4]	; (c25c <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    c256:	e9c2 0105 	strd	r0, r1, [r2, #20]
    c25a:	4770      	bx	lr
    c25c:	20000238 	.word	0x20000238

0000c260 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    c260:	4806      	ldr	r0, [pc, #24]	; (c27c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    c262:	4905      	ldr	r1, [pc, #20]	; (c278 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    c264:	6501      	str	r1, [r0, #80]	; 0x50
    c266:	4906      	ldr	r1, [pc, #24]	; (c280 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    c268:	6541      	str	r1, [r0, #84]	; 0x54
    c26a:	4807      	ldr	r0, [pc, #28]	; (c288 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    c26c:	4905      	ldr	r1, [pc, #20]	; (c284 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    c26e:	6501      	str	r1, [r0, #80]	; 0x50
    c270:	4906      	ldr	r1, [pc, #24]	; (c28c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    c272:	6541      	str	r1, [r0, #84]	; 0x54
    c274:	4770      	bx	lr
    c276:	0000      	.short	0x0000
    c278:	0000c395 	.word	0x0000c395
    c27c:	20000254 	.word	0x20000254
    c280:	0000c455 	.word	0x0000c455
    c284:	0000c699 	.word	0x0000c699
    c288:	200002b8 	.word	0x200002b8
    c28c:	0000c6c9 	.word	0x0000c6c9

0000c290 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    c290:	4806      	ldr	r0, [pc, #24]	; (c2ac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    c292:	4905      	ldr	r1, [pc, #20]	; (c2a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    c294:	6581      	str	r1, [r0, #88]	; 0x58
    c296:	4906      	ldr	r1, [pc, #24]	; (c2b0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    c298:	65c1      	str	r1, [r0, #92]	; 0x5c
    c29a:	4807      	ldr	r0, [pc, #28]	; (c2b8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    c29c:	4905      	ldr	r1, [pc, #20]	; (c2b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    c29e:	6581      	str	r1, [r0, #88]	; 0x58
    c2a0:	4906      	ldr	r1, [pc, #24]	; (c2bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    c2a2:	6601      	str	r1, [r0, #96]	; 0x60
    c2a4:	4770      	bx	lr
    c2a6:	0000      	.short	0x0000
    c2a8:	0000c4e5 	.word	0x0000c4e5
    c2ac:	20000254 	.word	0x20000254
    c2b0:	0000c5f9 	.word	0x0000c5f9
    c2b4:	0000c6f9 	.word	0x0000c6f9
    c2b8:	200002b8 	.word	0x200002b8
    c2bc:	0000c729 	.word	0x0000c729
    c2c0:	4a15      	ldr	r2, [pc, #84]	; (c318 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x88>)
    c2c2:	b510      	push	{r4, lr}
    c2c4:	6891      	ldr	r1, [r2, #8]
    c2c6:	880b      	ldrh	r3, [r1, #0]
    c2c8:	f8a1 3178 	strh.w	r3, [r1, #376]	; 0x178
    c2cc:	f881 0176 	strb.w	r0, [r1, #374]	; 0x176
    c2d0:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    c2d4:	2801      	cmp	r0, #1
    c2d6:	bf18      	it	ne
    c2d8:	2802      	cmpne	r0, #2
    c2da:	d005      	beq.n	c2e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    c2dc:	f240 218f 	movw	r1, #655	; 0x28f
    c2e0:	f04f 0006 	mov.w	r0, #6
    c2e4:	f7f7 fed2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2e8:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    c2ec:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    c2f0:	2801      	cmp	r0, #1
    c2f2:	bf18      	it	ne
    c2f4:	2802      	cmpne	r0, #2
    c2f6:	d1f1      	bne.n	c2dc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4c>
    c2f8:	f881 017b 	strb.w	r0, [r1, #379]	; 0x17b
    c2fc:	f04f 0001 	mov.w	r0, #1
    c300:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    c304:	f04f 0000 	mov.w	r0, #0
    c308:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
    c30c:	78d0      	ldrb	r0, [r2, #3]
    c30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c312:	f7f7 bcaf 	b.w	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c316:	0000      	.short	0x0000
    c318:	20000238 	.word	0x20000238
    c31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c320:	4c1b      	ldr	r4, [pc, #108]	; (c390 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x100>)
    c322:	2600      	movs	r6, #0
    c324:	2703      	movs	r7, #3
    c326:	f8d4 c008 	ldr.w	ip, [r4, #8]
    c32a:	2501      	movs	r5, #1
    c32c:	b1a0      	cbz	r0, c358 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xc8>
    c32e:	6920      	ldr	r0, [r4, #16]
    c330:	78c0      	ldrb	r0, [r0, #3]
    c332:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    c336:	fa05 f000 	lsl.w	r0, r5, r0
    c33a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c33e:	d006      	beq.n	c34e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xbe>
    c340:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    c344:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    c348:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    c34c:	e01c      	b.n	c388 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xf8>
    c34e:	f240 5159 	movw	r1, #1369	; 0x559
    c352:	2036      	movs	r0, #54	; 0x36
    c354:	f7f7 fe9a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c358:	2300      	movs	r3, #0
    c35a:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    c35e:	4619      	mov	r1, r3
    c360:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c364:	f004 f820 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c368:	2800      	cmp	r0, #0
    c36a:	bf04      	itt	eq
    c36c:	2001      	moveq	r0, #1
    c36e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c372:	6920      	ldr	r0, [r4, #16]
    c374:	78c1      	ldrb	r1, [r0, #3]
    c376:	68a0      	ldr	r0, [r4, #8]
    c378:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    c37c:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    c380:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    c384:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c388:	2000      	movs	r0, #0
    c38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c38e:	0000      	.short	0x0000
    c390:	20000238 	.word	0x20000238
    c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c396:	4c2e      	ldr	r4, [pc, #184]	; (c450 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c0>)
    c398:	2300      	movs	r3, #0
    c39a:	4619      	mov	r1, r3
    c39c:	68a0      	ldr	r0, [r4, #8]
    c39e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c3a2:	3078      	adds	r0, #120	; 0x78
    c3a4:	f004 f800 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c3a8:	2800      	cmp	r0, #0
    c3aa:	bf04      	itt	eq
    c3ac:	2001      	moveq	r0, #1
    c3ae:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c3b0:	6920      	ldr	r0, [r4, #16]
    c3b2:	f004 fac9 	bl	10948 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c3b6:	2800      	cmp	r0, #0
    c3b8:	d02f      	beq.n	c41a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18a>
    c3ba:	6920      	ldr	r0, [r4, #16]
    c3bc:	f004 fab6 	bl	1092c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c3c0:	4605      	mov	r5, r0
    c3c2:	6920      	ldr	r0, [r4, #16]
    c3c4:	f004 fab6 	bl	10934 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c3c8:	4606      	mov	r6, r0
    c3ca:	6920      	ldr	r0, [r4, #16]
    c3cc:	f004 faac 	bl	10928 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c3d0:	4607      	mov	r7, r0
    c3d2:	6920      	ldr	r0, [r4, #16]
    c3d4:	f004 faac 	bl	10930 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c3d8:	4601      	mov	r1, r0
    c3da:	9500      	str	r5, [sp, #0]
    c3dc:	68a0      	ldr	r0, [r4, #8]
    c3de:	4633      	mov	r3, r6
    c3e0:	463a      	mov	r2, r7
    c3e2:	3028      	adds	r0, #40	; 0x28
    c3e4:	f004 fd94 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c3e8:	68a1      	ldr	r1, [r4, #8]
    c3ea:	2501      	movs	r5, #1
    c3ec:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    c3f0:	281c      	cmp	r0, #28
    c3f2:	bf16      	itet	ne
    c3f4:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    c3f8:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    c3fc:	2801      	cmpne	r0, #1
    c3fe:	d007      	beq.n	c410 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x180>
    c400:	f891 0139 	ldrb.w	r0, [r1, #313]	; 0x139
    c404:	2800      	cmp	r0, #0
    c406:	bf04      	itt	eq
    c408:	f891 0138 	ldrbeq.w	r0, [r1, #312]	; 0x138
    c40c:	2800      	cmpeq	r0, #0
    c40e:	d00a      	beq.n	c426 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x196>
    c410:	f04f 001e 	mov.w	r0, #30
    c414:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c418:	e011      	b.n	c43e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1ae>
    c41a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c41e:	f04f 0000 	mov.w	r0, #0
    c422:	f7ff bf7b 	b.w	c31c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c426:	201d      	movs	r0, #29
    c428:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c42c:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    c430:	f831 0b28 	ldrh.w	r0, [r1], #40
    c434:	f004 fd74 	bl	10f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    c438:	78e0      	ldrb	r0, [r4, #3]
    c43a:	f7f7 fc1b 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c43e:	68a0      	ldr	r0, [r4, #8]
    c440:	2100      	movs	r1, #0
    c442:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c446:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c44a:	4608      	mov	r0, r1
    c44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c44e:	0000      	.short	0x0000
    c450:	20000238 	.word	0x20000238
    c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c456:	4c22      	ldr	r4, [pc, #136]	; (c4e0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    c458:	2300      	movs	r3, #0
    c45a:	210a      	movs	r1, #10
    c45c:	68a0      	ldr	r0, [r4, #8]
    c45e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c462:	3078      	adds	r0, #120	; 0x78
    c464:	f003 ffa0 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c468:	2800      	cmp	r0, #0
    c46a:	bf04      	itt	eq
    c46c:	2001      	moveq	r0, #1
    c46e:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c470:	6920      	ldr	r0, [r4, #16]
    c472:	f004 fa69 	bl	10948 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c476:	b1c8      	cbz	r0, c4ac <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x21c>
    c478:	6920      	ldr	r0, [r4, #16]
    c47a:	f004 fa57 	bl	1092c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c47e:	4605      	mov	r5, r0
    c480:	6920      	ldr	r0, [r4, #16]
    c482:	f004 fa57 	bl	10934 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c486:	4606      	mov	r6, r0
    c488:	6920      	ldr	r0, [r4, #16]
    c48a:	f004 fa4d 	bl	10928 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c48e:	4607      	mov	r7, r0
    c490:	6920      	ldr	r0, [r4, #16]
    c492:	f004 fa4d 	bl	10930 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c496:	4601      	mov	r1, r0
    c498:	9500      	str	r5, [sp, #0]
    c49a:	68a0      	ldr	r0, [r4, #8]
    c49c:	4633      	mov	r3, r6
    c49e:	463a      	mov	r2, r7
    c4a0:	3028      	adds	r0, #40	; 0x28
    c4a2:	f004 fd35 	bl	10f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c4a6:	68a0      	ldr	r0, [r4, #8]
    c4a8:	f004 fc77 	bl	10d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    c4ac:	68a1      	ldr	r1, [r4, #8]
    c4ae:	2000      	movs	r0, #0
    c4b0:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c4b4:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c4b8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    c4bc:	2801      	cmp	r0, #1
    c4be:	bf04      	itt	eq
    c4c0:	2002      	moveq	r0, #2
    c4c2:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    c4c6:	d008      	beq.n	c4da <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24a>
    c4c8:	8808      	ldrh	r0, [r1, #0]
    c4ca:	f501 72aa 	add.w	r2, r1, #340	; 0x154
    c4ce:	3128      	adds	r1, #40	; 0x28
    c4d0:	f004 fbe6 	bl	10ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    c4d4:	78e0      	ldrb	r0, [r4, #3]
    c4d6:	f7f7 fbcd 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c4da:	2000      	movs	r0, #0
    c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4de:	0000      	.short	0x0000
    c4e0:	20000238 	.word	0x20000238
    c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4e6:	4c43      	ldr	r4, [pc, #268]	; (c5f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x364>)
    c4e8:	2500      	movs	r5, #0
    c4ea:	b087      	sub	sp, #28
    c4ec:	68a0      	ldr	r0, [r4, #8]
    c4ee:	462b      	mov	r3, r5
    c4f0:	4629      	mov	r1, r5
    c4f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c4f6:	3078      	adds	r0, #120	; 0x78
    c4f8:	f003 ff56 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4fc:	2800      	cmp	r0, #0
    c4fe:	bf02      	ittt	eq
    c500:	2001      	moveq	r0, #1
    c502:	b007      	addeq	sp, #28
    c504:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c506:	68a0      	ldr	r0, [r4, #8]
    c508:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c50c:	2823      	cmp	r0, #35	; 0x23
    c50e:	bf11      	iteee	ne
    c510:	2824      	cmpne	r0, #36	; 0x24
    c512:	2020      	moveq	r0, #32
    c514:	b007      	addeq	sp, #28
    c516:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c518:	4668      	mov	r0, sp
    c51a:	f7f8 fc8d 	bl	4e38 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    c51e:	2800      	cmp	r0, #0
    c520:	bf08      	it	eq
    c522:	2100      	moveq	r1, #0
    c524:	d004      	beq.n	c530 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2a0>
    c526:	9800      	ldr	r0, [sp, #0]
    c528:	a901      	add	r1, sp, #4
    c52a:	78c0      	ldrb	r0, [r0, #3]
    c52c:	f88d 0004 	strb.w	r0, [sp, #4]
    c530:	68a0      	ldr	r0, [r4, #8]
    c532:	ab04      	add	r3, sp, #16
    c534:	2216      	movs	r2, #22
    c536:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c53a:	f004 f80b 	bl	10554 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    c53e:	2700      	movs	r7, #0
    c540:	2601      	movs	r6, #1
    c542:	b188      	cbz	r0, c568 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2d8>
    c544:	68a0      	ldr	r0, [r4, #8]
    c546:	f89d 2010 	ldrb.w	r2, [sp, #16]
    c54a:	2116      	movs	r1, #22
    c54c:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    c550:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    c554:	2119      	movs	r1, #25
    c556:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c55a:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c55e:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c562:	b007      	add	sp, #28
    c564:	2000      	movs	r0, #0
    c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c568:	6920      	ldr	r0, [r4, #16]
    c56a:	f004 fa08 	bl	1097e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c56e:	b178      	cbz	r0, c590 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x300>
    c570:	6922      	ldr	r2, [r4, #16]
    c572:	68a1      	ldr	r1, [r4, #8]
    c574:	7910      	ldrb	r0, [r2, #4]
    c576:	f000 0007 	and.w	r0, r0, #7
    c57a:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    c57e:	7952      	ldrb	r2, [r2, #5]
    c580:	f002 0307 	and.w	r3, r2, #7
    c584:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    c588:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    c58c:	b12a      	cbz	r2, c59a <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30a>
    c58e:	e026      	b.n	c5de <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c590:	2000      	movs	r0, #0
    c592:	f7ff fec3 	bl	c31c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c596:	4605      	mov	r5, r0
    c598:	e029      	b.n	c5ee <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x35e>
    c59a:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    c59e:	2a01      	cmp	r2, #1
    c5a0:	d01d      	beq.n	c5de <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c5a2:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    c5a6:	f101 0266 	add.w	r2, r1, #102	; 0x66
    c5aa:	4584      	cmp	ip, r0
    c5ac:	bf01      	itttt	eq
    c5ae:	7810      	ldrbeq	r0, [r2, #0]
    c5b0:	4298      	cmpeq	r0, r3
    c5b2:	2002      	moveq	r0, #2
    c5b4:	f881 0142 	strbeq.w	r0, [r1, #322]	; 0x142
    c5b8:	d011      	beq.n	c5de <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c5ba:	880a      	ldrh	r2, [r1, #0]
    c5bc:	f8a1 2170 	strh.w	r2, [r1, #368]	; 0x170
    c5c0:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    c5c4:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
    c5c8:	f881 2172 	strb.w	r2, [r1, #370]	; 0x172
    c5cc:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    c5d0:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    c5d4:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    c5d8:	78e0      	ldrb	r0, [r4, #3]
    c5da:	f7f7 fb4b 	bl	3c74 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c5de:	68a0      	ldr	r0, [r4, #8]
    c5e0:	2121      	movs	r1, #33	; 0x21
    c5e2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c5e6:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c5ea:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c5ee:	b007      	add	sp, #28
    c5f0:	4628      	mov	r0, r5
    c5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5f4:	20000238 	.word	0x20000238
    c5f8:	b538      	push	{r3, r4, r5, lr}
    c5fa:	4c26      	ldr	r4, [pc, #152]	; (c694 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x404>)
    c5fc:	68a0      	ldr	r0, [r4, #8]
    c5fe:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c602:	281f      	cmp	r0, #31
    c604:	bf1c      	itt	ne
    c606:	2001      	movne	r0, #1
    c608:	bd38      	popne	{r3, r4, r5, pc}
    c60a:	6920      	ldr	r0, [r4, #16]
    c60c:	f004 f9c1 	bl	10992 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    c610:	2800      	cmp	r0, #0
    c612:	d036      	beq.n	c682 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3f2>
    c614:	6920      	ldr	r0, [r4, #16]
    c616:	68a2      	ldr	r2, [r4, #8]
    c618:	7901      	ldrb	r1, [r0, #4]
    c61a:	7940      	ldrb	r0, [r0, #5]
    c61c:	f001 0107 	and.w	r1, r1, #7
    c620:	f361 0507 	bfi	r5, r1, #0, #8
    c624:	4629      	mov	r1, r5
    c626:	f000 0007 	and.w	r0, r0, #7
    c62a:	f360 210f 	bfi	r1, r0, #8, #8
    c62e:	2001      	movs	r0, #1
    c630:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    c634:	2500      	movs	r5, #0
    c636:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    c63a:	2023      	movs	r0, #35	; 0x23
    c63c:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    c640:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
    c644:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    c648:	f8ad 2000 	strh.w	r2, [sp]
    c64c:	f003 ff9e 	bl	1058c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c650:	f89d 2000 	ldrb.w	r2, [sp]
    c654:	b2c1      	uxtb	r1, r0
    c656:	428a      	cmp	r2, r1
    c658:	bf07      	ittee	eq
    c65a:	68a1      	ldreq	r1, [r4, #8]
    c65c:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    c660:	68a2      	ldrne	r2, [r4, #8]
    c662:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    c666:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c66a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c66e:	4281      	cmp	r1, r0
    c670:	bf19      	ittee	ne
    c672:	68a1      	ldrne	r1, [r4, #8]
    c674:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    c678:	68a0      	ldreq	r0, [r4, #8]
    c67a:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    c67e:	2000      	movs	r0, #0
    c680:	bd38      	pop	{r3, r4, r5, pc}
    c682:	2001      	movs	r0, #1
    c684:	f7ff fe4a 	bl	c31c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c688:	4604      	mov	r4, r0
    c68a:	201e      	movs	r0, #30
    c68c:	f7ff fe18 	bl	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c690:	4620      	mov	r0, r4
    c692:	bd38      	pop	{r3, r4, r5, pc}
    c694:	20000238 	.word	0x20000238
    c698:	b510      	push	{r4, lr}
    c69a:	4c0a      	ldr	r4, [pc, #40]	; (c6c4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x434>)
    c69c:	2300      	movs	r3, #0
    c69e:	4619      	mov	r1, r3
    c6a0:	68a0      	ldr	r0, [r4, #8]
    c6a2:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c6a6:	3078      	adds	r0, #120	; 0x78
    c6a8:	f003 fe7e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c6ac:	b120      	cbz	r0, c6b8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x428>
    c6ae:	68a1      	ldr	r1, [r4, #8]
    c6b0:	201c      	movs	r0, #28
    c6b2:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c6b6:	bd10      	pop	{r4, pc}
    c6b8:	f240 6162 	movw	r1, #1634	; 0x662
    c6bc:	2036      	movs	r0, #54	; 0x36
    c6be:	f7f7 fce5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6c2:	0000      	.short	0x0000
    c6c4:	20000238 	.word	0x20000238
    c6c8:	b510      	push	{r4, lr}
    c6ca:	4c0a      	ldr	r4, [pc, #40]	; (c6f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x464>)
    c6cc:	2300      	movs	r3, #0
    c6ce:	4619      	mov	r1, r3
    c6d0:	68a0      	ldr	r0, [r4, #8]
    c6d2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c6d6:	3078      	adds	r0, #120	; 0x78
    c6d8:	f003 fe66 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c6dc:	b120      	cbz	r0, c6e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x458>
    c6de:	68a1      	ldr	r1, [r4, #8]
    c6e0:	2000      	movs	r0, #0
    c6e2:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c6e6:	bd10      	pop	{r4, pc}
    c6e8:	f240 6169 	movw	r1, #1641	; 0x669
    c6ec:	2036      	movs	r0, #54	; 0x36
    c6ee:	f7f7 fccd 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6f2:	0000      	.short	0x0000
    c6f4:	20000238 	.word	0x20000238
    c6f8:	b510      	push	{r4, lr}
    c6fa:	4c0a      	ldr	r4, [pc, #40]	; (c724 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x494>)
    c6fc:	2300      	movs	r3, #0
    c6fe:	4619      	mov	r1, r3
    c700:	68a0      	ldr	r0, [r4, #8]
    c702:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c706:	3078      	adds	r0, #120	; 0x78
    c708:	f003 fe4e 	bl	103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c70c:	b120      	cbz	r0, c718 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x488>
    c70e:	68a1      	ldr	r1, [r4, #8]
    c710:	201f      	movs	r0, #31
    c712:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c716:	bd10      	pop	{r4, pc}
    c718:	f240 6172 	movw	r1, #1650	; 0x672
    c71c:	2036      	movs	r0, #54	; 0x36
    c71e:	f7f7 fcb5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c722:	0000      	.short	0x0000
    c724:	20000238 	.word	0x20000238
    c728:	b570      	push	{r4, r5, r6, lr}
    c72a:	4c1f      	ldr	r4, [pc, #124]	; (c7a8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x518>)
    c72c:	68a0      	ldr	r0, [r4, #8]
    c72e:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    c732:	2900      	cmp	r1, #0
    c734:	bf05      	ittet	eq
    c736:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    c73a:	2900      	cmpeq	r1, #0
    c73c:	2100      	movne	r1, #0
    c73e:	2101      	moveq	r1, #1
    c740:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    c744:	f04f 0224 	mov.w	r2, #36	; 0x24
    c748:	f04f 0500 	mov.w	r5, #0
    c74c:	2b21      	cmp	r3, #33	; 0x21
    c74e:	d008      	beq.n	c762 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4d2>
    c750:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c754:	2b23      	cmp	r3, #35	; 0x23
    c756:	d019      	beq.n	c78c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4fc>
    c758:	f240 619e 	movw	r1, #1694	; 0x69e
    c75c:	2036      	movs	r0, #54	; 0x36
    c75e:	f7f7 fc95 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c762:	2900      	cmp	r1, #0
    c764:	bf08      	it	eq
    c766:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    c76a:	d00b      	beq.n	c784 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4f4>
    c76c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c770:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    c774:	2801      	cmp	r0, #1
    c776:	bf04      	itt	eq
    c778:	2000      	moveq	r0, #0
    c77a:	f7ff fda1 	bleq	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c77e:	68a0      	ldr	r0, [r4, #8]
    c780:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
    c784:	68a0      	ldr	r0, [r4, #8]
    c786:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c78a:	bd70      	pop	{r4, r5, r6, pc}
    c78c:	2900      	cmp	r1, #0
    c78e:	bf08      	it	eq
    c790:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c794:	d004      	beq.n	c7a0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    c796:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    c79a:	2000      	movs	r0, #0
    c79c:	f7ff fd90 	bl	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c7a0:	68a0      	ldr	r0, [r4, #8]
    c7a2:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
    c7a8:	20000238 	.word	0x20000238

0000c7ac <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    c7ac:	b510      	push	{r4, lr}
    c7ae:	4905      	ldr	r1, [pc, #20]	; (c7c4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    c7b0:	4604      	mov	r4, r0
    c7b2:	2001      	movs	r0, #1
    c7b4:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c7b8:	f7fb f8f8 	bl	79ac <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    c7bc:	7020      	strb	r0, [r4, #0]
    c7be:	2000      	movs	r0, #0
    c7c0:	bd10      	pop	{r4, pc}
    c7c2:	0000      	.short	0x0000
    c7c4:	20001314 	.word	0x20001314

0000c7c8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    c7c8:	4904      	ldr	r1, [pc, #16]	; (c7dc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    c7ca:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    c7ce:	8002      	strh	r2, [r0, #0]
    c7d0:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    c7d4:	7081      	strb	r1, [r0, #2]
    c7d6:	2000      	movs	r0, #0
    c7d8:	4770      	bx	lr
    c7da:	0000      	.short	0x0000
    c7dc:	20001314 	.word	0x20001314

0000c7e0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    c7e0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c7e4:	460d      	mov	r5, r1
    c7e6:	4606      	mov	r6, r0
    c7e8:	f000 fd9c 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c7ec:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c7f0:	b1e0      	cbz	r0, c82c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    c7f2:	8830      	ldrh	r0, [r6, #0]
    c7f4:	4669      	mov	r1, sp
    c7f6:	f003 fd8c 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d114      	bne.n	c828 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    c7fe:	f8dd 4004 	ldr.w	r4, [sp, #4]
    c802:	2700      	movs	r7, #0
    c804:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    c808:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    c80c:	f005 fa7e 	bl	11d0c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c810:	70a8      	strb	r0, [r5, #2]
    c812:	7860      	ldrb	r0, [r4, #1]
    c814:	f005 fa7a 	bl	11d0c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c818:	70e8      	strb	r0, [r5, #3]
    c81a:	78a0      	ldrb	r0, [r4, #2]
    c81c:	3c66      	subs	r4, #102	; 0x66
    c81e:	2800      	cmp	r0, #0
    c820:	d1f0      	bne.n	c804 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    c822:	8830      	ldrh	r0, [r6, #0]
    c824:	8028      	strh	r0, [r5, #0]
    c826:	2000      	movs	r0, #0
    c828:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c82c:	2001      	movs	r0, #1
    c82e:	e7fb      	b.n	c828 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000c830 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    c830:	b51c      	push	{r2, r3, r4, lr}
    c832:	8800      	ldrh	r0, [r0, #0]
    c834:	4669      	mov	r1, sp
    c836:	f003 fd6c 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c83a:	2800      	cmp	r0, #0
    c83c:	d10f      	bne.n	c85e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    c83e:	f89d 0000 	ldrb.w	r0, [sp]
    c842:	2401      	movs	r4, #1
    c844:	b160      	cbz	r0, c860 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    c846:	4811      	ldr	r0, [pc, #68]	; (c88c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    c848:	7800      	ldrb	r0, [r0, #0]
    c84a:	b1e8      	cbz	r0, c888 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    c84c:	9801      	ldr	r0, [sp, #4]
    c84e:	f005 fbdb 	bl	12008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
    c852:	b190      	cbz	r0, c87a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c854:	9801      	ldr	r0, [sp, #4]
    c856:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    c85a:	b180      	cbz	r0, c87e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    c85c:	203a      	movs	r0, #58	; 0x3a
    c85e:	bd1c      	pop	{r2, r3, r4, pc}
    c860:	9801      	ldr	r0, [sp, #4]
    c862:	f005 fbc5 	bl	11ff0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
    c866:	b140      	cbz	r0, c87a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c868:	9801      	ldr	r0, [sp, #4]
    c86a:	f890 0149 	ldrb.w	r0, [r0, #329]	; 0x149
    c86e:	2800      	cmp	r0, #0
    c870:	d1f4      	bne.n	c85c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    c872:	9801      	ldr	r0, [sp, #4]
    c874:	f880 4149 	strb.w	r4, [r0, #329]	; 0x149
    c878:	e004      	b.n	c884 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    c87a:	2002      	movs	r0, #2
    c87c:	bd1c      	pop	{r2, r3, r4, pc}
    c87e:	9801      	ldr	r0, [sp, #4]
    c880:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    c884:	2000      	movs	r0, #0
    c886:	bd1c      	pop	{r2, r3, r4, pc}
    c888:	2011      	movs	r0, #17
    c88a:	bd1c      	pop	{r2, r3, r4, pc}
    c88c:	2000031c 	.word	0x2000031c

0000c890 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    c890:	b510      	push	{r4, lr}
    c892:	4604      	mov	r4, r0
    c894:	f005 fb9f 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c898:	b130      	cbz	r0, c8a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    c89a:	4804      	ldr	r0, [pc, #16]	; (c8ac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    c89c:	8941      	ldrh	r1, [r0, #10]
    c89e:	8021      	strh	r1, [r4, #0]
    c8a0:	8980      	ldrh	r0, [r0, #12]
    c8a2:	8060      	strh	r0, [r4, #2]
    c8a4:	2000      	movs	r0, #0
    c8a6:	bd10      	pop	{r4, pc}
    c8a8:	2001      	movs	r0, #1
    c8aa:	bd10      	pop	{r4, pc}
    c8ac:	200017da 	.word	0x200017da

0000c8b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    c8b0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c8b2:	4915      	ldr	r1, [pc, #84]	; (c908 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    c8b4:	4605      	mov	r5, r0
    c8b6:	2001      	movs	r0, #1
    c8b8:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c8bc:	4813      	ldr	r0, [pc, #76]	; (c90c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    c8be:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    c8c2:	6020      	str	r0, [r4, #0]
    c8c4:	301f      	adds	r0, #31
    c8c6:	60a0      	str	r0, [r4, #8]
    c8c8:	f000 fc38 	bl	d13c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c8cc:	f894 0020 	ldrb.w	r0, [r4, #32]
    c8d0:	7829      	ldrb	r1, [r5, #0]
    c8d2:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c8d6:	221f      	movs	r2, #31
    c8d8:	1c68      	adds	r0, r5, #1
    c8da:	f005 fa27 	bl	11d2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c8de:	b120      	cbz	r0, c8ea <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    c8e0:	f241 31f1 	movw	r1, #5105	; 0x13f1
    c8e4:	2039      	movs	r0, #57	; 0x39
    c8e6:	f7f7 fbd1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8ea:	f894 0020 	ldrb.w	r0, [r4, #32]
    c8ee:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    c8f2:	9001      	str	r0, [sp, #4]
    c8f4:	7828      	ldrb	r0, [r5, #0]
    c8f6:	f8ad 0002 	strh.w	r0, [sp, #2]
    c8fa:	2000      	movs	r0, #0
    c8fc:	f88d 0000 	strb.w	r0, [sp]
    c900:	4668      	mov	r0, sp
    c902:	f000 f923 	bl	cb4c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    c906:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c908:	20001314 	.word	0x20001314
    c90c:	2000180e 	.word	0x2000180e

0000c910 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    c910:	b51c      	push	{r2, r3, r4, lr}
    c912:	4a0d      	ldr	r2, [pc, #52]	; (c948 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    c914:	2101      	movs	r1, #1
    c916:	2400      	movs	r4, #0
    c918:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c91c:	7800      	ldrb	r0, [r0, #0]
    c91e:	f88d 0000 	strb.w	r0, [sp]
    c922:	f88d 1001 	strb.w	r1, [sp, #1]
    c926:	f88d 4002 	strb.w	r4, [sp, #2]
    c92a:	f7fb f81f 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    c92e:	b118      	cbz	r0, c938 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    c930:	2080      	movs	r0, #128	; 0x80
    c932:	f8ad 0003 	strh.w	r0, [sp, #3]
    c936:	e001      	b.n	c93c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    c938:	f8ad 4003 	strh.w	r4, [sp, #3]
    c93c:	f88d 4005 	strb.w	r4, [sp, #5]
    c940:	4668      	mov	r0, sp
    c942:	f000 fb1b 	bl	cf7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    c946:	bd1c      	pop	{r2, r3, r4, pc}
    c948:	20001314 	.word	0x20001314

0000c94c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    c94c:	b510      	push	{r4, lr}
    c94e:	4a39      	ldr	r2, [pc, #228]	; (ca34 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    c950:	b08a      	sub	sp, #40	; 0x28
    c952:	2101      	movs	r1, #1
    c954:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c958:	8841      	ldrh	r1, [r0, #2]
    c95a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c95e:	d902      	bls.n	c966 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    c960:	2012      	movs	r0, #18
    c962:	b00a      	add	sp, #40	; 0x28
    c964:	bd10      	pop	{r4, pc}
    c966:	2400      	movs	r4, #0
    c968:	f88d 4004 	strb.w	r4, [sp, #4]
    c96c:	7902      	ldrb	r2, [r0, #4]
    c96e:	9400      	str	r4, [sp, #0]
    c970:	f89d 1000 	ldrb.w	r1, [sp]
    c974:	2a05      	cmp	r2, #5
    c976:	f041 0110 	orr.w	r1, r1, #16
    c97a:	f88d 1000 	strb.w	r1, [sp]
    c97e:	d253      	bcs.n	ca28 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    c980:	e8df f002 	tbb	[pc, r2]
    c984:	11050803 	.word	0x11050803
    c988:	000b      	.short	0x000b
    c98a:	f041 0101 	orr.w	r1, r1, #1
    c98e:	f041 0102 	orr.w	r1, r1, #2
    c992:	e006      	b.n	c9a2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    c994:	f041 0109 	orr.w	r1, r1, #9
    c998:	e001      	b.n	c99e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    c99a:	f041 0101 	orr.w	r1, r1, #1
    c99e:	f041 0104 	orr.w	r1, r1, #4
    c9a2:	f88d 1000 	strb.w	r1, [sp]
    c9a6:	f8bd 1000 	ldrh.w	r1, [sp]
    c9aa:	9100      	str	r1, [sp, #0]
    c9ac:	f8bd 1000 	ldrh.w	r1, [sp]
    c9b0:	f8ad 1005 	strh.w	r1, [sp, #5]
    c9b4:	8802      	ldrh	r2, [r0, #0]
    c9b6:	f8dd 1006 	ldr.w	r1, [sp, #6]
    c9ba:	f362 211f 	bfi	r1, r2, #8, #24
    c9be:	f8cd 1006 	str.w	r1, [sp, #6]
    c9c2:	8842      	ldrh	r2, [r0, #2]
    c9c4:	f8dd 1009 	ldr.w	r1, [sp, #9]
    c9c8:	f362 211f 	bfi	r1, r2, #8, #24
    c9cc:	f8cd 1009 	str.w	r1, [sp, #9]
    c9d0:	7b41      	ldrb	r1, [r0, #13]
    c9d2:	f88d 100d 	strb.w	r1, [sp, #13]
    c9d6:	7941      	ldrb	r1, [r0, #5]
    c9d8:	f88d 100e 	strb.w	r1, [sp, #14]
    c9dc:	7981      	ldrb	r1, [r0, #6]
    c9de:	f88d 100f 	strb.w	r1, [sp, #15]
    c9e2:	f8d0 1007 	ldr.w	r1, [r0, #7]
    c9e6:	9104      	str	r1, [sp, #16]
    c9e8:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    c9ec:	f8ad 1014 	strh.w	r1, [sp, #20]
    c9f0:	7b80      	ldrb	r0, [r0, #14]
    c9f2:	f88d 0016 	strb.w	r0, [sp, #22]
    c9f6:	207f      	movs	r0, #127	; 0x7f
    c9f8:	f88d 0017 	strb.w	r0, [sp, #23]
    c9fc:	2001      	movs	r0, #1
    c9fe:	f88d 0018 	strb.w	r0, [sp, #24]
    ca02:	f88d 4019 	strb.w	r4, [sp, #25]
    ca06:	f88d 001a 	strb.w	r0, [sp, #26]
    ca0a:	f88d 401b 	strb.w	r4, [sp, #27]
    ca0e:	f7fb f815 	bl	7a3c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ca12:	f88d 001c 	strb.w	r0, [sp, #28]
    ca16:	f88d 401d 	strb.w	r4, [sp, #29]
    ca1a:	f88d 401e 	strb.w	r4, [sp, #30]
    ca1e:	a908      	add	r1, sp, #32
    ca20:	a801      	add	r0, sp, #4
    ca22:	f004 ffb0 	bl	11986 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ca26:	e79c      	b.n	c962 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    ca28:	f241 0147 	movw	r1, #4167	; 0x1047
    ca2c:	2039      	movs	r0, #57	; 0x39
    ca2e:	f7f7 fb2d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca32:	0000      	.short	0x0000
    ca34:	20001314 	.word	0x20001314

0000ca38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    ca38:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ca3a:	4604      	mov	r4, r0
    ca3c:	f000 fc72 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ca40:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ca44:	b318      	cbz	r0, ca8e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    ca46:	2000      	movs	r0, #0
    ca48:	f88d 0004 	strb.w	r0, [sp, #4]
    ca4c:	f88d 0008 	strb.w	r0, [sp, #8]
    ca50:	a802      	add	r0, sp, #8
    ca52:	9000      	str	r0, [sp, #0]
    ca54:	78a2      	ldrb	r2, [r4, #2]
    ca56:	7861      	ldrb	r1, [r4, #1]
    ca58:	7820      	ldrb	r0, [r4, #0]
    ca5a:	ab01      	add	r3, sp, #4
    ca5c:	f005 fb82 	bl	12164 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
    ca60:	2800      	cmp	r0, #0
    ca62:	d113      	bne.n	ca8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    ca64:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ca68:	f005 fa2e 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    ca6c:	b188      	cbz	r0, ca92 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    ca6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ca72:	f005 fa29 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    ca76:	b160      	cbz	r0, ca92 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    ca78:	4807      	ldr	r0, [pc, #28]	; (ca98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x60>)
    ca7a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ca7e:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    ca82:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ca86:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    ca8a:	2000      	movs	r0, #0
    ca8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca8e:	2001      	movs	r0, #1
    ca90:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca92:	2011      	movs	r0, #17
    ca94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca96:	0000      	.short	0x0000
    ca98:	20001314 	.word	0x20001314

0000ca9c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ca9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ca9e:	4916      	ldr	r1, [pc, #88]	; (caf8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    caa0:	4605      	mov	r5, r0
    caa2:	2001      	movs	r0, #1
    caa4:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    caa8:	4814      	ldr	r0, [pc, #80]	; (cafc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    caaa:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    caae:	6120      	str	r0, [r4, #16]
    cab0:	301f      	adds	r0, #31
    cab2:	61a0      	str	r0, [r4, #24]
    cab4:	f000 fb52 	bl	d15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    cab8:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    cabc:	7829      	ldrb	r1, [r5, #0]
    cabe:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    cac2:	221f      	movs	r2, #31
    cac4:	1c68      	adds	r0, r5, #1
    cac6:	3310      	adds	r3, #16
    cac8:	f005 f930 	bl	11d2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    cacc:	b120      	cbz	r0, cad8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    cace:	f241 2174 	movw	r1, #4724	; 0x1274
    cad2:	2039      	movs	r0, #57	; 0x39
    cad4:	f7f7 fada 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cad8:	2000      	movs	r0, #0
    cada:	f88d 0000 	strb.w	r0, [sp]
    cade:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    cae2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    cae6:	6900      	ldr	r0, [r0, #16]
    cae8:	9001      	str	r0, [sp, #4]
    caea:	7828      	ldrb	r0, [r5, #0]
    caec:	f8ad 0002 	strh.w	r0, [sp, #2]
    caf0:	4668      	mov	r0, sp
    caf2:	f000 f857 	bl	cba4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    caf6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    caf8:	20001314 	.word	0x20001314
    cafc:	2000184c 	.word	0x2000184c

0000cb00 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    cb00:	7801      	ldrb	r1, [r0, #0]
    cb02:	b181      	cbz	r1, cb26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cb04:	7841      	ldrb	r1, [r0, #1]
    cb06:	b171      	cbz	r1, cb26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cb08:	8841      	ldrh	r1, [r0, #2]
    cb0a:	291b      	cmp	r1, #27
    cb0c:	d30b      	bcc.n	cb26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cb0e:	8881      	ldrh	r1, [r0, #4]
    cb10:	291b      	cmp	r1, #27
    cb12:	d308      	bcc.n	cb26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cb14:	4905      	ldr	r1, [pc, #20]	; (cb2c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    cb16:	6802      	ldr	r2, [r0, #0]
    cb18:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    cb1c:	8880      	ldrh	r0, [r0, #4]
    cb1e:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    cb22:	2000      	movs	r0, #0
    cb24:	4770      	bx	lr
    cb26:	2012      	movs	r0, #18
    cb28:	4770      	bx	lr
    cb2a:	0000      	.short	0x0000
    cb2c:	20001314 	.word	0x20001314

0000cb30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    cb30:	6800      	ldr	r0, [r0, #0]
    cb32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    cb36:	d304      	bcc.n	cb42 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    cb38:	4903      	ldr	r1, [pc, #12]	; (cb48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    cb3a:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    cb3e:	2000      	movs	r0, #0
    cb40:	4770      	bx	lr
    cb42:	2012      	movs	r0, #18
    cb44:	4770      	bx	lr
    cb46:	0000      	.short	0x0000
    cb48:	20001314 	.word	0x20001314

0000cb4c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    cb4c:	b570      	push	{r4, r5, r6, lr}
    cb4e:	4d14      	ldr	r5, [pc, #80]	; (cba0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    cb50:	4604      	mov	r4, r0
    cb52:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cb56:	b920      	cbnz	r0, cb62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    cb58:	8860      	ldrh	r0, [r4, #2]
    cb5a:	b110      	cbz	r0, cb62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    cb5c:	f7fa feda 	bl	7914 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    cb60:	b198      	cbz	r0, cb8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    cb62:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    cb66:	8861      	ldrh	r1, [r4, #2]
    cb68:	7820      	ldrb	r0, [r4, #0]
    cb6a:	f005 f8f4 	bl	11d56 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    cb6e:	2800      	cmp	r0, #0
    cb70:	d10c      	bne.n	cb8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    cb72:	f7fa fcd9 	bl	7528 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    cb76:	4601      	mov	r1, r0
    cb78:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cb7c:	2800      	cmp	r0, #0
    cb7e:	8860      	ldrh	r0, [r4, #2]
    cb80:	d005      	beq.n	cb8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    cb82:	4288      	cmp	r0, r1
    cb84:	d907      	bls.n	cb96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb86:	4608      	mov	r0, r1
    cb88:	e005      	b.n	cb96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb8a:	2012      	movs	r0, #18
    cb8c:	bd70      	pop	{r4, r5, r6, pc}
    cb8e:	4288      	cmp	r0, r1
    cb90:	d901      	bls.n	cb96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb92:	2007      	movs	r0, #7
    cb94:	bd70      	pop	{r4, r5, r6, pc}
    cb96:	6861      	ldr	r1, [r4, #4]
    cb98:	f7fa ff62 	bl	7a60 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    cb9c:	2000      	movs	r0, #0
    cb9e:	bd70      	pop	{r4, r5, r6, pc}
    cba0:	20001314 	.word	0x20001314

0000cba4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    cba4:	b570      	push	{r4, r5, r6, lr}
    cba6:	4d11      	ldr	r5, [pc, #68]	; (cbec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    cba8:	4604      	mov	r4, r0
    cbaa:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cbae:	b920      	cbnz	r0, cbba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    cbb0:	8860      	ldrh	r0, [r4, #2]
    cbb2:	b110      	cbz	r0, cbba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    cbb4:	f7fa feea 	bl	798c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cbb8:	b178      	cbz	r0, cbda <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    cbba:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    cbbe:	8861      	ldrh	r1, [r4, #2]
    cbc0:	7820      	ldrb	r0, [r4, #0]
    cbc2:	f005 f8c8 	bl	11d56 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    cbc6:	2800      	cmp	r0, #0
    cbc8:	d108      	bne.n	cbdc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    cbca:	8866      	ldrh	r6, [r4, #2]
    cbcc:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cbd0:	b130      	cbz	r0, cbe0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    cbd2:	f7fa fedb 	bl	798c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cbd6:	b110      	cbz	r0, cbde <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    cbd8:	e002      	b.n	cbe0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    cbda:	2012      	movs	r0, #18
    cbdc:	bd70      	pop	{r4, r5, r6, pc}
    cbde:	2600      	movs	r6, #0
    cbe0:	4630      	mov	r0, r6
    cbe2:	6861      	ldr	r1, [r4, #4]
    cbe4:	f7fa ff4a 	bl	7a7c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    cbe8:	2000      	movs	r0, #0
    cbea:	bd70      	pop	{r4, r5, r6, pc}
    cbec:	20001314 	.word	0x20001314

0000cbf0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    cbf0:	b510      	push	{r4, lr}
    cbf2:	4604      	mov	r4, r0
    cbf4:	7800      	ldrb	r0, [r0, #0]
    cbf6:	07c0      	lsls	r0, r0, #31
    cbf8:	d004      	beq.n	cc04 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    cbfa:	f001 f8a1 	bl	dd40 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    cbfe:	b108      	cbz	r0, cc04 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    cc00:	200c      	movs	r0, #12
    cc02:	bd10      	pop	{r4, pc}
    cc04:	7820      	ldrb	r0, [r4, #0]
    cc06:	4903      	ldr	r1, [pc, #12]	; (cc14 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    cc08:	f000 0001 	and.w	r0, r0, #1
    cc0c:	7388      	strb	r0, [r1, #14]
    cc0e:	2000      	movs	r0, #0
    cc10:	bd10      	pop	{r4, pc}
    cc12:	0000      	.short	0x0000
    cc14:	200017da 	.word	0x200017da

0000cc18 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    cc18:	4a03      	ldr	r2, [pc, #12]	; (cc28 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    cc1a:	e9d2 1200 	ldrd	r1, r2, [r2]
    cc1e:	6001      	str	r1, [r0, #0]
    cc20:	6042      	str	r2, [r0, #4]
    cc22:	2000      	movs	r0, #0
    cc24:	4770      	bx	lr
    cc26:	0000      	.short	0x0000
    cc28:	0000d1b4 	.word	0x0000d1b4

0000cc2c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    cc2c:	b510      	push	{r4, lr}
    cc2e:	2005      	movs	r0, #5
    cc30:	f000 fb66 	bl	d300 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    cc34:	f7ff fb14 	bl	c260 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    cc38:	f7fd f954 	bl	9ee4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    cc3c:	4902      	ldr	r1, [pc, #8]	; (cc48 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    cc3e:	4801      	ldr	r0, [pc, #4]	; (cc44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    cc40:	6048      	str	r0, [r1, #4]
    cc42:	bd10      	pop	{r4, pc}
    cc44:	0000cdad 	.word	0x0000cdad
    cc48:	2000031c 	.word	0x2000031c

0000cc4c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    cc4c:	4901      	ldr	r1, [pc, #4]	; (cc54 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    cc4e:	7048      	strb	r0, [r1, #1]
    cc50:	f000 b802 	b.w	cc58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    cc54:	2000031c 	.word	0x2000031c

0000cc58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc5c:	f7f8 f988 	bl	4f70 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    cc60:	f7f9 f8d2 	bl	5e08 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    cc64:	4c22      	ldr	r4, [pc, #136]	; (ccf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>)
    cc66:	f64f 77ff 	movw	r7, #65535	; 0xffff
    cc6a:	2500      	movs	r5, #0
    cc6c:	f8a4 724e 	strh.w	r7, [r4, #590]	; 0x24e
    cc70:	f8a4 7250 	strh.w	r7, [r4, #592]	; 0x250
    cc74:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    cc78:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    cc7c:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    cc80:	f204 243e 	addw	r4, r4, #574	; 0x23e
    cc84:	f000 fa5a 	bl	d13c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    cc88:	f000 fa68 	bl	d15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    cc8c:	a019      	add	r0, pc, #100	; (adr r0, ccf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>)
    cc8e:	7665      	strb	r5, [r4, #25]
    cc90:	4e1a      	ldr	r6, [pc, #104]	; (ccfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>)
    cc92:	6801      	ldr	r1, [r0, #0]
    cc94:	7900      	ldrb	r0, [r0, #4]
    cc96:	f1a6 023e 	sub.w	r2, r6, #62	; 0x3e
    cc9a:	7035      	strb	r5, [r6, #0]
    cc9c:	f842 1f3f 	str.w	r1, [r2, #63]!
    cca0:	1c71      	adds	r1, r6, #1
    cca2:	7110      	strb	r0, [r2, #4]
    cca4:	4630      	mov	r0, r6
    cca6:	f7ff fad5 	bl	c254 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    ccaa:	201b      	movs	r0, #27
    ccac:	80f0      	strh	r0, [r6, #6]
    ccae:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ccb2:	8131      	strh	r1, [r6, #8]
    ccb4:	8170      	strh	r0, [r6, #10]
    ccb6:	81b1      	strh	r1, [r6, #12]
    ccb8:	7525      	strb	r5, [r4, #20]
    ccba:	7565      	strb	r5, [r4, #21]
    ccbc:	73f5      	strb	r5, [r6, #15]
    ccbe:	2103      	movs	r1, #3
    ccc0:	70a1      	strb	r1, [r4, #2]
    ccc2:	70e1      	strb	r1, [r4, #3]
    ccc4:	80a0      	strh	r0, [r4, #4]
    ccc6:	80e0      	strh	r0, [r4, #6]
    ccc8:	f640 60a6 	movw	r0, #3750	; 0xea6
    cccc:	f8c4 000a 	str.w	r0, [r4, #10]
    ccd0:	f1a6 003e 	sub.w	r0, r6, #62	; 0x3e
    ccd4:	73b5      	strb	r5, [r6, #14]
    ccd6:	7005      	strb	r5, [r0, #0]
    ccd8:	8047      	strh	r7, [r0, #2]
    ccda:	4809      	ldr	r0, [pc, #36]	; (cd00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>)
    ccdc:	7005      	strb	r5, [r0, #0]
    ccde:	f1a6 000e 	sub.w	r0, r6, #14
    cce2:	7005      	strb	r5, [r0, #0]
    cce4:	8047      	strh	r7, [r0, #2]
    cce6:	7625      	strb	r5, [r4, #24]
    cce8:	73a5      	strb	r5, [r4, #14]
    ccea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccee:	0000      	.short	0x0000
    ccf0:	20001314 	.word	0x20001314
    ccf4:	ffffffff 	.word	0xffffffff
    ccf8:	0000001f 	.word	0x0000001f
    ccfc:	200017da 	.word	0x200017da
    cd00:	20000324 	.word	0x20000324

0000cd04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    cd04:	b570      	push	{r4, r5, r6, lr}
    cd06:	b150      	cbz	r0, cd1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    cd08:	4d16      	ldr	r5, [pc, #88]	; (cd64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    cd0a:	2400      	movs	r4, #0
    cd0c:	7829      	ldrb	r1, [r5, #0]
    cd0e:	b159      	cbz	r1, cd28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    cd10:	7044      	strb	r4, [r0, #1]
    cd12:	2103      	movs	r1, #3
    cd14:	7001      	strb	r1, [r0, #0]
    cd16:	2101      	movs	r1, #1
    cd18:	7101      	strb	r1, [r0, #4]
    cd1a:	702c      	strb	r4, [r5, #0]
    cd1c:	e01c      	b.n	cd58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    cd1e:	f241 6190 	movw	r1, #5776	; 0x1690
    cd22:	2039      	movs	r0, #57	; 0x39
    cd24:	f7f7 f9b2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd28:	78ab      	ldrb	r3, [r5, #2]
    cd2a:	2105      	movs	r1, #5
    cd2c:	f44f 728e 	mov.w	r2, #284	; 0x11c
    cd30:	b13b      	cbz	r3, cd42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    cd32:	7044      	strb	r4, [r0, #1]
    cd34:	f800 1b04 	strb.w	r1, [r0], #4
    cd38:	1d29      	adds	r1, r5, #4
    cd3a:	f7f7 f81d 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd3e:	70ac      	strb	r4, [r5, #2]
    cd40:	e00a      	b.n	cd58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    cd42:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    cd46:	b14b      	cbz	r3, cd5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    cd48:	7044      	strb	r4, [r0, #1]
    cd4a:	f800 1b04 	strb.w	r1, [r0], #4
    cd4e:	4906      	ldr	r1, [pc, #24]	; (cd68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    cd50:	f7f7 f812 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd54:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    cd58:	2001      	movs	r0, #1
    cd5a:	bd70      	pop	{r4, r5, r6, pc}
    cd5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cd60:	f7f9 bf44 	b.w	6bec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    cd64:	20001314 	.word	0x20001314
    cd68:	20001436 	.word	0x20001436
    cd6c:	b570      	push	{r4, r5, r6, lr}
    cd6e:	4604      	mov	r4, r0
    cd70:	480d      	ldr	r0, [pc, #52]	; (cda8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    cd72:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    cd76:	f7fc f8fb 	bl	8f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cd7a:	b148      	cbz	r0, cd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cd7c:	b11d      	cbz	r5, cd86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    cd7e:	f7fa fe05 	bl	798c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cd82:	b110      	cbz	r0, cd8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    cd84:	e00b      	b.n	cd9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd86:	b154      	cbz	r4, cd9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd88:	e002      	b.n	cd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cd8a:	f7fa fddd 	bl	7948 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cd8e:	b930      	cbnz	r0, cd9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd90:	f005 f946 	bl	12020 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    cd94:	b128      	cbz	r0, cda2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cd96:	f7ff fa09 	bl	c1ac <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    cd9a:	2801      	cmp	r0, #1
    cd9c:	d001      	beq.n	cda2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cd9e:	2000      	movs	r0, #0
    cda0:	bd70      	pop	{r4, r5, r6, pc}
    cda2:	2001      	movs	r0, #1
    cda4:	bd70      	pop	{r4, r5, r6, pc}
    cda6:	0000      	.short	0x0000
    cda8:	20001314 	.word	0x20001314
    cdac:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdb0:	4692      	mov	sl, r2
    cdb2:	460f      	mov	r7, r1
    cdb4:	4681      	mov	r9, r0
    cdb6:	f005 f90e 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    cdba:	2800      	cmp	r0, #0
    cdbc:	d063      	beq.n	ce86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cdbe:	4933      	ldr	r1, [pc, #204]	; (ce8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    cdc0:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    cdc4:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    cdc8:	88c8      	ldrh	r0, [r1, #6]
    cdca:	4290      	cmp	r0, r2
    cdcc:	d300      	bcc.n	cdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    cdce:	4610      	mov	r0, r2
    cdd0:	4680      	mov	r8, r0
    cdd2:	8948      	ldrh	r0, [r1, #10]
    cdd4:	42b0      	cmp	r0, r6
    cdd6:	d200      	bcs.n	cdda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
    cdd8:	4606      	mov	r6, r0
    cdda:	890c      	ldrh	r4, [r1, #8]
    cddc:	f640 0048 	movw	r0, #2120	; 0x848
    cde0:	4284      	cmp	r4, r0
    cde2:	d300      	bcc.n	cde6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    cde4:	4604      	mov	r4, r0
    cde6:	898d      	ldrh	r5, [r1, #12]
    cde8:	4285      	cmp	r5, r0
    cdea:	d300      	bcc.n	cdee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    cdec:	4605      	mov	r5, r0
    cdee:	4284      	cmp	r4, r0
    cdf0:	d300      	bcc.n	cdf4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    cdf2:	4604      	mov	r4, r0
    cdf4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cdf8:	2e1b      	cmp	r6, #27
    cdfa:	d001      	beq.n	ce00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    cdfc:	428d      	cmp	r5, r1
    cdfe:	d104      	bne.n	ce0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x106>
    ce00:	f1b8 0f1b 	cmp.w	r8, #27
    ce04:	d03f      	beq.n	ce86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    ce06:	428c      	cmp	r4, r1
    ce08:	d03d      	beq.n	ce86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    ce0a:	466a      	mov	r2, sp
    ce0c:	4651      	mov	r1, sl
    ce0e:	4648      	mov	r0, r9
    ce10:	f005 f87d 	bl	11f0e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
    ce14:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ce18:	4641      	mov	r1, r8
    ce1a:	4540      	cmp	r0, r8
    ce1c:	d900      	bls.n	ce20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11c>
    ce1e:	4608      	mov	r0, r1
    ce20:	80f8      	strh	r0, [r7, #6]
    ce22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ce26:	42a1      	cmp	r1, r4
    ce28:	d800      	bhi.n	ce2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    ce2a:	460c      	mov	r4, r1
    ce2c:	813c      	strh	r4, [r7, #8]
    ce2e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ce32:	42b1      	cmp	r1, r6
    ce34:	d800      	bhi.n	ce38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    ce36:	460e      	mov	r6, r1
    ce38:	807e      	strh	r6, [r7, #2]
    ce3a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ce3e:	42a9      	cmp	r1, r5
    ce40:	d900      	bls.n	ce44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>
    ce42:	4629      	mov	r1, r5
    ce44:	80b9      	strh	r1, [r7, #4]
    ce46:	2201      	movs	r2, #1
    ce48:	703a      	strb	r2, [r7, #0]
    ce4a:	381b      	subs	r0, #27
    ce4c:	28e0      	cmp	r0, #224	; 0xe0
    ce4e:	d902      	bls.n	ce56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    ce50:	f640 4138 	movw	r1, #3128	; 0xc38
    ce54:	e014      	b.n	ce80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ce56:	3e1b      	subs	r6, #27
    ce58:	2ee0      	cmp	r6, #224	; 0xe0
    ce5a:	d902      	bls.n	ce62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    ce5c:	f640 413a 	movw	r1, #3130	; 0xc3a
    ce60:	e00e      	b.n	ce80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ce62:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ce66:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ce6a:	4284      	cmp	r4, r0
    ce6c:	d902      	bls.n	ce74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    ce6e:	f640 413c 	movw	r1, #3132	; 0xc3c
    ce72:	e005      	b.n	ce80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ce74:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ce78:	4281      	cmp	r1, r0
    ce7a:	d904      	bls.n	ce86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    ce7c:	f640 413e 	movw	r1, #3134	; 0xc3e
    ce80:	2039      	movs	r0, #57	; 0x39
    ce82:	f7f7 f903 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce86:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce8a:	0000      	.short	0x0000
    ce8c:	200017da 	.word	0x200017da
    ce90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce94:	461d      	mov	r5, r3
    ce96:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ce9a:	f1a1 0c06 	sub.w	ip, r1, #6
    ce9e:	f640 437a 	movw	r3, #3194	; 0xc7a
    cea2:	9e08      	ldr	r6, [sp, #32]
    cea4:	459c      	cmp	ip, r3
    cea6:	d805      	bhi.n	ceb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    cea8:	f1a2 0c06 	sub.w	ip, r2, #6
    ceac:	459c      	cmp	ip, r3
    ceae:	d801      	bhi.n	ceb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    ceb0:	2301      	movs	r3, #1
    ceb2:	e000      	b.n	ceb6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    ceb4:	2300      	movs	r3, #0
    ceb6:	b120      	cbz	r0, cec2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1be>
    ceb8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    cebc:	b168      	cbz	r0, ceda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d6>
    cebe:	b96b      	cbnz	r3, cedc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    cec0:	e002      	b.n	cec8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    cec2:	4815      	ldr	r0, [pc, #84]	; (cf18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>)
    cec4:	7b80      	ldrb	r0, [r0, #14]
    cec6:	e7f9      	b.n	cebc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    cec8:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    cecc:	2806      	cmp	r0, #6
    cece:	d821      	bhi.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ced0:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    ced4:	2806      	cmp	r0, #6
    ced6:	d901      	bls.n	cedc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    ced8:	e01c      	b.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ceda:	b1db      	cbz	r3, cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cedc:	4291      	cmp	r1, r2
    cede:	d819      	bhi.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cee0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    cee4:	d216      	bcs.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cee6:	f1a4 000a 	sub.w	r0, r4, #10
    ceea:	f640 4176 	movw	r1, #3190	; 0xc76
    ceee:	4288      	cmp	r0, r1
    cef0:	d810      	bhi.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cef2:	4610      	mov	r0, r2
    cef4:	f003 fa25 	bl	10342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    cef8:	1c6d      	adds	r5, r5, #1
    cefa:	4368      	muls	r0, r5
    cefc:	f240 2171 	movw	r1, #625	; 0x271
    cf00:	0040      	lsls	r0, r0, #1
    cf02:	434c      	muls	r4, r1
    cf04:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    cf08:	d204      	bcs.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cf0a:	42b7      	cmp	r7, r6
    cf0c:	d802      	bhi.n	cf14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    cf0e:	2001      	movs	r0, #1
    cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf14:	2000      	movs	r0, #0
    cf16:	e7fb      	b.n	cf10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x20c>
    cf18:	200017da 	.word	0x200017da
    cf1c:	b530      	push	{r4, r5, lr}
    cf1e:	b087      	sub	sp, #28
    cf20:	4605      	mov	r5, r0
    cf22:	2000      	movs	r0, #0
    cf24:	9005      	str	r0, [sp, #20]
    cf26:	9001      	str	r0, [sp, #4]
    cf28:	9002      	str	r0, [sp, #8]
    cf2a:	8808      	ldrh	r0, [r1, #0]
    cf2c:	f8ad 0004 	strh.w	r0, [sp, #4]
    cf30:	4811      	ldr	r0, [pc, #68]	; (cf78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x274>)
    cf32:	460c      	mov	r4, r1
    cf34:	ab03      	add	r3, sp, #12
    cf36:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    cf3a:	f88d 1006 	strb.w	r1, [sp, #6]
    cf3e:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    cf42:	f88d 0007 	strb.w	r0, [sp, #7]
    cf46:	a804      	add	r0, sp, #16
    cf48:	9000      	str	r0, [sp, #0]
    cf4a:	aa01      	add	r2, sp, #4
    cf4c:	4621      	mov	r1, r4
    cf4e:	4628      	mov	r0, r5
    cf50:	f005 f821 	bl	11f96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
    cf54:	0005      	movs	r5, r0
    cf56:	d10c      	bne.n	cf72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26e>
    cf58:	f89d 000c 	ldrb.w	r0, [sp, #12]
    cf5c:	f88d 0014 	strb.w	r0, [sp, #20]
    cf60:	f89d 0010 	ldrb.w	r0, [sp, #16]
    cf64:	f88d 0015 	strb.w	r0, [sp, #21]
    cf68:	a905      	add	r1, sp, #20
    cf6a:	4620      	mov	r0, r4
    cf6c:	f003 facc 	bl	10508 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    cf70:	4628      	mov	r0, r5
    cf72:	b007      	add	sp, #28
    cf74:	bd30      	pop	{r4, r5, pc}
    cf76:	0000      	.short	0x0000
    cf78:	20001314 	.word	0x20001314

0000cf7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    cf7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cf80:	4604      	mov	r4, r0
    cf82:	7840      	ldrb	r0, [r0, #1]
    cf84:	2542      	movs	r5, #66	; 0x42
    cf86:	2801      	cmp	r0, #1
    cf88:	d808      	bhi.n	cf9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf8a:	78a0      	ldrb	r0, [r4, #2]
    cf8c:	f7fa fd14 	bl	79b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    cf90:	b120      	cbz	r0, cf9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf92:	7820      	ldrb	r0, [r4, #0]
    cf94:	2512      	movs	r5, #18
    cf96:	2801      	cmp	r0, #1
    cf98:	d003      	beq.n	cfa2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    cf9a:	b1a0      	cbz	r0, cfc6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    cf9c:	4628      	mov	r0, r5
    cf9e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cfa2:	f7fa fce3 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cfa6:	b128      	cbz	r0, cfb4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    cfa8:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    cfac:	2800      	cmp	r0, #0
    cfae:	d0f5      	beq.n	cf9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cfb0:	2880      	cmp	r0, #128	; 0x80
    cfb2:	d8f3      	bhi.n	cf9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cfb4:	7860      	ldrb	r0, [r4, #1]
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d0f0      	beq.n	cf9c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cfba:	f7fa fc99 	bl	78f0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    cfbe:	b148      	cbz	r0, cfd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cfc0:	7820      	ldrb	r0, [r4, #0]
    cfc2:	2801      	cmp	r0, #1
    cfc4:	d008      	beq.n	cfd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    cfc6:	f7fb ffcd 	bl	8f64 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    cfca:	4604      	mov	r4, r0
    cfcc:	f7fb ffa4 	bl	8f18 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    cfd0:	2800      	cmp	r0, #0
    cfd2:	d079      	beq.n	d0c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    cfd4:	200c      	movs	r0, #12
    cfd6:	e7e2      	b.n	cf9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cfd8:	4d55      	ldr	r5, [pc, #340]	; (d130 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    cfda:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cfde:	f7fa f9ad 	bl	733c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    cfe2:	b910      	cbnz	r0, cfea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    cfe4:	f7fa fca8 	bl	7938 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    cfe8:	b3f0      	cbz	r0, d068 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cfea:	f7fb ffc1 	bl	8f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cfee:	2800      	cmp	r0, #0
    cff0:	d1f0      	bne.n	cfd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cff2:	f7fa fa8d 	bl	7510 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    cff6:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    cffa:	39ff      	subs	r1, #255	; 0xff
    cffc:	d1ea      	bne.n	cfd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cffe:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    d002:	f7fa f9c5 	bl	7390 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    d006:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    d00a:	f242 7010 	movw	r0, #10000	; 0x2710
    d00e:	4346      	muls	r6, r0
    d010:	7960      	ldrb	r0, [r4, #5]
    d012:	f7fa fb73 	bl	76fc <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    d016:	f7fa fc97 	bl	7948 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    d01a:	b138      	cbz	r0, d02c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    d01c:	f7fa fca6 	bl	796c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    d020:	4f44      	ldr	r7, [pc, #272]	; (d134 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    d022:	b170      	cbz	r0, d042 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    d024:	f7fa fcaa 	bl	797c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    d028:	b148      	cbz	r0, d03e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    d02a:	e00a      	b.n	d042 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    d02c:	4631      	mov	r1, r6
    d02e:	2000      	movs	r0, #0
    d030:	f7fb feda 	bl	8de8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    d034:	2800      	cmp	r0, #0
    d036:	d0b2      	beq.n	cf9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d038:	f241 313c 	movw	r1, #4924	; 0x133c
    d03c:	e073      	b.n	d126 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d03e:	7bb8      	ldrb	r0, [r7, #14]
    d040:	b190      	cbz	r0, d068 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    d042:	2200      	movs	r2, #0
    d044:	2101      	movs	r1, #1
    d046:	a801      	add	r0, sp, #4
    d048:	f7f7 f99e 	bl	4388 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    d04c:	0004      	movs	r4, r0
    d04e:	d03c      	beq.n	d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    d050:	2100      	movs	r1, #0
    d052:	f7f9 fbbb 	bl	67cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    d056:	4620      	mov	r0, r4
    d058:	f7fa fcfc 	bl	7a54 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    d05c:	f004 ffbb 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    d060:	b148      	cbz	r0, d076 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    d062:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d066:	e000      	b.n	d06a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    d068:	e016      	b.n	d098 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    d06a:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    d06e:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    d072:	84c1      	strh	r1, [r0, #38]	; 0x26
    d074:	8502      	strh	r2, [r0, #40]	; 0x28
    d076:	7bb8      	ldrb	r0, [r7, #14]
    d078:	b100      	cbz	r0, d07c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    d07a:	2001      	movs	r0, #1
    d07c:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    d080:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    d084:	62a0      	str	r0, [r4, #40]	; 0x28
    d086:	4620      	mov	r0, r4
    d088:	f004 f81c 	bl	110c4 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    d08c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    d090:	b120      	cbz	r0, d09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    d092:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    d096:	e003      	b.n	d0a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    d098:	2012      	movs	r0, #18
    d09a:	e780      	b.n	cf9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d09c:	f641 574c 	movw	r7, #7500	; 0x1d4c
    d0a0:	f7fa fc6c 	bl	797c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    d0a4:	b908      	cbnz	r0, d0aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    d0a6:	f7fa fccf 	bl	7a48 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    d0aa:	4621      	mov	r1, r4
    d0ac:	2001      	movs	r0, #1
    d0ae:	6067      	str	r7, [r4, #4]
    d0b0:	f7ff ff34 	bl	cf1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>
    d0b4:	b158      	cbz	r0, d0ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    d0b6:	2101      	movs	r1, #1
    d0b8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d0bc:	f7f7 fa12 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d0c0:	b118      	cbz	r0, d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    d0c2:	f241 318a 	movw	r1, #5002	; 0x138a
    d0c6:	e02e      	b.n	d126 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d0c8:	e022      	b.n	d110 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    d0ca:	2009      	movs	r0, #9
    d0cc:	e767      	b.n	cf9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d0ce:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    d0d2:	9000      	str	r0, [sp, #0]
    d0d4:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    d0d8:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    d0dc:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    d0e0:	8820      	ldrh	r0, [r4, #0]
    d0e2:	f7f7 fac5 	bl	4670 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    d0e6:	b110      	cbz	r0, d0ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    d0e8:	f241 3195 	movw	r1, #5013	; 0x1395
    d0ec:	e01b      	b.n	d126 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d0ee:	4631      	mov	r1, r6
    d0f0:	4620      	mov	r0, r4
    d0f2:	f7fb fe79 	bl	8de8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    d0f6:	b110      	cbz	r0, d0fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    d0f8:	f241 3197 	movw	r1, #5015	; 0x1397
    d0fc:	e013      	b.n	d126 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d0fe:	480e      	ldr	r0, [pc, #56]	; (d138 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    d100:	6843      	ldr	r3, [r0, #4]
    d102:	b19b      	cbz	r3, d12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d104:	2200      	movs	r2, #0
    d106:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    d10a:	4620      	mov	r0, r4
    d10c:	4798      	blx	r3
    d10e:	e00d      	b.n	d12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d110:	b164      	cbz	r4, d12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d112:	8820      	ldrh	r0, [r4, #0]
    d114:	f7f7 fe40 	bl	4d98 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    d118:	8820      	ldrh	r0, [r4, #0]
    d11a:	2101      	movs	r1, #1
    d11c:	f7f7 f9e2 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d120:	b120      	cbz	r0, d12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d122:	f241 31af 	movw	r1, #5039	; 0x13af
    d126:	2039      	movs	r0, #57	; 0x39
    d128:	f7f6 ffb0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d12c:	2000      	movs	r0, #0
    d12e:	e736      	b.n	cf9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d130:	20001314 	.word	0x20001314
    d134:	200017da 	.word	0x200017da
    d138:	2000031c 	.word	0x2000031c
    d13c:	4806      	ldr	r0, [pc, #24]	; (d158 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    d13e:	2100      	movs	r1, #0
    d140:	f890 2020 	ldrb.w	r2, [r0, #32]
    d144:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    d148:	8091      	strh	r1, [r2, #4]
    d14a:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    d14e:	1c49      	adds	r1, r1, #1
    d150:	f001 0101 	and.w	r1, r1, #1
    d154:	7001      	strb	r1, [r0, #0]
    d156:	4770      	bx	lr
    d158:	200017ec 	.word	0x200017ec
    d15c:	4806      	ldr	r0, [pc, #24]	; (d178 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    d15e:	2100      	movs	r1, #0
    d160:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    d164:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    d168:	8291      	strh	r1, [r2, #20]
    d16a:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    d16e:	1c49      	adds	r1, r1, #1
    d170:	f001 0101 	and.w	r1, r1, #1
    d174:	7001      	strb	r1, [r0, #0]
    d176:	4770      	bx	lr
    d178:	200017ec 	.word	0x200017ec
    d17c:	b510      	push	{r4, lr}
    d17e:	4604      	mov	r4, r0
    d180:	88c1      	ldrh	r1, [r0, #6]
    d182:	8880      	ldrh	r0, [r0, #4]
    d184:	f004 feb5 	bl	11ef2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    d188:	2800      	cmp	r0, #0
    d18a:	d10f      	bne.n	d1ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    d18c:	8861      	ldrh	r1, [r4, #2]
    d18e:	8820      	ldrh	r0, [r4, #0]
    d190:	f004 feaf 	bl	11ef2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    d194:	2800      	cmp	r0, #0
    d196:	d109      	bne.n	d1ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    d198:	4805      	ldr	r0, [pc, #20]	; (d1b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    d19a:	88a1      	ldrh	r1, [r4, #4]
    d19c:	8141      	strh	r1, [r0, #10]
    d19e:	8821      	ldrh	r1, [r4, #0]
    d1a0:	80c1      	strh	r1, [r0, #6]
    d1a2:	88e1      	ldrh	r1, [r4, #6]
    d1a4:	8181      	strh	r1, [r0, #12]
    d1a6:	8861      	ldrh	r1, [r4, #2]
    d1a8:	8101      	strh	r1, [r0, #8]
    d1aa:	2000      	movs	r0, #0
    d1ac:	bd10      	pop	{r4, pc}
    d1ae:	0000      	.short	0x0000
    d1b0:	200017da 	.word	0x200017da
    d1b4:	0b11370b 	.word	0x0b11370b
    d1b8:	11370059 	.word	0x11370059

0000d1bc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    d1bc:	b510      	push	{r4, lr}
    d1be:	4a06      	ldr	r2, [pc, #24]	; (d1d8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    d1c0:	4604      	mov	r4, r0
    d1c2:	7010      	strb	r0, [r2, #0]
    d1c4:	6051      	str	r1, [r2, #4]
    d1c6:	6890      	ldr	r0, [r2, #8]
    d1c8:	f005 f86f 	bl	122aa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d1cc:	4620      	mov	r0, r4
    d1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1d2:	f7ff bd3b 	b.w	cc4c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    d1d6:	0000      	.short	0x0000
    d1d8:	2000032c 	.word	0x2000032c

0000d1dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    d1dc:	b510      	push	{r4, lr}
    d1de:	4c07      	ldr	r4, [pc, #28]	; (d1fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    d1e0:	68e0      	ldr	r0, [r4, #12]
    d1e2:	f005 f862 	bl	122aa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d1e6:	6920      	ldr	r0, [r4, #16]
    d1e8:	f005 f85f 	bl	122aa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d1ec:	f7f7 fec0 	bl	4f70 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    d1f0:	f7f8 fe0a 	bl	5e08 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    d1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1f8:	f7ff bd2e 	b.w	cc58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    d1fc:	2000032c 	.word	0x2000032c

0000d200 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    d200:	b500      	push	{lr}
    d202:	4905      	ldr	r1, [pc, #20]	; (d218 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    d204:	4805      	ldr	r0, [pc, #20]	; (d21c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    d206:	f005 f804 	bl	12212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d20a:	4804      	ldr	r0, [pc, #16]	; (d21c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    d20c:	4904      	ldr	r1, [pc, #16]	; (d220 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    d20e:	1d00      	adds	r0, r0, #4
    d210:	f85d eb04 	ldr.w	lr, [sp], #4
    d214:	f004 bffd 	b.w	12212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d218:	20000340 	.word	0x20000340
    d21c:	20000334 	.word	0x20000334
    d220:	20000348 	.word	0x20000348

0000d224 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    d224:	b500      	push	{lr}
    d226:	4908      	ldr	r1, [pc, #32]	; (d248 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    d228:	4808      	ldr	r0, [pc, #32]	; (d24c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d22a:	f004 fff2 	bl	12212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d22e:	4807      	ldr	r0, [pc, #28]	; (d24c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d230:	4907      	ldr	r1, [pc, #28]	; (d250 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    d232:	1d00      	adds	r0, r0, #4
    d234:	f004 ffed 	bl	12212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d238:	4804      	ldr	r0, [pc, #16]	; (d24c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d23a:	4906      	ldr	r1, [pc, #24]	; (d254 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    d23c:	3008      	adds	r0, #8
    d23e:	f85d eb04 	ldr.w	lr, [sp], #4
    d242:	f004 bfe6 	b.w	12212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d246:	0000      	.short	0x0000
    d248:	20000378 	.word	0x20000378
    d24c:	20000334 	.word	0x20000334
    d250:	20000380 	.word	0x20000380
    d254:	20000370 	.word	0x20000370

0000d258 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    d258:	4801      	ldr	r0, [pc, #4]	; (d260 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    d25a:	7840      	ldrb	r0, [r0, #1]
    d25c:	4770      	bx	lr
    d25e:	0000      	.short	0x0000
    d260:	2000032c 	.word	0x2000032c
    d264:	4807      	ldr	r0, [pc, #28]	; (d284 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    d266:	b510      	push	{r4, lr}
    d268:	7800      	ldrb	r0, [r0, #0]
    d26a:	f7fb fe89 	bl	8f80 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    d26e:	4806      	ldr	r0, [pc, #24]	; (d288 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    d270:	f7fa fb00 	bl	7874 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    d274:	4906      	ldr	r1, [pc, #24]	; (d290 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    d276:	4805      	ldr	r0, [pc, #20]	; (d28c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    d278:	6008      	str	r0, [r1, #0]
    d27a:	4907      	ldr	r1, [pc, #28]	; (d298 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    d27c:	4805      	ldr	r0, [pc, #20]	; (d294 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    d27e:	6008      	str	r0, [r1, #0]
    d280:	bd10      	pop	{r4, pc}
    d282:	0000      	.short	0x0000
    d284:	2000032c 	.word	0x2000032c
    d288:	20001d7c 	.word	0x20001d7c
    d28c:	0000755d 	.word	0x0000755d
    d290:	20000350 	.word	0x20000350
    d294:	00006d35 	.word	0x00006d35
    d298:	20000354 	.word	0x20000354
    d29c:	b510      	push	{r4, lr}
    d29e:	f7f7 fdfb 	bl	4e98 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    d2a2:	4806      	ldr	r0, [pc, #24]	; (d2bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    d2a4:	4904      	ldr	r1, [pc, #16]	; (d2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    d2a6:	7800      	ldrb	r0, [r0, #0]
    d2a8:	f7f7 fece 	bl	5048 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    d2ac:	f004 ffd1 	bl	12252 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
    d2b0:	4904      	ldr	r1, [pc, #16]	; (d2c4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    d2b2:	4803      	ldr	r0, [pc, #12]	; (d2c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    d2b4:	6008      	str	r0, [r1, #0]
    d2b6:	bd10      	pop	{r4, pc}
    d2b8:	20001d7c 	.word	0x20001d7c
    d2bc:	2000032c 	.word	0x2000032c
    d2c0:	00004ffd 	.word	0x00004ffd
    d2c4:	2000036c 	.word	0x2000036c
    d2c8:	b510      	push	{r4, lr}
    d2ca:	4c08      	ldr	r4, [pc, #32]	; (d2ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    d2cc:	2001      	movs	r0, #1
    d2ce:	7060      	strb	r0, [r4, #1]
    d2d0:	f7fa fbf6 	bl	7ac0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    d2d4:	7820      	ldrb	r0, [r4, #0]
    d2d6:	f7fc fe1d 	bl	9f14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    d2da:	f7ff ffdf 	bl	d29c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    d2de:	4905      	ldr	r1, [pc, #20]	; (d2f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    d2e0:	4803      	ldr	r0, [pc, #12]	; (d2f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    d2e2:	6008      	str	r0, [r1, #0]
    d2e4:	4905      	ldr	r1, [pc, #20]	; (d2fc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    d2e6:	4804      	ldr	r0, [pc, #16]	; (d2f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    d2e8:	6008      	str	r0, [r1, #0]
    d2ea:	bd10      	pop	{r4, pc}
    d2ec:	2000032c 	.word	0x2000032c
    d2f0:	000111f1 	.word	0x000111f1
    d2f4:	20000368 	.word	0x20000368
    d2f8:	00006d95 	.word	0x00006d95
    d2fc:	2000035c 	.word	0x2000035c

0000d300 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    d300:	4a07      	ldr	r2, [pc, #28]	; (d320 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x20>)
    d302:	b510      	push	{r4, lr}
    d304:	6811      	ldr	r1, [r2, #0]
    d306:	fa21 f300 	lsr.w	r3, r1, r0
    d30a:	07db      	lsls	r3, r3, #31
    d30c:	d003      	beq.n	d316 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x16>
    d30e:	211f      	movs	r1, #31
    d310:	2002      	movs	r0, #2
    d312:	f7f6 febb 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d316:	2301      	movs	r3, #1
    d318:	4083      	lsls	r3, r0
    d31a:	430b      	orrs	r3, r1
    d31c:	6013      	str	r3, [r2, #0]
    d31e:	bd10      	pop	{r4, pc}
    d320:	20000388 	.word	0x20000388

0000d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    d324:	4801      	ldr	r0, [pc, #4]	; (d32c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    d326:	6800      	ldr	r0, [r0, #0]
    d328:	4770      	bx	lr
    d32a:	0000      	.short	0x0000
    d32c:	20000388 	.word	0x20000388

0000d330 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>:
    d330:	00c1      	lsls	r1, r0, #3
    d332:	4802      	ldr	r0, [pc, #8]	; (d33c <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI+0xc>)
    d334:	6800      	ldr	r0, [r0, #0]
    d336:	40c8      	lsrs	r0, r1
    d338:	b2c0      	uxtb	r0, r0
    d33a:	4770      	bx	lr
    d33c:	20000388 	.word	0x20000388

0000d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    d340:	4803      	ldr	r0, [pc, #12]	; (d350 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    d342:	8800      	ldrh	r0, [r0, #0]
    d344:	f3c0 2000 	ubfx	r0, r0, #8, #1
    d348:	0040      	lsls	r0, r0, #1
    d34a:	1c40      	adds	r0, r0, #1
    d34c:	4770      	bx	lr
    d34e:	0000      	.short	0x0000
    d350:	20000388 	.word	0x20000388

0000d354 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    d354:	b570      	push	{r4, r5, r6, lr}
    d356:	4605      	mov	r5, r0
    d358:	4616      	mov	r6, r2
    d35a:	460c      	mov	r4, r1
    d35c:	2002      	movs	r0, #2
    d35e:	f000 f9b9 	bl	d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d362:	4905      	ldr	r1, [pc, #20]	; (d378 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    d364:	2001      	movs	r0, #1
    d366:	7008      	strb	r0, [r1, #0]
    d368:	4904      	ldr	r1, [pc, #16]	; (d37c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    d36a:	1ef0      	subs	r0, r6, #3
    d36c:	6008      	str	r0, [r1, #0]
    d36e:	4804      	ldr	r0, [pc, #16]	; (d380 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    d370:	6005      	str	r5, [r0, #0]
    d372:	1f00      	subs	r0, r0, #4
    d374:	6004      	str	r4, [r0, #0]
    d376:	bd70      	pop	{r4, r5, r6, pc}
    d378:	200003bf 	.word	0x200003bf
    d37c:	4000f510 	.word	0x4000f510
    d380:	4000f508 	.word	0x4000f508

0000d384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    d384:	4811      	ldr	r0, [pc, #68]	; (d3cc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    d386:	7801      	ldrb	r1, [r0, #0]
    d388:	b1d9      	cbz	r1, d3c2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    d38a:	4a11      	ldr	r2, [pc, #68]	; (d3d0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    d38c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    d390:	6011      	str	r1, [r2, #0]
    d392:	4910      	ldr	r1, [pc, #64]	; (d3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    d394:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    d398:	2200      	movs	r2, #0
    d39a:	2b00      	cmp	r3, #0
    d39c:	bf1c      	itt	ne
    d39e:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    d3a2:	2b00      	cmpne	r3, #0
    d3a4:	d002      	beq.n	d3ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    d3a6:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    d3aa:	b119      	cbz	r1, d3b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    d3ac:	7042      	strb	r2, [r0, #1]
    d3ae:	f04f 0110 	mov.w	r1, #16
    d3b2:	e004      	b.n	d3be <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    d3b4:	f04f 0101 	mov.w	r1, #1
    d3b8:	7041      	strb	r1, [r0, #1]
    d3ba:	4907      	ldr	r1, [pc, #28]	; (d3d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    d3bc:	6809      	ldr	r1, [r1, #0]
    d3be:	7081      	strb	r1, [r0, #2]
    d3c0:	7002      	strb	r2, [r0, #0]
    d3c2:	f04f 0000 	mov.w	r0, #0
    d3c6:	f000 b985 	b.w	d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d3ca:	0000      	.short	0x0000
    d3cc:	200003bf 	.word	0x200003bf
    d3d0:	4001f508 	.word	0x4001f508
    d3d4:	4000f000 	.word	0x4000f000
    d3d8:	4000f400 	.word	0x4000f400

0000d3dc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    d3dc:	b510      	push	{r4, lr}
    d3de:	2002      	movs	r0, #2
    d3e0:	f000 f978 	bl	d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d3e4:	4907      	ldr	r1, [pc, #28]	; (d404 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    d3e6:	2001      	movs	r0, #1
    d3e8:	7008      	strb	r0, [r1, #0]
    d3ea:	4907      	ldr	r1, [pc, #28]	; (d408 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    d3ec:	2000      	movs	r0, #0
    d3ee:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d3f2:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d3f6:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d3fa:	4904      	ldr	r1, [pc, #16]	; (d40c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    d3fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d400:	6008      	str	r0, [r1, #0]
    d402:	bd10      	pop	{r4, pc}
    d404:	200003bf 	.word	0x200003bf
    d408:	4000f000 	.word	0x4000f000
    d40c:	4001f504 	.word	0x4001f504

0000d410 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    d410:	4803      	ldr	r0, [pc, #12]	; (d420 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    d412:	2100      	movs	r1, #0
    d414:	7001      	strb	r1, [r0, #0]
    d416:	7041      	strb	r1, [r0, #1]
    d418:	2110      	movs	r1, #16
    d41a:	7081      	strb	r1, [r0, #2]
    d41c:	4770      	bx	lr
    d41e:	0000      	.short	0x0000
    d420:	200003bf 	.word	0x200003bf

0000d424 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    d424:	480c      	ldr	r0, [pc, #48]	; (d458 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    d426:	7801      	ldrb	r1, [r0, #0]
    d428:	2900      	cmp	r1, #0
    d42a:	bf04      	itt	eq
    d42c:	7880      	ldrbeq	r0, [r0, #2]
    d42e:	4770      	bxeq	lr
    d430:	480a      	ldr	r0, [pc, #40]	; (d45c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    d432:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d436:	2900      	cmp	r1, #0
    d438:	bf1c      	itt	ne
    d43a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d43e:	2900      	cmpne	r1, #0
    d440:	d002      	beq.n	d448 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    d442:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d446:	b110      	cbz	r0, d44e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    d448:	f04f 0010 	mov.w	r0, #16
    d44c:	4770      	bx	lr
    d44e:	4804      	ldr	r0, [pc, #16]	; (d460 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    d450:	6800      	ldr	r0, [r0, #0]
    d452:	b2c0      	uxtb	r0, r0
    d454:	4770      	bx	lr
    d456:	0000      	.short	0x0000
    d458:	200003bf 	.word	0x200003bf
    d45c:	4000f000 	.word	0x4000f000
    d460:	4000f400 	.word	0x4000f400

0000d464 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    d464:	480e      	ldr	r0, [pc, #56]	; (d4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    d466:	7801      	ldrb	r1, [r0, #0]
    d468:	2900      	cmp	r1, #0
    d46a:	bf04      	itt	eq
    d46c:	7840      	ldrbeq	r0, [r0, #1]
    d46e:	4770      	bxeq	lr
    d470:	480c      	ldr	r0, [pc, #48]	; (d4a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    d472:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d476:	2900      	cmp	r1, #0
    d478:	bf04      	itt	eq
    d47a:	2002      	moveq	r0, #2
    d47c:	4770      	bxeq	lr
    d47e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d482:	2900      	cmp	r1, #0
    d484:	bf1c      	itt	ne
    d486:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d48a:	2900      	cmpne	r1, #0
    d48c:	d005      	beq.n	d49a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    d48e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d492:	2800      	cmp	r0, #0
    d494:	bf04      	itt	eq
    d496:	2001      	moveq	r0, #1
    d498:	4770      	bxeq	lr
    d49a:	2000      	movs	r0, #0
    d49c:	4770      	bx	lr
    d49e:	0000      	.short	0x0000
    d4a0:	200003bf 	.word	0x200003bf
    d4a4:	4000f000 	.word	0x4000f000

0000d4a8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    d4a8:	4813      	ldr	r0, [pc, #76]	; (d4f8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    d4aa:	b510      	push	{r4, lr}
    d4ac:	7802      	ldrb	r2, [r0, #0]
    d4ae:	4b13      	ldr	r3, [pc, #76]	; (d4fc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    d4b0:	7840      	ldrb	r0, [r0, #1]
    d4b2:	21c8      	movs	r1, #200	; 0xc8
    d4b4:	1e49      	subs	r1, r1, #1
    d4b6:	b2c9      	uxtb	r1, r1
    d4b8:	b182      	cbz	r2, d4dc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    d4ba:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    d4be:	f1bc 0f00 	cmp.w	ip, #0
    d4c2:	d011      	beq.n	d4e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d4c4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    d4c8:	2800      	cmp	r0, #0
    d4ca:	bf1c      	itt	ne
    d4cc:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    d4d0:	2800      	cmpne	r0, #0
    d4d2:	d007      	beq.n	d4e4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d4d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    d4d8:	b160      	cbz	r0, d4f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d4da:	e003      	b.n	d4e4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d4dc:	2802      	cmp	r0, #2
    d4de:	d003      	beq.n	d4e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d4e0:	2801      	cmp	r0, #1
    d4e2:	d007      	beq.n	d4f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d4e4:	2000      	movs	r0, #0
    d4e6:	bd10      	pop	{r4, pc}
    d4e8:	2900      	cmp	r1, #0
    d4ea:	d1e3      	bne.n	d4b4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    d4ec:	218e      	movs	r1, #142	; 0x8e
    d4ee:	203b      	movs	r0, #59	; 0x3b
    d4f0:	f7f6 fdcc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4f4:	2001      	movs	r0, #1
    d4f6:	bd10      	pop	{r4, pc}
    d4f8:	200003bf 	.word	0x200003bf
    d4fc:	4000f000 	.word	0x4000f000

0000d500 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    d500:	b570      	push	{r4, r5, r6, lr}
    d502:	4606      	mov	r6, r0
    d504:	4614      	mov	r4, r2
    d506:	460d      	mov	r5, r1
    d508:	2001      	movs	r0, #1
    d50a:	f000 f8e3 	bl	d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d50e:	4803      	ldr	r0, [pc, #12]	; (d51c <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    d510:	6006      	str	r6, [r0, #0]
    d512:	1d00      	adds	r0, r0, #4
    d514:	6004      	str	r4, [r0, #0]
    d516:	1d00      	adds	r0, r0, #4
    d518:	6005      	str	r5, [r0, #0]
    d51a:	bd70      	pop	{r4, r5, r6, pc}
    d51c:	4000f508 	.word	0x4000f508

0000d520 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    d520:	480a      	ldr	r0, [pc, #40]	; (d54c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    d522:	7801      	ldrb	r1, [r0, #0]
    d524:	b179      	cbz	r1, d546 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x26>
    d526:	4a0a      	ldr	r2, [pc, #40]	; (d550 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    d528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    d52c:	6011      	str	r1, [r2, #0]
    d52e:	4909      	ldr	r1, [pc, #36]	; (d554 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    d530:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    d534:	2100      	movs	r1, #0
    d536:	2a00      	cmp	r2, #0
    d538:	bf08      	it	eq
    d53a:	7041      	strbeq	r1, [r0, #1]
    d53c:	d002      	beq.n	d544 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    d53e:	4a06      	ldr	r2, [pc, #24]	; (d558 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    d540:	6812      	ldr	r2, [r2, #0]
    d542:	7042      	strb	r2, [r0, #1]
    d544:	7001      	strb	r1, [r0, #0]
    d546:	2000      	movs	r0, #0
    d548:	f000 b8c4 	b.w	d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d54c:	200003c2 	.word	0x200003c2
    d550:	4001f508 	.word	0x4001f508
    d554:	4000f000 	.word	0x4000f000
    d558:	4000f400 	.word	0x4000f400

0000d55c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    d55c:	b570      	push	{r4, r5, r6, lr}
    d55e:	4604      	mov	r4, r0
    d560:	4817      	ldr	r0, [pc, #92]	; (d5c0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    d562:	460e      	mov	r6, r1
    d564:	2501      	movs	r5, #1
    d566:	7005      	strb	r5, [r0, #0]
    d568:	4916      	ldr	r1, [pc, #88]	; (d5c4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    d56a:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    d56e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    d572:	6008      	str	r0, [r1, #0]
    d574:	f001 fc8c 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d578:	b928      	cbnz	r0, d586 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2a>
    d57a:	4813      	ldr	r0, [pc, #76]	; (d5c8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    d57c:	6801      	ldr	r1, [r0, #0]
    d57e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d582:	4331      	orrs	r1, r6
    d584:	6001      	str	r1, [r0, #0]
    d586:	4911      	ldr	r1, [pc, #68]	; (d5cc <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x70>)
    d588:	2000      	movs	r0, #0
    d58a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d58e:	4b10      	ldr	r3, [pc, #64]	; (d5d0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x74>)
    d590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    d594:	601a      	str	r2, [r3, #0]
    d596:	2c00      	cmp	r4, #0
    d598:	bf02      	ittt	eq
    d59a:	f8c1 5200 	streq.w	r5, [r1, #512]	; 0x200
    d59e:	600d      	streq	r5, [r1, #0]
    d5a0:	bd70      	popeq	{r4, r5, r6, pc}
    d5a2:	2c01      	cmp	r4, #1
    d5a4:	d003      	beq.n	d5ae <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    d5a6:	2174      	movs	r1, #116	; 0x74
    d5a8:	203c      	movs	r0, #60	; 0x3c
    d5aa:	f7f6 fd6f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5ae:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    d5b2:	600d      	str	r5, [r1, #0]
    d5b4:	4907      	ldr	r1, [pc, #28]	; (d5d4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x78>)
    d5b6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d5ba:	6008      	str	r0, [r1, #0]
    d5bc:	bd70      	pop	{r4, r5, r6, pc}
    d5be:	0000      	.short	0x0000
    d5c0:	200003c2 	.word	0x200003c2
    d5c4:	4000f504 	.word	0x4000f504
    d5c8:	4000f518 	.word	0x4000f518
    d5cc:	4000f000 	.word	0x4000f000
    d5d0:	4001f508 	.word	0x4001f508
    d5d4:	4001f504 	.word	0x4001f504

0000d5d8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    d5d8:	4802      	ldr	r0, [pc, #8]	; (d5e4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    d5da:	2100      	movs	r1, #0
    d5dc:	7001      	strb	r1, [r0, #0]
    d5de:	7041      	strb	r1, [r0, #1]
    d5e0:	4770      	bx	lr
    d5e2:	0000      	.short	0x0000
    d5e4:	200003c2 	.word	0x200003c2

0000d5e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    d5e8:	4807      	ldr	r0, [pc, #28]	; (d608 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    d5ea:	7801      	ldrb	r1, [r0, #0]
    d5ec:	2900      	cmp	r1, #0
    d5ee:	bf04      	itt	eq
    d5f0:	7840      	ldrbeq	r0, [r0, #1]
    d5f2:	4770      	bxeq	lr
    d5f4:	4805      	ldr	r0, [pc, #20]	; (d60c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    d5f6:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    d5fa:	2800      	cmp	r0, #0
    d5fc:	bf08      	it	eq
    d5fe:	4770      	bxeq	lr
    d600:	4803      	ldr	r0, [pc, #12]	; (d610 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    d602:	6800      	ldr	r0, [r0, #0]
    d604:	b2c0      	uxtb	r0, r0
    d606:	4770      	bx	lr
    d608:	200003c2 	.word	0x200003c2
    d60c:	4000f000 	.word	0x4000f000
    d610:	4000f400 	.word	0x4000f400

0000d614 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    d614:	4901      	ldr	r1, [pc, #4]	; (d61c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    d616:	2001      	movs	r0, #1
    d618:	6088      	str	r0, [r1, #8]
    d61a:	4770      	bx	lr
    d61c:	4000f000 	.word	0x4000f000

0000d620 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    d620:	2800      	cmp	r0, #0
    d622:	bf08      	it	eq
    d624:	4770      	bxeq	lr
    d626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d62a:	481b      	ldr	r0, [pc, #108]	; (d698 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    d62c:	7800      	ldrb	r0, [r0, #0]
    d62e:	b1e0      	cbz	r0, d66a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    d630:	4c1a      	ldr	r4, [pc, #104]	; (d69c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    d632:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d636:	2800      	cmp	r0, #0
    d638:	bf18      	it	ne
    d63a:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d63e:	f04f 0902 	mov.w	r9, #2
    d642:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    d646:	4f16      	ldr	r7, [pc, #88]	; (d6a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    d648:	6838      	ldr	r0, [r7, #0]
    d64a:	f3c0 1800 	ubfx	r8, r0, #4, #1
    d64e:	6838      	ldr	r0, [r7, #0]
    d650:	f040 0010 	orr.w	r0, r0, #16
    d654:	6038      	str	r0, [r7, #0]
    d656:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d65a:	2800      	cmp	r0, #0
    d65c:	bf04      	itt	eq
    d65e:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    d662:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    d666:	d10c      	bne.n	d682 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    d668:	e003      	b.n	d672 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d66a:	21d3      	movs	r1, #211	; 0xd3
    d66c:	203c      	movs	r0, #60	; 0x3c
    d66e:	f7f6 fd0d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d672:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    d676:	f7f6 fb4f 	bl	3d18 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d67a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d67e:	2800      	cmp	r0, #0
    d680:	d0f7      	beq.n	d672 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d682:	f1b8 0f00 	cmp.w	r8, #0
    d686:	d103      	bne.n	d690 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    d688:	6838      	ldr	r0, [r7, #0]
    d68a:	f020 0010 	bic.w	r0, r0, #16
    d68e:	6038      	str	r0, [r7, #0]
    d690:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    d694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d698:	200003c2 	.word	0x200003c2
    d69c:	4000f000 	.word	0x4000f000
    d6a0:	e000ed10 	.word	0xe000ed10

0000d6a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    d6a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d6a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d6ac:	2000      	movs	r0, #0
    d6ae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d6b2:	f3bf 8f4f 	dsb	sy
    d6b6:	f3bf 8f6f 	isb	sy
    d6ba:	4904      	ldr	r1, [pc, #16]	; (d6cc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    d6bc:	6008      	str	r0, [r1, #0]
    d6be:	6008      	str	r0, [r1, #0]
    d6c0:	4903      	ldr	r1, [pc, #12]	; (d6d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    d6c2:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    d6c6:	6008      	str	r0, [r1, #0]
    d6c8:	4770      	bx	lr
    d6ca:	0000      	.short	0x0000
    d6cc:	4000f500 	.word	0x4000f500
    d6d0:	4001f508 	.word	0x4001f508

0000d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    d6d4:	4912      	ldr	r1, [pc, #72]	; (d720 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    d6d6:	b510      	push	{r4, lr}
    d6d8:	2200      	movs	r2, #0
    d6da:	600a      	str	r2, [r1, #0]
    d6dc:	600a      	str	r2, [r1, #0]
    d6de:	4b11      	ldr	r3, [pc, #68]	; (d724 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    d6e0:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    d6e4:	601a      	str	r2, [r3, #0]
    d6e6:	2800      	cmp	r0, #0
    d6e8:	bf08      	it	eq
    d6ea:	bd10      	popeq	{r4, pc}
    d6ec:	4a0e      	ldr	r2, [pc, #56]	; (d728 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    d6ee:	4b0f      	ldr	r3, [pc, #60]	; (d72c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    d6f0:	f8df c03c 	ldr.w	ip, [pc, #60]	; d730 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    d6f4:	2801      	cmp	r0, #1
    d6f6:	d005      	beq.n	d704 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    d6f8:	2802      	cmp	r0, #2
    d6fa:	d008      	beq.n	d70e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    d6fc:	217d      	movs	r1, #125	; 0x7d
    d6fe:	203d      	movs	r0, #61	; 0x3d
    d700:	f7f6 fcc4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d704:	2002      	movs	r0, #2
    d706:	6008      	str	r0, [r1, #0]
    d708:	601a      	str	r2, [r3, #0]
    d70a:	0600      	lsls	r0, r0, #24
    d70c:	e004      	b.n	d718 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    d70e:	2003      	movs	r0, #3
    d710:	6008      	str	r0, [r1, #0]
    d712:	601a      	str	r2, [r3, #0]
    d714:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d718:	f8cc 0000 	str.w	r0, [ip]
    d71c:	bd10      	pop	{r4, pc}
    d71e:	0000      	.short	0x0000
    d720:	4000f500 	.word	0x4000f500
    d724:	4001f508 	.word	0x4001f508
    d728:	20001e7e 	.word	0x20001e7e
    d72c:	4000f514 	.word	0x4000f514
    d730:	4001f504 	.word	0x4001f504

0000d734 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    d734:	4805      	ldr	r0, [pc, #20]	; (d74c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    d736:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d73a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    d73e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d742:	4903      	ldr	r1, [pc, #12]	; (d750 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    d744:	2000      	movs	r0, #0
    d746:	6008      	str	r0, [r1, #0]
    d748:	4770      	bx	lr
    d74a:	0000      	.short	0x0000
    d74c:	40001000 	.word	0x40001000
    d750:	40001560 	.word	0x40001560

0000d754 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    d754:	4904      	ldr	r1, [pc, #16]	; (d768 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    d756:	6008      	str	r0, [r1, #0]
    d758:	4804      	ldr	r0, [pc, #16]	; (d76c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    d75a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d75e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d762:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d766:	4770      	bx	lr
    d768:	40001560 	.word	0x40001560
    d76c:	40001000 	.word	0x40001000

0000d770 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    d770:	00c2      	lsls	r2, r0, #3
    d772:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d776:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    d77a:	4b07      	ldr	r3, [pc, #28]	; (d798 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    d77c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d780:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    d784:	2101      	movs	r1, #1
    d786:	fa01 f000 	lsl.w	r0, r1, r0
    d78a:	4904      	ldr	r1, [pc, #16]	; (d79c <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    d78c:	6008      	str	r0, [r1, #0]
    d78e:	4904      	ldr	r1, [pc, #16]	; (d7a0 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    d790:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    d792:	4310      	orrs	r0, r2
    d794:	6388      	str	r0, [r1, #56]	; 0x38
    d796:	4770      	bx	lr
    d798:	40001104 	.word	0x40001104
    d79c:	4001f504 	.word	0x4001f504
    d7a0:	20001a20 	.word	0x20001a20

0000d7a4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    d7a4:	4801      	ldr	r0, [pc, #4]	; (d7ac <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    d7a6:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    d7aa:	4770      	bx	lr
    d7ac:	20001a20 	.word	0x20001a20

0000d7b0 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    d7b0:	4a01      	ldr	r2, [pc, #4]	; (d7b8 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    d7b2:	7051      	strb	r1, [r2, #1]
    d7b4:	7010      	strb	r0, [r2, #0]
    d7b6:	4770      	bx	lr
    d7b8:	20001a20 	.word	0x20001a20

0000d7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    d7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7c0:	f7f6 fb1a 	bl	3df8 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    d7c4:	f7f6 fb7c 	bl	3ec0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    d7c8:	4b30      	ldr	r3, [pc, #192]	; (d88c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd0>)
    d7ca:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    d7ce:	2610      	movs	r6, #16
    d7d0:	f3c1 1500 	ubfx	r5, r1, #4, #1
    d7d4:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
    d7d8:	2102      	movs	r1, #2
    d7da:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d7de:	4a2c      	ldr	r2, [pc, #176]	; (d890 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    d7e0:	4f2d      	ldr	r7, [pc, #180]	; (d898 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    d7e2:	f04f 0c00 	mov.w	ip, #0
    d7e6:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c
    d7ea:	492a      	ldr	r1, [pc, #168]	; (d894 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    d7ec:	6039      	str	r1, [r7, #0]
    d7ee:	7ad1      	ldrb	r1, [r2, #11]
    d7f0:	2401      	movs	r4, #1
    d7f2:	2901      	cmp	r1, #1
    d7f4:	d002      	beq.n	d7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x40>
    d7f6:	2902      	cmp	r1, #2
    d7f8:	d003      	beq.n	d802 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    d7fa:	e017      	b.n	d82c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d7fc:	7e11      	ldrb	r1, [r2, #24]
    d7fe:	b911      	cbnz	r1, d806 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4a>
    d800:	e014      	b.n	d82c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d802:	7e51      	ldrb	r1, [r2, #25]
    d804:	b191      	cbz	r1, d82c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d806:	7f91      	ldrb	r1, [r2, #30]
    d808:	f892 801f 	ldrb.w	r8, [r2, #31]
    d80c:	fa04 f101 	lsl.w	r1, r4, r1
    d810:	fa04 f808 	lsl.w	r8, r4, r8
    d814:	ea41 0108 	orr.w	r1, r1, r8
    d818:	6039      	str	r1, [r7, #0]
    d81a:	f892 1020 	ldrb.w	r1, [r2, #32]
    d81e:	0089      	lsls	r1, r1, #2
    d820:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d824:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d828:	f8c1 c510 	str.w	ip, [r1, #1296]	; 0x510
    d82c:	491b      	ldr	r1, [pc, #108]	; (d89c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    d82e:	6809      	ldr	r1, [r1, #0]
    d830:	b1a9      	cbz	r1, d85e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    d832:	21ff      	movs	r1, #255	; 0xff
    d834:	f88d 1000 	strb.w	r1, [sp]
    d838:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d83c:	611c      	str	r4, [r3, #16]
    d83e:	e004      	b.n	d84a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    d840:	f89d 1000 	ldrb.w	r1, [sp]
    d844:	1e49      	subs	r1, r1, #1
    d846:	f88d 1000 	strb.w	r1, [sp]
    d84a:	f89d 1000 	ldrb.w	r1, [sp]
    d84e:	b119      	cbz	r1, d858 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    d850:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    d854:	2900      	cmp	r1, #0
    d856:	d0f3      	beq.n	d840 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    d858:	f89d 1000 	ldrb.w	r1, [sp]
    d85c:	b189      	cbz	r1, d882 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xc6>
    d85e:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d862:	f882 c009 	strb.w	ip, [r2, #9]
    d866:	f882 c00a 	strb.w	ip, [r2, #10]
    d86a:	f882 c00b 	strb.w	ip, [r2, #11]
    d86e:	7314      	strb	r4, [r2, #12]
    d870:	2d00      	cmp	r5, #0
    d872:	bf18      	it	ne
    d874:	f8c3 6304 	strne.w	r6, [r3, #772]	; 0x304
    d878:	2800      	cmp	r0, #0
    d87a:	bf18      	it	ne
    d87c:	611c      	strne	r4, [r3, #16]
    d87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d882:	f240 6183 	movw	r1, #1667	; 0x683
    d886:	203e      	movs	r0, #62	; 0x3e
    d888:	f7f6 fc00 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88c:	40001000 	.word	0x40001000
    d890:	20001a20 	.word	0x20001a20
    d894:	040e0000 	.word	0x040e0000
    d898:	4001f508 	.word	0x4001f508
    d89c:	40001550 	.word	0x40001550

0000d8a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8a4:	f8df a290 	ldr.w	sl, [pc, #656]	; db38 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>
    d8a8:	4607      	mov	r7, r0
    d8aa:	b087      	sub	sp, #28
    d8ac:	48a1      	ldr	r0, [pc, #644]	; (db34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    d8ae:	460d      	mov	r5, r1
    d8b0:	f8ca 0000 	str.w	r0, [sl]
    d8b4:	4ca1      	ldr	r4, [pc, #644]	; (db3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x29c>)
    d8b6:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d8ba:	f040 0002 	orr.w	r0, r0, #2
    d8be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d8c2:	4608      	mov	r0, r1
    d8c4:	f001 f9a4 	bl	ec10 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    d8c8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d8cc:	2925      	cmp	r1, #37	; 0x25
    d8ce:	bf08      	it	eq
    d8d0:	2002      	moveq	r0, #2
    d8d2:	d00f      	beq.n	d8f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d8d4:	2926      	cmp	r1, #38	; 0x26
    d8d6:	bf08      	it	eq
    d8d8:	201a      	moveq	r0, #26
    d8da:	d00b      	beq.n	d8f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d8dc:	2927      	cmp	r1, #39	; 0x27
    d8de:	bf08      	it	eq
    d8e0:	2050      	moveq	r0, #80	; 0x50
    d8e2:	d007      	beq.n	d8f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d8e4:	290a      	cmp	r1, #10
    d8e6:	4608      	mov	r0, r1
    d8e8:	bf94      	ite	ls
    d8ea:	2204      	movls	r2, #4
    d8ec:	2206      	movhi	r2, #6
    d8ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d8f2:	b2c0      	uxtb	r0, r0
    d8f4:	4a92      	ldr	r2, [pc, #584]	; (db40 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a0>)
    d8f6:	6010      	str	r0, [r2, #0]
    d8f8:	4892      	ldr	r0, [pc, #584]	; (db44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a4>)
    d8fa:	6001      	str	r1, [r0, #0]
    d8fc:	4e92      	ldr	r6, [pc, #584]	; (db48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a8>)
    d8fe:	f04f 0800 	mov.w	r8, #0
    d902:	f04f 0b01 	mov.w	fp, #1
    d906:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    d90a:	b117      	cbz	r7, d912 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
    d90c:	2f01      	cmp	r7, #1
    d90e:	d04d      	beq.n	d9ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x10c>
    d910:	e094      	b.n	da3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d912:	2d01      	cmp	r5, #1
    d914:	bf08      	it	eq
    d916:	2000      	moveq	r0, #0
    d918:	d00b      	beq.n	d932 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d91a:	2d02      	cmp	r5, #2
    d91c:	bf08      	it	eq
    d91e:	2001      	moveq	r0, #1
    d920:	d007      	beq.n	d932 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d922:	2d04      	cmp	r5, #4
    d924:	bf08      	it	eq
    d926:	2003      	moveq	r0, #3
    d928:	d003      	beq.n	d932 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d92a:	2d08      	cmp	r5, #8
    d92c:	bf08      	it	eq
    d92e:	2002      	moveq	r0, #2
    d930:	d150      	bne.n	d9d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x134>
    d932:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d936:	ab05      	add	r3, sp, #20
    d938:	f7f2 ffd0 	bl	8dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d93c:	2800      	cmp	r0, #0
    d93e:	d154      	bne.n	d9ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    d940:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d944:	f001 f95e 	bl	ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d948:	7a60      	ldrb	r0, [r4, #9]
    d94a:	2801      	cmp	r0, #1
    d94c:	d105      	bne.n	d95a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xba>
    d94e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d952:	f040 0008 	orr.w	r0, r0, #8
    d956:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d95a:	f001 fab5 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d95e:	b178      	cbz	r0, d980 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    d960:	497a      	ldr	r1, [pc, #488]	; (db4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ac>)
    d962:	680a      	ldr	r2, [r1, #0]
    d964:	0648      	lsls	r0, r1, #25
    d966:	2d02      	cmp	r5, #2
    d968:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    d96c:	bf0c      	ite	eq
    d96e:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    d972:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    d976:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    d97a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    d97e:	6008      	str	r0, [r1, #0]
    d980:	f884 b00b 	strb.w	fp, [r4, #11]
    d984:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d986:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d98a:	63a0      	str	r0, [r4, #56]	; 0x38
    d98c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d990:	f8ca 0000 	str.w	r0, [sl]
    d994:	2d02      	cmp	r5, #2
    d996:	bf0c      	ite	eq
    d998:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d99c:	f640 0034 	movwne	r0, #2100	; 0x834
    d9a0:	f649 71ec 	movw	r1, #40940	; 0x9fec
    d9a4:	4408      	add	r0, r1
    d9a6:	fbb0 f8f9 	udiv	r8, r0, r9
    d9aa:	e047      	b.n	da3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d9ac:	7aa0      	ldrb	r0, [r4, #10]
    d9ae:	2801      	cmp	r0, #1
    d9b0:	d124      	bne.n	d9fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    d9b2:	7b60      	ldrb	r0, [r4, #13]
    d9b4:	2801      	cmp	r0, #1
    d9b6:	bf08      	it	eq
    d9b8:	2000      	moveq	r0, #0
    d9ba:	d010      	beq.n	d9de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d9bc:	2802      	cmp	r0, #2
    d9be:	bf08      	it	eq
    d9c0:	2001      	moveq	r0, #1
    d9c2:	d00c      	beq.n	d9de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d9c4:	2804      	cmp	r0, #4
    d9c6:	bf08      	it	eq
    d9c8:	2003      	moveq	r0, #3
    d9ca:	d008      	beq.n	d9de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d9cc:	2808      	cmp	r0, #8
    d9ce:	bf08      	it	eq
    d9d0:	2002      	moveq	r0, #2
    d9d2:	d004      	beq.n	d9de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d9d4:	f240 31f3 	movw	r1, #1011	; 0x3f3
    d9d8:	2006      	movs	r0, #6
    d9da:	f7f6 fb57 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9de:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d9e2:	ab05      	add	r3, sp, #20
    d9e4:	f7f2 ff7a 	bl	8dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d9e8:	b120      	cbz	r0, d9f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d9ea:	f240 31d5 	movw	r1, #981	; 0x3d5
    d9ee:	203e      	movs	r0, #62	; 0x3e
    d9f0:	f7f6 fb4c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9f4:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d9f8:	f001 f904 	bl	ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d9fc:	7a60      	ldrb	r0, [r4, #9]
    d9fe:	2801      	cmp	r0, #1
    da00:	d105      	bne.n	da0e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    da02:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    da06:	f040 0004 	orr.w	r0, r0, #4
    da0a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    da0e:	2002      	movs	r0, #2
    da10:	72e0      	strb	r0, [r4, #11]
    da12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    da14:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    da18:	63a0      	str	r0, [r4, #56]	; 0x38
    da1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    da1e:	f8ca 0000 	str.w	r0, [sl]
    da22:	f04f 0829 	mov.w	r8, #41	; 0x29
    da26:	f001 fa4f 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    da2a:	b938      	cbnz	r0, da3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    da2c:	f001 fa3c 	bl	eea8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    da30:	b920      	cbnz	r0, da3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    da32:	4847      	ldr	r0, [pc, #284]	; (db50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b0>)
    da34:	6801      	ldr	r1, [r0, #0]
    da36:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    da3a:	6001      	str	r1, [r0, #0]
    da3c:	7a60      	ldrb	r0, [r4, #9]
    da3e:	2800      	cmp	r0, #0
    da40:	bf04      	itt	eq
    da42:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    da46:	f040 0002 	orreq.w	r0, r0, #2
    da4a:	d006      	beq.n	da5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
    da4c:	2801      	cmp	r0, #1
    da4e:	bf04      	itt	eq
    da50:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    da54:	f040 0004 	orreq.w	r0, r0, #4
    da58:	d101      	bne.n	da5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1be>
    da5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    da5e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    da62:	f010 0f01 	tst.w	r0, #1
    da66:	d027      	beq.n	dab8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    da68:	f010 0f02 	tst.w	r0, #2
    da6c:	d018      	beq.n	daa0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x200>
    da6e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    da72:	f040 0001 	orr.w	r0, r0, #1
    da76:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    da7a:	4836      	ldr	r0, [pc, #216]	; (db54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b4>)
    da7c:	6801      	ldr	r1, [r0, #0]
    da7e:	290b      	cmp	r1, #11
    da80:	bf1c      	itt	ne
    da82:	6801      	ldrne	r1, [r0, #0]
    da84:	290a      	cmpne	r1, #10
    da86:	d005      	beq.n	da94 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1f4>
    da88:	6801      	ldr	r1, [r0, #0]
    da8a:	2903      	cmp	r1, #3
    da8c:	bf1c      	itt	ne
    da8e:	6800      	ldrne	r0, [r0, #0]
    da90:	2802      	cmpne	r0, #2
    da92:	d111      	bne.n	dab8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    da94:	f240 414c 	movw	r1, #1100	; 0x44c
    da98:	f04f 003e 	mov.w	r0, #62	; 0x3e
    da9c:	f7f6 faf6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daa0:	f010 0f04 	tst.w	r0, #4
    daa4:	d008      	beq.n	dab8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    daa6:	492d      	ldr	r1, [pc, #180]	; (db5c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2bc>)
    daa8:	482b      	ldr	r0, [pc, #172]	; (db58 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b8>)
    daaa:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    daae:	482c      	ldr	r0, [pc, #176]	; (db60 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c0>)
    dab0:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    dab4:	2801      	cmp	r0, #1
    dab6:	d031      	beq.n	db1c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    dab8:	f001 f8d2 	bl	ec60 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    dabc:	6800      	ldr	r0, [r0, #0]
    dabe:	2801      	cmp	r0, #1
    dac0:	d031      	beq.n	db26 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    dac2:	2f01      	cmp	r7, #1
    dac4:	bf08      	it	eq
    dac6:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    daca:	d008      	beq.n	dade <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x23e>
    dacc:	2d02      	cmp	r5, #2
    dace:	bf0c      	ite	eq
    dad0:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    dad4:	f640 0034 	movwne	r0, #2100	; 0x834
    dad8:	f24a 0150 	movw	r1, #41040	; 0xa050
    dadc:	4408      	add	r0, r1
    dade:	fbb0 f0f9 	udiv	r0, r0, r9
    dae2:	4920      	ldr	r1, [pc, #128]	; (db64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c4>)
    dae4:	6809      	ldr	r1, [r1, #0]
    dae6:	4a20      	ldr	r2, [pc, #128]	; (db68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c8>)
    dae8:	2f01      	cmp	r7, #1
    daea:	f102 0314 	add.w	r3, r2, #20
    daee:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    daf2:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    daf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    daf8:	9204      	str	r2, [sp, #16]
    dafa:	bf14      	ite	ne
    dafc:	2201      	movne	r2, #1
    dafe:	2200      	moveq	r2, #0
    db00:	f88d 2001 	strb.w	r2, [sp, #1]
    db04:	e9cd 1003 	strd	r1, r0, [sp, #12]
    db08:	4668      	mov	r0, sp
    db0a:	f7f6 f9c3 	bl	3e94 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    db0e:	2000      	movs	r0, #0
    db10:	f000 ffe4 	bl	eadc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    db14:	b007      	add	sp, #28
    db16:	4640      	mov	r0, r8
    db18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db1c:	f240 4153 	movw	r1, #1107	; 0x453
    db20:	203e      	movs	r0, #62	; 0x3e
    db22:	f7f6 fab3 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db26:	f7ff fe49 	bl	d7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    db2a:	b007      	add	sp, #28
    db2c:	2000      	movs	r0, #0
    db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db32:	0000      	.short	0x0000
    db34:	04040000 	.word	0x04040000
    db38:	4001f504 	.word	0x4001f504
    db3c:	20001a20 	.word	0x20001a20
    db40:	40001508 	.word	0x40001508
    db44:	40001554 	.word	0x40001554
    db48:	40001000 	.word	0x40001000
    db4c:	40001588 	.word	0x40001588
    db50:	40001568 	.word	0x40001568
    db54:	40001550 	.word	0x40001550
    db58:	40001008 	.word	0x40001008
    db5c:	4001f098 	.word	0x4001f098
    db60:	40008000 	.word	0x40008000
    db64:	40008540 	.word	0x40008540
    db68:	0000ebb4 	.word	0x0000ebb4

0000db6c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    db6c:	b410      	push	{r4}
    db6e:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    db72:	4903      	ldr	r1, [pc, #12]	; (db80 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    db74:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    db78:	6900      	ldr	r0, [r0, #16]
    db7a:	6108      	str	r0, [r1, #16]
    db7c:	bc10      	pop	{r4}
    db7e:	4770      	bx	lr
    db80:	20001a0c 	.word	0x20001a0c

0000db84 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    db84:	4914      	ldr	r1, [pc, #80]	; (dbd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    db86:	b510      	push	{r4, lr}
    db88:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    db8a:	4282      	cmp	r2, r0
    db8c:	d304      	bcc.n	db98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    db8e:	f240 61ec 	movw	r1, #1772	; 0x6ec
    db92:	203e      	movs	r0, #62	; 0x3e
    db94:	f7f6 fa7a 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db98:	2201      	movs	r2, #1
    db9a:	f8df c040 	ldr.w	ip, [pc, #64]	; dbdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    db9e:	740a      	strb	r2, [r1, #16]
    dba0:	6148      	str	r0, [r1, #20]
    dba2:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    dba6:	4b0e      	ldr	r3, [pc, #56]	; (dbe0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    dba8:	681c      	ldr	r4, [r3, #0]
    dbaa:	1d64      	adds	r4, r4, #5
    dbac:	4284      	cmp	r4, r0
    dbae:	d306      	bcc.n	dbbe <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    dbb0:	480c      	ldr	r0, [pc, #48]	; (dbe4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    dbb2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    dbb6:	2900      	cmp	r1, #0
    dbb8:	bf08      	it	eq
    dbba:	6102      	streq	r2, [r0, #16]
    dbbc:	bd10      	pop	{r4, pc}
    dbbe:	2200      	movs	r2, #0
    dbc0:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    dbc4:	6018      	str	r0, [r3, #0]
    dbc6:	6b88      	ldr	r0, [r1, #56]	; 0x38
    dbc8:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    dbcc:	6388      	str	r0, [r1, #56]	; 0x38
    dbce:	4906      	ldr	r1, [pc, #24]	; (dbe8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    dbd0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    dbd4:	6008      	str	r0, [r1, #0]
    dbd6:	bd10      	pop	{r4, pc}
    dbd8:	20001a20 	.word	0x20001a20
    dbdc:	40008000 	.word	0x40008000
    dbe0:	40008544 	.word	0x40008544
    dbe4:	40001000 	.word	0x40001000
    dbe8:	4001f504 	.word	0x4001f504

0000dbec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    dbec:	b510      	push	{r4, lr}
    dbee:	4c19      	ldr	r4, [pc, #100]	; (dc54 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    dbf0:	4603      	mov	r3, r0
    dbf2:	2002      	movs	r0, #2
    dbf4:	4918      	ldr	r1, [pc, #96]	; (dc58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x6c>)
    dbf6:	7420      	strb	r0, [r4, #16]
    dbf8:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    dbfc:	680a      	ldr	r2, [r1, #0]
    dbfe:	f002 020f 	and.w	r2, r2, #15
    dc02:	2a03      	cmp	r2, #3
    dc04:	bf08      	it	eq
    dc06:	2201      	moveq	r2, #1
    dc08:	d00b      	beq.n	dc22 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    dc0a:	6809      	ldr	r1, [r1, #0]
    dc0c:	f001 010f 	and.w	r1, r1, #15
    dc10:	2904      	cmp	r1, #4
    dc12:	bf08      	it	eq
    dc14:	2202      	moveq	r2, #2
    dc16:	d004      	beq.n	dc22 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    dc18:	f240 11d7 	movw	r1, #471	; 0x1d7
    dc1c:	203e      	movs	r0, #62	; 0x3e
    dc1e:	f7f6 fa35 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc22:	490c      	ldr	r1, [pc, #48]	; (dc54 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    dc24:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    dc28:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    dc2c:	f1bc 0f01 	cmp.w	ip, #1
    dc30:	d00c      	beq.n	dc4c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x60>
    dc32:	f004 fb8a 	bl	1234a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    dc36:	4909      	ldr	r1, [pc, #36]	; (dc5c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x70>)
    dc38:	6160      	str	r0, [r4, #20]
    dc3a:	2000      	movs	r0, #0
    dc3c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    dc40:	6961      	ldr	r1, [r4, #20]
    dc42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dc44:	4408      	add	r0, r1
    dc46:	4906      	ldr	r1, [pc, #24]	; (dc60 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x74>)
    dc48:	6008      	str	r0, [r1, #0]
    dc4a:	bd10      	pop	{r4, pc}
    dc4c:	f004 fb99 	bl	12382 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    dc50:	e7f1      	b.n	dc36 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4a>
    dc52:	0000      	.short	0x0000
    dc54:	20001a20 	.word	0x20001a20
    dc58:	40001510 	.word	0x40001510
    dc5c:	40008000 	.word	0x40008000
    dc60:	40008544 	.word	0x40008544

0000dc64 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    dc64:	4803      	ldr	r0, [pc, #12]	; (dc74 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x10>)
    dc66:	6801      	ldr	r1, [r0, #0]
    dc68:	f021 0101 	bic.w	r1, r1, #1
    dc6c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    dc70:	6001      	str	r1, [r0, #0]
    dc72:	4770      	bx	lr
    dc74:	40001774 	.word	0x40001774

0000dc78 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    dc78:	b510      	push	{r4, lr}
    dc7a:	2896      	cmp	r0, #150	; 0x96
    dc7c:	bf9e      	ittt	ls
    dc7e:	4904      	ldrls	r1, [pc, #16]	; (dc90 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    dc80:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    dc84:	bd10      	popls	{r4, pc}
    dc86:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    dc8a:	203e      	movs	r0, #62	; 0x3e
    dc8c:	f7f6 f9fe 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc90:	20001a20 	.word	0x20001a20

0000dc94 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc98:	4822      	ldr	r0, [pc, #136]	; (dd24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    dc9a:	2400      	movs	r4, #0
    dc9c:	2101      	movs	r1, #1
    dc9e:	6144      	str	r4, [r0, #20]
    dca0:	6184      	str	r4, [r0, #24]
    dca2:	61c4      	str	r4, [r0, #28]
    dca4:	6204      	str	r4, [r0, #32]
    dca6:	6244      	str	r4, [r0, #36]	; 0x24
    dca8:	6284      	str	r4, [r0, #40]	; 0x28
    dcaa:	62c4      	str	r4, [r0, #44]	; 0x2c
    dcac:	6304      	str	r4, [r0, #48]	; 0x30
    dcae:	6344      	str	r4, [r0, #52]	; 0x34
    dcb0:	6384      	str	r4, [r0, #56]	; 0x38
    dcb2:	63c4      	str	r4, [r0, #60]	; 0x3c
    dcb4:	6404      	str	r4, [r0, #64]	; 0x40
    dcb6:	6444      	str	r4, [r0, #68]	; 0x44
    dcb8:	6484      	str	r4, [r0, #72]	; 0x48
    dcba:	64c4      	str	r4, [r0, #76]	; 0x4c
    dcbc:	6504      	str	r4, [r0, #80]	; 0x50
    dcbe:	3014      	adds	r0, #20
    dcc0:	7244      	strb	r4, [r0, #9]
    dcc2:	7284      	strb	r4, [r0, #10]
    dcc4:	72c4      	strb	r4, [r0, #11]
    dcc6:	7301      	strb	r1, [r0, #12]
    dcc8:	f001 f8c4 	bl	ee54 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    dccc:	4f16      	ldr	r7, [pc, #88]	; (dd28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x94>)
    dcce:	4d17      	ldr	r5, [pc, #92]	; (dd2c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x98>)
    dcd0:	4e17      	ldr	r6, [pc, #92]	; (dd30 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x9c>)
    dcd2:	b928      	cbnz	r0, dce0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    dcd4:	f001 f8c8 	bl	ee68 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    dcd8:	b910      	cbnz	r0, dce0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    dcda:	f001 f8cf 	bl	ee7c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    dcde:	b140      	cbz	r0, dcf2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    dce0:	2224      	movs	r2, #36	; 0x24
    dce2:	21ff      	movs	r1, #255	; 0xff
    dce4:	4638      	mov	r0, r7
    dce6:	f001 f923 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcea:	602c      	str	r4, [r5, #0]
    dcec:	6034      	str	r4, [r6, #0]
    dcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcf2:	f001 f903 	bl	eefc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    dcf6:	b910      	cbnz	r0, dcfe <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6a>
    dcf8:	f001 f8f6 	bl	eee8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    dcfc:	b140      	cbz	r0, dd10 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x7c>
    dcfe:	2240      	movs	r2, #64	; 0x40
    dd00:	21ff      	movs	r1, #255	; 0xff
    dd02:	4638      	mov	r0, r7
    dd04:	f001 f914 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd08:	602c      	str	r4, [r5, #0]
    dd0a:	6034      	str	r4, [r6, #0]
    dd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd10:	2238      	movs	r2, #56	; 0x38
    dd12:	21ff      	movs	r1, #255	; 0xff
    dd14:	4638      	mov	r0, r7
    dd16:	f001 f90b 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd1a:	602c      	str	r4, [r5, #0]
    dd1c:	6034      	str	r4, [r6, #0]
    dd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd22:	0000      	.short	0x0000
    dd24:	20001a0c 	.word	0x20001a0c
    dd28:	40000e00 	.word	0x40000e00
    dd2c:	40000e08 	.word	0x40000e08
    dd30:	40000e10 	.word	0x40000e10

0000dd34 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    dd34:	4901      	ldr	r1, [pc, #4]	; (dd3c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    dd36:	7008      	strb	r0, [r1, #0]
    dd38:	4770      	bx	lr
    dd3a:	0000      	.short	0x0000
    dd3c:	2000038c 	.word	0x2000038c

0000dd40 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    dd40:	4803      	ldr	r0, [pc, #12]	; (dd50 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    dd42:	7e01      	ldrb	r1, [r0, #24]
    dd44:	2900      	cmp	r1, #0
    dd46:	bf06      	itte	eq
    dd48:	7e40      	ldrbeq	r0, [r0, #25]
    dd4a:	2800      	cmpeq	r0, #0
    dd4c:	2001      	movne	r0, #1
    dd4e:	4770      	bx	lr
    dd50:	20001a20 	.word	0x20001a20

0000dd54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    dd54:	4801      	ldr	r0, [pc, #4]	; (dd5c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    dd56:	6a80      	ldr	r0, [r0, #40]	; 0x28
    dd58:	4770      	bx	lr
    dd5a:	0000      	.short	0x0000
    dd5c:	20001a20 	.word	0x20001a20

0000dd60 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    dd60:	4801      	ldr	r0, [pc, #4]	; (dd68 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    dd62:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    dd66:	4770      	bx	lr
    dd68:	20001a20 	.word	0x20001a20

0000dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    dd6c:	4915      	ldr	r1, [pc, #84]	; (ddc4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    dd6e:	b510      	push	{r4, lr}
    dd70:	6b88      	ldr	r0, [r1, #56]	; 0x38
    dd72:	4a15      	ldr	r2, [pc, #84]	; (ddc8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    dd74:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    dd78:	6010      	str	r0, [r2, #0]
    dd7a:	2000      	movs	r0, #0
    dd7c:	6388      	str	r0, [r1, #56]	; 0x38
    dd7e:	7408      	strb	r0, [r1, #16]
    dd80:	62c8      	str	r0, [r1, #44]	; 0x2c
    dd82:	6288      	str	r0, [r1, #40]	; 0x28
    dd84:	4911      	ldr	r1, [pc, #68]	; (ddcc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    dd86:	6008      	str	r0, [r1, #0]
    dd88:	1d09      	adds	r1, r1, #4
    dd8a:	6008      	str	r0, [r1, #0]
    dd8c:	1d09      	adds	r1, r1, #4
    dd8e:	6008      	str	r0, [r1, #0]
    dd90:	1d09      	adds	r1, r1, #4
    dd92:	6008      	str	r0, [r1, #0]
    dd94:	490e      	ldr	r1, [pc, #56]	; (ddd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    dd96:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    dd9a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    dd9e:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    dda2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    dda6:	f7ff fd09 	bl	d7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ddaa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ddae:	2002      	movs	r0, #2
    ddb0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ddb4:	f3bf 8f4f 	dsb	sy
    ddb8:	f3bf 8f6f 	isb	sy
    ddbc:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    ddc0:	bd10      	pop	{r4, pc}
    ddc2:	0000      	.short	0x0000
    ddc4:	20001a20 	.word	0x20001a20
    ddc8:	4001f508 	.word	0x4001f508
    ddcc:	40008540 	.word	0x40008540
    ddd0:	40008000 	.word	0x40008000

0000ddd4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddd8:	2601      	movs	r6, #1
    ddda:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ddde:	2402      	movs	r4, #2
    dde0:	f04f 0800 	mov.w	r8, #0
    dde4:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    dde8:	f3bf 8f4f 	dsb	sy
    ddec:	f3bf 8f6f 	isb	sy
    ddf0:	4833      	ldr	r0, [pc, #204]	; (dec0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ddf2:	f8c0 8000 	str.w	r8, [r0]
    ddf6:	6006      	str	r6, [r0, #0]
    ddf8:	f001 f856 	bl	eea8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ddfc:	4f31      	ldr	r7, [pc, #196]	; (dec4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ddfe:	b118      	cbz	r0, de08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    de00:	6838      	ldr	r0, [r7, #0]
    de02:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    de06:	6038      	str	r0, [r7, #0]
    de08:	f001 f842 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    de0c:	b138      	cbz	r0, de1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    de0e:	6838      	ldr	r0, [r7, #0]
    de10:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    de14:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    de18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    de1c:	6038      	str	r0, [r7, #0]
    de1e:	f001 f853 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    de22:	b130      	cbz	r0, de32 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    de24:	4828      	ldr	r0, [pc, #160]	; (dec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    de26:	6801      	ldr	r1, [r0, #0]
    de28:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    de2c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    de30:	6001      	str	r1, [r0, #0]
    de32:	4927      	ldr	r1, [pc, #156]	; (ded0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    de34:	4825      	ldr	r0, [pc, #148]	; (decc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    de36:	6008      	str	r0, [r1, #0]
    de38:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    de3c:	6e00      	ldr	r0, [r0, #96]	; 0x60
    de3e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    de42:	d004      	beq.n	de4e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    de44:	4923      	ldr	r1, [pc, #140]	; (ded4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    de46:	680a      	ldr	r2, [r1, #0]
    de48:	f360 4217 	bfi	r2, r0, #16, #8
    de4c:	600a      	str	r2, [r1, #0]
    de4e:	4922      	ldr	r1, [pc, #136]	; (ded8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    de50:	f240 605b 	movw	r0, #1627	; 0x65b
    de54:	6008      	str	r0, [r1, #0]
    de56:	1f09      	subs	r1, r1, #4
    de58:	f240 1003 	movw	r0, #259	; 0x103
    de5c:	6008      	str	r0, [r1, #0]
    de5e:	1f08      	subs	r0, r1, #4
    de60:	6006      	str	r6, [r0, #0]
    de62:	491e      	ldr	r1, [pc, #120]	; (dedc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    de64:	2003      	movs	r0, #3
    de66:	6008      	str	r0, [r1, #0]
    de68:	491d      	ldr	r1, [pc, #116]	; (dee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    de6a:	f240 1001 	movw	r0, #257	; 0x101
    de6e:	6008      	str	r0, [r1, #0]
    de70:	491c      	ldr	r1, [pc, #112]	; (dee4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    de72:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    de76:	4a1d      	ldr	r2, [pc, #116]	; (deec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    de78:	481b      	ldr	r0, [pc, #108]	; (dee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    de7a:	6010      	str	r0, [r2, #0]
    de7c:	481d      	ldr	r0, [pc, #116]	; (def4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    de7e:	4a1c      	ldr	r2, [pc, #112]	; (def0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    de80:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    de84:	4a1c      	ldr	r2, [pc, #112]	; (def8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    de86:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    de8a:	481c      	ldr	r0, [pc, #112]	; (defc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    de8c:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    de90:	3014      	adds	r0, #20
    de92:	2296      	movs	r2, #150	; 0x96
    de94:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    de98:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    de9c:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    dea0:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    dea4:	2010      	movs	r0, #16
    dea6:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    deaa:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    deae:	4814      	ldr	r0, [pc, #80]	; (df00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    deb0:	6840      	ldr	r0, [r0, #4]
    deb2:	2800      	cmp	r0, #0
    deb4:	bf08      	it	eq
    deb6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    deba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    debe:	4700      	bx	r0
    dec0:	40001ffc 	.word	0x40001ffc
    dec4:	4000173c 	.word	0x4000173c
    dec8:	40001740 	.word	0x40001740
    decc:	8900002c 	.word	0x8900002c
    ded0:	40001778 	.word	0x40001778
    ded4:	4000158c 	.word	0x4000158c
    ded8:	40001538 	.word	0x40001538
    dedc:	40001510 	.word	0x40001510
    dee0:	40001650 	.word	0x40001650
    dee4:	40001000 	.word	0x40001000
    dee8:	040e0000 	.word	0x040e0000
    deec:	4001f508 	.word	0x4001f508
    def0:	4000110c 	.word	0x4000110c
    def4:	4001f090 	.word	0x4001f090
    def8:	40008040 	.word	0x40008040
    defc:	20001a0c 	.word	0x20001a0c
    df00:	2000038c 	.word	0x2000038c

0000df04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    df04:	4901      	ldr	r1, [pc, #4]	; (df0c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    df06:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    df0a:	4770      	bx	lr
    df0c:	20001a20 	.word	0x20001a20

0000df10 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    df10:	491e      	ldr	r1, [pc, #120]	; (df8c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    df12:	b510      	push	{r4, lr}
    df14:	6008      	str	r0, [r1, #0]
    df16:	491e      	ldr	r1, [pc, #120]	; (df90 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    df18:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    df1c:	f040 0001 	orr.w	r0, r0, #1
    df20:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    df24:	f010 0f01 	tst.w	r0, #1
    df28:	bf08      	it	eq
    df2a:	bd10      	popeq	{r4, pc}
    df2c:	f010 0f02 	tst.w	r0, #2
    df30:	d019      	beq.n	df66 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    df32:	4818      	ldr	r0, [pc, #96]	; (df94 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    df34:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    df38:	f041 0101 	orr.w	r1, r1, #1
    df3c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    df40:	4815      	ldr	r0, [pc, #84]	; (df98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    df42:	6801      	ldr	r1, [r0, #0]
    df44:	290b      	cmp	r1, #11
    df46:	bf1c      	itt	ne
    df48:	6801      	ldrne	r1, [r0, #0]
    df4a:	290a      	cmpne	r1, #10
    df4c:	d005      	beq.n	df5a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    df4e:	6801      	ldr	r1, [r0, #0]
    df50:	2903      	cmp	r1, #3
    df52:	bf1e      	ittt	ne
    df54:	6800      	ldrne	r0, [r0, #0]
    df56:	2802      	cmpne	r0, #2
    df58:	bd10      	popne	{r4, pc}
    df5a:	f240 414c 	movw	r1, #1100	; 0x44c
    df5e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    df62:	f7f6 f893 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df66:	f010 0f04 	tst.w	r0, #4
    df6a:	bf08      	it	eq
    df6c:	bd10      	popeq	{r4, pc}
    df6e:	480b      	ldr	r0, [pc, #44]	; (df9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    df70:	490b      	ldr	r1, [pc, #44]	; (dfa0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    df72:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    df76:	480b      	ldr	r0, [pc, #44]	; (dfa4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    df78:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    df7c:	2801      	cmp	r0, #1
    df7e:	bf18      	it	ne
    df80:	bd10      	popne	{r4, pc}
    df82:	f240 4153 	movw	r1, #1107	; 0x453
    df86:	203e      	movs	r0, #62	; 0x3e
    df88:	f7f6 f880 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df8c:	40001504 	.word	0x40001504
    df90:	20001a20 	.word	0x20001a20
    df94:	40001000 	.word	0x40001000
    df98:	40001550 	.word	0x40001550
    df9c:	40001008 	.word	0x40001008
    dfa0:	4001f098 	.word	0x4001f098
    dfa4:	40008000 	.word	0x40008000

0000dfa8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfac:	f8df 9298 	ldr.w	r9, [pc, #664]	; e248 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a0>
    dfb0:	4607      	mov	r7, r0
    dfb2:	b087      	sub	sp, #28
    dfb4:	48a3      	ldr	r0, [pc, #652]	; (e244 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29c>)
    dfb6:	460d      	mov	r5, r1
    dfb8:	4616      	mov	r6, r2
    dfba:	f8c9 0000 	str.w	r0, [r9]
    dfbe:	4ca3      	ldr	r4, [pc, #652]	; (e24c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a4>)
    dfc0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    dfc4:	42b0      	cmp	r0, r6
    dfc6:	bf1c      	itt	ne
    dfc8:	4610      	movne	r0, r2
    dfca:	f000 fe21 	blne	ec10 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    dfce:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    dfd2:	2925      	cmp	r1, #37	; 0x25
    dfd4:	bf08      	it	eq
    dfd6:	2002      	moveq	r0, #2
    dfd8:	d00f      	beq.n	dffa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dfda:	2926      	cmp	r1, #38	; 0x26
    dfdc:	bf08      	it	eq
    dfde:	201a      	moveq	r0, #26
    dfe0:	d00b      	beq.n	dffa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dfe2:	2927      	cmp	r1, #39	; 0x27
    dfe4:	bf08      	it	eq
    dfe6:	2050      	moveq	r0, #80	; 0x50
    dfe8:	d007      	beq.n	dffa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    dfea:	290a      	cmp	r1, #10
    dfec:	4608      	mov	r0, r1
    dfee:	bf94      	ite	ls
    dff0:	2204      	movls	r2, #4
    dff2:	2206      	movhi	r2, #6
    dff4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    dff8:	b2c0      	uxtb	r0, r0
    dffa:	4a95      	ldr	r2, [pc, #596]	; (e250 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a8>)
    dffc:	6010      	str	r0, [r2, #0]
    dffe:	4895      	ldr	r0, [pc, #596]	; (e254 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2ac>)
    e000:	6001      	str	r1, [r0, #0]
    e002:	f8df b254 	ldr.w	fp, [pc, #596]	; e258 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b0>
    e006:	f8df 8254 	ldr.w	r8, [pc, #596]	; e25c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    e00a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e00e:	b137      	cbz	r7, e01e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x76>
    e010:	2f01      	cmp	r7, #1
    e012:	d06d      	beq.n	e0f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x148>
    e014:	f240 6103 	movw	r1, #1539	; 0x603
    e018:	203e      	movs	r0, #62	; 0x3e
    e01a:	f7f6 f837 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e01e:	2e01      	cmp	r6, #1
    e020:	bf08      	it	eq
    e022:	2000      	moveq	r0, #0
    e024:	d00b      	beq.n	e03e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    e026:	2e02      	cmp	r6, #2
    e028:	bf08      	it	eq
    e02a:	2001      	moveq	r0, #1
    e02c:	d007      	beq.n	e03e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    e02e:	2e04      	cmp	r6, #4
    e030:	bf08      	it	eq
    e032:	2003      	moveq	r0, #3
    e034:	d003      	beq.n	e03e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    e036:	2e08      	cmp	r6, #8
    e038:	bf08      	it	eq
    e03a:	2002      	moveq	r0, #2
    e03c:	d16c      	bne.n	e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x170>
    e03e:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e042:	ab05      	add	r3, sp, #20
    e044:	f7f2 fc4a 	bl	8dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e048:	2800      	cmp	r0, #0
    e04a:	d170      	bne.n	e12e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x186>
    e04c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e050:	f000 fdd8 	bl	ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e054:	f000 ff38 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e058:	b178      	cbz	r0, e07a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    e05a:	4a81      	ldr	r2, [pc, #516]	; (e260 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b8>)
    e05c:	6811      	ldr	r1, [r2, #0]
    e05e:	0650      	lsls	r0, r2, #25
    e060:	2e02      	cmp	r6, #2
    e062:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    e066:	bf0c      	ite	eq
    e068:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    e06c:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    e070:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    e074:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e078:	6010      	str	r0, [r2, #0]
    e07a:	2e02      	cmp	r6, #2
    e07c:	bf0c      	ite	eq
    e07e:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e082:	f640 0034 	movwne	r0, #2100	; 0x834
    e086:	f649 51f8 	movw	r1, #40440	; 0x9df8
    e08a:	4401      	add	r1, r0
    e08c:	7a60      	ldrb	r0, [r4, #9]
    e08e:	2801      	cmp	r0, #1
    e090:	d004      	beq.n	e09c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>
    e092:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    e096:	fbb1 f1fa 	udiv	r1, r1, sl
    e09a:	1a6d      	subs	r5, r5, r1
    e09c:	2800      	cmp	r0, #0
    e09e:	bf04      	itt	eq
    e0a0:	4658      	moveq	r0, fp
    e0a2:	f8c8 b514 	streq.w	fp, [r8, #1300]	; 0x514
    e0a6:	2001      	movs	r0, #1
    e0a8:	72e0      	strb	r0, [r4, #11]
    e0aa:	486e      	ldr	r0, [pc, #440]	; (e264 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>)
    e0ac:	6005      	str	r5, [r0, #0]
    e0ae:	486e      	ldr	r0, [pc, #440]	; (e268 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c0>)
    e0b0:	f8c8 0510 	str.w	r0, [r8, #1296]	; 0x510
    e0b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e0b6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    e0ba:	63a0      	str	r0, [r4, #56]	; 0x38
    e0bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e0c0:	f8c9 0000 	str.w	r0, [r9]
    e0c4:	2010      	movs	r0, #16
    e0c6:	f8cb 0304 	str.w	r0, [fp, #772]	; 0x304
    e0ca:	03c0      	lsls	r0, r0, #15
    e0cc:	f8c9 0000 	str.w	r0, [r9]
    e0d0:	7a60      	ldrb	r0, [r4, #9]
    e0d2:	2800      	cmp	r0, #0
    e0d4:	bf04      	itt	eq
    e0d6:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e0da:	f040 0002 	orreq.w	r0, r0, #2
    e0de:	d049      	beq.n	e174 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    e0e0:	2801      	cmp	r0, #1
    e0e2:	bf04      	itt	eq
    e0e4:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e0e8:	f040 0004 	orreq.w	r0, r0, #4
    e0ec:	d042      	beq.n	e174 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    e0ee:	e043      	b.n	e178 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1d0>
    e0f0:	7aa0      	ldrb	r0, [r4, #10]
    e0f2:	2801      	cmp	r0, #1
    e0f4:	d124      	bne.n	e140 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x198>
    e0f6:	7b60      	ldrb	r0, [r4, #13]
    e0f8:	2801      	cmp	r0, #1
    e0fa:	bf08      	it	eq
    e0fc:	2000      	moveq	r0, #0
    e0fe:	d010      	beq.n	e122 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e100:	2802      	cmp	r0, #2
    e102:	bf08      	it	eq
    e104:	2001      	moveq	r0, #1
    e106:	d00c      	beq.n	e122 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e108:	2804      	cmp	r0, #4
    e10a:	bf08      	it	eq
    e10c:	2003      	moveq	r0, #3
    e10e:	d008      	beq.n	e122 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e110:	2808      	cmp	r0, #8
    e112:	bf08      	it	eq
    e114:	2002      	moveq	r0, #2
    e116:	d004      	beq.n	e122 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e118:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e11c:	2006      	movs	r0, #6
    e11e:	f7f5 ffb5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e122:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e126:	ab05      	add	r3, sp, #20
    e128:	f7f2 fbd8 	bl	8dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e12c:	b120      	cbz	r0, e138 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    e12e:	f240 31d5 	movw	r1, #981	; 0x3d5
    e132:	203e      	movs	r0, #62	; 0x3e
    e134:	f7f5 ffaa 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e138:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e13c:	f000 fd62 	bl	ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e140:	f000 fec2 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e144:	b938      	cbnz	r0, e156 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    e146:	f000 feaf 	bl	eea8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e14a:	b920      	cbnz	r0, e156 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    e14c:	4847      	ldr	r0, [pc, #284]	; (e26c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c4>)
    e14e:	6801      	ldr	r1, [r0, #0]
    e150:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    e154:	6001      	str	r1, [r0, #0]
    e156:	7a61      	ldrb	r1, [r4, #9]
    e158:	2901      	cmp	r1, #1
    e15a:	d004      	beq.n	e166 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1be>
    e15c:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    e160:	fbb0 f0fa 	udiv	r0, r0, sl
    e164:	1a2d      	subs	r5, r5, r0
    e166:	4842      	ldr	r0, [pc, #264]	; (e270 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c8>)
    e168:	2900      	cmp	r1, #0
    e16a:	bf08      	it	eq
    e16c:	f8c8 0514 	streq.w	r0, [r8, #1300]	; 0x514
    e170:	2002      	movs	r0, #2
    e172:	e799      	b.n	e0a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x100>
    e174:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    e178:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    e17c:	493d      	ldr	r1, [pc, #244]	; (e274 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2cc>)
    e17e:	f010 0f01 	tst.w	r0, #1
    e182:	d025      	beq.n	e1d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e184:	f010 0f02 	tst.w	r0, #2
    e188:	d018      	beq.n	e1bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
    e18a:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
    e18e:	f040 0001 	orr.w	r0, r0, #1
    e192:	f8cb 0200 	str.w	r0, [fp, #512]	; 0x200
    e196:	4838      	ldr	r0, [pc, #224]	; (e278 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d0>)
    e198:	6802      	ldr	r2, [r0, #0]
    e19a:	2a0b      	cmp	r2, #11
    e19c:	bf1c      	itt	ne
    e19e:	6802      	ldrne	r2, [r0, #0]
    e1a0:	2a0a      	cmpne	r2, #10
    e1a2:	d005      	beq.n	e1b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x208>
    e1a4:	6802      	ldr	r2, [r0, #0]
    e1a6:	2a03      	cmp	r2, #3
    e1a8:	bf1c      	itt	ne
    e1aa:	6800      	ldrne	r0, [r0, #0]
    e1ac:	2802      	cmpne	r0, #2
    e1ae:	d10f      	bne.n	e1d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e1b0:	f240 414c 	movw	r1, #1100	; 0x44c
    e1b4:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e1b8:	f7f5 ff68 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1bc:	f010 0f04 	tst.w	r0, #4
    e1c0:	d006      	beq.n	e1d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e1c2:	482e      	ldr	r0, [pc, #184]	; (e27c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d4>)
    e1c4:	f8c8 0514 	str.w	r0, [r8, #1300]	; 0x514
    e1c8:	f8d1 0148 	ldr.w	r0, [r1, #328]	; 0x148
    e1cc:	2801      	cmp	r0, #1
    e1ce:	d00a      	beq.n	e1e6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    e1d0:	2001      	movs	r0, #1
    e1d2:	64c8      	str	r0, [r1, #76]	; 0x4c
    e1d4:	482a      	ldr	r0, [pc, #168]	; (e280 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d8>)
    e1d6:	6800      	ldr	r0, [r0, #0]
    e1d8:	42a8      	cmp	r0, r5
    e1da:	d309      	bcc.n	e1f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>
    e1dc:	f240 6129 	movw	r1, #1577	; 0x629
    e1e0:	203e      	movs	r0, #62	; 0x3e
    e1e2:	f7f5 ff53 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1e6:	f240 4153 	movw	r1, #1107	; 0x453
    e1ea:	203e      	movs	r0, #62	; 0x3e
    e1ec:	f7f5 ff4e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1f0:	2f01      	cmp	r7, #1
    e1f2:	bf08      	it	eq
    e1f4:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    e1f8:	d008      	beq.n	e20c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    e1fa:	2e02      	cmp	r6, #2
    e1fc:	bf0c      	ite	eq
    e1fe:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e202:	f640 0034 	movwne	r0, #2100	; 0x834
    e206:	f24a 0150 	movw	r1, #41040	; 0xa050
    e20a:	4408      	add	r0, r1
    e20c:	491d      	ldr	r1, [pc, #116]	; (e284 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2dc>)
    e20e:	fbb0 f0fa 	udiv	r0, r0, sl
    e212:	f101 0228 	add.w	r2, r1, #40	; 0x28
    e216:	2f01      	cmp	r7, #1
    e218:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e21c:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e220:	6b89      	ldr	r1, [r1, #56]	; 0x38
    e222:	9104      	str	r1, [sp, #16]
    e224:	bf14      	ite	ne
    e226:	2101      	movne	r1, #1
    e228:	2100      	moveq	r1, #0
    e22a:	f88d 1001 	strb.w	r1, [sp, #1]
    e22e:	e9cd 5003 	strd	r5, r0, [sp, #12]
    e232:	4668      	mov	r0, sp
    e234:	f7f5 fe2e 	bl	3e94 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e238:	4628      	mov	r0, r5
    e23a:	f000 fc4f 	bl	eadc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x64>
    e23e:	b007      	add	sp, #28
    e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e244:	04040000 	.word	0x04040000
    e248:	4001f504 	.word	0x4001f504
    e24c:	20001a20 	.word	0x20001a20
    e250:	40001508 	.word	0x40001508
    e254:	40001554 	.word	0x40001554
    e258:	40001000 	.word	0x40001000
    e25c:	4001f098 	.word	0x4001f098
    e260:	40001588 	.word	0x40001588
    e264:	40008548 	.word	0x40008548
    e268:	40008148 	.word	0x40008148
    e26c:	40001568 	.word	0x40001568
    e270:	40001004 	.word	0x40001004
    e274:	40008000 	.word	0x40008000
    e278:	40001550 	.word	0x40001550
    e27c:	40001008 	.word	0x40001008
    e280:	4000854c 	.word	0x4000854c
    e284:	0000ebb4 	.word	0x0000ebb4

0000e288 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    e288:	b508      	push	{r3, lr}
    e28a:	20ff      	movs	r0, #255	; 0xff
    e28c:	f88d 0000 	strb.w	r0, [sp]
    e290:	480e      	ldr	r0, [pc, #56]	; (e2cc <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    e292:	2100      	movs	r1, #0
    e294:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    e298:	2101      	movs	r1, #1
    e29a:	6101      	str	r1, [r0, #16]
    e29c:	e005      	b.n	e2aa <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    e29e:	bf00      	nop
    e2a0:	f89d 1000 	ldrb.w	r1, [sp]
    e2a4:	1e49      	subs	r1, r1, #1
    e2a6:	f88d 1000 	strb.w	r1, [sp]
    e2aa:	f89d 1000 	ldrb.w	r1, [sp]
    e2ae:	b119      	cbz	r1, e2b8 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    e2b0:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    e2b4:	2900      	cmp	r1, #0
    e2b6:	d0f3      	beq.n	e2a0 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    e2b8:	f89d 0000 	ldrb.w	r0, [sp]
    e2bc:	2800      	cmp	r0, #0
    e2be:	bf18      	it	ne
    e2c0:	bd08      	popne	{r3, pc}
    e2c2:	f240 6183 	movw	r1, #1667	; 0x683
    e2c6:	203e      	movs	r0, #62	; 0x3e
    e2c8:	f7f5 fee0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2cc:	40001000 	.word	0x40001000

0000e2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    e2d0:	b530      	push	{r4, r5, lr}
    e2d2:	b087      	sub	sp, #28
    e2d4:	460d      	mov	r5, r1
    e2d6:	b16a      	cbz	r2, e2f4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    e2d8:	4c4d      	ldr	r4, [pc, #308]	; (e410 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    e2da:	f012 0f01 	tst.w	r2, #1
    e2de:	7260      	strb	r0, [r4, #9]
    e2e0:	7363      	strb	r3, [r4, #13]
    e2e2:	bf18      	it	ne
    e2e4:	2a01      	cmpne	r2, #1
    e2e6:	d00a      	beq.n	e2fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    e2e8:	f240 71fa 	movw	r1, #2042	; 0x7fa
    e2ec:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e2f0:	f7f5 fecc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2f4:	f240 71f3 	movw	r1, #2035	; 0x7f3
    e2f8:	203e      	movs	r0, #62	; 0x3e
    e2fa:	f7f5 fec7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2fe:	2d00      	cmp	r5, #0
    e300:	bf0c      	ite	eq
    e302:	2001      	moveq	r0, #1
    e304:	2002      	movne	r0, #2
    e306:	72a0      	strb	r0, [r4, #10]
    e308:	7322      	strb	r2, [r4, #12]
    e30a:	2801      	cmp	r0, #1
    e30c:	d006      	beq.n	e31c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    e30e:	2802      	cmp	r0, #2
    e310:	d02d      	beq.n	e36e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e312:	f44f 6101 	mov.w	r1, #2064	; 0x810
    e316:	203e      	movs	r0, #62	; 0x3e
    e318:	f7f5 feb8 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e31c:	7ae0      	ldrb	r0, [r4, #11]
    e31e:	2802      	cmp	r0, #2
    e320:	d125      	bne.n	e36e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e322:	2b01      	cmp	r3, #1
    e324:	bf08      	it	eq
    e326:	2000      	moveq	r0, #0
    e328:	d010      	beq.n	e34c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e32a:	2b02      	cmp	r3, #2
    e32c:	bf08      	it	eq
    e32e:	2001      	moveq	r0, #1
    e330:	d00c      	beq.n	e34c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e332:	2b04      	cmp	r3, #4
    e334:	bf08      	it	eq
    e336:	2003      	moveq	r0, #3
    e338:	d008      	beq.n	e34c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e33a:	2b08      	cmp	r3, #8
    e33c:	bf08      	it	eq
    e33e:	2002      	moveq	r0, #2
    e340:	d004      	beq.n	e34c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e342:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e346:	2006      	movs	r0, #6
    e348:	f7f5 fea0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e34c:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e350:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e354:	ab05      	add	r3, sp, #20
    e356:	f7f2 fac1 	bl	8dc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e35a:	b120      	cbz	r0, e366 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    e35c:	f240 31d5 	movw	r1, #981	; 0x3d5
    e360:	203e      	movs	r0, #62	; 0x3e
    e362:	f7f5 fe93 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e366:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e36a:	f000 fc4b 	bl	ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e36e:	4829      	ldr	r0, [pc, #164]	; (e414 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    e370:	6801      	ldr	r1, [r0, #0]
    e372:	f001 010f 	and.w	r1, r1, #15
    e376:	2903      	cmp	r1, #3
    e378:	bf08      	it	eq
    e37a:	2001      	moveq	r0, #1
    e37c:	d00b      	beq.n	e396 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    e37e:	6800      	ldr	r0, [r0, #0]
    e380:	f000 000f 	and.w	r0, r0, #15
    e384:	2804      	cmp	r0, #4
    e386:	bf08      	it	eq
    e388:	2002      	moveq	r0, #2
    e38a:	d004      	beq.n	e396 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    e38c:	f240 11d7 	movw	r1, #471	; 0x1d7
    e390:	203e      	movs	r0, #62	; 0x3e
    e392:	f7f5 fe7b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e396:	7ae2      	ldrb	r2, [r4, #11]
    e398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e39c:	2a02      	cmp	r2, #2
    e39e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    e3a2:	d01f      	beq.n	e3e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x114>
    e3a4:	2802      	cmp	r0, #2
    e3a6:	bf0c      	ite	eq
    e3a8:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e3ac:	f240 50dc 	movwne	r0, #1500	; 0x5dc
    e3b0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e3b4:	fbb0 f0f1 	udiv	r0, r0, r1
    e3b8:	4410      	add	r0, r2
    e3ba:	4917      	ldr	r1, [pc, #92]	; (e418 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x148>)
    e3bc:	2d01      	cmp	r5, #1
    e3be:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    e3c2:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e3c6:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e3ca:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    e3cc:	9104      	str	r1, [sp, #16]
    e3ce:	bf14      	ite	ne
    e3d0:	2101      	movne	r1, #1
    e3d2:	2100      	moveq	r1, #0
    e3d4:	f88d 1001 	strb.w	r1, [sp, #1]
    e3d8:	9001      	str	r0, [sp, #4]
    e3da:	4668      	mov	r0, sp
    e3dc:	f7f5 fd5a 	bl	3e94 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e3e0:	b007      	add	sp, #28
    e3e2:	bd30      	pop	{r4, r5, pc}
    e3e4:	2801      	cmp	r0, #1
    e3e6:	bf08      	it	eq
    e3e8:	f641 6014 	movweq	r0, #7700	; 0x1e14
    e3ec:	d009      	beq.n	e402 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    e3ee:	2802      	cmp	r0, #2
    e3f0:	bf08      	it	eq
    e3f2:	f241 1030 	movweq	r0, #4400	; 0x1130
    e3f6:	d004      	beq.n	e402 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    e3f8:	f640 2193 	movw	r1, #2707	; 0xa93
    e3fc:	203e      	movs	r0, #62	; 0x3e
    e3fe:	f7f5 fe45 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e402:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e406:	fbb0 f0f1 	udiv	r0, r0, r1
    e40a:	1a10      	subs	r0, r2, r0
    e40c:	e7d5      	b.n	e3ba <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xea>
    e40e:	0000      	.short	0x0000
    e410:	20001a20 	.word	0x20001a20
    e414:	40001510 	.word	0x40001510
    e418:	0000ebb4 	.word	0x0000ebb4

0000e41c <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    e41c:	4901      	ldr	r1, [pc, #4]	; (e424 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    e41e:	7248      	strb	r0, [r1, #9]
    e420:	4770      	bx	lr
    e422:	0000      	.short	0x0000
    e424:	20001a20 	.word	0x20001a20

0000e428 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    e428:	4804      	ldr	r0, [pc, #16]	; (e43c <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    e42a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e42e:	f021 0110 	bic.w	r1, r1, #16
    e432:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e436:	2101      	movs	r1, #1
    e438:	6181      	str	r1, [r0, #24]
    e43a:	4770      	bx	lr
    e43c:	40001000 	.word	0x40001000

0000e440 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    e440:	4805      	ldr	r0, [pc, #20]	; (e458 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x18>)
    e442:	2100      	movs	r1, #0
    e444:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    e448:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e44c:	f041 0110 	orr.w	r1, r1, #16
    e450:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e454:	4770      	bx	lr
    e456:	0000      	.short	0x0000
    e458:	40001000 	.word	0x40001000

0000e45c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    e45c:	490b      	ldr	r1, [pc, #44]	; (e48c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    e45e:	b081      	sub	sp, #4
    e460:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    e464:	2a01      	cmp	r2, #1
    e466:	bf1e      	ittt	ne
    e468:	2000      	movne	r0, #0
    e46a:	b001      	addne	sp, #4
    e46c:	4770      	bxne	lr
    e46e:	4a08      	ldr	r2, [pc, #32]	; (e490 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    e470:	6812      	ldr	r2, [r2, #0]
    e472:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e476:	4252      	negs	r2, r2
    e478:	7002      	strb	r2, [r0, #0]
    e47a:	2000      	movs	r0, #0
    e47c:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    e480:	4804      	ldr	r0, [pc, #16]	; (e494 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x38>)
    e482:	6800      	ldr	r0, [r0, #0]
    e484:	9000      	str	r0, [sp, #0]
    e486:	2001      	movs	r0, #1
    e488:	b001      	add	sp, #4
    e48a:	4770      	bx	lr
    e48c:	40001000 	.word	0x40001000
    e490:	40001548 	.word	0x40001548
    e494:	4000111c 	.word	0x4000111c

0000e498 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    e498:	4a04      	ldr	r2, [pc, #16]	; (e4ac <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    e49a:	6803      	ldr	r3, [r0, #0]
    e49c:	f8c2 3016 	str.w	r3, [r2, #22]
    e4a0:	8880      	ldrh	r0, [r0, #4]
    e4a2:	8350      	strh	r0, [r2, #26]
    e4a4:	f102 0014 	add.w	r0, r2, #20
    e4a8:	7201      	strb	r1, [r0, #8]
    e4aa:	4770      	bx	lr
    e4ac:	20001a0c 	.word	0x20001a0c

0000e4b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    e4b0:	4a03      	ldr	r2, [pc, #12]	; (e4c0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    e4b2:	78c1      	ldrb	r1, [r0, #3]
    e4b4:	6011      	str	r1, [r2, #0]
    e4b6:	6800      	ldr	r0, [r0, #0]
    e4b8:	4902      	ldr	r1, [pc, #8]	; (e4c4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    e4ba:	0200      	lsls	r0, r0, #8
    e4bc:	6008      	str	r0, [r1, #0]
    e4be:	4770      	bx	lr
    e4c0:	40001524 	.word	0x40001524
    e4c4:	4000151c 	.word	0x4000151c

0000e4c8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    e4c8:	6800      	ldr	r0, [r0, #0]
    e4ca:	4902      	ldr	r1, [pc, #8]	; (e4d4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    e4cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e4d0:	6008      	str	r0, [r1, #0]
    e4d2:	4770      	bx	lr
    e4d4:	4000153c 	.word	0x4000153c

0000e4d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    e4d8:	b510      	push	{r4, lr}
    e4da:	2200      	movs	r2, #0
    e4dc:	2901      	cmp	r1, #1
    e4de:	d009      	beq.n	e4f4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    e4e0:	2902      	cmp	r1, #2
    e4e2:	bf08      	it	eq
    e4e4:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e4e8:	d004      	beq.n	e4f4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    e4ea:	f44f 7109 	mov.w	r1, #548	; 0x224
    e4ee:	203e      	movs	r0, #62	; 0x3e
    e4f0:	f7f5 fdcc 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f4:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e4f8:	4a0b      	ldr	r2, [pc, #44]	; (e528 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x50>)
    e4fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e4fe:	6011      	str	r1, [r2, #0]
    e500:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e504:	1d11      	adds	r1, r2, #4
    e506:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e50a:	6008      	str	r0, [r1, #0]
    e50c:	4807      	ldr	r0, [pc, #28]	; (e52c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x54>)
    e50e:	6801      	ldr	r1, [r0, #0]
    e510:	2903      	cmp	r1, #3
    e512:	bf1e      	ittt	ne
    e514:	6800      	ldrne	r0, [r0, #0]
    e516:	280b      	cmpne	r0, #11
    e518:	bd10      	popne	{r4, pc}
    e51a:	f240 213e 	movw	r1, #574	; 0x23e
    e51e:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e522:	f7f5 fdb3 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e526:	0000      	.short	0x0000
    e528:	40001514 	.word	0x40001514
    e52c:	40001550 	.word	0x40001550

0000e530 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    e530:	b510      	push	{r4, lr}
    e532:	2200      	movs	r2, #0
    e534:	2901      	cmp	r1, #1
    e536:	d009      	beq.n	e54c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e538:	2902      	cmp	r1, #2
    e53a:	bf08      	it	eq
    e53c:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e540:	d004      	beq.n	e54c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e542:	f44f 7109 	mov.w	r1, #548	; 0x224
    e546:	203e      	movs	r0, #62	; 0x3e
    e548:	f7f5 fda0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e54c:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e550:	4a05      	ldr	r2, [pc, #20]	; (e568 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x38>)
    e552:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e556:	6011      	str	r1, [r2, #0]
    e558:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e55c:	1d11      	adds	r1, r2, #4
    e55e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e562:	6008      	str	r0, [r1, #0]
    e564:	bd10      	pop	{r4, pc}
    e566:	0000      	.short	0x0000
    e568:	40001514 	.word	0x40001514

0000e56c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    e56c:	4901      	ldr	r1, [pc, #4]	; (e574 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    e56e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    e572:	4770      	bx	lr
    e574:	20001a20 	.word	0x20001a20

0000e578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e57c:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; e970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    e580:	b083      	sub	sp, #12
    e582:	2701      	movs	r7, #1
    e584:	f8c9 704c 	str.w	r7, [r9, #76]	; 0x4c
    e588:	f8d9 b14c 	ldr.w	fp, [r9, #332]	; 0x14c
    e58c:	48f9      	ldr	r0, [pc, #996]	; (e974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>)
    e58e:	f8d0 8000 	ldr.w	r8, [r0]
    e592:	4af9      	ldr	r2, [pc, #996]	; (e978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e594:	7811      	ldrb	r1, [r2, #0]
    e596:	2904      	cmp	r1, #4
    e598:	d304      	bcc.n	e5a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    e59a:	f640 1176 	movw	r1, #2422	; 0x976
    e59e:	203e      	movs	r0, #62	; 0x3e
    e5a0:	f7f5 fd74 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a4:	4df5      	ldr	r5, [pc, #980]	; (e97c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    e5a6:	4bf6      	ldr	r3, [pc, #984]	; (e980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e5a8:	f04f 0c00 	mov.w	ip, #0
    e5ac:	7ae8      	ldrb	r0, [r5, #11]
    e5ae:	2801      	cmp	r0, #1
    e5b0:	d002      	beq.n	e5b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40>
    e5b2:	2802      	cmp	r0, #2
    e5b4:	d003      	beq.n	e5be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    e5b6:	e015      	b.n	e5e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e5b8:	7e2c      	ldrb	r4, [r5, #24]
    e5ba:	b914      	cbnz	r4, e5c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a>
    e5bc:	e012      	b.n	e5e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e5be:	7e6c      	ldrb	r4, [r5, #25]
    e5c0:	b184      	cbz	r4, e5e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e5c2:	7fac      	ldrb	r4, [r5, #30]
    e5c4:	7fee      	ldrb	r6, [r5, #31]
    e5c6:	fa07 f404 	lsl.w	r4, r7, r4
    e5ca:	fa07 f606 	lsl.w	r6, r7, r6
    e5ce:	4334      	orrs	r4, r6
    e5d0:	601c      	str	r4, [r3, #0]
    e5d2:	f895 4020 	ldrb.w	r4, [r5, #32]
    e5d6:	00a4      	lsls	r4, r4, #2
    e5d8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e5dc:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    e5e0:	f8c4 c510 	str.w	ip, [r4, #1296]	; 0x510
    e5e4:	4be6      	ldr	r3, [pc, #920]	; (e980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e5e6:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e5e8:	601c      	str	r4, [r3, #0]
    e5ea:	4ce6      	ldr	r4, [pc, #920]	; (e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e5ec:	2300      	movs	r3, #0
    e5ee:	63ab      	str	r3, [r5, #56]	; 0x38
    e5f0:	f8d4 c200 	ldr.w	ip, [r4, #512]	; 0x200
    e5f4:	f02c 0c0d 	bic.w	ip, ip, #13
    e5f8:	f8c4 c200 	str.w	ip, [r4, #512]	; 0x200
    e5fc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    e600:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    e604:	2b00      	cmp	r3, #0
    e606:	bf08      	it	eq
    e608:	f8c9 7040 	streq.w	r7, [r9, #64]	; 0x40
    e60c:	f04f 0a00 	mov.w	sl, #0
    e610:	7c2b      	ldrb	r3, [r5, #16]
    e612:	b12b      	cbz	r3, e620 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa8>
    e614:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
    e618:	2b01      	cmp	r3, #1
    e61a:	bf08      	it	eq
    e61c:	2601      	moveq	r6, #1
    e61e:	d000      	beq.n	e622 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    e620:	2600      	movs	r6, #0
    e622:	2801      	cmp	r0, #1
    e624:	d00a      	beq.n	e63c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    e626:	2802      	cmp	r0, #2
    e628:	d011      	beq.n	e64e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    e62a:	bf00      	nop
    e62c:	f01a 0f0b 	tst.w	sl, #11
    e630:	d01d      	beq.n	e66e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    e632:	bf00      	nop
    e634:	f011 0f01 	tst.w	r1, #1
    e638:	d022      	beq.n	e680 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    e63a:	e043      	b.n	e6c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    e63c:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e640:	2801      	cmp	r0, #1
    e642:	bf14      	ite	ne
    e644:	f04f 0a00 	movne.w	sl, #0
    e648:	f04f 0a08 	moveq.w	sl, #8
    e64c:	e7ee      	b.n	e62c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e64e:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e652:	2801      	cmp	r0, #1
    e654:	bf14      	ite	ne
    e656:	2000      	movne	r0, #0
    e658:	2002      	moveq	r0, #2
    e65a:	4bcb      	ldr	r3, [pc, #812]	; (e988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    e65c:	681b      	ldr	r3, [r3, #0]
    e65e:	2b01      	cmp	r3, #1
    e660:	bf14      	ite	ne
    e662:	2304      	movne	r3, #4
    e664:	2300      	moveq	r3, #0
    e666:	4318      	orrs	r0, r3
    e668:	ea40 0a06 	orr.w	sl, r0, r6
    e66c:	e7de      	b.n	e62c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e66e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    e672:	2801      	cmp	r0, #1
    e674:	bf14      	ite	ne
    e676:	2000      	movne	r0, #0
    e678:	2010      	moveq	r0, #16
    e67a:	ea40 0a0a 	orr.w	sl, r0, sl
    e67e:	e7d9      	b.n	e634 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbc>
    e680:	48c2      	ldr	r0, [pc, #776]	; (e98c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    e682:	6801      	ldr	r1, [r0, #0]
    e684:	f011 0fff 	tst.w	r1, #255	; 0xff
    e688:	d003      	beq.n	e692 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11a>
    e68a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    e68e:	2901      	cmp	r1, #1
    e690:	d000      	beq.n	e694 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11c>
    e692:	2100      	movs	r1, #0
    e694:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    e698:	6800      	ldr	r0, [r0, #0]
    e69a:	f010 0fff 	tst.w	r0, #255	; 0xff
    e69e:	d003      	beq.n	e6a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    e6a0:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    e6a4:	2801      	cmp	r0, #1
    e6a6:	d000      	beq.n	e6aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    e6a8:	2000      	movs	r0, #0
    e6aa:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    e6ae:	48b8      	ldr	r0, [pc, #736]	; (e990 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e6b0:	6800      	ldr	r0, [r0, #0]
    e6b2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    e6b6:	f7fe fed5 	bl	d464 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    e6ba:	2801      	cmp	r0, #1
    e6bc:	bf18      	it	ne
    e6be:	2000      	movne	r0, #0
    e6c0:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    e6c4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e6c8:	1e71      	subs	r1, r6, #1
    e6ca:	4308      	orrs	r0, r1
    e6cc:	bf18      	it	ne
    e6ce:	2001      	movne	r0, #1
    e6d0:	f88d 0000 	strb.w	r0, [sp]
    e6d4:	48ab      	ldr	r0, [pc, #684]	; (e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e6d6:	2600      	movs	r6, #0
    e6d8:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    e6dc:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
    e6e0:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e6e4:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
    e6e8:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
    e6ec:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
    e6f0:	48a8      	ldr	r0, [pc, #672]	; (e994 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e6f2:	6800      	ldr	r0, [r0, #0]
    e6f4:	9001      	str	r0, [sp, #4]
    e6f6:	4668      	mov	r0, sp
    e6f8:	f7f5 fbbe 	bl	3e78 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    e6fc:	2800      	cmp	r0, #0
    e6fe:	bf18      	it	ne
    e700:	2010      	movne	r0, #16
    e702:	ea40 040a 	orr.w	r4, r0, sl
    e706:	f8c9 6144 	str.w	r6, [r9, #324]	; 0x144
    e70a:	f014 0f10 	tst.w	r4, #16
    e70e:	d006      	beq.n	e71e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a6>
    e710:	f014 0f08 	tst.w	r4, #8
    e714:	bf02      	ittt	eq
    e716:	7ae8      	ldrbeq	r0, [r5, #11]
    e718:	2801      	cmpeq	r0, #1
    e71a:	f044 0420 	orreq.w	r4, r4, #32
    e71e:	489e      	ldr	r0, [pc, #632]	; (e998 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e720:	6800      	ldr	r0, [r0, #0]
    e722:	9001      	str	r0, [sp, #4]
    e724:	489d      	ldr	r0, [pc, #628]	; (e99c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e726:	6800      	ldr	r0, [r0, #0]
    e728:	499d      	ldr	r1, [pc, #628]	; (e9a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    e72a:	62e8      	str	r0, [r5, #44]	; 0x2c
    e72c:	680a      	ldr	r2, [r1, #0]
    e72e:	f002 020f 	and.w	r2, r2, #15
    e732:	2a03      	cmp	r2, #3
    e734:	bf08      	it	eq
    e736:	2101      	moveq	r1, #1
    e738:	d00b      	beq.n	e752 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e73a:	6809      	ldr	r1, [r1, #0]
    e73c:	f001 010f 	and.w	r1, r1, #15
    e740:	2904      	cmp	r1, #4
    e742:	bf08      	it	eq
    e744:	2102      	moveq	r1, #2
    e746:	d004      	beq.n	e752 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e748:	f240 11d7 	movw	r1, #471	; 0x1d7
    e74c:	203e      	movs	r0, #62	; 0x3e
    e74e:	f7f5 fc9d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e752:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    e756:	7ae9      	ldrb	r1, [r5, #11]
    e758:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    e75c:	62ae      	str	r6, [r5, #40]	; 0x28
    e75e:	2902      	cmp	r1, #2
    e760:	d10c      	bne.n	e77c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e762:	7869      	ldrb	r1, [r5, #1]
    e764:	b151      	cbz	r1, e77c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e766:	4a8f      	ldr	r2, [pc, #572]	; (e9a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e768:	6812      	ldr	r2, [r2, #0]
    e76a:	7812      	ldrb	r2, [r2, #0]
    e76c:	4011      	ands	r1, r2
    e76e:	782a      	ldrb	r2, [r5, #0]
    e770:	ea32 0101 	bics.w	r1, r2, r1
    e774:	bf08      	it	eq
    e776:	f885 7024 	strbeq.w	r7, [r5, #36]	; 0x24
    e77a:	d001      	beq.n	e780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    e77c:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
    e780:	f8df a224 	ldr.w	sl, [pc, #548]	; e9a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>
    e784:	f014 0f02 	tst.w	r4, #2
    e788:	bf1c      	itt	ne
    e78a:	f8da 1000 	ldrne.w	r1, [sl]
    e78e:	62a9      	strne	r1, [r5, #40]	; 0x28
    e790:	f014 0f08 	tst.w	r4, #8
    e794:	bf1c      	itt	ne
    e796:	f8da 1000 	ldrne.w	r1, [sl]
    e79a:	62a9      	strne	r1, [r5, #40]	; 0x28
    e79c:	f8df 920c 	ldr.w	r9, [pc, #524]	; e9ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>
    e7a0:	f8d9 1010 	ldr.w	r1, [r9, #16]
    e7a4:	4788      	blx	r1
    e7a6:	4874      	ldr	r0, [pc, #464]	; (e978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e7a8:	7800      	ldrb	r0, [r0, #0]
    e7aa:	f010 0f01 	tst.w	r0, #1
    e7ae:	d11e      	bne.n	e7ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e7b0:	487c      	ldr	r0, [pc, #496]	; (e9a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e7b2:	6801      	ldr	r1, [r0, #0]
    e7b4:	7809      	ldrb	r1, [r1, #0]
    e7b6:	f001 010f 	and.w	r1, r1, #15
    e7ba:	2907      	cmp	r1, #7
    e7bc:	bf28      	it	cs
    e7be:	f885 6025 	strbcs.w	r6, [r5, #37]	; 0x25
    e7c2:	d214      	bcs.n	e7ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e7c4:	4877      	ldr	r0, [pc, #476]	; (e9a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e7c6:	6800      	ldr	r0, [r0, #0]
    e7c8:	2206      	movs	r2, #6
    e7ca:	f100 0109 	add.w	r1, r0, #9
    e7ce:	1ca8      	adds	r0, r5, #2
    e7d0:	f000 fb9e 	bl	ef10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e7d4:	b940      	cbnz	r0, e7e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x270>
    e7d6:	4873      	ldr	r0, [pc, #460]	; (e9a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e7d8:	7a29      	ldrb	r1, [r5, #8]
    e7da:	6800      	ldr	r0, [r0, #0]
    e7dc:	7800      	ldrb	r0, [r0, #0]
    e7de:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
    e7e2:	bf08      	it	eq
    e7e4:	2001      	moveq	r0, #1
    e7e6:	d000      	beq.n	e7ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x272>
    e7e8:	2000      	movs	r0, #0
    e7ea:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    e7ee:	2000      	movs	r0, #0
    e7f0:	f8cd 8008 	str.w	r8, [sp, #8]
    e7f4:	9000      	str	r0, [sp, #0]
    e7f6:	7aa9      	ldrb	r1, [r5, #10]
    e7f8:	b149      	cbz	r1, e80e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x296>
    e7fa:	7b28      	ldrb	r0, [r5, #12]
    e7fc:	f010 0f02 	tst.w	r0, #2
    e800:	bf1c      	itt	ne
    e802:	f014 0f02 	tstne.w	r4, #2
    e806:	f014 0f04 	tstne.w	r4, #4
    e80a:	d008      	beq.n	e81e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a6>
    e80c:	e021      	b.n	e852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e80e:	495c      	ldr	r1, [pc, #368]	; (e980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e810:	4867      	ldr	r0, [pc, #412]	; (e9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    e812:	6008      	str	r0, [r1, #0]
    e814:	726e      	strb	r6, [r5, #9]
    e816:	72ae      	strb	r6, [r5, #10]
    e818:	72ee      	strb	r6, [r5, #11]
    e81a:	732f      	strb	r7, [r5, #12]
    e81c:	e068      	b.n	e8f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e81e:	f010 0f10 	tst.w	r0, #16
    e822:	bf1c      	itt	ne
    e824:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    e828:	2a00      	cmpne	r2, #0
    e82a:	d002      	beq.n	e832 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ba>
    e82c:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    e830:	b17a      	cbz	r2, e852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e832:	f010 0f08 	tst.w	r0, #8
    e836:	bf1c      	itt	ne
    e838:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    e83c:	2a00      	cmpne	r2, #0
    e83e:	d108      	bne.n	e852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e840:	f010 0f04 	tst.w	r0, #4
    e844:	d002      	beq.n	e84c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    e846:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    e84a:	b110      	cbz	r0, e852 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e84c:	f014 0f11 	tst.w	r4, #17
    e850:	d002      	beq.n	e858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>
    e852:	f7fe ffb3 	bl	d7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e856:	e04b      	b.n	e8f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e858:	2901      	cmp	r1, #1
    e85a:	bf14      	ite	ne
    e85c:	f04f 0801 	movne.w	r8, #1
    e860:	f04f 0800 	moveq.w	r8, #0
    e864:	7a68      	ldrb	r0, [r5, #9]
    e866:	2801      	cmp	r0, #1
    e868:	bf18      	it	ne
    e86a:	2000      	movne	r0, #0
    e86c:	9001      	str	r0, [sp, #4]
    e86e:	726e      	strb	r6, [r5, #9]
    e870:	72ae      	strb	r6, [r5, #10]
    e872:	72ee      	strb	r6, [r5, #11]
    e874:	732f      	strb	r7, [r5, #12]
    e876:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    e87a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    e87e:	2100      	movs	r1, #0
    e880:	b1d2      	cbz	r2, e8b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x340>
    e882:	f1b8 0f00 	cmp.w	r8, #0
    e886:	d01c      	beq.n	e8c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34a>
    e888:	f1b8 0f00 	cmp.w	r8, #0
    e88c:	d007      	beq.n	e89e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e88e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e892:	2a01      	cmp	r2, #1
    e894:	d023      	beq.n	e8de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x366>
    e896:	f003 fd98 	bl	123ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    e89a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e89c:	4401      	add	r1, r0
    e89e:	9801      	ldr	r0, [sp, #4]
    e8a0:	b310      	cbz	r0, e8e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e8a2:	9802      	ldr	r0, [sp, #8]
    e8a4:	303a      	adds	r0, #58	; 0x3a
    e8a6:	4288      	cmp	r0, r1
    e8a8:	bf98      	it	ls
    e8aa:	726f      	strbls	r7, [r5, #9]
    e8ac:	d91c      	bls.n	e8e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e8ae:	4835      	ldr	r0, [pc, #212]	; (e984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e8b0:	6107      	str	r7, [r0, #16]
    e8b2:	2001      	movs	r0, #1
    e8b4:	9000      	str	r0, [sp, #0]
    e8b6:	e01b      	b.n	e8f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e8b8:	f240 6146 	movw	r1, #1606	; 0x646
    e8bc:	203e      	movs	r0, #62	; 0x3e
    e8be:	f7f5 fbe5 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8c2:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e8c6:	2a01      	cmp	r2, #1
    e8c8:	d004      	beq.n	e8d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    e8ca:	f003 fd8c 	bl	123e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    e8ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e8d0:	4401      	add	r1, r0
    e8d2:	e7e4      	b.n	e89e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e8d4:	f003 fda1 	bl	1241a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    e8d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e8da:	4401      	add	r1, r0
    e8dc:	e7df      	b.n	e89e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e8de:	f003 fd8d 	bl	123fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    e8e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e8e4:	4401      	add	r1, r0
    e8e6:	e7da      	b.n	e89e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e8e8:	7b6a      	ldrb	r2, [r5, #13]
    e8ea:	4640      	mov	r0, r8
    e8ec:	f7ff fb5c 	bl	dfa8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    e8f0:	f014 0f01 	tst.w	r4, #1
    e8f4:	d003      	beq.n	e8fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x386>
    e8f6:	f8d9 0000 	ldr.w	r0, [r9]
    e8fa:	4780      	blx	r0
    e8fc:	e06f      	b.n	e9de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e8fe:	f014 0f02 	tst.w	r4, #2
    e902:	d05b      	beq.n	e9bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>
    e904:	7e68      	ldrb	r0, [r5, #25]
    e906:	b110      	cbz	r0, e90e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x396>
    e908:	f1bb 0f00 	cmp.w	fp, #0
    e90c:	d003      	beq.n	e916 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39e>
    e90e:	f014 0f04 	tst.w	r4, #4
    e912:	d126      	bne.n	e962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e914:	e004      	b.n	e920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    e916:	f44f 611d 	mov.w	r1, #2512	; 0x9d0
    e91a:	203e      	movs	r0, #62	; 0x3e
    e91c:	f7f5 fbb6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e920:	f000 fad2 	bl	eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e924:	b9e8      	cbnz	r0, e962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e926:	f000 fabf 	bl	eea8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e92a:	b9d0      	cbnz	r0, e962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e92c:	4821      	ldr	r0, [pc, #132]	; (e9b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    e92e:	6800      	ldr	r0, [r0, #0]
    e930:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    e934:	f3c0 6200 	ubfx	r2, r0, #24, #1
    e938:	f000 030f 	and.w	r3, r0, #15
    e93c:	f3c0 1103 	ubfx	r1, r0, #4, #4
    e940:	f3c0 2003 	ubfx	r0, r0, #8, #4
    e944:	b16a      	cbz	r2, e962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e946:	2b00      	cmp	r3, #0
    e948:	bf1c      	itt	ne
    e94a:	2900      	cmpne	r1, #0
    e94c:	2800      	cmpne	r0, #0
    e94e:	d108      	bne.n	e962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e950:	4819      	ldr	r0, [pc, #100]	; (e9b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    e952:	6800      	ldr	r0, [r0, #0]
    e954:	2800      	cmp	r0, #0
    e956:	bf18      	it	ne
    e958:	f1bc 0f03 	cmpne.w	ip, #3
    e95c:	bf38      	it	cc
    e95e:	f044 0404 	orrcc.w	r4, r4, #4
    e962:	ea27 0094 	bic.w	r0, r7, r4, lsr #2
    e966:	f8d9 2004 	ldr.w	r2, [r9, #4]
    e96a:	9900      	ldr	r1, [sp, #0]
    e96c:	e036      	b.n	e9dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    e96e:	0000      	.short	0x0000
    e970:	40008000 	.word	0x40008000
    e974:	4000854c 	.word	0x4000854c
    e978:	2000038c 	.word	0x2000038c
    e97c:	20001a20 	.word	0x20001a20
    e980:	4001f508 	.word	0x4001f508
    e984:	40001000 	.word	0x40001000
    e988:	40001400 	.word	0x40001400
    e98c:	40001640 	.word	0x40001640
    e990:	40001410 	.word	0x40001410
    e994:	40001118 	.word	0x40001118
    e998:	40008144 	.word	0x40008144
    e99c:	40008540 	.word	0x40008540
    e9a0:	40001510 	.word	0x40001510
    e9a4:	40001504 	.word	0x40001504
    e9a8:	40008544 	.word	0x40008544
    e9ac:	20001a0c 	.word	0x20001a0c
    e9b0:	04040000 	.word	0x04040000
    e9b4:	40001450 	.word	0x40001450
    e9b8:	40001454 	.word	0x40001454
    e9bc:	f014 0f28 	tst.w	r4, #40	; 0x28
    e9c0:	d00d      	beq.n	e9de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e9c2:	f014 0f20 	tst.w	r4, #32
    e9c6:	d104      	bne.n	e9d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e9c8:	7e28      	ldrb	r0, [r5, #24]
    e9ca:	b110      	cbz	r0, e9d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e9cc:	f1bb 0f00 	cmp.w	fp, #0
    e9d0:	d00f      	beq.n	e9f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47a>
    e9d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e9d6:	ea27 1154 	bic.w	r1, r7, r4, lsr #5
    e9da:	9800      	ldr	r0, [sp, #0]
    e9dc:	4790      	blx	r2
    e9de:	f014 0f10 	tst.w	r4, #16
    e9e2:	bf1c      	itt	ne
    e9e4:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    e9e8:	4780      	blxne	r0
    e9ea:	7ae8      	ldrb	r0, [r5, #11]
    e9ec:	2802      	cmp	r0, #2
    e9ee:	d11d      	bne.n	ea2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e9f0:	e004      	b.n	e9fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x484>
    e9f2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    e9f6:	203e      	movs	r0, #62	; 0x3e
    e9f8:	f7f5 fb48 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9fc:	7c28      	ldrb	r0, [r5, #16]
    e9fe:	b1a8      	cbz	r0, ea2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    ea00:	2802      	cmp	r0, #2
    ea02:	d006      	beq.n	ea12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49a>
    ea04:	2801      	cmp	r0, #1
    ea06:	d025      	beq.n	ea54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    ea08:	f640 2124 	movw	r1, #2596	; 0xa24
    ea0c:	203e      	movs	r0, #62	; 0x3e
    ea0e:	f7f5 fb3d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea12:	6969      	ldr	r1, [r5, #20]
    ea14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    ea16:	4408      	add	r0, r1
    ea18:	f8ca 0000 	str.w	r0, [sl]
    ea1c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    ea1e:	4913      	ldr	r1, [pc, #76]	; (ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea20:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    ea24:	63a8      	str	r0, [r5, #56]	; 0x38
    ea26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ea2a:	6008      	str	r0, [r1, #0]
    ea2c:	f014 0f10 	tst.w	r4, #16
    ea30:	bf04      	itt	eq
    ea32:	b003      	addeq	sp, #12
    ea34:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea38:	480d      	ldr	r0, [pc, #52]	; (ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>)
    ea3a:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    ea3e:	480d      	ldr	r0, [pc, #52]	; (ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>)
    ea40:	6800      	ldr	r0, [r0, #0]
    ea42:	9000      	str	r0, [sp, #0]
    ea44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ea48:	2002      	movs	r0, #2
    ea4a:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    ea4e:	b003      	add	sp, #12
    ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea54:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    ea56:	6968      	ldr	r0, [r5, #20]
    ea58:	4288      	cmp	r0, r1
    ea5a:	bf88      	it	hi
    ea5c:	f8ca 0000 	strhi.w	r0, [sl]
    ea60:	d8dc      	bhi.n	ea1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    ea62:	f640 2125 	movw	r1, #2597	; 0xa25
    ea66:	203e      	movs	r0, #62	; 0x3e
    ea68:	f7f5 fb10 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	4001f504 	.word	0x4001f504
    ea70:	40001000 	.word	0x40001000
    ea74:	40001110 	.word	0x40001110

0000ea78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    ea78:	0083      	lsls	r3, r0, #2
    ea7a:	b510      	push	{r4, lr}
    ea7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ea84:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    ea88:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    ea8c:	f891 c000 	ldrb.w	ip, [r1]
    ea90:	f8d1 1001 	ldr.w	r1, [r1, #1]
    ea94:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    ea98:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    ea9c:	f100 0108 	add.w	r1, r0, #8
    eaa0:	f04f 0c01 	mov.w	ip, #1
    eaa4:	fa0c f301 	lsl.w	r3, ip, r1
    eaa8:	490b      	ldr	r1, [pc, #44]	; (ead8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x60>)
    eaaa:	2a00      	cmp	r2, #0
    eaac:	bf04      	itt	eq
    eaae:	680a      	ldreq	r2, [r1, #0]
    eab0:	439a      	biceq	r2, r3
    eab2:	d009      	beq.n	eac8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    eab4:	2a01      	cmp	r2, #1
    eab6:	bf04      	itt	eq
    eab8:	680a      	ldreq	r2, [r1, #0]
    eaba:	431a      	orreq	r2, r3
    eabc:	d004      	beq.n	eac8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    eabe:	f240 31a6 	movw	r1, #934	; 0x3a6
    eac2:	203e      	movs	r0, #62	; 0x3e
    eac4:	f7f5 fae2 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eac8:	600a      	str	r2, [r1, #0]
    eaca:	680a      	ldr	r2, [r1, #0]
    eacc:	fa0c f000 	lsl.w	r0, ip, r0
    ead0:	4310      	orrs	r0, r2
    ead2:	6008      	str	r0, [r1, #0]
    ead4:	bd10      	pop	{r4, pc}
    ead6:	0000      	.short	0x0000
    ead8:	40001640 	.word	0x40001640
    eadc:	492e      	ldr	r1, [pc, #184]	; (eb98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x120>)
    eade:	7aca      	ldrb	r2, [r1, #11]
    eae0:	2a01      	cmp	r2, #1
    eae2:	d04a      	beq.n	eb7a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x102>
    eae4:	2a02      	cmp	r2, #2
    eae6:	bf18      	it	ne
    eae8:	4770      	bxne	lr
    eaea:	7e4b      	ldrb	r3, [r1, #25]
    eaec:	2b00      	cmp	r3, #0
    eaee:	bf08      	it	eq
    eaf0:	4770      	bxeq	lr
    eaf2:	2a01      	cmp	r2, #1
    eaf4:	d045      	beq.n	eb82 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    eaf6:	7ecb      	ldrb	r3, [r1, #27]
    eaf8:	7f4a      	ldrb	r2, [r1, #29]
    eafa:	f113 0c00 	adds.w	ip, r3, #0
    eafe:	bf18      	it	ne
    eb00:	f04f 0c01 	movne.w	ip, #1
    eb04:	2324      	movs	r3, #36	; 0x24
    eb06:	4418      	add	r0, r3
    eb08:	4b24      	ldr	r3, [pc, #144]	; (eb9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x124>)
    eb0a:	6018      	str	r0, [r3, #0]
    eb0c:	0210      	lsls	r0, r2, #8
    eb0e:	f08c 0201 	eor.w	r2, ip, #1
    eb12:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    eb16:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    eb1a:	f891 0020 	ldrb.w	r0, [r1, #32]
    eb1e:	0083      	lsls	r3, r0, #2
    eb20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eb24:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    eb28:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    eb2c:	4b1c      	ldr	r3, [pc, #112]	; (eba0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    eb2e:	7f8a      	ldrb	r2, [r1, #30]
    eb30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    eb34:	00d3      	lsls	r3, r2, #3
    eb36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eb3a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    eb3e:	f8df c064 	ldr.w	ip, [pc, #100]	; eba4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    eb42:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    eb46:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    eb4a:	7fc9      	ldrb	r1, [r1, #31]
    eb4c:	f8df c058 	ldr.w	ip, [pc, #88]	; eba8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x130>
    eb50:	00cb      	lsls	r3, r1, #3
    eb52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eb56:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    eb5a:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    eb5e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    eb62:	2001      	movs	r0, #1
    eb64:	fa00 f202 	lsl.w	r2, r0, r2
    eb68:	4088      	lsls	r0, r1
    eb6a:	4910      	ldr	r1, [pc, #64]	; (ebac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x134>)
    eb6c:	4310      	orrs	r0, r2
    eb6e:	6008      	str	r0, [r1, #0]
    eb70:	490f      	ldr	r1, [pc, #60]	; (ebb0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x138>)
    eb72:	2000      	movs	r0, #0
    eb74:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    eb78:	4770      	bx	lr
    eb7a:	7e0b      	ldrb	r3, [r1, #24]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d1b8      	bne.n	eaf2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    eb80:	4770      	bx	lr
    eb82:	7e8b      	ldrb	r3, [r1, #26]
    eb84:	7f0a      	ldrb	r2, [r1, #28]
    eb86:	2b00      	cmp	r3, #0
    eb88:	bf14      	ite	ne
    eb8a:	f04f 0c01 	movne.w	ip, #1
    eb8e:	f04f 0c00 	moveq.w	ip, #0
    eb92:	2311      	movs	r3, #17
    eb94:	e7b7      	b.n	eb06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x8e>
    eb96:	0000      	.short	0x0000
    eb98:	20001a20 	.word	0x20001a20
    eb9c:	4000854c 	.word	0x4000854c
    eba0:	40006000 	.word	0x40006000
    eba4:	4000814c 	.word	0x4000814c
    eba8:	40001110 	.word	0x40001110
    ebac:	4001f504 	.word	0x4001f504
    ebb0:	40008000 	.word	0x40008000
    ebb4:	00000002 	.word	0x00000002
	...
    ebcc:	40008000 	.word	0x40008000
	...
    ebe0:	40008000 	.word	0x40008000
    ebe4:	00000002 	.word	0x00000002
	...
    ebf0:	00000001 	.word	0x00000001
	...

0000ec04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    ec04:	4901      	ldr	r1, [pc, #4]	; (ec0c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    ec06:	b2c0      	uxtb	r0, r0
    ec08:	6008      	str	r0, [r1, #0]
    ec0a:	4770      	bx	lr
    ec0c:	4000150c 	.word	0x4000150c

0000ec10 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    ec10:	b510      	push	{r4, lr}
    ec12:	4907      	ldr	r1, [pc, #28]	; (ec30 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    ec14:	2801      	cmp	r0, #1
    ec16:	bf08      	it	eq
    ec18:	2003      	moveq	r0, #3
    ec1a:	d007      	beq.n	ec2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    ec1c:	2802      	cmp	r0, #2
    ec1e:	bf08      	it	eq
    ec20:	2004      	moveq	r0, #4
    ec22:	d003      	beq.n	ec2c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    ec24:	2158      	movs	r1, #88	; 0x58
    ec26:	203f      	movs	r0, #63	; 0x3f
    ec28:	f7f5 fa30 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec2c:	6008      	str	r0, [r1, #0]
    ec2e:	bd10      	pop	{r4, pc}
    ec30:	40001510 	.word	0x40001510

0000ec34 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    ec34:	4770      	bx	lr
    ec36:	2100      	movs	r1, #0
    ec38:	7081      	strb	r1, [r0, #2]
    ec3a:	7001      	strb	r1, [r0, #0]
    ec3c:	7041      	strb	r1, [r0, #1]
    ec3e:	4770      	bx	lr

0000ec40 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ec40:	b570      	push	{r4, r5, r6, lr}
    ec42:	f7f1 fe65 	bl	910 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ec46:	4605      	mov	r5, r0
    ec48:	2400      	movs	r4, #0
    ec4a:	e006      	b.n	ec5a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ec4c:	4620      	mov	r0, r4
    ec4e:	f7f1 fe65 	bl	91c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ec52:	f7ff fff0 	bl	ec36 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ec56:	1c64      	adds	r4, r4, #1
    ec58:	b2e4      	uxtb	r4, r4
    ec5a:	42ac      	cmp	r4, r5
    ec5c:	d3f6      	bcc.n	ec4c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ec5e:	bd70      	pop	{r4, r5, r6, pc}

0000ec60 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ec60:	2000      	movs	r0, #0
    ec62:	f7f4 bb9b 	b.w	339c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ec66:	b510      	push	{r4, lr}
    ec68:	f7f4 f890 	bl	2d8c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ec6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec70:	f000 b800 	b.w	ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000ec74 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    ec74:	0a41      	lsrs	r1, r0, #9
    ec76:	f643 5209 	movw	r2, #15625	; 0x3d09
    ec7a:	4351      	muls	r1, r2
    ec7c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ec80:	fb10 f002 	smulbb	r0, r0, r2
    ec84:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ec88:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ec8c:	4770      	bx	lr

0000ec8e <MPSL_IRQ_RADIO_Handler>:
    ec8e:	f7f2 be9f 	b.w	19d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    ec92:	2800      	cmp	r0, #0
    ec94:	db09      	blt.n	ecaa <MPSL_IRQ_RADIO_Handler+0x1c>
    ec96:	f000 021f 	and.w	r2, r0, #31
    ec9a:	2101      	movs	r1, #1
    ec9c:	4091      	lsls	r1, r2
    ec9e:	0940      	lsrs	r0, r0, #5
    eca0:	0080      	lsls	r0, r0, #2
    eca2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eca6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ecaa:	4770      	bx	lr
    ecac:	2800      	cmp	r0, #0
    ecae:	db0d      	blt.n	eccc <MPSL_IRQ_RADIO_Handler+0x3e>
    ecb0:	f000 021f 	and.w	r2, r0, #31
    ecb4:	2101      	movs	r1, #1
    ecb6:	4091      	lsls	r1, r2
    ecb8:	0940      	lsrs	r0, r0, #5
    ecba:	0080      	lsls	r0, r0, #2
    ecbc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ecc0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ecc4:	f3bf 8f4f 	dsb	sy
    ecc8:	f3bf 8f6f 	isb	sy
    eccc:	4770      	bx	lr

0000ecce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ecce:	b570      	push	{r4, r5, r6, lr}
    ecd0:	4602      	mov	r2, r0
    ecd2:	2000      	movs	r0, #0
    ecd4:	2900      	cmp	r1, #0
    ecd6:	d01d      	beq.n	ed14 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ecd8:	fba2 0101 	umull	r0, r1, r2, r1
    ecdc:	0a40      	lsrs	r0, r0, #9
    ecde:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    ece2:	0a49      	lsrs	r1, r1, #9
    ece4:	1c40      	adds	r0, r0, #1
    ece6:	f141 0100 	adc.w	r1, r1, #0
    ecea:	f240 72a1 	movw	r2, #1953	; 0x7a1
    ecee:	1883      	adds	r3, r0, r2
    ecf0:	f141 0100 	adc.w	r1, r1, #0
    ecf4:	1c5b      	adds	r3, r3, #1
    ecf6:	f141 0400 	adc.w	r4, r1, #0
    ecfa:	2100      	movs	r1, #0
    ecfc:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    ed00:	41a1      	sbcs	r1, r4
    ed02:	d203      	bcs.n	ed0c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    ed04:	216c      	movs	r1, #108	; 0x6c
    ed06:	206d      	movs	r0, #109	; 0x6d
    ed08:	f7f4 fee4 	bl	3ad4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ed0c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ed10:	fbb0 f0f2 	udiv	r0, r0, r2
    ed14:	bd70      	pop	{r4, r5, r6, pc}
    ed16:	5840      	ldr	r0, [r0, r1]
    ed18:	2800      	cmp	r0, #0
    ed1a:	d000      	beq.n	ed1e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    ed1c:	2001      	movs	r0, #1
    ed1e:	4770      	bx	lr
    ed20:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ed24:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    ed28:	f002 0201 	and.w	r2, r2, #1
    ed2c:	03c0      	lsls	r0, r0, #15
    ed2e:	d503      	bpl.n	ed38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ed30:	428a      	cmp	r2, r1
    ed32:	d101      	bne.n	ed38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ed34:	2001      	movs	r0, #1
    ed36:	4770      	bx	lr
    ed38:	2000      	movs	r0, #0
    ed3a:	4770      	bx	lr

0000ed3c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ed3c:	b510      	push	{r4, lr}
    ed3e:	2101      	movs	r1, #1
    ed40:	0788      	lsls	r0, r1, #30
    ed42:	f7f4 fe85 	bl	3a50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ed46:	2800      	cmp	r0, #0
    ed48:	d000      	beq.n	ed4c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ed4a:	2001      	movs	r0, #1
    ed4c:	bd10      	pop	{r4, pc}

0000ed4e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ed4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ed52:	2101      	movs	r1, #1
    ed54:	6001      	str	r1, [r0, #0]
    ed56:	4770      	bx	lr

0000ed58 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    ed58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ed5c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    ed60:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    ed64:	f002 0203 	and.w	r2, r2, #3
    ed68:	03c9      	lsls	r1, r1, #15
    ed6a:	d503      	bpl.n	ed74 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ed6c:	4282      	cmp	r2, r0
    ed6e:	d101      	bne.n	ed74 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ed70:	2001      	movs	r0, #1
    ed72:	4770      	bx	lr
    ed74:	2000      	movs	r0, #0
    ed76:	4770      	bx	lr

0000ed78 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    ed78:	b510      	push	{r4, lr}
    ed7a:	2100      	movs	r1, #0
    ed7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ed80:	f7f4 fe66 	bl	3a50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ed84:	2800      	cmp	r0, #0
    ed86:	d000      	beq.n	ed8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    ed88:	2001      	movs	r0, #1
    ed8a:	bd10      	pop	{r4, pc}
    ed8c:	2800      	cmp	r0, #0
    ed8e:	db09      	blt.n	eda4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    ed90:	f000 021f 	and.w	r2, r0, #31
    ed94:	2101      	movs	r1, #1
    ed96:	4091      	lsls	r1, r2
    ed98:	0940      	lsrs	r0, r0, #5
    ed9a:	0080      	lsls	r0, r0, #2
    ed9c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eda0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eda4:	4770      	bx	lr
    eda6:	2800      	cmp	r0, #0
    eda8:	db0d      	blt.n	edc6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    edaa:	f000 021f 	and.w	r2, r0, #31
    edae:	2101      	movs	r1, #1
    edb0:	4091      	lsls	r1, r2
    edb2:	0940      	lsrs	r0, r0, #5
    edb4:	0080      	lsls	r0, r0, #2
    edb6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    edba:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    edbe:	f3bf 8f4f 	dsb	sy
    edc2:	f3bf 8f6f 	isb	sy
    edc6:	4770      	bx	lr
    edc8:	00021000 	.word	0x00021000
    edcc:	643300fa 	.word	0x643300fa
    edd0:	efddbd95 	.word	0xefddbd95
    edd4:	4fc80257 	.word	0x4fc80257
    edd8:	5560481f 	.word	0x5560481f
    eddc:	8787e478 	.word	0x8787e478
    ede0:	dcb7      	.short	0xdcb7
    ede2:	2800      	cmp	r0, #0
    ede4:	db09      	blt.n	edfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x82>
    ede6:	f000 021f 	and.w	r2, r0, #31
    edea:	2101      	movs	r1, #1
    edec:	4091      	lsls	r1, r2
    edee:	0940      	lsrs	r0, r0, #5
    edf0:	0080      	lsls	r0, r0, #2
    edf2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    edf6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    edfa:	4770      	bx	lr

0000edfc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    edfc:	f3ef 8110 	mrs	r1, PRIMASK
    ee00:	b672      	cpsid	i
    ee02:	7802      	ldrb	r2, [r0, #0]
    ee04:	2a01      	cmp	r2, #1
    ee06:	d001      	beq.n	ee0c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    ee08:	2201      	movs	r2, #1
    ee0a:	e000      	b.n	ee0e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    ee0c:	2200      	movs	r2, #0
    ee0e:	2301      	movs	r3, #1
    ee10:	7003      	strb	r3, [r0, #0]
    ee12:	b901      	cbnz	r1, ee16 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    ee14:	b662      	cpsie	i
    ee16:	b10a      	cbz	r2, ee1c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    ee18:	2000      	movs	r0, #0
    ee1a:	4770      	bx	lr
    ee1c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ee20:	4770      	bx	lr

0000ee22 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    ee22:	2100      	movs	r1, #0
    ee24:	7001      	strb	r1, [r0, #0]
    ee26:	4608      	mov	r0, r1
    ee28:	4770      	bx	lr

0000ee2a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    ee2a:	f3ef 8110 	mrs	r1, PRIMASK
    ee2e:	b672      	cpsid	i
    ee30:	2200      	movs	r2, #0
    ee32:	7002      	strb	r2, [r0, #0]
    ee34:	b901      	cbnz	r1, ee38 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    ee36:	b662      	cpsie	i
    ee38:	2000      	movs	r0, #0
    ee3a:	4770      	bx	lr

0000ee3c <mpsl_low_priority_process>:
    ee3c:	f7f4 bf36 	b.w	3cac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ee40 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ee40:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee44:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee48:	280f      	cmp	r0, #15
    ee4a:	d001      	beq.n	ee50 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    ee4c:	2000      	movs	r0, #0
    ee4e:	4770      	bx	lr
    ee50:	2001      	movs	r0, #1
    ee52:	4770      	bx	lr

0000ee54 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ee54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee58:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee5c:	280a      	cmp	r0, #10
    ee5e:	d001      	beq.n	ee64 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ee60:	2000      	movs	r0, #0
    ee62:	4770      	bx	lr
    ee64:	2001      	movs	r0, #1
    ee66:	4770      	bx	lr

0000ee68 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ee68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee6c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee70:	280e      	cmp	r0, #14
    ee72:	d001      	beq.n	ee78 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ee74:	2000      	movs	r0, #0
    ee76:	4770      	bx	lr
    ee78:	2001      	movs	r0, #1
    ee7a:	4770      	bx	lr

0000ee7c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ee7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee80:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee84:	2810      	cmp	r0, #16
    ee86:	d001      	beq.n	ee8c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ee88:	2000      	movs	r0, #0
    ee8a:	4770      	bx	lr
    ee8c:	2001      	movs	r0, #1
    ee8e:	4770      	bx	lr

0000ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ee90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee94:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee98:	2806      	cmp	r0, #6
    ee9a:	d003      	beq.n	eea4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ee9c:	1c40      	adds	r0, r0, #1
    ee9e:	d001      	beq.n	eea4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    eea0:	2000      	movs	r0, #0
    eea2:	4770      	bx	lr
    eea4:	2001      	movs	r0, #1
    eea6:	4770      	bx	lr

0000eea8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    eea8:	b500      	push	{lr}
    eeaa:	f7ff fff1 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    eeae:	b148      	cbz	r0, eec4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    eeb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    eeb4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    eeb8:	2806      	cmp	r0, #6
    eeba:	d303      	bcc.n	eec4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    eebc:	1c40      	adds	r0, r0, #1
    eebe:	d001      	beq.n	eec4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    eec0:	2001      	movs	r0, #1
    eec2:	bd00      	pop	{pc}
    eec4:	2000      	movs	r0, #0
    eec6:	bd00      	pop	{pc}

0000eec8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    eec8:	b500      	push	{lr}
    eeca:	f7ff ffe1 	bl	ee90 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    eece:	b138      	cbz	r0, eee0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    eed0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    eed4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    eed8:	2806      	cmp	r0, #6
    eeda:	d303      	bcc.n	eee4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    eedc:	1c40      	adds	r0, r0, #1
    eede:	d001      	beq.n	eee4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    eee0:	2000      	movs	r0, #0
    eee2:	bd00      	pop	{pc}
    eee4:	2001      	movs	r0, #1
    eee6:	bd00      	pop	{pc}

0000eee8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    eee8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    eeec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    eef0:	280d      	cmp	r0, #13
    eef2:	d001      	beq.n	eef8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    eef4:	2000      	movs	r0, #0
    eef6:	4770      	bx	lr
    eef8:	2001      	movs	r0, #1
    eefa:	4770      	bx	lr

0000eefc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    eefc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ef00:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ef04:	2808      	cmp	r0, #8
    ef06:	d001      	beq.n	ef0c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    ef08:	2000      	movs	r0, #0
    ef0a:	4770      	bx	lr
    ef0c:	2001      	movs	r0, #1
    ef0e:	4770      	bx	lr

0000ef10 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    ef10:	b510      	push	{r4, lr}
    ef12:	b91a      	cbnz	r2, ef1c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
    ef14:	2000      	movs	r0, #0
    ef16:	bd10      	pop	{r4, pc}
    ef18:	1c40      	adds	r0, r0, #1
    ef1a:	1c49      	adds	r1, r1, #1
    ef1c:	1e52      	subs	r2, r2, #1
    ef1e:	d003      	beq.n	ef28 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
    ef20:	7803      	ldrb	r3, [r0, #0]
    ef22:	780c      	ldrb	r4, [r1, #0]
    ef24:	42a3      	cmp	r3, r4
    ef26:	d0f7      	beq.n	ef18 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    ef28:	7800      	ldrb	r0, [r0, #0]
    ef2a:	7809      	ldrb	r1, [r1, #0]
    ef2c:	1a40      	subs	r0, r0, r1
    ef2e:	bd10      	pop	{r4, pc}

0000ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ef30:	b530      	push	{r4, r5, lr}
    ef32:	4603      	mov	r3, r0
    ef34:	b2cc      	uxtb	r4, r1
    ef36:	e004      	b.n	ef42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
    ef38:	2a00      	cmp	r2, #0
    ef3a:	d014      	beq.n	ef66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
    ef3c:	f803 4b01 	strb.w	r4, [r3], #1
    ef40:	1e52      	subs	r2, r2, #1
    ef42:	079d      	lsls	r5, r3, #30
    ef44:	d1f8      	bne.n	ef38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
    ef46:	b2c9      	uxtb	r1, r1
    ef48:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ef4c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ef50:	e001      	b.n	ef56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
    ef52:	c302      	stmia	r3!, {r1}
    ef54:	1f12      	subs	r2, r2, #4
    ef56:	2a04      	cmp	r2, #4
    ef58:	d2fb      	bcs.n	ef52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ef5a:	e002      	b.n	ef62 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
    ef5c:	f803 4b01 	strb.w	r4, [r3], #1
    ef60:	1e52      	subs	r2, r2, #1
    ef62:	2a00      	cmp	r2, #0
    ef64:	d1fa      	bne.n	ef5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
    ef66:	bd30      	pop	{r4, r5, pc}
    ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef6a:	4604      	mov	r4, r0
    ef6c:	f100 0003 	add.w	r0, r0, #3
    ef70:	f020 0003 	bic.w	r0, r0, #3
    ef74:	9000      	str	r0, [sp, #0]
    ef76:	460e      	mov	r6, r1
    ef78:	780b      	ldrb	r3, [r1, #0]
    ef7a:	7849      	ldrb	r1, [r1, #1]
    ef7c:	0015      	movs	r5, r2
    ef7e:	d000      	beq.n	ef82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x52>
    ef80:	2000      	movs	r0, #0
    ef82:	2200      	movs	r2, #0
    ef84:	f7f5 fa44 	bl	4410 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ef88:	9900      	ldr	r1, [sp, #0]
    ef8a:	462a      	mov	r2, r5
    ef8c:	4408      	add	r0, r1
    ef8e:	9000      	str	r0, [sp, #0]
    ef90:	4631      	mov	r1, r6
    ef92:	4668      	mov	r0, sp
    ef94:	f000 f807 	bl	efa6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x76>
    ef98:	9800      	ldr	r0, [sp, #0]
    ef9a:	1dc0      	adds	r0, r0, #7
    ef9c:	f020 0007 	bic.w	r0, r0, #7
    efa0:	9000      	str	r0, [sp, #0]
    efa2:	1b00      	subs	r0, r0, r4
    efa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efaa:	4606      	mov	r6, r0
    efac:	460c      	mov	r4, r1
    efae:	7808      	ldrb	r0, [r1, #0]
    efb0:	7849      	ldrb	r1, [r1, #1]
    efb2:	2700      	movs	r7, #0
    efb4:	4408      	add	r0, r1
    efb6:	4691      	mov	r9, r2
    efb8:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    efbc:	463d      	mov	r5, r7
    efbe:	e00e      	b.n	efde <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xae>
    efc0:	7963      	ldrb	r3, [r4, #5]
    efc2:	2b03      	cmp	r3, #3
    efc4:	d200      	bcs.n	efc8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x98>
    efc6:	2303      	movs	r3, #3
    efc8:	7922      	ldrb	r2, [r4, #4]
    efca:	2a03      	cmp	r2, #3
    efcc:	d200      	bcs.n	efd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa0>
    efce:	2203      	movs	r2, #3
    efd0:	78e1      	ldrb	r1, [r4, #3]
    efd2:	78a0      	ldrb	r0, [r4, #2]
    efd4:	f001 f8b6 	bl	10144 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    efd8:	1c6d      	adds	r5, r5, #1
    efda:	4407      	add	r7, r0
    efdc:	b2ed      	uxtb	r5, r5
    efde:	4545      	cmp	r5, r8
    efe0:	d3ee      	bcc.n	efc0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x90>
    efe2:	6830      	ldr	r0, [r6, #0]
    efe4:	1cc0      	adds	r0, r0, #3
    efe6:	f020 0003 	bic.w	r0, r0, #3
    efea:	6030      	str	r0, [r6, #0]
    efec:	f1b9 0f00 	cmp.w	r9, #0
    eff0:	d000      	beq.n	eff4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
    eff2:	2000      	movs	r0, #0
    eff4:	463a      	mov	r2, r7
    eff6:	4641      	mov	r1, r8
    eff8:	f7f5 fbb8 	bl	476c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    effc:	6831      	ldr	r1, [r6, #0]
    effe:	4408      	add	r0, r1
    f000:	6030      	str	r0, [r6, #0]
    f002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f006 <sdc_RNG_IRQHandler>:
    f006:	f7f5 bd93 	b.w	4b30 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0000f00a <sdc_support_adv>:
    f00a:	b510      	push	{r4, lr}
    f00c:	f7fe f8f8 	bl	d200 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    f010:	2000      	movs	r0, #0
    f012:	bd10      	pop	{r4, pc}

0000f014 <sdc_support_dle>:
    f014:	b510      	push	{r4, lr}
    f016:	f7fd fe09 	bl	cc2c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    f01a:	2000      	movs	r0, #0
    f01c:	bd10      	pop	{r4, pc}

0000f01e <sdc_support_le_2m_phy>:
    f01e:	b510      	push	{r4, lr}
    f020:	f002 fe35 	bl	11c8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    f024:	2000      	movs	r0, #0
    f026:	bd10      	pop	{r4, pc}

0000f028 <sdc_support_slave>:
    f028:	b510      	push	{r4, lr}
    f02a:	f7fe f8fb 	bl	d224 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    f02e:	2000      	movs	r0, #0
    f030:	bd10      	pop	{r4, pc}

0000f032 <sdc_soc_ecb_block_encrypt>:
    f032:	b530      	push	{r4, r5, lr}
    f034:	460d      	mov	r5, r1
    f036:	b08d      	sub	sp, #52	; 0x34
    f038:	4614      	mov	r4, r2
    f03a:	4601      	mov	r1, r0
    f03c:	2210      	movs	r2, #16
    f03e:	4668      	mov	r0, sp
    f040:	f7f4 fe9a 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f044:	2210      	movs	r2, #16
    f046:	4629      	mov	r1, r5
    f048:	a804      	add	r0, sp, #16
    f04a:	f7f4 fe95 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f04e:	4668      	mov	r0, sp
    f050:	f7f5 fca8 	bl	49a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    f054:	b118      	cbz	r0, f05e <sdc_soc_ecb_block_encrypt+0x2c>
    f056:	f06f 0015 	mvn.w	r0, #21
    f05a:	b00d      	add	sp, #52	; 0x34
    f05c:	bd30      	pop	{r4, r5, pc}
    f05e:	2210      	movs	r2, #16
    f060:	4620      	mov	r0, r4
    f062:	a908      	add	r1, sp, #32
    f064:	f7f4 fe88 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f068:	2000      	movs	r0, #0
    f06a:	e7f6      	b.n	f05a <sdc_soc_ecb_block_encrypt+0x28>

0000f06c <sdc_soc_rand_vector_get>:
    f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f070:	460c      	mov	r4, r1
    f072:	4605      	mov	r5, r0
    f074:	f001 f8e8 	bl	10248 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
    f078:	4607      	mov	r7, r0
    f07a:	e00c      	b.n	f096 <sdc_soc_rand_vector_get+0x2a>
    f07c:	42bc      	cmp	r4, r7
    f07e:	d201      	bcs.n	f084 <sdc_soc_rand_vector_get+0x18>
    f080:	4620      	mov	r0, r4
    f082:	e000      	b.n	f086 <sdc_soc_rand_vector_get+0x1a>
    f084:	4638      	mov	r0, r7
    f086:	b2c6      	uxtb	r6, r0
    f088:	4631      	mov	r1, r6
    f08a:	4628      	mov	r0, r5
    f08c:	f7f5 fe14 	bl	4cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    f090:	1ba0      	subs	r0, r4, r6
    f092:	4435      	add	r5, r6
    f094:	b284      	uxth	r4, r0
    f096:	2c00      	cmp	r4, #0
    f098:	d1f0      	bne.n	f07c <sdc_soc_rand_vector_get+0x10>
    f09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f09e <sdc_soc_rand_vector_poll>:
    f09e:	b570      	push	{r4, r5, r6, lr}
    f0a0:	460c      	mov	r4, r1
    f0a2:	4605      	mov	r5, r0
    f0a4:	f7f5 fdfa 	bl	4c9c <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
    f0a8:	42a0      	cmp	r0, r4
    f0aa:	d300      	bcc.n	f0ae <sdc_soc_rand_vector_poll+0x10>
    f0ac:	4620      	mov	r0, r4
    f0ae:	b2c4      	uxtb	r4, r0
    f0b0:	4621      	mov	r1, r4
    f0b2:	4628      	mov	r0, r5
    f0b4:	f7f5 fdf8 	bl	4ca8 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    f0b8:	2800      	cmp	r0, #0
    f0ba:	d000      	beq.n	f0be <sdc_soc_rand_vector_poll+0x20>
    f0bc:	4620      	mov	r0, r4
    f0be:	bd70      	pop	{r4, r5, r6, pc}

0000f0c0 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    f0c0:	2000      	movs	r0, #0
    f0c2:	4770      	bx	lr

0000f0c4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    f0c4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f0c6:	4604      	mov	r4, r0
    f0c8:	1d01      	adds	r1, r0, #4
    f0ca:	4668      	mov	r0, sp
    f0cc:	f7f7 ff36 	bl	6f3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    f0d0:	2800      	cmp	r0, #0
    f0d2:	d004      	beq.n	f0de <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    f0d4:	4669      	mov	r1, sp
    f0d6:	4620      	mov	r0, r4
    f0d8:	f000 f825 	bl	f126 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    f0dc:	2001      	movs	r0, #1
    f0de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f0e0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    f0e0:	b50e      	push	{r1, r2, r3, lr}
    f0e2:	4601      	mov	r1, r0
    f0e4:	4668      	mov	r0, sp
    f0e6:	f000 f804 	bl	f0f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    f0ea:	4668      	mov	r0, sp
    f0ec:	f7f7 ffda 	bl	70a4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    f0f0:	bd0e      	pop	{r1, r2, r3, pc}

0000f0f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    f0f2:	880a      	ldrh	r2, [r1, #0]
    f0f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    f0f8:	8002      	strh	r2, [r0, #0]
    f0fa:	884a      	ldrh	r2, [r1, #2]
    f0fc:	8042      	strh	r2, [r0, #2]
    f0fe:	784a      	ldrb	r2, [r1, #1]
    f100:	0993      	lsrs	r3, r2, #6
    f102:	2200      	movs	r2, #0
    f104:	7142      	strb	r2, [r0, #5]
    f106:	784b      	ldrb	r3, [r1, #1]
    f108:	f3c3 1301 	ubfx	r3, r3, #4, #2
    f10c:	b11b      	cbz	r3, f116 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f10e:	2b01      	cmp	r3, #1
    f110:	d005      	beq.n	f11e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    f112:	2b02      	cmp	r3, #2
    f114:	d005      	beq.n	f122 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    f116:	7102      	strb	r2, [r0, #4]
    f118:	1d09      	adds	r1, r1, #4
    f11a:	6081      	str	r1, [r0, #8]
    f11c:	4770      	bx	lr
    f11e:	2201      	movs	r2, #1
    f120:	e7f9      	b.n	f116 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f122:	2202      	movs	r2, #2
    f124:	e7f7      	b.n	f116 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000f126 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    f126:	b510      	push	{r4, lr}
    f128:	460c      	mov	r4, r1
    f12a:	7809      	ldrb	r1, [r1, #0]
    f12c:	7001      	strb	r1, [r0, #0]
    f12e:	7841      	ldrb	r1, [r0, #1]
    f130:	f021 010f 	bic.w	r1, r1, #15
    f134:	7041      	strb	r1, [r0, #1]
    f136:	8822      	ldrh	r2, [r4, #0]
    f138:	f3c2 2203 	ubfx	r2, r2, #8, #4
    f13c:	4311      	orrs	r1, r2
    f13e:	7041      	strb	r1, [r0, #1]
    f140:	78a2      	ldrb	r2, [r4, #2]
    f142:	7082      	strb	r2, [r0, #2]
    f144:	8862      	ldrh	r2, [r4, #2]
    f146:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    f14a:	0a12      	lsrs	r2, r2, #8
    f14c:	70c2      	strb	r2, [r0, #3]
    f14e:	7041      	strb	r1, [r0, #1]
    f150:	7922      	ldrb	r2, [r4, #4]
    f152:	f002 0203 	and.w	r2, r2, #3
    f156:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    f15a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    f15e:	7041      	strb	r1, [r0, #1]
    f160:	7962      	ldrb	r2, [r4, #5]
    f162:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    f166:	7041      	strb	r1, [r0, #1]
    f168:	68a1      	ldr	r1, [r4, #8]
    f16a:	1d02      	adds	r2, r0, #4
    f16c:	4291      	cmp	r1, r2
    f16e:	d006      	beq.n	f17e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    f170:	8862      	ldrh	r2, [r4, #2]
    f172:	2afb      	cmp	r2, #251	; 0xfb
    f174:	d300      	bcc.n	f178 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    f176:	22fb      	movs	r2, #251	; 0xfb
    f178:	1d00      	adds	r0, r0, #4
    f17a:	f7f4 fdfd 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f17e:	78a0      	ldrb	r0, [r4, #2]
    f180:	1d00      	adds	r0, r0, #4
    f182:	b2c0      	uxtb	r0, r0
    f184:	bd10      	pop	{r4, pc}

0000f186 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    f186:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f18a:	4604      	mov	r4, r0
    f18c:	f891 c000 	ldrb.w	ip, [r1]
    f190:	2000      	movs	r0, #0
    f192:	260c      	movs	r6, #12
    f194:	223e      	movs	r2, #62	; 0x3e
    f196:	2512      	movs	r5, #18
    f198:	23ff      	movs	r3, #255	; 0xff
    f19a:	f04f 0b14 	mov.w	fp, #20
    f19e:	f04f 0e13 	mov.w	lr, #19
    f1a2:	f04f 0a05 	mov.w	sl, #5
    f1a6:	f104 070d 	add.w	r7, r4, #13
    f1aa:	f04f 0911 	mov.w	r9, #17
    f1ae:	f1bc 0f20 	cmp.w	ip, #32
    f1b2:	d272      	bcs.n	f29a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    f1b4:	e8df f00c 	tbb	[pc, ip]
    f1b8:	29271071 	.word	0x29271071
    f1bc:	a46dfc2e 	.word	0xa46dfc2e
    f1c0:	fbdac0ae 	.word	0xfbdac0ae
    f1c4:	f7f8f9fa 	.word	0xf7f8f9fa
    f1c8:	507171f6 	.word	0x507171f6
    f1cc:	f3f4f572 	.word	0xf3f4f572
    f1d0:	eff0f1f2 	.word	0xeff0f1f2
    f1d4:	ec71edee 	.word	0xec71edee
    f1d8:	7026      	strb	r6, [r4, #0]
    f1da:	7908      	ldrb	r0, [r1, #4]
    f1dc:	70a0      	strb	r0, [r4, #2]
    f1de:	7948      	ldrb	r0, [r1, #5]
    f1e0:	70e0      	strb	r0, [r4, #3]
    f1e2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f1e6:	0a00      	lsrs	r0, r0, #8
    f1e8:	7120      	strb	r0, [r4, #4]
    f1ea:	79c8      	ldrb	r0, [r1, #7]
    f1ec:	7160      	strb	r0, [r4, #5]
    f1ee:	7a08      	ldrb	r0, [r1, #8]
    f1f0:	71a0      	strb	r0, [r4, #6]
    f1f2:	8908      	ldrh	r0, [r1, #8]
    f1f4:	0a00      	lsrs	r0, r0, #8
    f1f6:	71e0      	strb	r0, [r4, #7]
    f1f8:	7a88      	ldrb	r0, [r1, #10]
    f1fa:	7220      	strb	r0, [r4, #8]
    f1fc:	8948      	ldrh	r0, [r1, #10]
    f1fe:	0a00      	lsrs	r0, r0, #8
    f200:	7260      	strb	r0, [r4, #9]
    f202:	2008      	movs	r0, #8
    f204:	e153      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f206:	2010      	movs	r0, #16
    f208:	e000      	b.n	f20c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    f20a:	201a      	movs	r0, #26
    f20c:	7020      	strb	r0, [r4, #0]
    f20e:	7908      	ldrb	r0, [r1, #4]
    f210:	70a0      	strb	r0, [r4, #2]
    f212:	e154      	b.n	f4be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    f214:	7022      	strb	r2, [r4, #0]
    f216:	2002      	movs	r0, #2
    f218:	70a0      	strb	r0, [r4, #2]
    f21a:	7908      	ldrb	r0, [r1, #4]
    f21c:	70e0      	strb	r0, [r4, #3]
    f21e:	7b88      	ldrb	r0, [r1, #14]
    f220:	7120      	strb	r0, [r4, #4]
    f222:	7948      	ldrb	r0, [r1, #5]
    f224:	7160      	strb	r0, [r4, #5]
    f226:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f22a:	f8c4 0006 	str.w	r0, [r4, #6]
    f22e:	8948      	ldrh	r0, [r1, #10]
    f230:	8160      	strh	r0, [r4, #10]
    f232:	7b08      	ldrb	r0, [r1, #12]
    f234:	7320      	strb	r0, [r4, #12]
    f236:	7b0e      	ldrb	r6, [r1, #12]
    f238:	1d0d      	adds	r5, r1, #4
    f23a:	2e1f      	cmp	r6, #31
    f23c:	d300      	bcc.n	f240 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    f23e:	261f      	movs	r6, #31
    f240:	4638      	mov	r0, r7
    f242:	4632      	mov	r2, r6
    f244:	f105 010b 	add.w	r1, r5, #11
    f248:	f7f4 fd96 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f24c:	360d      	adds	r6, #13
    f24e:	7a69      	ldrb	r1, [r5, #9]
    f250:	55a1      	strb	r1, [r4, r6]
    f252:	1e76      	subs	r6, r6, #1
    f254:	b2f0      	uxtb	r0, r6
    f256:	e128      	b.n	f4aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f258:	7022      	strb	r2, [r4, #0]
    f25a:	200b      	movs	r0, #11
    f25c:	70a0      	strb	r0, [r4, #2]
    f25e:	7908      	ldrb	r0, [r1, #4]
    f260:	70e0      	strb	r0, [r4, #3]
    f262:	7948      	ldrb	r0, [r1, #5]
    f264:	7120      	strb	r0, [r4, #4]
    f266:	7988      	ldrb	r0, [r1, #6]
    f268:	7160      	strb	r0, [r4, #5]
    f26a:	f8d1 0007 	ldr.w	r0, [r1, #7]
    f26e:	f8c4 0006 	str.w	r0, [r4, #6]
    f272:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    f276:	8160      	strh	r0, [r4, #10]
    f278:	7b48      	ldrb	r0, [r1, #13]
    f27a:	7320      	strb	r0, [r4, #12]
    f27c:	f8d1 000e 	ldr.w	r0, [r1, #14]
    f280:	f8c4 000d 	str.w	r0, [r4, #13]
    f284:	8a48      	ldrh	r0, [r1, #18]
    f286:	f8a4 0011 	strh.w	r0, [r4, #17]
    f28a:	7d08      	ldrb	r0, [r1, #20]
    f28c:	74e0      	strb	r0, [r4, #19]
    f28e:	4628      	mov	r0, r5
    f290:	e10d      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f292:	4620      	mov	r0, r4
    f294:	f000 f98d 	bl	f5b2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    f298:	e107      	b.n	f4aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f29a:	e10b      	b.n	f4b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f29c:	7022      	strb	r2, [r4, #0]
    f29e:	200a      	movs	r0, #10
    f2a0:	70a0      	strb	r0, [r4, #2]
    f2a2:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    f2a6:	70e0      	strb	r0, [r4, #3]
    f2a8:	7888      	ldrb	r0, [r1, #2]
    f2aa:	7120      	strb	r0, [r4, #4]
    f2ac:	8848      	ldrh	r0, [r1, #2]
    f2ae:	0a00      	lsrs	r0, r0, #8
    f2b0:	7160      	strb	r0, [r4, #5]
    f2b2:	7908      	ldrb	r0, [r1, #4]
    f2b4:	71a0      	strb	r0, [r4, #6]
    f2b6:	7948      	ldrb	r0, [r1, #5]
    f2b8:	71e0      	strb	r0, [r4, #7]
    f2ba:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f2be:	60a0      	str	r0, [r4, #8]
    f2c0:	8948      	ldrh	r0, [r1, #10]
    f2c2:	81a0      	strh	r0, [r4, #12]
    f2c4:	68c8      	ldr	r0, [r1, #12]
    f2c6:	f8c4 000e 	str.w	r0, [r4, #14]
    f2ca:	8a08      	ldrh	r0, [r1, #16]
    f2cc:	8260      	strh	r0, [r4, #18]
    f2ce:	f8d1 0012 	ldr.w	r0, [r1, #18]
    f2d2:	6160      	str	r0, [r4, #20]
    f2d4:	8ac8      	ldrh	r0, [r1, #22]
    f2d6:	8320      	strh	r0, [r4, #24]
    f2d8:	7e08      	ldrb	r0, [r1, #24]
    f2da:	76a0      	strb	r0, [r4, #26]
    f2dc:	8b08      	ldrh	r0, [r1, #24]
    f2de:	0a00      	lsrs	r0, r0, #8
    f2e0:	76e0      	strb	r0, [r4, #27]
    f2e2:	7e88      	ldrb	r0, [r1, #26]
    f2e4:	7720      	strb	r0, [r4, #28]
    f2e6:	8b48      	ldrh	r0, [r1, #26]
    f2e8:	0a00      	lsrs	r0, r0, #8
    f2ea:	7760      	strb	r0, [r4, #29]
    f2ec:	7f08      	ldrb	r0, [r1, #28]
    f2ee:	77a0      	strb	r0, [r4, #30]
    f2f0:	8b88      	ldrh	r0, [r1, #28]
    f2f2:	0a00      	lsrs	r0, r0, #8
    f2f4:	77e0      	strb	r0, [r4, #31]
    f2f6:	7f88      	ldrb	r0, [r1, #30]
    f2f8:	f884 0020 	strb.w	r0, [r4, #32]
    f2fc:	201f      	movs	r0, #31
    f2fe:	e0d6      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f300:	7022      	strb	r2, [r4, #0]
    f302:	f884 b002 	strb.w	fp, [r4, #2]
    f306:	7908      	ldrb	r0, [r1, #4]
    f308:	70e0      	strb	r0, [r4, #3]
    f30a:	8888      	ldrh	r0, [r1, #4]
    f30c:	0a00      	lsrs	r0, r0, #8
    f30e:	7120      	strb	r0, [r4, #4]
    f310:	7988      	ldrb	r0, [r1, #6]
    f312:	e0ed      	b.n	f4f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f314:	7022      	strb	r2, [r4, #0]
    f316:	2004      	movs	r0, #4
    f318:	70a0      	strb	r0, [r4, #2]
    f31a:	7908      	ldrb	r0, [r1, #4]
    f31c:	70e0      	strb	r0, [r4, #3]
    f31e:	7988      	ldrb	r0, [r1, #6]
    f320:	7120      	strb	r0, [r4, #4]
    f322:	88c8      	ldrh	r0, [r1, #6]
    f324:	0a00      	lsrs	r0, r0, #8
    f326:	7160      	strb	r0, [r4, #5]
    f328:	6888      	ldr	r0, [r1, #8]
    f32a:	f8c4 0006 	str.w	r0, [r4, #6]
    f32e:	68c8      	ldr	r0, [r1, #12]
    f330:	f8c4 000a 	str.w	r0, [r4, #10]
    f334:	200c      	movs	r0, #12
    f336:	e0ba      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f338:	7022      	strb	r2, [r4, #0]
    f33a:	2003      	movs	r0, #3
    f33c:	70a0      	strb	r0, [r4, #2]
    f33e:	7908      	ldrb	r0, [r1, #4]
    f340:	70e0      	strb	r0, [r4, #3]
    f342:	7988      	ldrb	r0, [r1, #6]
    f344:	7120      	strb	r0, [r4, #4]
    f346:	88c8      	ldrh	r0, [r1, #6]
    f348:	0a00      	lsrs	r0, r0, #8
    f34a:	7160      	strb	r0, [r4, #5]
    f34c:	7a08      	ldrb	r0, [r1, #8]
    f34e:	71a0      	strb	r0, [r4, #6]
    f350:	8908      	ldrh	r0, [r1, #8]
    f352:	0a00      	lsrs	r0, r0, #8
    f354:	71e0      	strb	r0, [r4, #7]
    f356:	7a88      	ldrb	r0, [r1, #10]
    f358:	7220      	strb	r0, [r4, #8]
    f35a:	8948      	ldrh	r0, [r1, #10]
    f35c:	0a00      	lsrs	r0, r0, #8
    f35e:	7260      	strb	r0, [r4, #9]
    f360:	7b08      	ldrb	r0, [r1, #12]
    f362:	72a0      	strb	r0, [r4, #10]
    f364:	8988      	ldrh	r0, [r1, #12]
    f366:	0a00      	lsrs	r0, r0, #8
    f368:	72e0      	strb	r0, [r4, #11]
    f36a:	e120      	b.n	f5ae <__kernel_ram_size+0xa6>
    f36c:	7022      	strb	r2, [r4, #0]
    f36e:	f884 a002 	strb.w	sl, [r4, #2]
    f372:	7908      	ldrb	r0, [r1, #4]
    f374:	70e0      	strb	r0, [r4, #3]
    f376:	8888      	ldrh	r0, [r1, #4]
    f378:	0a00      	lsrs	r0, r0, #8
    f37a:	7120      	strb	r0, [r4, #4]
    f37c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f380:	f8c4 0005 	str.w	r0, [r4, #5]
    f384:	f8d1 000a 	ldr.w	r0, [r1, #10]
    f388:	f8c4 0009 	str.w	r0, [r4, #9]
    f38c:	89c8      	ldrh	r0, [r1, #14]
    f38e:	e010      	b.n	f3b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    f390:	e0fa      	b.n	f588 <__kernel_ram_size+0x80>
    f392:	e0ce      	b.n	f532 <__kernel_ram_size+0x2a>
    f394:	e0af      	b.n	f4f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    f396:	e0da      	b.n	f54e <__kernel_ram_size+0x46>
    f398:	e0e8      	b.n	f56c <__kernel_ram_size+0x64>
    f39a:	e0a1      	b.n	f4e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    f39c:	e08c      	b.n	f4b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    f39e:	e090      	b.n	f4c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    f3a0:	e033      	b.n	f40a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    f3a2:	e02f      	b.n	f404 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    f3a4:	e043      	b.n	f42e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    f3a6:	e03d      	b.n	f424 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    f3a8:	e021      	b.n	f3ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    f3aa:	e015      	b.n	f3d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    f3ac:	e008      	b.n	f3c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    f3ae:	e004      	b.n	f3ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    f3b0:	e046      	b.n	f440 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    f3b2:	f8a4 000d 	strh.w	r0, [r4, #13]
    f3b6:	200d      	movs	r0, #13
    f3b8:	e079      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f3ba:	f884 9000 	strb.w	r9, [r4]
    f3be:	e038      	b.n	f432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    f3c0:	f884 a000 	strb.w	sl, [r4]
    f3c4:	7908      	ldrb	r0, [r1, #4]
    f3c6:	70a0      	strb	r0, [r4, #2]
    f3c8:	7948      	ldrb	r0, [r1, #5]
    f3ca:	70e0      	strb	r0, [r4, #3]
    f3cc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f3d0:	0a00      	lsrs	r0, r0, #8
    f3d2:	7120      	strb	r0, [r4, #4]
    f3d4:	79c8      	ldrb	r0, [r1, #7]
    f3d6:	e08b      	b.n	f4f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f3d8:	2008      	movs	r0, #8
    f3da:	7020      	strb	r0, [r4, #0]
    f3dc:	7908      	ldrb	r0, [r1, #4]
    f3de:	70a0      	strb	r0, [r4, #2]
    f3e0:	7988      	ldrb	r0, [r1, #6]
    f3e2:	70e0      	strb	r0, [r4, #3]
    f3e4:	88c8      	ldrh	r0, [r1, #6]
    f3e6:	0a00      	lsrs	r0, r0, #8
    f3e8:	7120      	strb	r0, [r4, #4]
    f3ea:	7a08      	ldrb	r0, [r1, #8]
    f3ec:	e080      	b.n	f4f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f3ee:	2030      	movs	r0, #48	; 0x30
    f3f0:	7020      	strb	r0, [r4, #0]
    f3f2:	7908      	ldrb	r0, [r1, #4]
    f3f4:	70a0      	strb	r0, [r4, #2]
    f3f6:	7988      	ldrb	r0, [r1, #6]
    f3f8:	70e0      	strb	r0, [r4, #3]
    f3fa:	88c8      	ldrh	r0, [r1, #6]
    f3fc:	0a00      	lsrs	r0, r0, #8
    f3fe:	7120      	strb	r0, [r4, #4]
    f400:	2003      	movs	r0, #3
    f402:	e054      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f404:	7022      	strb	r2, [r4, #0]
    f406:	2007      	movs	r0, #7
    f408:	e077      	b.n	f4fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    f40a:	7022      	strb	r2, [r4, #0]
    f40c:	70a6      	strb	r6, [r4, #2]
    f40e:	7908      	ldrb	r0, [r1, #4]
    f410:	70e0      	strb	r0, [r4, #3]
    f412:	7988      	ldrb	r0, [r1, #6]
    f414:	7120      	strb	r0, [r4, #4]
    f416:	88c8      	ldrh	r0, [r1, #6]
    f418:	0a00      	lsrs	r0, r0, #8
    f41a:	7160      	strb	r0, [r4, #5]
    f41c:	7a08      	ldrb	r0, [r1, #8]
    f41e:	71a0      	strb	r0, [r4, #6]
    f420:	7a48      	ldrb	r0, [r1, #9]
    f422:	e05a      	b.n	f4da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    f424:	4620      	mov	r0, r4
    f426:	1d09      	adds	r1, r1, #4
    f428:	f7f4 ff06 	bl	4238 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    f42c:	e03d      	b.n	f4aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f42e:	2057      	movs	r0, #87	; 0x57
    f430:	7020      	strb	r0, [r4, #0]
    f432:	7908      	ldrb	r0, [r1, #4]
    f434:	70a0      	strb	r0, [r4, #2]
    f436:	8888      	ldrh	r0, [r1, #4]
    f438:	0a00      	lsrs	r0, r0, #8
    f43a:	70e0      	strb	r0, [r4, #3]
    f43c:	2002      	movs	r0, #2
    f43e:	e036      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f440:	7022      	strb	r2, [r4, #0]
    f442:	220d      	movs	r2, #13
    f444:	70a2      	strb	r2, [r4, #2]
    f446:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f44a:	70e2      	strb	r2, [r4, #3]
    f44c:	894a      	ldrh	r2, [r1, #10]
    f44e:	80a2      	strh	r2, [r4, #4]
    f450:	784a      	ldrb	r2, [r1, #1]
    f452:	71a2      	strb	r2, [r4, #6]
    f454:	f8d1 2002 	ldr.w	r2, [r1, #2]
    f458:	f8c4 2007 	str.w	r2, [r4, #7]
    f45c:	88ca      	ldrh	r2, [r1, #6]
    f45e:	f8a4 200b 	strh.w	r2, [r4, #11]
    f462:	7b0a      	ldrb	r2, [r1, #12]
    f464:	4620      	mov	r0, r4
    f466:	7362      	strb	r2, [r4, #13]
    f468:	7b4a      	ldrb	r2, [r1, #13]
    f46a:	7382      	strb	r2, [r0, #14]
    f46c:	7b8a      	ldrb	r2, [r1, #14]
    f46e:	73c2      	strb	r2, [r0, #15]
    f470:	7eca      	ldrb	r2, [r1, #27]
    f472:	7402      	strb	r2, [r0, #16]
    f474:	7a4a      	ldrb	r2, [r1, #9]
    f476:	7442      	strb	r2, [r0, #17]
    f478:	8a4a      	ldrh	r2, [r1, #18]
    f47a:	8242      	strh	r2, [r0, #18]
    f47c:	7d0a      	ldrb	r2, [r1, #20]
    f47e:	7502      	strb	r2, [r0, #20]
    f480:	f8d1 2015 	ldr.w	r2, [r1, #21]
    f484:	f8c0 2015 	str.w	r2, [r0, #21]
    f488:	f8b1 2019 	ldrh.w	r2, [r1, #25]
    f48c:	f8a0 2019 	strh.w	r2, [r0, #25]
    f490:	7a0a      	ldrb	r2, [r1, #8]
    f492:	76c2      	strb	r2, [r0, #27]
    f494:	7a0d      	ldrb	r5, [r1, #8]
    f496:	2de5      	cmp	r5, #229	; 0xe5
    f498:	d300      	bcc.n	f49c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    f49a:	25e5      	movs	r5, #229	; 0xe5
    f49c:	462a      	mov	r2, r5
    f49e:	301c      	adds	r0, #28
    f4a0:	311d      	adds	r1, #29
    f4a2:	f7f4 fc69 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f4a6:	351a      	adds	r5, #26
    f4a8:	b2e8      	uxtb	r0, r5
    f4aa:	2800      	cmp	r0, #0
    f4ac:	d002      	beq.n	f4b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f4ae:	7060      	strb	r0, [r4, #1]
    f4b0:	1c80      	adds	r0, r0, #2
    f4b2:	b2c0      	uxtb	r0, r0
    f4b4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f4b8:	7022      	strb	r2, [r4, #0]
    f4ba:	f884 9002 	strb.w	r9, [r4, #2]
    f4be:	2001      	movs	r0, #1
    f4c0:	e7f5      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4c2:	7022      	strb	r2, [r4, #0]
    f4c4:	70a5      	strb	r5, [r4, #2]
    f4c6:	7908      	ldrb	r0, [r1, #4]
    f4c8:	70e0      	strb	r0, [r4, #3]
    f4ca:	7948      	ldrb	r0, [r1, #5]
    f4cc:	7120      	strb	r0, [r4, #4]
    f4ce:	7988      	ldrb	r0, [r1, #6]
    f4d0:	7160      	strb	r0, [r4, #5]
    f4d2:	88c8      	ldrh	r0, [r1, #6]
    f4d4:	0a00      	lsrs	r0, r0, #8
    f4d6:	71a0      	strb	r0, [r4, #6]
    f4d8:	7a08      	ldrb	r0, [r1, #8]
    f4da:	71e0      	strb	r0, [r4, #7]
    f4dc:	2006      	movs	r0, #6
    f4de:	e7e6      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4e0:	7023      	strb	r3, [r4, #0]
    f4e2:	20a1      	movs	r0, #161	; 0xa1
    f4e4:	70a0      	strb	r0, [r4, #2]
    f4e6:	7908      	ldrb	r0, [r1, #4]
    f4e8:	70e0      	strb	r0, [r4, #3]
    f4ea:	7948      	ldrb	r0, [r1, #5]
    f4ec:	7120      	strb	r0, [r4, #4]
    f4ee:	2000      	movs	r0, #0
    f4f0:	7160      	strb	r0, [r4, #5]
    f4f2:	2004      	movs	r0, #4
    f4f4:	e7db      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4f6:	7023      	strb	r3, [r4, #0]
    f4f8:	20a2      	movs	r0, #162	; 0xa2
    f4fa:	70a0      	strb	r0, [r4, #2]
    f4fc:	7908      	ldrb	r0, [r1, #4]
    f4fe:	70e0      	strb	r0, [r4, #3]
    f500:	8888      	ldrh	r0, [r1, #4]
    f502:	0a00      	lsrs	r0, r0, #8
    f504:	7120      	strb	r0, [r4, #4]
    f506:	7988      	ldrb	r0, [r1, #6]
    f508:	7160      	strb	r0, [r4, #5]
    f50a:	88c8      	ldrh	r0, [r1, #6]
    f50c:	0a00      	lsrs	r0, r0, #8
    f50e:	71a0      	strb	r0, [r4, #6]
    f510:	7a08      	ldrb	r0, [r1, #8]
    f512:	71e0      	strb	r0, [r4, #7]
    f514:	8908      	ldrh	r0, [r1, #8]
    f516:	0a00      	lsrs	r0, r0, #8
    f518:	7220      	strb	r0, [r4, #8]
    f51a:	7a88      	ldrb	r0, [r1, #10]
    f51c:	7260      	strb	r0, [r4, #9]
    f51e:	8948      	ldrh	r0, [r1, #10]
    f520:	0a00      	lsrs	r0, r0, #8
    f522:	72a0      	strb	r0, [r4, #10]
    f524:	7b08      	ldrb	r0, [r1, #12]
    f526:	72e0      	strb	r0, [r4, #11]
    f528:	8988      	ldrh	r0, [r1, #12]
    f52a:	0a00      	lsrs	r0, r0, #8
    f52c:	7320      	strb	r0, [r4, #12]
    f52e:	200b      	movs	r0, #11
    f530:	e7bd      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f532:	7023      	strb	r3, [r4, #0]
    f534:	20a3      	movs	r0, #163	; 0xa3
    f536:	70a0      	strb	r0, [r4, #2]
    f538:	7908      	ldrb	r0, [r1, #4]
    f53a:	70e0      	strb	r0, [r4, #3]
    f53c:	8888      	ldrh	r0, [r1, #4]
    f53e:	0a00      	lsrs	r0, r0, #8
    f540:	7120      	strb	r0, [r4, #4]
    f542:	7988      	ldrb	r0, [r1, #6]
    f544:	7160      	strb	r0, [r4, #5]
    f546:	79c8      	ldrb	r0, [r1, #7]
    f548:	71a0      	strb	r0, [r4, #6]
    f54a:	2005      	movs	r0, #5
    f54c:	e7af      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f54e:	7022      	strb	r2, [r4, #0]
    f550:	f884 e002 	strb.w	lr, [r4, #2]
    f554:	7908      	ldrb	r0, [r1, #4]
    f556:	70e0      	strb	r0, [r4, #3]
    f558:	7948      	ldrb	r0, [r1, #5]
    f55a:	7120      	strb	r0, [r4, #4]
    f55c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f560:	f8c4 0005 	str.w	r0, [r4, #5]
    f564:	8948      	ldrh	r0, [r1, #10]
    f566:	f8a4 0009 	strh.w	r0, [r4, #9]
    f56a:	e020      	b.n	f5ae <__kernel_ram_size+0xa6>
    f56c:	7023      	strb	r3, [r4, #0]
    f56e:	20a4      	movs	r0, #164	; 0xa4
    f570:	70a0      	strb	r0, [r4, #2]
    f572:	7908      	ldrb	r0, [r1, #4]
    f574:	70e0      	strb	r0, [r4, #3]
    f576:	8888      	ldrh	r0, [r1, #4]
    f578:	0a00      	lsrs	r0, r0, #8
    f57a:	7120      	strb	r0, [r4, #4]
    f57c:	7988      	ldrb	r0, [r1, #6]
    f57e:	7160      	strb	r0, [r4, #5]
    f580:	79c8      	ldrb	r0, [r1, #7]
    f582:	71a0      	strb	r0, [r4, #6]
    f584:	2007      	movs	r0, #7
    f586:	e792      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f588:	7023      	strb	r3, [r4, #0]
    f58a:	2080      	movs	r0, #128	; 0x80
    f58c:	70a0      	strb	r0, [r4, #2]
    f58e:	888a      	ldrh	r2, [r1, #4]
    f590:	f8a4 2003 	strh.w	r2, [r4, #3]
    f594:	88ca      	ldrh	r2, [r1, #6]
    f596:	f8a4 2005 	strh.w	r2, [r4, #5]
    f59a:	7a0a      	ldrb	r2, [r1, #8]
    f59c:	71e2      	strb	r2, [r4, #7]
    f59e:	7a4a      	ldrb	r2, [r1, #9]
    f5a0:	8122      	strh	r2, [r4, #8]
    f5a2:	7a8a      	ldrb	r2, [r1, #10]
    f5a4:	72a2      	strb	r2, [r4, #10]
    f5a6:	7ac9      	ldrb	r1, [r1, #11]
    f5a8:	f001 0101 	and.w	r1, r1, #1
    f5ac:	72e1      	strb	r1, [r4, #11]
    f5ae:	200a      	movs	r0, #10
    f5b0:	e77d      	b.n	f4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

0000f5b2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    f5b2:	223e      	movs	r2, #62	; 0x3e
    f5b4:	7002      	strb	r2, [r0, #0]
    f5b6:	2201      	movs	r2, #1
    f5b8:	7082      	strb	r2, [r0, #2]
    f5ba:	790a      	ldrb	r2, [r1, #4]
    f5bc:	70c2      	strb	r2, [r0, #3]
    f5be:	798a      	ldrb	r2, [r1, #6]
    f5c0:	7102      	strb	r2, [r0, #4]
    f5c2:	88ca      	ldrh	r2, [r1, #6]
    f5c4:	0a12      	lsrs	r2, r2, #8
    f5c6:	7142      	strb	r2, [r0, #5]
    f5c8:	7a0a      	ldrb	r2, [r1, #8]
    f5ca:	7182      	strb	r2, [r0, #6]
    f5cc:	7a4a      	ldrb	r2, [r1, #9]
    f5ce:	71c2      	strb	r2, [r0, #7]
    f5d0:	f8d1 200a 	ldr.w	r2, [r1, #10]
    f5d4:	6082      	str	r2, [r0, #8]
    f5d6:	89ca      	ldrh	r2, [r1, #14]
    f5d8:	8182      	strh	r2, [r0, #12]
    f5da:	7c0a      	ldrb	r2, [r1, #16]
    f5dc:	7382      	strb	r2, [r0, #14]
    f5de:	8a0a      	ldrh	r2, [r1, #16]
    f5e0:	0a12      	lsrs	r2, r2, #8
    f5e2:	73c2      	strb	r2, [r0, #15]
    f5e4:	7c8a      	ldrb	r2, [r1, #18]
    f5e6:	7402      	strb	r2, [r0, #16]
    f5e8:	8a4a      	ldrh	r2, [r1, #18]
    f5ea:	0a12      	lsrs	r2, r2, #8
    f5ec:	7442      	strb	r2, [r0, #17]
    f5ee:	7d0a      	ldrb	r2, [r1, #20]
    f5f0:	7482      	strb	r2, [r0, #18]
    f5f2:	8a8a      	ldrh	r2, [r1, #20]
    f5f4:	0a12      	lsrs	r2, r2, #8
    f5f6:	74c2      	strb	r2, [r0, #19]
    f5f8:	7d89      	ldrb	r1, [r1, #22]
    f5fa:	7501      	strb	r1, [r0, #20]
    f5fc:	2013      	movs	r0, #19
    f5fe:	4770      	bx	lr

0000f600 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    f600:	223e      	movs	r2, #62	; 0x3e
    f602:	7002      	strb	r2, [r0, #0]
    f604:	2201      	movs	r2, #1
    f606:	7082      	strb	r2, [r0, #2]
    f608:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f60c:	70c2      	strb	r2, [r0, #3]
    f60e:	788a      	ldrb	r2, [r1, #2]
    f610:	7102      	strb	r2, [r0, #4]
    f612:	884a      	ldrh	r2, [r1, #2]
    f614:	0a12      	lsrs	r2, r2, #8
    f616:	7142      	strb	r2, [r0, #5]
    f618:	790a      	ldrb	r2, [r1, #4]
    f61a:	7182      	strb	r2, [r0, #6]
    f61c:	794a      	ldrb	r2, [r1, #5]
    f61e:	71c2      	strb	r2, [r0, #7]
    f620:	f8d1 2006 	ldr.w	r2, [r1, #6]
    f624:	6082      	str	r2, [r0, #8]
    f626:	894a      	ldrh	r2, [r1, #10]
    f628:	8182      	strh	r2, [r0, #12]
    f62a:	7e0a      	ldrb	r2, [r1, #24]
    f62c:	7382      	strb	r2, [r0, #14]
    f62e:	8b0a      	ldrh	r2, [r1, #24]
    f630:	0a12      	lsrs	r2, r2, #8
    f632:	73c2      	strb	r2, [r0, #15]
    f634:	7e8a      	ldrb	r2, [r1, #26]
    f636:	7402      	strb	r2, [r0, #16]
    f638:	8b4a      	ldrh	r2, [r1, #26]
    f63a:	0a12      	lsrs	r2, r2, #8
    f63c:	7442      	strb	r2, [r0, #17]
    f63e:	7f0a      	ldrb	r2, [r1, #28]
    f640:	7482      	strb	r2, [r0, #18]
    f642:	8b8a      	ldrh	r2, [r1, #28]
    f644:	0a12      	lsrs	r2, r2, #8
    f646:	74c2      	strb	r2, [r0, #19]
    f648:	7f89      	ldrb	r1, [r1, #30]
    f64a:	7501      	strb	r1, [r0, #20]
    f64c:	2113      	movs	r1, #19
    f64e:	7041      	strb	r1, [r0, #1]
    f650:	4608      	mov	r0, r1
    f652:	4770      	bx	lr

0000f654 <sdc_hci_data_get>:
    f654:	b510      	push	{r4, lr}
    f656:	b120      	cbz	r0, f662 <sdc_hci_data_get+0xe>
    f658:	f7ff fd34 	bl	f0c4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    f65c:	b120      	cbz	r0, f668 <sdc_hci_data_get+0x14>
    f65e:	2000      	movs	r0, #0
    f660:	bd10      	pop	{r4, pc}
    f662:	f06f 0015 	mvn.w	r0, #21
    f666:	bd10      	pop	{r4, pc}
    f668:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f66c:	bd10      	pop	{r4, pc}

0000f66e <sdc_hci_data_put>:
    f66e:	b510      	push	{r4, lr}
    f670:	f06f 0415 	mvn.w	r4, #21
    f674:	b120      	cbz	r0, f680 <sdc_hci_data_put+0x12>
    f676:	f7ff fd33 	bl	f0e0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    f67a:	b108      	cbz	r0, f680 <sdc_hci_data_put+0x12>
    f67c:	2000      	movs	r0, #0
    f67e:	bd10      	pop	{r4, pc}
    f680:	4620      	mov	r0, r4
    f682:	bd10      	pop	{r4, pc}

0000f684 <sdc_hci_evt_get>:
    f684:	b510      	push	{r4, lr}
    f686:	b120      	cbz	r0, f692 <sdc_hci_evt_get+0xe>
    f688:	f7f4 fd80 	bl	418c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    f68c:	b120      	cbz	r0, f698 <sdc_hci_evt_get+0x14>
    f68e:	2000      	movs	r0, #0
    f690:	bd10      	pop	{r4, pc}
    f692:	f06f 0015 	mvn.w	r0, #21
    f696:	bd10      	pop	{r4, pc}
    f698:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f69c:	bd10      	pop	{r4, pc}

0000f69e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    f69e:	f002 b9ed 	b.w	11a7c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000f6a2 <sdc_hci_cmd_cb_read_transmit_power_level>:
    f6a2:	f002 ba3e 	b.w	11b22 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000f6a6 <sdc_hci_cmd_cb_set_event_mask>:
    f6a6:	b510      	push	{r4, lr}
    f6a8:	f7f4 fe24 	bl	42f4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    f6ac:	2000      	movs	r0, #0
    f6ae:	bd10      	pop	{r4, pc}

0000f6b0 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    f6b0:	b510      	push	{r4, lr}
    f6b2:	f7f4 fe2d 	bl	4310 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd10      	pop	{r4, pc}

0000f6ba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    f6ba:	f002 ba4d 	b.w	11b58 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000f6be <sdc_hci_cmd_vs_conn_event_extend>:
    f6be:	b508      	push	{r3, lr}
    f6c0:	7800      	ldrb	r0, [r0, #0]
    f6c2:	f88d 0000 	strb.w	r0, [sp]
    f6c6:	4668      	mov	r0, sp
    f6c8:	f002 f9a4 	bl	11a14 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    f6cc:	bd08      	pop	{r3, pc}

0000f6ce <sdc_hci_cmd_vs_conn_update>:
    f6ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f6d0:	2100      	movs	r1, #0
    f6d2:	9100      	str	r1, [sp, #0]
    f6d4:	9101      	str	r1, [sp, #4]
    f6d6:	9102      	str	r1, [sp, #8]
    f6d8:	9103      	str	r1, [sp, #12]
    f6da:	f8d0 1002 	ldr.w	r1, [r0, #2]
    f6de:	f641 524c 	movw	r2, #7500	; 0x1d4c
    f6e2:	4291      	cmp	r1, r2
    f6e4:	d304      	bcc.n	f6f0 <sdc_hci_cmd_vs_conn_update+0x22>
    f6e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f6ea:	fbb1 f1f2 	udiv	r1, r1, r2
    f6ee:	e005      	b.n	f6fc <sdc_hci_cmd_vs_conn_update+0x2e>
    f6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f6f4:	fbb1 f1f2 	udiv	r1, r1, r2
    f6f8:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    f6fc:	8802      	ldrh	r2, [r0, #0]
    f6fe:	b289      	uxth	r1, r1
    f700:	f8ad 2000 	strh.w	r2, [sp]
    f704:	f8ad 1002 	strh.w	r1, [sp, #2]
    f708:	f8ad 1004 	strh.w	r1, [sp, #4]
    f70c:	88c1      	ldrh	r1, [r0, #6]
    f70e:	f8ad 1006 	strh.w	r1, [sp, #6]
    f712:	8900      	ldrh	r0, [r0, #8]
    f714:	f8ad 0008 	strh.w	r0, [sp, #8]
    f718:	4668      	mov	r0, sp
    f71a:	f001 ff51 	bl	115c0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    f71e:	b004      	add	sp, #16
    f720:	bd10      	pop	{r4, pc}

0000f722 <sdc_hci_cmd_vs_event_length_set>:
    f722:	f7fd ba05 	b.w	cb30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000f726 <sdc_hci_cmd_vs_llpm_mode_set>:
    f726:	b508      	push	{r3, lr}
    f728:	7800      	ldrb	r0, [r0, #0]
    f72a:	f88d 0000 	strb.w	r0, [sp]
    f72e:	4668      	mov	r0, sp
    f730:	f7fd fa5e 	bl	cbf0 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    f734:	bd08      	pop	{r3, pc}

0000f736 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    f736:	7800      	ldrb	r0, [r0, #0]
    f738:	b100      	cbz	r0, f73c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    f73a:	2001      	movs	r0, #1
    f73c:	f002 b904 	b.w	11948 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000f740 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    f740:	b510      	push	{r4, lr}
    f742:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f746:	4604      	mov	r4, r0
    f748:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f74c:	1c40      	adds	r0, r0, #1
    f74e:	d105      	bne.n	f75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    f750:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f754:	43c0      	mvns	r0, r0
    f756:	0400      	lsls	r0, r0, #16
    f758:	0c00      	lsrs	r0, r0, #16
    f75a:	d036      	beq.n	f7ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f75c:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
    f760:	07c0      	lsls	r0, r0, #31
    f762:	d032      	beq.n	f7ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f764:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f768:	f8c4 0001 	str.w	r0, [r4, #1]
    f76c:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f770:	f8a4 0005 	strh.w	r0, [r4, #5]
    f774:	79a0      	ldrb	r0, [r4, #6]
    f776:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    f77a:	71a0      	strb	r0, [r4, #6]
    f77c:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    f780:	1c40      	adds	r0, r0, #1
    f782:	d019      	beq.n	f7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f784:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    f788:	1c40      	adds	r0, r0, #1
    f78a:	d015      	beq.n	f7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f78c:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    f790:	1c40      	adds	r0, r0, #1
    f792:	d011      	beq.n	f7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f794:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    f798:	1c40      	adds	r0, r0, #1
    f79a:	d00d      	beq.n	f7b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f79c:	f851 0f90 	ldr.w	r0, [r1, #144]!
    f7a0:	f8c4 0007 	str.w	r0, [r4, #7]
    f7a4:	6848      	ldr	r0, [r1, #4]
    f7a6:	f8c4 000b 	str.w	r0, [r4, #11]
    f7aa:	6888      	ldr	r0, [r1, #8]
    f7ac:	f8c4 000f 	str.w	r0, [r4, #15]
    f7b0:	68c8      	ldr	r0, [r1, #12]
    f7b2:	f8c4 0013 	str.w	r0, [r4, #19]
    f7b6:	e004      	b.n	f7c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
    f7b8:	2210      	movs	r2, #16
    f7ba:	2100      	movs	r1, #0
    f7bc:	1de0      	adds	r0, r4, #7
    f7be:	f7ff fbb7 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7c2:	2001      	movs	r0, #1
    f7c4:	7020      	strb	r0, [r4, #0]
    f7c6:	2000      	movs	r0, #0
    f7c8:	bd10      	pop	{r4, pc}
    f7ca:	2000      	movs	r0, #0
    f7cc:	e7fa      	b.n	f7c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

0000f7ce <sdc_hci_cmd_vs_zephyr_read_supported_commands>:
    f7ce:	b510      	push	{r4, lr}
    f7d0:	4604      	mov	r4, r0
    f7d2:	2240      	movs	r2, #64	; 0x40
    f7d4:	2100      	movs	r1, #0
    f7d6:	f7ff fbab 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7da:	7861      	ldrb	r1, [r4, #1]
    f7dc:	7820      	ldrb	r0, [r4, #0]
    f7de:	f041 0121 	orr.w	r1, r1, #33	; 0x21
    f7e2:	7061      	strb	r1, [r4, #1]
    f7e4:	f040 0023 	orr.w	r0, r0, #35	; 0x23
    f7e8:	7020      	strb	r0, [r4, #0]
    f7ea:	2000      	movs	r0, #0
    f7ec:	bd10      	pop	{r4, pc}

0000f7ee <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    f7ee:	f002 b8f1 	b.w	119d4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000f7f2 <sdc_hci_cmd_ip_read_bd_addr>:
    f7f2:	f002 b954 	b.w	11a9e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000f7f6 <sdc_hci_cmd_ip_read_local_supported_features>:
    f7f6:	f002 b95e 	b.w	11ab6 <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>

0000f7fa <sdc_hci_cmd_ip_read_local_version_information>:
    f7fa:	f7fd ba0d 	b.w	cc18 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000f7fe <sdc_hci_cmd_le_add_device_to_resolving_list>:
    f7fe:	f001 be90 	b.w	11522 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000f802 <sdc_hci_cmd_le_add_device_to_white_list>:
    f802:	f001 bea9 	b.w	11558 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000f806 <sdc_hci_cmd_le_clear_resolving_list>:
    f806:	f001 bec4 	b.w	11592 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000f80a <sdc_hci_cmd_le_clear_white_list>:
    f80a:	f001 becf 	b.w	115ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000f80e <sdc_hci_cmd_le_encrypt>:
    f80e:	f001 bf34 	b.w	1167a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000f812 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    f812:	8802      	ldrh	r2, [r0, #0]
    f814:	800a      	strh	r2, [r1, #0]
    f816:	f001 bf39 	b.w	1168c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000f81a <sdc_hci_cmd_le_long_term_key_request_reply>:
    f81a:	8802      	ldrh	r2, [r0, #0]
    f81c:	800a      	strh	r2, [r1, #0]
    f81e:	f001 bf4e 	b.w	116be <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000f822 <sdc_hci_cmd_le_rand>:
    f822:	f001 bf70 	b.w	11706 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000f826 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    f826:	f7fc bfc1 	b.w	c7ac <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000f82a <sdc_hci_cmd_le_read_buffer_size>:
    f82a:	f7fc bfcd 	b.w	c7c8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000f82e <sdc_hci_cmd_le_read_channel_map>:
    f82e:	f001 bf70 	b.w	11712 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000f832 <sdc_hci_cmd_le_read_local_supported_features>:
    f832:	f001 bf8f 	b.w	11754 <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>

0000f836 <sdc_hci_cmd_le_read_max_data_length>:
    f836:	f001 bf9b 	b.w	11770 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000f83a <sdc_hci_cmd_le_read_phy>:
    f83a:	f7fc bfd1 	b.w	c7e0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000f83e <sdc_hci_cmd_le_read_remote_features>:
    f83e:	f7fc bff7 	b.w	c830 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000f842 <sdc_hci_cmd_le_read_resolving_list_size>:
    f842:	f001 bfa5 	b.w	11790 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000f846 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    f846:	f7fd b823 	b.w	c890 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000f84a <sdc_hci_cmd_le_read_transmit_power>:
    f84a:	f001 bfa5 	b.w	11798 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000f84e <sdc_hci_cmd_le_read_white_list_size>:
    f84e:	f001 bfa9 	b.w	117a4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000f852 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    f852:	f001 bfab 	b.w	117ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000f856 <sdc_hci_cmd_le_remove_device_from_white_list>:
    f856:	f001 bfc2 	b.w	117de <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000f85a <sdc_hci_cmd_le_set_address_resolution_enable>:
    f85a:	f001 bfdc 	b.w	11816 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000f85e <sdc_hci_cmd_le_set_adv_data>:
    f85e:	f7fd b827 	b.w	c8b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000f862 <sdc_hci_cmd_le_set_adv_enable>:
    f862:	f7fd b855 	b.w	c910 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000f866 <sdc_hci_cmd_le_set_adv_params>:
    f866:	f7fd b871 	b.w	c94c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000f86a <sdc_hci_cmd_le_set_data_length>:
    f86a:	f001 bfe2 	b.w	11832 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000f86e <sdc_hci_cmd_le_set_default_phy>:
    f86e:	f7fd b8e3 	b.w	ca38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000f872 <sdc_hci_cmd_le_set_event_mask>:
    f872:	b510      	push	{r4, lr}
    f874:	f7f4 fd38 	bl	42e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    f878:	2000      	movs	r0, #0
    f87a:	bd10      	pop	{r4, pc}

0000f87c <sdc_hci_cmd_le_set_phy>:
    f87c:	f002 b800 	b.w	11880 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000f880 <sdc_hci_cmd_le_set_privacy_mode>:
    f880:	f002 b81e 	b.w	118c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000f884 <sdc_hci_cmd_le_set_random_address>:
    f884:	f002 b832 	b.w	118ec <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000f888 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    f888:	f002 b83e 	b.w	11908 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000f88c <sdc_hci_cmd_le_set_scan_response_data>:
    f88c:	f7fd b906 	b.w	ca9c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000f890 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    f890:	f002 b843 	b.w	1191a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000f894 <sdc_hci_cmd_lc_disconnect>:
    f894:	f001 bde5 	b.w	11462 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000f898 <sdc_hci_cmd_lc_read_remote_version_information>:
    f898:	f002 b914 	b.w	11ac4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    f89c:	b530      	push	{r4, r5, lr}
    f89e:	8804      	ldrh	r4, [r0, #0]
    f8a0:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
    f8a4:	4429      	add	r1, r5
    f8a6:	b289      	uxth	r1, r1
    f8a8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f8ac:	4291      	cmp	r1, r2
    f8ae:	d20b      	bcs.n	f8c8 <sdc_hci_cmd_lc_read_remote_version_information+0x30>
    f8b0:	1a52      	subs	r2, r2, r1
    f8b2:	b292      	uxth	r2, r2
    f8b4:	331b      	adds	r3, #27
    f8b6:	429a      	cmp	r2, r3
    f8b8:	d201      	bcs.n	f8be <sdc_hci_cmd_lc_read_remote_version_information+0x26>
    f8ba:	43a5      	bics	r5, r4
    f8bc:	e002      	b.n	f8c4 <sdc_hci_cmd_lc_read_remote_version_information+0x2c>
    f8be:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
    f8c2:	430d      	orrs	r5, r1
    f8c4:	8005      	strh	r5, [r0, #0]
    f8c6:	bd30      	pop	{r4, r5, pc}
    f8c8:	1a89      	subs	r1, r1, r2
    f8ca:	b289      	uxth	r1, r1
    f8cc:	43a5      	bics	r5, r4
    f8ce:	e7f8      	b.n	f8c2 <sdc_hci_cmd_lc_read_remote_version_information+0x2a>
    f8d0:	b510      	push	{r4, lr}
    f8d2:	8802      	ldrh	r2, [r0, #0]
    f8d4:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    f8d8:	428b      	cmp	r3, r1
    f8da:	d203      	bcs.n	f8e4 <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
    f8dc:	21b6      	movs	r1, #182	; 0xb6
    f8de:	2014      	movs	r0, #20
    f8e0:	f7f4 fbd4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f8e8:	4393      	bics	r3, r2
    f8ea:	430b      	orrs	r3, r1
    f8ec:	8003      	strh	r3, [r0, #0]
    f8ee:	bd10      	pop	{r4, pc}
    f8f0:	4288      	cmp	r0, r1
    f8f2:	d101      	bne.n	f8f8 <sdc_hci_cmd_lc_read_remote_version_information+0x60>
    f8f4:	2001      	movs	r0, #1
    f8f6:	4770      	bx	lr
    f8f8:	2000      	movs	r0, #0
    f8fa:	4770      	bx	lr
    f8fc:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f900:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    f904:	429a      	cmp	r2, r3
    f906:	d107      	bne.n	f918 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f908:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    f90c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    f910:	4288      	cmp	r0, r1
    f912:	d001      	beq.n	f918 <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f914:	2001      	movs	r0, #1
    f916:	4770      	bx	lr
    f918:	2000      	movs	r0, #0
    f91a:	4770      	bx	lr

0000f91c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f920:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f924:	7f40      	ldrb	r0, [r0, #29]
    f926:	461d      	mov	r5, r3
    f928:	3008      	adds	r0, #8
    f92a:	4690      	mov	r8, r2
    f92c:	1843      	adds	r3, r0, r1
    f92e:	2400      	movs	r4, #0
    f930:	8808      	ldrh	r0, [r1, #0]
    f932:	884f      	ldrh	r7, [r1, #2]
    f934:	9a06      	ldr	r2, [sp, #24]
    f936:	1edb      	subs	r3, r3, #3
    f938:	b190      	cbz	r0, f960 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
    f93a:	1cc0      	adds	r0, r0, #3
    f93c:	b280      	uxth	r0, r0
    f93e:	4290      	cmp	r0, r2
    f940:	d912      	bls.n	f968 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
    f942:	1a80      	subs	r0, r0, r2
    f944:	42a8      	cmp	r0, r5
    f946:	db00      	blt.n	f94a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
    f948:	4628      	mov	r0, r5
    f94a:	b284      	uxth	r4, r0
    f94c:	1899      	adds	r1, r3, r2
    f94e:	4622      	mov	r2, r4
    f950:	4640      	mov	r0, r8
    f952:	f7f4 fa11 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f956:	1b28      	subs	r0, r5, r4
    f958:	b285      	uxth	r5, r0
    f95a:	44a0      	add	r8, r4
    f95c:	2000      	movs	r0, #0
    f95e:	e005      	b.n	f96c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
    f960:	1cff      	adds	r7, r7, #3
    f962:	b2bf      	uxth	r7, r7
    f964:	1ef6      	subs	r6, r6, #3
    f966:	e7ea      	b.n	f93e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
    f968:	1a10      	subs	r0, r2, r0
    f96a:	b280      	uxth	r0, r0
    f96c:	1941      	adds	r1, r0, r5
    f96e:	42b9      	cmp	r1, r7
    f970:	d806      	bhi.n	f980 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
    f972:	1831      	adds	r1, r6, r0
    f974:	462a      	mov	r2, r5
    f976:	4640      	mov	r0, r8
    f978:	f7f4 f9fe 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f97c:	1960      	adds	r0, r4, r5
    f97e:	b284      	uxth	r4, r0
    f980:	4620      	mov	r0, r4
    f982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f986 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    f986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f98a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f98e:	7f40      	ldrb	r0, [r0, #29]
    f990:	461d      	mov	r5, r3
    f992:	3008      	adds	r0, #8
    f994:	4690      	mov	r8, r2
    f996:	1843      	adds	r3, r0, r1
    f998:	2400      	movs	r4, #0
    f99a:	8808      	ldrh	r0, [r1, #0]
    f99c:	884f      	ldrh	r7, [r1, #2]
    f99e:	9a06      	ldr	r2, [sp, #24]
    f9a0:	1edb      	subs	r3, r3, #3
    f9a2:	b190      	cbz	r0, f9ca <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
    f9a4:	1cc0      	adds	r0, r0, #3
    f9a6:	b280      	uxth	r0, r0
    f9a8:	4290      	cmp	r0, r2
    f9aa:	d912      	bls.n	f9d2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
    f9ac:	1a80      	subs	r0, r0, r2
    f9ae:	42a8      	cmp	r0, r5
    f9b0:	db00      	blt.n	f9b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
    f9b2:	4628      	mov	r0, r5
    f9b4:	b284      	uxth	r4, r0
    f9b6:	1898      	adds	r0, r3, r2
    f9b8:	4622      	mov	r2, r4
    f9ba:	4641      	mov	r1, r8
    f9bc:	f7f4 f9dc 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f9c0:	1b28      	subs	r0, r5, r4
    f9c2:	b285      	uxth	r5, r0
    f9c4:	44a0      	add	r8, r4
    f9c6:	2000      	movs	r0, #0
    f9c8:	e005      	b.n	f9d6 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
    f9ca:	1cff      	adds	r7, r7, #3
    f9cc:	b2bf      	uxth	r7, r7
    f9ce:	1ef6      	subs	r6, r6, #3
    f9d0:	e7ea      	b.n	f9a8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
    f9d2:	1a10      	subs	r0, r2, r0
    f9d4:	b280      	uxth	r0, r0
    f9d6:	1941      	adds	r1, r0, r5
    f9d8:	42b9      	cmp	r1, r7
    f9da:	d806      	bhi.n	f9ea <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
    f9dc:	4430      	add	r0, r6
    f9de:	462a      	mov	r2, r5
    f9e0:	4641      	mov	r1, r8
    f9e2:	f7f4 f9c9 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f9e6:	1960      	adds	r0, r4, r5
    f9e8:	b284      	uxth	r4, r0
    f9ea:	4620      	mov	r0, r4
    f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f9f0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    f9f0:	88c1      	ldrh	r1, [r0, #6]
    f9f2:	8880      	ldrh	r0, [r0, #4]
    f9f4:	f7ff bf7c 	b.w	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f9f8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    f9f8:	8881      	ldrh	r1, [r0, #4]
    f9fa:	8900      	ldrh	r0, [r0, #8]
    f9fc:	f7ff bf78 	b.w	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000fa00 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    fa00:	b570      	push	{r4, r5, r6, lr}
    fa02:	4604      	mov	r4, r0
    fa04:	f100 0128 	add.w	r1, r0, #40	; 0x28
    fa08:	8880      	ldrh	r0, [r0, #4]
    fa0a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    fa0e:	1842      	adds	r2, r0, r1
    fa10:	8a20      	ldrh	r0, [r4, #16]
    fa12:	2800      	cmp	r0, #0
    fa14:	d027      	beq.n	fa66 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
    fa16:	89a1      	ldrh	r1, [r4, #12]
    fa18:	2500      	movs	r5, #0
    fa1a:	4408      	add	r0, r1
    fa1c:	b280      	uxth	r0, r0
    fa1e:	81a0      	strh	r0, [r4, #12]
    fa20:	8811      	ldrh	r1, [r2, #0]
    fa22:	8853      	ldrh	r3, [r2, #2]
    fa24:	4419      	add	r1, r3
    fa26:	4281      	cmp	r1, r0
    fa28:	d205      	bcs.n	fa36 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    fa2a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    fa2e:	f04f 0014 	mov.w	r0, #20
    fa32:	f7f4 fb2b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa36:	d114      	bne.n	fa62 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
    fa38:	69a0      	ldr	r0, [r4, #24]
    fa3a:	b108      	cbz	r0, fa40 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    fa3c:	7f80      	ldrb	r0, [r0, #30]
    fa3e:	7110      	strb	r0, [r2, #4]
    fa40:	8851      	ldrh	r1, [r2, #2]
    fa42:	b121      	cbz	r1, fa4e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
    fa44:	f104 0004 	add.w	r0, r4, #4
    fa48:	f7ff ff42 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fa4c:	e008      	b.n	fa60 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
    fa4e:	7f63      	ldrb	r3, [r4, #29]
    fa50:	8810      	ldrh	r0, [r2, #0]
    fa52:	3308      	adds	r3, #8
    fa54:	4418      	add	r0, r3
    fa56:	b281      	uxth	r1, r0
    fa58:	8862      	ldrh	r2, [r4, #2]
    fa5a:	1d20      	adds	r0, r4, #4
    fa5c:	f7ff ff1e 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fa60:	81a5      	strh	r5, [r4, #12]
    fa62:	8225      	strh	r5, [r4, #16]
    fa64:	2001      	movs	r0, #1
    fa66:	bd70      	pop	{r4, r5, r6, pc}

0000fa68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa6c:	4604      	mov	r4, r0
    fa6e:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fa72:	88c0      	ldrh	r0, [r0, #6]
    fa74:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fa78:	8a60      	ldrh	r0, [r4, #18]
    fa7a:	19dd      	adds	r5, r3, r7
    fa7c:	b108      	cbz	r0, fa82 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    fa7e:	4288      	cmp	r0, r1
    fa80:	d202      	bcs.n	fa88 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
    fa82:	2000      	movs	r0, #0
    fa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa88:	89e6      	ldrh	r6, [r4, #14]
    fa8a:	b15e      	cbz	r6, faa4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
    fa8c:	8828      	ldrh	r0, [r5, #0]
    fa8e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    fa92:	eb00 080c 	add.w	r8, r0, ip
    fa96:	4546      	cmp	r6, r8
    fa98:	d008      	beq.n	faac <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
    fa9a:	f240 3112 	movw	r1, #786	; 0x312
    fa9e:	2014      	movs	r0, #20
    faa0:	f7f4 faf4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faa4:	2000      	movs	r0, #0
    faa6:	7fa6      	ldrb	r6, [r4, #30]
    faa8:	4684      	mov	ip, r0
    faaa:	712e      	strb	r6, [r5, #4]
    faac:	f894 801c 	ldrb.w	r8, [r4, #28]
    fab0:	f04f 0600 	mov.w	r6, #0
    fab4:	46c1      	mov	r9, r8
    fab6:	ea58 080c 	orrs.w	r8, r8, ip
    faba:	d003      	beq.n	fac4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    fabc:	ea5f 0709 	movs.w	r7, r9
    fac0:	d02d      	beq.n	fb1e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
    fac2:	e037      	b.n	fb34 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
    fac4:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fac8:	f1bc 0f00 	cmp.w	ip, #0
    facc:	d00e      	beq.n	faec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
    face:	f894 801d 	ldrb.w	r8, [r4, #29]
    fad2:	449c      	add	ip, r3
    fad4:	f108 0808 	add.w	r8, r8, #8
    fad8:	44b8      	add	r8, r7
    fada:	44c4      	add	ip, r8
    fadc:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fae0:	f82c 8c03 	strh.w	r8, [ip, #-3]
    fae4:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fae8:	f80c 8c01 	strb.w	r8, [ip, #-1]
    faec:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    faf0:	4408      	add	r0, r1
    faf2:	4461      	add	r1, ip
    faf4:	81e1      	strh	r1, [r4, #14]
    faf6:	8028      	strh	r0, [r5, #0]
    faf8:	806e      	strh	r6, [r5, #2]
    fafa:	b14a      	cbz	r2, fb10 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
    fafc:	7f63      	ldrb	r3, [r4, #29]
    fafe:	8828      	ldrh	r0, [r5, #0]
    fb00:	3308      	adds	r3, #8
    fb02:	4418      	add	r0, r3
    fb04:	b281      	uxth	r1, r0
    fb06:	8862      	ldrh	r2, [r4, #2]
    fb08:	1da0      	adds	r0, r4, #6
    fb0a:	f7ff fec7 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fb0e:	e01f      	b.n	fb50 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
    fb10:	7f60      	ldrb	r0, [r4, #29]
    fb12:	89e1      	ldrh	r1, [r4, #14]
    fb14:	3008      	adds	r0, #8
    fb16:	4438      	add	r0, r7
    fb18:	4419      	add	r1, r3
    fb1a:	4408      	add	r0, r1
    fb1c:	e028      	b.n	fb70 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
    fb1e:	89e7      	ldrh	r7, [r4, #14]
    fb20:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fb24:	441f      	add	r7, r3
    fb26:	1a3f      	subs	r7, r7, r0
    fb28:	f827 8c03 	strh.w	r8, [r7, #-3]
    fb2c:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fb30:	f807 8c01 	strb.w	r8, [r7, #-1]
    fb34:	eb0c 0701 	add.w	r7, ip, r1
    fb38:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fb3c:	b2bf      	uxth	r7, r7
    fb3e:	4461      	add	r1, ip
    fb40:	81e1      	strh	r1, [r4, #14]
    fb42:	8028      	strh	r0, [r5, #0]
    fb44:	806f      	strh	r7, [r5, #2]
    fb46:	b182      	cbz	r2, fb6a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
    fb48:	4639      	mov	r1, r7
    fb4a:	1da0      	adds	r0, r4, #6
    fb4c:	f7ff fec0 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fb50:	81e6      	strh	r6, [r4, #14]
    fb52:	7fa0      	ldrb	r0, [r4, #30]
    fb54:	1c40      	adds	r0, r0, #1
    fb56:	77a0      	strb	r0, [r4, #30]
    fb58:	7da0      	ldrb	r0, [r4, #22]
    fb5a:	b108      	cbz	r0, fb60 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
    fb5c:	88e0      	ldrh	r0, [r4, #6]
    fb5e:	82a0      	strh	r0, [r4, #20]
    fb60:	75a6      	strb	r6, [r4, #22]
    fb62:	8266      	strh	r6, [r4, #18]
    fb64:	75e6      	strb	r6, [r4, #23]
    fb66:	2001      	movs	r0, #1
    fb68:	e78c      	b.n	fa84 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    fb6a:	89e1      	ldrh	r1, [r4, #14]
    fb6c:	4419      	add	r1, r3
    fb6e:	1a08      	subs	r0, r1, r0
    fb70:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    fb74:	f8a4 101f 	strh.w	r1, [r4, #31]
    fb78:	7880      	ldrb	r0, [r0, #2]
    fb7a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    fb7e:	e7f0      	b.n	fb62 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

0000fb80 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    fb80:	b570      	push	{r4, r5, r6, lr}
    fb82:	4604      	mov	r4, r0
    fb84:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fb88:	88c1      	ldrh	r1, [r0, #6]
    fb8a:	8880      	ldrh	r0, [r0, #4]
    fb8c:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fb90:	18d5      	adds	r5, r2, r3
    fb92:	f7ff fead 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fb96:	b938      	cbnz	r0, fba8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fb98:	89a0      	ldrh	r0, [r4, #12]
    fb9a:	b928      	cbnz	r0, fba8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fb9c:	8a20      	ldrh	r0, [r4, #16]
    fb9e:	b918      	cbnz	r0, fba8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fba0:	88a0      	ldrh	r0, [r4, #4]
    fba2:	8aa1      	ldrh	r1, [r4, #20]
    fba4:	4288      	cmp	r0, r1
    fba6:	d101      	bne.n	fbac <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
    fba8:	2000      	movs	r0, #0
    fbaa:	bd70      	pop	{r4, r5, r6, pc}
    fbac:	8828      	ldrh	r0, [r5, #0]
    fbae:	8869      	ldrh	r1, [r5, #2]
    fbb0:	b131      	cbz	r1, fbc0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
    fbb2:	1d20      	adds	r0, r4, #4
    fbb4:	f7ff fe8c 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fbb8:	2000      	movs	r0, #0
    fbba:	8220      	strh	r0, [r4, #16]
    fbbc:	2001      	movs	r0, #1
    fbbe:	bd70      	pop	{r4, r5, r6, pc}
    fbc0:	7f63      	ldrb	r3, [r4, #29]
    fbc2:	8862      	ldrh	r2, [r4, #2]
    fbc4:	3308      	adds	r3, #8
    fbc6:	4418      	add	r0, r3
    fbc8:	b281      	uxth	r1, r0
    fbca:	1d20      	adds	r0, r4, #4
    fbcc:	f7ff fe66 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fbd0:	e7f2      	b.n	fbb8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

0000fbd2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    fbd2:	b570      	push	{r4, r5, r6, lr}
    fbd4:	4604      	mov	r4, r0
    fbd6:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fbda:	88c0      	ldrh	r0, [r0, #6]
    fbdc:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fbe0:	7de0      	ldrb	r0, [r4, #23]
    fbe2:	2800      	cmp	r0, #0
    fbe4:	d006      	beq.n	fbf4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
    fbe6:	18d0      	adds	r0, r2, r3
    fbe8:	8802      	ldrh	r2, [r0, #0]
    fbea:	8843      	ldrh	r3, [r0, #2]
    fbec:	4413      	add	r3, r2
    fbee:	428b      	cmp	r3, r1
    fbf0:	d201      	bcs.n	fbf6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
    fbf2:	2000      	movs	r0, #0
    fbf4:	bd70      	pop	{r4, r5, r6, pc}
    fbf6:	2500      	movs	r5, #0
    fbf8:	428a      	cmp	r2, r1
    fbfa:	d302      	bcc.n	fc02 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
    fbfc:	8001      	strh	r1, [r0, #0]
    fbfe:	8045      	strh	r5, [r0, #2]
    fc00:	e008      	b.n	fc14 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fc02:	1a89      	subs	r1, r1, r2
    fc04:	0409      	lsls	r1, r1, #16
    fc06:	0c09      	lsrs	r1, r1, #16
    fc08:	8041      	strh	r1, [r0, #2]
    fc0a:	d003      	beq.n	fc14 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fc0c:	1da0      	adds	r0, r4, #6
    fc0e:	f7ff fe5f 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fc12:	e008      	b.n	fc26 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
    fc14:	7f63      	ldrb	r3, [r4, #29]
    fc16:	8800      	ldrh	r0, [r0, #0]
    fc18:	3308      	adds	r3, #8
    fc1a:	4418      	add	r0, r3
    fc1c:	b281      	uxth	r1, r0
    fc1e:	8862      	ldrh	r2, [r4, #2]
    fc20:	1da0      	adds	r0, r4, #6
    fc22:	f7ff fe3b 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fc26:	75e5      	strb	r5, [r4, #23]
    fc28:	2001      	movs	r0, #1
    fc2a:	bd70      	pop	{r4, r5, r6, pc}

0000fc2c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    fc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc30:	4604      	mov	r4, r0
    fc32:	f100 0628 	add.w	r6, r0, #40	; 0x28
    fc36:	8947      	ldrh	r7, [r0, #10]
    fc38:	8880      	ldrh	r0, [r0, #4]
    fc3a:	2500      	movs	r5, #0
    fc3c:	4681      	mov	r9, r0
    fc3e:	4601      	mov	r1, r0
    fc40:	4638      	mov	r0, r7
    fc42:	f7ff fe55 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fc46:	b9e0      	cbnz	r0, fc82 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
    fc48:	f104 080a 	add.w	r8, r4, #10
    fc4c:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
    fc50:	4430      	add	r0, r6
    fc52:	8841      	ldrh	r1, [r0, #2]
    fc54:	b119      	cbz	r1, fc5e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
    fc56:	4640      	mov	r0, r8
    fc58:	f7ff fe3a 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fc5c:	e008      	b.n	fc70 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
    fc5e:	7f63      	ldrb	r3, [r4, #29]
    fc60:	8800      	ldrh	r0, [r0, #0]
    fc62:	3308      	adds	r3, #8
    fc64:	4418      	add	r0, r3
    fc66:	b281      	uxth	r1, r0
    fc68:	8862      	ldrh	r2, [r4, #2]
    fc6a:	4640      	mov	r0, r8
    fc6c:	f7ff fe16 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fc70:	8967      	ldrh	r7, [r4, #10]
    fc72:	1c6d      	adds	r5, r5, #1
    fc74:	b2ad      	uxth	r5, r5
    fc76:	4649      	mov	r1, r9
    fc78:	4638      	mov	r0, r7
    fc7a:	f7ff fe39 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fc7e:	2800      	cmp	r0, #0
    fc80:	d0e4      	beq.n	fc4c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    fc82:	4628      	mov	r0, r5
    fc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000fc88 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    fc88:	b570      	push	{r4, r5, r6, lr}
    fc8a:	4604      	mov	r4, r0
    fc8c:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fc90:	88c1      	ldrh	r1, [r0, #6]
    fc92:	8880      	ldrh	r0, [r0, #4]
    fc94:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fc98:	18d5      	adds	r5, r2, r3
    fc9a:	88a2      	ldrh	r2, [r4, #4]
    fc9c:	8aa3      	ldrh	r3, [r4, #20]
    fc9e:	429a      	cmp	r2, r3
    fca0:	d013      	beq.n	fcca <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fca2:	f7ff fe25 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fca6:	b980      	cbnz	r0, fcca <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fca8:	89a0      	ldrh	r0, [r4, #12]
    fcaa:	b970      	cbnz	r0, fcca <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fcac:	69a4      	ldr	r4, [r4, #24]
    fcae:	b174      	cbz	r4, fcce <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fcb0:	4620      	mov	r0, r4
    fcb2:	f7ff fea1 	bl	f9f8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    fcb6:	b950      	cbnz	r0, fcce <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fcb8:	8920      	ldrh	r0, [r4, #8]
    fcba:	3428      	adds	r4, #40	; 0x28
    fcbc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    fcc0:	4420      	add	r0, r4
    fcc2:	7929      	ldrb	r1, [r5, #4]
    fcc4:	7900      	ldrb	r0, [r0, #4]
    fcc6:	4288      	cmp	r0, r1
    fcc8:	d101      	bne.n	fcce <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fcca:	2000      	movs	r0, #0
    fccc:	bd70      	pop	{r4, r5, r6, pc}
    fcce:	4628      	mov	r0, r5
    fcd0:	bd70      	pop	{r4, r5, r6, pc}

0000fcd2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    fcd2:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fcd6:	7f40      	ldrb	r0, [r0, #29]
    fcd8:	3008      	adds	r0, #8
    fcda:	4408      	add	r0, r1
    fcdc:	1ec0      	subs	r0, r0, #3
    fcde:	6010      	str	r0, [r2, #0]
    fce0:	8808      	ldrh	r0, [r1, #0]
    fce2:	b908      	cbnz	r0, fce8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
    fce4:	1edb      	subs	r3, r3, #3
    fce6:	6013      	str	r3, [r2, #0]
    fce8:	8808      	ldrh	r0, [r1, #0]
    fcea:	8849      	ldrh	r1, [r1, #2]
    fcec:	4408      	add	r0, r1
    fcee:	b280      	uxth	r0, r0
    fcf0:	4770      	bx	lr

0000fcf2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    fcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcf6:	460e      	mov	r6, r1
    fcf8:	88c1      	ldrh	r1, [r0, #6]
    fcfa:	4604      	mov	r4, r0
    fcfc:	f100 0828 	add.w	r8, r0, #40	; 0x28
    fd00:	8900      	ldrh	r0, [r0, #8]
    fd02:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fd06:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fd0a:	f7ff fdf7 	bl	f8fc <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    fd0e:	b110      	cbz	r0, fd16 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
    fd10:	2000      	movs	r0, #0
    fd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd16:	2200      	movs	r2, #0
    fd18:	2301      	movs	r3, #1
    fd1a:	7f60      	ldrb	r0, [r4, #29]
    fd1c:	42af      	cmp	r7, r5
    fd1e:	d90b      	bls.n	fd38 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
    fd20:	1b79      	subs	r1, r7, r5
    fd22:	3008      	adds	r0, #8
    fd24:	1a08      	subs	r0, r1, r0
    fd26:	4286      	cmp	r6, r0
    fd28:	dc1d      	bgt.n	fd66 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fd2a:	eb08 0005 	add.w	r0, r8, r5
    fd2e:	2100      	movs	r1, #0
    fd30:	8006      	strh	r6, [r0, #0]
    fd32:	8041      	strh	r1, [r0, #2]
    fd34:	75e3      	strb	r3, [r4, #23]
    fd36:	e7ec      	b.n	fd12 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    fd38:	8861      	ldrh	r1, [r4, #2]
    fd3a:	3008      	adds	r0, #8
    fd3c:	1b49      	subs	r1, r1, r5
    fd3e:	1a08      	subs	r0, r1, r0
    fd40:	d411      	bmi.n	fd66 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fd42:	281b      	cmp	r0, #27
    fd44:	da04      	bge.n	fd50 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
    fd46:	f240 111d 	movw	r1, #285	; 0x11d
    fd4a:	2014      	movs	r0, #20
    fd4c:	f7f4 f99e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd50:	4286      	cmp	r6, r0
    fd52:	dc01      	bgt.n	fd58 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
    fd54:	4630      	mov	r0, r6
    fd56:	e000      	b.n	fd5a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
    fd58:	b280      	uxth	r0, r0
    fd5a:	1a31      	subs	r1, r6, r0
    fd5c:	0409      	lsls	r1, r1, #16
    fd5e:	0c09      	lsrs	r1, r1, #16
    fd60:	d003      	beq.n	fd6a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fd62:	42b9      	cmp	r1, r7
    fd64:	dd01      	ble.n	fd6a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fd66:	75e2      	strb	r2, [r4, #23]
    fd68:	e7d2      	b.n	fd10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
    fd6a:	eb08 0205 	add.w	r2, r8, r5
    fd6e:	8010      	strh	r0, [r2, #0]
    fd70:	8051      	strh	r1, [r2, #2]
    fd72:	75e3      	strb	r3, [r4, #23]
    fd74:	4610      	mov	r0, r2
    fd76:	e7cc      	b.n	fd12 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

0000fd78 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    fd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd7c:	4604      	mov	r4, r0
    fd7e:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fd82:	88c1      	ldrh	r1, [r0, #6]
    fd84:	8880      	ldrh	r0, [r0, #4]
    fd86:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fd8a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fd8e:	19d6      	adds	r6, r2, r7
    fd90:	f7ff fdae 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fd94:	b9e8      	cbnz	r0, fdd2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fd96:	89a0      	ldrh	r0, [r4, #12]
    fd98:	8a21      	ldrh	r1, [r4, #16]
    fd9a:	8832      	ldrh	r2, [r6, #0]
    fd9c:	4401      	add	r1, r0
    fd9e:	8870      	ldrh	r0, [r6, #2]
    fda0:	1813      	adds	r3, r2, r0
    fda2:	4299      	cmp	r1, r3
    fda4:	d312      	bcc.n	fdcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fda6:	b110      	cbz	r0, fdae <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    fda8:	42a8      	cmp	r0, r5
    fdaa:	d30f      	bcc.n	fdcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fdac:	e011      	b.n	fdd2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fdae:	7f61      	ldrb	r1, [r4, #29]
    fdb0:	3108      	adds	r1, #8
    fdb2:	19c8      	adds	r0, r1, r7
    fdb4:	4410      	add	r0, r2
    fdb6:	8862      	ldrh	r2, [r4, #2]
    fdb8:	b280      	uxth	r0, r0
    fdba:	1a12      	subs	r2, r2, r0
    fdbc:	b292      	uxth	r2, r2
    fdbe:	311b      	adds	r1, #27
    fdc0:	4291      	cmp	r1, r2
    fdc2:	d901      	bls.n	fdc8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
    fdc4:	b915      	cbnz	r5, fdcc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fdc6:	e004      	b.n	fdd2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fdc8:	42a8      	cmp	r0, r5
    fdca:	d002      	beq.n	fdd2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fdcc:	2001      	movs	r0, #1
    fdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdd2:	2000      	movs	r0, #0
    fdd4:	e7fb      	b.n	fdce <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

0000fdd6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    fdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdda:	460f      	mov	r7, r1
    fddc:	4604      	mov	r4, r0
    fdde:	f100 0528 	add.w	r5, r0, #40	; 0x28
    fde2:	88c1      	ldrh	r1, [r0, #6]
    fde4:	8880      	ldrh	r0, [r0, #4]
    fde6:	4690      	mov	r8, r2
    fde8:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    fdec:	18ae      	adds	r6, r5, r2
    fdee:	f7ff fd7f 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fdf2:	b118      	cbz	r0, fdfc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
    fdf4:	2000      	movs	r0, #0
    fdf6:	8220      	strh	r0, [r4, #16]
    fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdfc:	89a0      	ldrh	r0, [r4, #12]
    fdfe:	8831      	ldrh	r1, [r6, #0]
    fe00:	4288      	cmp	r0, r1
    fe02:	d306      	bcc.n	fe12 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
    fe04:	1a40      	subs	r0, r0, r1
    fe06:	8871      	ldrh	r1, [r6, #2]
    fe08:	1a09      	subs	r1, r1, r0
    fe0a:	4428      	add	r0, r5
    fe0c:	b289      	uxth	r1, r1
    fe0e:	1ec0      	subs	r0, r0, #3
    fe10:	e005      	b.n	fe1e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
    fe12:	1a09      	subs	r1, r1, r0
    fe14:	7f62      	ldrb	r2, [r4, #29]
    fe16:	b289      	uxth	r1, r1
    fe18:	4410      	add	r0, r2
    fe1a:	4430      	add	r0, r6
    fe1c:	1d40      	adds	r0, r0, #5
    fe1e:	883a      	ldrh	r2, [r7, #0]
    fe20:	428a      	cmp	r2, r1
    fe22:	d900      	bls.n	fe26 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
    fe24:	8039      	strh	r1, [r7, #0]
    fe26:	89a1      	ldrh	r1, [r4, #12]
    fe28:	b129      	cbz	r1, fe36 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
    fe2a:	2100      	movs	r1, #0
    fe2c:	f888 1000 	strb.w	r1, [r8]
    fe30:	8839      	ldrh	r1, [r7, #0]
    fe32:	8221      	strh	r1, [r4, #16]
    fe34:	e7e0      	b.n	fdf8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
    fe36:	2101      	movs	r1, #1
    fe38:	e7f8      	b.n	fe2c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

0000fe3a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    fe3a:	b510      	push	{r4, lr}
    fe3c:	8a81      	ldrh	r1, [r0, #20]
    fe3e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    fe42:	3aff      	subs	r2, #255	; 0xff
    fe44:	d002      	beq.n	fe4c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    fe46:	7d82      	ldrb	r2, [r0, #22]
    fe48:	b95a      	cbnz	r2, fe62 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    fe4a:	e004      	b.n	fe56 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    fe4c:	f240 41ea 	movw	r1, #1258	; 0x4ea
    fe50:	2014      	movs	r0, #20
    fe52:	f7f4 f91b 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe56:	8880      	ldrh	r0, [r0, #4]
    fe58:	f7ff fd4a 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fe5c:	b108      	cbz	r0, fe62 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    fe5e:	2000      	movs	r0, #0
    fe60:	bd10      	pop	{r4, pc}
    fe62:	2001      	movs	r0, #1
    fe64:	bd10      	pop	{r4, pc}

0000fe66 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    fe66:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fe6a:	8281      	strh	r1, [r0, #20]
    fe6c:	2100      	movs	r1, #0
    fe6e:	7581      	strb	r1, [r0, #22]
    fe70:	4770      	bx	lr

0000fe72 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    fe72:	b510      	push	{r4, lr}
    fe74:	8a81      	ldrh	r1, [r0, #20]
    fe76:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    fe7a:	3aff      	subs	r2, #255	; 0xff
    fe7c:	d004      	beq.n	fe88 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    fe7e:	f240 41cd 	movw	r1, #1229	; 0x4cd
    fe82:	2014      	movs	r0, #20
    fe84:	f7f4 f902 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe88:	88c1      	ldrh	r1, [r0, #6]
    fe8a:	8281      	strh	r1, [r0, #20]
    fe8c:	89c1      	ldrh	r1, [r0, #14]
    fe8e:	b101      	cbz	r1, fe92 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    fe90:	2101      	movs	r1, #1
    fe92:	7581      	strb	r1, [r0, #22]
    fe94:	bd10      	pop	{r4, pc}

0000fe96 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe9a:	461e      	mov	r6, r3
    fe9c:	4613      	mov	r3, r2
    fe9e:	460f      	mov	r7, r1
    fea0:	4604      	mov	r4, r0
    fea2:	4631      	mov	r1, r6
    fea4:	4618      	mov	r0, r3
    fea6:	9a06      	ldr	r2, [sp, #24]
    fea8:	f000 f864 	bl	ff74 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    feac:	4605      	mov	r5, r0
    feae:	42af      	cmp	r7, r5
    feb0:	d201      	bcs.n	feb6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    feb2:	21ca      	movs	r1, #202	; 0xca
    feb4:	e016      	b.n	fee4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    feb6:	2228      	movs	r2, #40	; 0x28
    feb8:	2100      	movs	r1, #0
    feba:	4620      	mov	r0, r4
    febc:	f7ff f838 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fec0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fec4:	82a0      	strh	r0, [r4, #20]
    fec6:	3d28      	subs	r5, #40	; 0x28
    fec8:	b2a8      	uxth	r0, r5
    feca:	7766      	strb	r6, [r4, #29]
    fecc:	8060      	strh	r0, [r4, #2]
    fece:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    fed2:	d901      	bls.n	fed8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
    fed4:	21d0      	movs	r1, #208	; 0xd0
    fed6:	e005      	b.n	fee4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    fed8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    fedc:	3608      	adds	r6, #8
    fede:	4281      	cmp	r1, r0
    fee0:	d903      	bls.n	feea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
    fee2:	21d2      	movs	r1, #210	; 0xd2
    fee4:	2014      	movs	r0, #20
    fee6:	f7f4 f8d1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    feea:	1b80      	subs	r0, r0, r6
    feec:	3834      	subs	r0, #52	; 0x34
    feee:	b280      	uxth	r0, r0
    fef0:	8020      	strh	r0, [r4, #0]
    fef2:	281b      	cmp	r0, #27
    fef4:	d200      	bcs.n	fef8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
    fef6:	201b      	movs	r0, #27
    fef8:	8020      	strh	r0, [r4, #0]
    fefa:	2000      	movs	r0, #0
    fefc:	77a0      	strb	r0, [r4, #30]
    fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ff02 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    ff02:	6181      	str	r1, [r0, #24]
    ff04:	6188      	str	r0, [r1, #24]
    ff06:	4770      	bx	lr

0000ff08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff0c:	4604      	mov	r4, r0
    ff0e:	4689      	mov	r9, r1
    ff10:	8927      	ldrh	r7, [r4, #8]
    ff12:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    ff16:	88a1      	ldrh	r1, [r4, #4]
    ff18:	4616      	mov	r6, r2
    ff1a:	3028      	adds	r0, #40	; 0x28
    ff1c:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
    ff20:	1885      	adds	r5, r0, r2
    ff22:	4638      	mov	r0, r7
    ff24:	f7ff fce4 	bl	f8f0 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    ff28:	b110      	cbz	r0, ff30 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    ff2a:	2000      	movs	r0, #0
    ff2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff30:	b10e      	cbz	r6, ff36 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
    ff32:	1d68      	adds	r0, r5, #5
    ff34:	6030      	str	r0, [r6, #0]
    ff36:	f1b9 0f00 	cmp.w	r9, #0
    ff3a:	d004      	beq.n	ff46 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
    ff3c:	7f62      	ldrb	r2, [r4, #29]
    ff3e:	1d69      	adds	r1, r5, #5
    ff40:	4648      	mov	r0, r9
    ff42:	f7f3 ff19 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ff46:	882e      	ldrh	r6, [r5, #0]
    ff48:	8869      	ldrh	r1, [r5, #2]
    ff4a:	f104 0008 	add.w	r0, r4, #8
    ff4e:	b121      	cbz	r1, ff5a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
    ff50:	198a      	adds	r2, r1, r6
    ff52:	b296      	uxth	r6, r2
    ff54:	f7ff fcbc 	bl	f8d0 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    ff58:	e006      	b.n	ff68 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
    ff5a:	7f63      	ldrb	r3, [r4, #29]
    ff5c:	8862      	ldrh	r2, [r4, #2]
    ff5e:	3308      	adds	r3, #8
    ff60:	1999      	adds	r1, r3, r6
    ff62:	b289      	uxth	r1, r1
    ff64:	f7ff fc9a 	bl	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ff68:	4547      	cmp	r7, r8
    ff6a:	d101      	bne.n	ff70 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
    ff6c:	8920      	ldrh	r0, [r4, #8]
    ff6e:	8160      	strh	r0, [r4, #10]
    ff70:	4630      	mov	r0, r6
    ff72:	e7db      	b.n	ff2c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0000ff74 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    ff74:	f101 0308 	add.w	r3, r1, #8
    ff78:	4418      	add	r0, r3
    ff7a:	4350      	muls	r0, r2
    ff7c:	314a      	adds	r1, #74	; 0x4a
    ff7e:	4408      	add	r0, r1
    ff80:	b280      	uxth	r0, r0
    ff82:	4770      	bx	lr

0000ff84 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ff84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff88:	4688      	mov	r8, r1
    ff8a:	88c1      	ldrh	r1, [r0, #6]
    ff8c:	4604      	mov	r4, r0
    ff8e:	8900      	ldrh	r0, [r0, #8]
    ff90:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ff94:	f104 0628 	add.w	r6, r4, #40	; 0x28
    ff98:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ff9c:	eb06 0905 	add.w	r9, r6, r5
    ffa0:	f7ff fcac 	bl	f8fc <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    ffa4:	2300      	movs	r3, #0
    ffa6:	bb80      	cbnz	r0, 1000a <CONFIG_PM_SRAM_SIZE+0xa>
    ffa8:	7f60      	ldrb	r0, [r4, #29]
    ffaa:	42af      	cmp	r7, r5
    ffac:	d904      	bls.n	ffb8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
    ffae:	1b79      	subs	r1, r7, r5
    ffb0:	3008      	adds	r0, #8
    ffb2:	1a09      	subs	r1, r1, r0
    ffb4:	2700      	movs	r7, #0
    ffb6:	e003      	b.n	ffc0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
    ffb8:	8861      	ldrh	r1, [r4, #2]
    ffba:	3008      	adds	r0, #8
    ffbc:	1b49      	subs	r1, r1, r5
    ffbe:	1a09      	subs	r1, r1, r0
    ffc0:	2900      	cmp	r1, #0
    ffc2:	db23      	blt.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
    ffc4:	89e0      	ldrh	r0, [r4, #14]
    ffc6:	b160      	cbz	r0, ffe2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    ffc8:	f8b9 0000 	ldrh.w	r0, [r9]
    ffcc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    ffd0:	b13a      	cbz	r2, ffe2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    ffd2:	1ab9      	subs	r1, r7, r2
    ffd4:	7723      	strb	r3, [r4, #28]
    ffd6:	4541      	cmp	r1, r8
    ffd8:	db18      	blt.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
    ffda:	89e1      	ldrh	r1, [r4, #14]
    ffdc:	4431      	add	r1, r6
    ffde:	1a08      	subs	r0, r1, r0
    ffe0:	e009      	b.n	fff6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
    ffe2:	1a09      	subs	r1, r1, r0
    ffe4:	7723      	strb	r3, [r4, #28]
    ffe6:	4541      	cmp	r1, r8
    ffe8:	db0a      	blt.n	10000 <CONFIG_PM_SRAM_SIZE>
    ffea:	7f60      	ldrb	r0, [r4, #29]
    ffec:	89e1      	ldrh	r1, [r4, #14]
    ffee:	3008      	adds	r0, #8
    fff0:	4428      	add	r0, r5
    fff2:	4431      	add	r1, r6
    fff4:	4408      	add	r0, r1
    fff6:	1ec0      	subs	r0, r0, #3
    fff8:	f8a4 8012 	strh.w	r8, [r4, #18]
    fffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10000:	4547      	cmp	r7, r8
   10002:	db03      	blt.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
   10004:	2101      	movs	r1, #1
   10006:	7721      	strb	r1, [r4, #28]
   10008:	e7e7      	b.n	ffda <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
   1000a:	e7ff      	b.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
   1000c:	8263      	strh	r3, [r4, #18]
   1000e:	2000      	movs	r0, #0
   10010:	e7f4      	b.n	fffc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

00010012 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   10012:	2100      	movs	r1, #0
   10014:	81c1      	strh	r1, [r0, #14]
   10016:	7701      	strb	r1, [r0, #28]
   10018:	8241      	strh	r1, [r0, #18]
   1001a:	75c1      	strb	r1, [r0, #23]
   1001c:	7581      	strb	r1, [r0, #22]
   1001e:	4770      	bx	lr

00010020 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   10020:	b570      	push	{r4, r5, r6, lr}
   10022:	2300      	movs	r3, #0
   10024:	2908      	cmp	r1, #8
   10026:	d204      	bcs.n	10032 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
   10028:	f240 11cb 	movw	r1, #459	; 0x1cb
   1002c:	2015      	movs	r0, #21
   1002e:	f7f4 f82d 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10032:	6802      	ldr	r2, [r0, #0]
   10034:	b90a      	cbnz	r2, 1003a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   10036:	e01e      	b.n	10076 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   10038:	4610      	mov	r0, r2
   1003a:	6802      	ldr	r2, [r0, #0]
   1003c:	8893      	ldrh	r3, [r2, #4]
   1003e:	428b      	cmp	r3, r1
   10040:	d002      	beq.n	10048 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
   10042:	6813      	ldr	r3, [r2, #0]
   10044:	2b00      	cmp	r3, #0
   10046:	d1f7      	bne.n	10038 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
   10048:	8894      	ldrh	r4, [r2, #4]
   1004a:	4613      	mov	r3, r2
   1004c:	428c      	cmp	r4, r1
   1004e:	d101      	bne.n	10054 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
   10050:	6811      	ldr	r1, [r2, #0]
   10052:	e00d      	b.n	10070 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
   10054:	f101 0508 	add.w	r5, r1, #8
   10058:	b2ad      	uxth	r5, r5
   1005a:	42ac      	cmp	r4, r5
   1005c:	d30a      	bcc.n	10074 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
   1005e:	1a64      	subs	r4, r4, r1
   10060:	4411      	add	r1, r2
   10062:	2200      	movs	r2, #0
   10064:	600a      	str	r2, [r1, #0]
   10066:	808c      	strh	r4, [r1, #4]
   10068:	6802      	ldr	r2, [r0, #0]
   1006a:	6812      	ldr	r2, [r2, #0]
   1006c:	6002      	str	r2, [r0, #0]
   1006e:	600a      	str	r2, [r1, #0]
   10070:	6001      	str	r1, [r0, #0]
   10072:	e000      	b.n	10076 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
   10074:	2300      	movs	r3, #0
   10076:	4618      	mov	r0, r3
   10078:	bd70      	pop	{r4, r5, r6, pc}

0001007a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1007a:	b510      	push	{r4, lr}
   1007c:	000c      	movs	r4, r1
   1007e:	d006      	beq.n	1008e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   10080:	2c08      	cmp	r4, #8
   10082:	d209      	bcs.n	10098 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   10084:	f240 1195 	movw	r1, #405	; 0x195
   10088:	2015      	movs	r0, #21
   1008a:	f7f3 ffff 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1008e:	b108      	cbz	r0, 10094 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   10090:	2100      	movs	r1, #0
   10092:	6001      	str	r1, [r0, #0]
   10094:	2000      	movs	r0, #0
   10096:	bd10      	pop	{r4, pc}
   10098:	b118      	cbz	r0, 100a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   1009a:	b2a1      	uxth	r1, r4
   1009c:	6800      	ldr	r0, [r0, #0]
   1009e:	f000 f814 	bl	100ca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   100a2:	1d20      	adds	r0, r4, #4
   100a4:	bd10      	pop	{r4, pc}

000100a6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   100a6:	2100      	movs	r1, #0
   100a8:	6802      	ldr	r2, [r0, #0]
   100aa:	e003      	b.n	100b4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   100ac:	8893      	ldrh	r3, [r2, #4]
   100ae:	6812      	ldr	r2, [r2, #0]
   100b0:	4419      	add	r1, r3
   100b2:	b289      	uxth	r1, r1
   100b4:	2a00      	cmp	r2, #0
   100b6:	d1f9      	bne.n	100ac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   100b8:	f000 b807 	b.w	100ca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000100bc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   100bc:	2300      	movs	r3, #0
   100be:	600b      	str	r3, [r1, #0]
   100c0:	808a      	strh	r2, [r1, #4]
   100c2:	6802      	ldr	r2, [r0, #0]
   100c4:	600a      	str	r2, [r1, #0]
   100c6:	6001      	str	r1, [r0, #0]
   100c8:	4770      	bx	lr
   100ca:	2300      	movs	r3, #0
   100cc:	6043      	str	r3, [r0, #4]
   100ce:	1d02      	adds	r2, r0, #4
   100d0:	8101      	strh	r1, [r0, #8]
   100d2:	6002      	str	r2, [r0, #0]
   100d4:	4770      	bx	lr

000100d6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
   100d6:	b50e      	push	{r1, r2, r3, lr}
   100d8:	4669      	mov	r1, sp
   100da:	f000 f818 	bl	1010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   100de:	b120      	cbz	r0, 100ea <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
   100e0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   100e4:	2017      	movs	r0, #23
   100e6:	f7f3 ffd1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100ea:	4668      	mov	r0, sp
   100ec:	f7f4 f9d4 	bl	4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   100f0:	b108      	cbz	r0, 100f6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
   100f2:	2000      	movs	r0, #0
   100f4:	bd0e      	pop	{r1, r2, r3, pc}
   100f6:	2001      	movs	r0, #1
   100f8:	bd0e      	pop	{r1, r2, r3, pc}

000100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   100fa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   100fe:	3aff      	subs	r2, #255	; 0xff
   10100:	d001      	beq.n	10106 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   10102:	2902      	cmp	r1, #2
   10104:	d301      	bcc.n	1010a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   10106:	2000      	movs	r0, #0
   10108:	4770      	bx	lr
   1010a:	f7f4 ba5b 	b.w	45c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

0001010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   1010e:	b570      	push	{r4, r5, r6, lr}
   10110:	4605      	mov	r5, r0
   10112:	460c      	mov	r4, r1
   10114:	4608      	mov	r0, r1
   10116:	f000 f899 	bl	1024c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   1011a:	b108      	cbz	r0, 10120 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   1011c:	2010      	movs	r0, #16
   1011e:	bd70      	pop	{r4, r5, r6, pc}
   10120:	2d02      	cmp	r5, #2
   10122:	d301      	bcc.n	10128 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   10124:	2007      	movs	r0, #7
   10126:	bd70      	pop	{r4, r5, r6, pc}
   10128:	7025      	strb	r5, [r4, #0]
   1012a:	2000      	movs	r0, #0
   1012c:	8060      	strh	r0, [r4, #2]
   1012e:	bd70      	pop	{r4, r5, r6, pc}
   10130:	b510      	push	{r4, lr}
   10132:	4604      	mov	r4, r0
   10134:	f7f4 fa08 	bl	4548 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   10138:	42a0      	cmp	r0, r4
   1013a:	d901      	bls.n	10140 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   1013c:	2001      	movs	r0, #1
   1013e:	bd10      	pop	{r4, pc}
   10140:	2000      	movs	r0, #0
   10142:	bd10      	pop	{r4, pc}

00010144 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   10144:	b570      	push	{r4, r5, r6, lr}
   10146:	460e      	mov	r6, r1
   10148:	461d      	mov	r5, r3
   1014a:	4611      	mov	r1, r2
   1014c:	f000 f811 	bl	10172 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   10150:	4604      	mov	r4, r0
   10152:	4629      	mov	r1, r5
   10154:	4630      	mov	r0, r6
   10156:	f000 f803 	bl	10160 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   1015a:	4420      	add	r0, r4
   1015c:	1d00      	adds	r0, r0, #4
   1015e:	bd70      	pop	{r4, r5, r6, pc}
   10160:	b510      	push	{r4, lr}
   10162:	460a      	mov	r2, r1
   10164:	2101      	movs	r1, #1
   10166:	f7ff ff05 	bl	ff74 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1016a:	1cc0      	adds	r0, r0, #3
   1016c:	f020 0003 	bic.w	r0, r0, #3
   10170:	bd10      	pop	{r4, pc}
   10172:	b510      	push	{r4, lr}
   10174:	460a      	mov	r2, r1
   10176:	2101      	movs	r1, #1
   10178:	f7ff fefc 	bl	ff74 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1017c:	1cc0      	adds	r0, r0, #3
   1017e:	f020 0003 	bic.w	r0, r0, #3
   10182:	bd10      	pop	{r4, pc}
   10184:	2800      	cmp	r0, #0
   10186:	db09      	blt.n	1019c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
   10188:	f000 021f 	and.w	r2, r0, #31
   1018c:	2101      	movs	r1, #1
   1018e:	4091      	lsls	r1, r2
   10190:	0940      	lsrs	r0, r0, #5
   10192:	0080      	lsls	r0, r0, #2
   10194:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10198:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1019c:	4770      	bx	lr

0001019e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   1019e:	f7f4 bc01 	b.w	49a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   101a2:	2800      	cmp	r0, #0
   101a4:	db09      	blt.n	101ba <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x1c>
   101a6:	f000 021f 	and.w	r2, r0, #31
   101aa:	2101      	movs	r1, #1
   101ac:	4091      	lsls	r1, r2
   101ae:	0940      	lsrs	r0, r0, #5
   101b0:	0080      	lsls	r0, r0, #2
   101b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101b6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   101ba:	4770      	bx	lr
   101bc:	2800      	cmp	r0, #0
   101be:	db0d      	blt.n	101dc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x3e>
   101c0:	f000 021f 	and.w	r2, r0, #31
   101c4:	2101      	movs	r1, #1
   101c6:	4091      	lsls	r1, r2
   101c8:	0940      	lsrs	r0, r0, #5
   101ca:	0080      	lsls	r0, r0, #2
   101cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101d0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   101d4:	f3bf 8f4f 	dsb	sy
   101d8:	f3bf 8f6f 	isb	sy
   101dc:	4770      	bx	lr

000101de <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   101de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   101e2:	2000      	movs	r0, #0
   101e4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   101e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   101ec:	2001      	movs	r0, #1
   101ee:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   101f2:	4770      	bx	lr
   101f4:	2800      	cmp	r0, #0
   101f6:	db04      	blt.n	10202 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
   101f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101fc:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
   10200:	e005      	b.n	1020e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
   10202:	f000 000f 	and.w	r0, r0, #15
   10206:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1020a:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
   1020e:	0940      	lsrs	r0, r0, #5
   10210:	4770      	bx	lr
   10212:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   10216:	7840      	ldrb	r0, [r0, #1]
   10218:	4281      	cmp	r1, r0
   1021a:	d301      	bcc.n	10220 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
   1021c:	1a08      	subs	r0, r1, r0
   1021e:	e002      	b.n	10226 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
   10220:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
   10224:	4408      	add	r0, r1
   10226:	b2c0      	uxtb	r0, r0
   10228:	4770      	bx	lr
   1022a:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   1022e:	2241      	movs	r2, #65	; 0x41
   10230:	1c49      	adds	r1, r1, #1
   10232:	fbb1 f3f2 	udiv	r3, r1, r2
   10236:	fb02 1113 	mls	r1, r2, r3, r1
   1023a:	7840      	ldrb	r0, [r0, #1]
   1023c:	4281      	cmp	r1, r0
   1023e:	d101      	bne.n	10244 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
   10240:	2001      	movs	r0, #1
   10242:	4770      	bx	lr
   10244:	2000      	movs	r0, #0
   10246:	4770      	bx	lr

00010248 <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
   10248:	2040      	movs	r0, #64	; 0x40
   1024a:	4770      	bx	lr

0001024c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   1024c:	b108      	cbz	r0, 10252 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   1024e:	2000      	movs	r0, #0
   10250:	4770      	bx	lr
   10252:	2001      	movs	r0, #1
   10254:	4770      	bx	lr

00010256 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   10256:	b510      	push	{r4, lr}
   10258:	2900      	cmp	r1, #0
   1025a:	4604      	mov	r4, r0
   1025c:	f04f 0106 	mov.w	r1, #6
   10260:	d002      	beq.n	10268 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   10262:	f7f4 fd13 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   10266:	e001      	b.n	1026c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   10268:	f7f4 fd26 	bl	4cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   1026c:	7960      	ldrb	r0, [r4, #5]
   1026e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   10272:	7160      	strb	r0, [r4, #5]
   10274:	bd10      	pop	{r4, pc}

00010276 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   10276:	b530      	push	{r4, r5, lr}
   10278:	460c      	mov	r4, r1
   1027a:	4605      	mov	r5, r0
   1027c:	b08d      	sub	sp, #52	; 0x34
   1027e:	f04f 0103 	mov.w	r1, #3
   10282:	f104 0003 	add.w	r0, r4, #3
   10286:	b112      	cbz	r2, 1028e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   10288:	f7f4 fd00 	bl	4c8c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   1028c:	e001      	b.n	10292 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   1028e:	f7f4 fd13 	bl	4cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   10292:	7960      	ldrb	r0, [r4, #5]
   10294:	220d      	movs	r2, #13
   10296:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   1029a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1029e:	7160      	strb	r0, [r4, #5]
   102a0:	2100      	movs	r1, #0
   102a2:	a804      	add	r0, sp, #16
   102a4:	f7fe fe44 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   102a8:	78e0      	ldrb	r0, [r4, #3]
   102aa:	f88d 001f 	strb.w	r0, [sp, #31]
   102ae:	7920      	ldrb	r0, [r4, #4]
   102b0:	f88d 001e 	strb.w	r0, [sp, #30]
   102b4:	7960      	ldrb	r0, [r4, #5]
   102b6:	f88d 001d 	strb.w	r0, [sp, #29]
   102ba:	6828      	ldr	r0, [r5, #0]
   102bc:	9000      	str	r0, [sp, #0]
   102be:	6868      	ldr	r0, [r5, #4]
   102c0:	9001      	str	r0, [sp, #4]
   102c2:	68a8      	ldr	r0, [r5, #8]
   102c4:	9002      	str	r0, [sp, #8]
   102c6:	68e8      	ldr	r0, [r5, #12]
   102c8:	9003      	str	r0, [sp, #12]
   102ca:	4668      	mov	r0, sp
   102cc:	f7ff ff67 	bl	1019e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   102d0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   102d4:	7020      	strb	r0, [r4, #0]
   102d6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   102da:	7060      	strb	r0, [r4, #1]
   102dc:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   102e0:	70a0      	strb	r0, [r4, #2]
   102e2:	b00d      	add	sp, #52	; 0x34
   102e4:	bd30      	pop	{r4, r5, pc}

000102e6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   102e6:	b510      	push	{r4, lr}
   102e8:	f7fd f8de 	bl	d4a8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   102ec:	2800      	cmp	r0, #0
   102ee:	bf04      	itt	eq
   102f0:	20ff      	moveq	r0, #255	; 0xff
   102f2:	bd10      	popeq	{r4, pc}
   102f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102f8:	f7fd b894 	b.w	d424 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

000102fc <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   102fc:	b510      	push	{r4, lr}
   102fe:	f7f6 f82b 	bl	6358 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   10302:	2810      	cmp	r0, #16
   10304:	bf04      	itt	eq
   10306:	2000      	moveq	r0, #0
   10308:	bd10      	popeq	{r4, pc}
   1030a:	f7f6 f8df 	bl	64cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
   1030e:	2001      	movs	r0, #1
   10310:	bd10      	pop	{r4, pc}

00010312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   10312:	b570      	push	{r4, r5, r6, lr}
   10314:	460c      	mov	r4, r1
   10316:	4605      	mov	r5, r0
   10318:	2100      	movs	r1, #0
   1031a:	f7ff feee 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1031e:	6060      	str	r0, [r4, #4]
   10320:	b110      	cbz	r0, 10328 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   10322:	2000      	movs	r0, #0
   10324:	7020      	strb	r0, [r4, #0]
   10326:	bd70      	pop	{r4, r5, r6, pc}
   10328:	2101      	movs	r1, #1
   1032a:	4628      	mov	r0, r5
   1032c:	f7ff fee5 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10330:	6060      	str	r0, [r4, #4]
   10332:	2800      	cmp	r0, #0
   10334:	bf04      	itt	eq
   10336:	2002      	moveq	r0, #2
   10338:	bd70      	popeq	{r4, r5, r6, pc}
   1033a:	2001      	movs	r0, #1
   1033c:	7020      	strb	r0, [r4, #0]
   1033e:	2000      	movs	r0, #0
   10340:	bd70      	pop	{r4, r5, r6, pc}

00010342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   10342:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   10346:	2906      	cmp	r1, #6
   10348:	bf9a      	itte	ls
   1034a:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   1034e:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   10352:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   10356:	4348      	muls	r0, r1
   10358:	4770      	bx	lr

0001035a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   1035a:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   1035e:	f241 7270 	movw	r2, #6000	; 0x1770
   10362:	4291      	cmp	r1, r2
   10364:	bf94      	ite	ls
   10366:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   1036a:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1036e:	fbb0 f0f1 	udiv	r0, r0, r1
   10372:	bf98      	it	ls
   10374:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   10378:	b280      	uxth	r0, r0
   1037a:	4770      	bx	lr

0001037c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   1037c:	b570      	push	{r4, r5, r6, lr}
   1037e:	4604      	mov	r4, r0
   10380:	4290      	cmp	r0, r2
   10382:	bf28      	it	cs
   10384:	bd70      	popcs	{r4, r5, r6, pc}
   10386:	1b10      	subs	r0, r2, r4
   10388:	2864      	cmp	r0, #100	; 0x64
   1038a:	d30b      	bcc.n	103a4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   1038c:	1825      	adds	r5, r4, r0
   1038e:	428d      	cmp	r5, r1
   10390:	d806      	bhi.n	103a0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   10392:	2104      	movs	r1, #4
   10394:	f7f1 f9ca 	bl	172c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   10398:	2800      	cmp	r0, #0
   1039a:	bf04      	itt	eq
   1039c:	4628      	moveq	r0, r5
   1039e:	bd70      	popeq	{r4, r5, r6, pc}
   103a0:	4620      	mov	r0, r4
   103a2:	bd70      	pop	{r4, r5, r6, pc}
   103a4:	2064      	movs	r0, #100	; 0x64
   103a6:	e7f1      	b.n	1038c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

000103a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   103a8:	290c      	cmp	r1, #12
   103aa:	d265      	bcs.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103ac:	e8df f001 	tbb	[pc, r1]
   103b0:	130e0906 	.word	0x130e0906
   103b4:	3c321b16 	.word	0x3c321b16
   103b8:	504a5e43 	.word	0x504a5e43
   103bc:	2a00      	cmp	r2, #0
   103be:	d05d      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103c0:	e05a      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103c2:	2a07      	cmp	r2, #7
   103c4:	bf18      	it	ne
   103c6:	2a08      	cmpne	r2, #8
   103c8:	d058      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103ca:	e055      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103cc:	2a0c      	cmp	r2, #12
   103ce:	bf18      	it	ne
   103d0:	2a0b      	cmpne	r2, #11
   103d2:	d053      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103d4:	e050      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103d6:	2a0d      	cmp	r2, #13
   103d8:	d050      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103da:	e04d      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103dc:	f1a2 000f 	sub.w	r0, r2, #15
   103e0:	280c      	cmp	r0, #12
   103e2:	d94b      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103e4:	e048      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103e6:	b123      	cbz	r3, 103f2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
   103e8:	f1a2 0010 	sub.w	r0, r2, #16
   103ec:	280b      	cmp	r0, #11
   103ee:	d945      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103f0:	e042      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103f2:	2a12      	cmp	r2, #18
   103f4:	bf18      	it	ne
   103f6:	2a11      	cmpne	r2, #17
   103f8:	d040      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103fa:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   103fe:	b120      	cbz	r0, 1040a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
   10400:	2a12      	cmp	r2, #18
   10402:	d339      	bcc.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10404:	2a1a      	cmp	r2, #26
   10406:	d939      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10408:	e036      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1040a:	2a16      	cmp	r2, #22
   1040c:	d334      	bcc.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1040e:	2a1a      	cmp	r2, #26
   10410:	d934      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10412:	e031      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10414:	f1a2 010f 	sub.w	r1, r2, #15
   10418:	2903      	cmp	r1, #3
   1041a:	d92f      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1041c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   10420:	b318      	cbz	r0, 1046a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   10422:	2a1b      	cmp	r2, #27
   10424:	d92a      	bls.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10426:	e027      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10428:	b113      	cbz	r3, 10430 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
   1042a:	2a04      	cmp	r2, #4
   1042c:	d026      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1042e:	e023      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10430:	2a04      	cmp	r2, #4
   10432:	d121      	bne.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10434:	e022      	b.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10436:	b113      	cbz	r3, 1043e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   10438:	2a06      	cmp	r2, #6
   1043a:	d01f      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1043c:	e01c      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1043e:	2a01      	cmp	r2, #1
   10440:	d11a      	bne.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10442:	e01b      	b.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10444:	2a1c      	cmp	r2, #28
   10446:	bf1c      	itt	ne
   10448:	2a1d      	cmpne	r2, #29
   1044a:	2a1e      	cmpne	r2, #30
   1044c:	d016      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1044e:	e013      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10450:	2a1f      	cmp	r2, #31
   10452:	bf18      	it	ne
   10454:	2a20      	cmpne	r2, #32
   10456:	d011      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10458:	2a21      	cmp	r2, #33	; 0x21
   1045a:	bf18      	it	ne
   1045c:	2a22      	cmpne	r2, #34	; 0x22
   1045e:	d00d      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10460:	2a23      	cmp	r2, #35	; 0x23
   10462:	bf1c      	itt	ne
   10464:	2a24      	cmpne	r2, #36	; 0x24
   10466:	2a26      	cmpne	r2, #38	; 0x26
   10468:	d008      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1046a:	e005      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1046c:	b113      	cbz	r3, 10474 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
   1046e:	2a0e      	cmp	r2, #14
   10470:	d004      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10472:	e001      	b.n	10478 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10474:	2a05      	cmp	r2, #5
   10476:	d001      	beq.n	1047c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10478:	2000      	movs	r0, #0
   1047a:	4770      	bx	lr
   1047c:	2001      	movs	r0, #1
   1047e:	4770      	bx	lr

00010480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   10480:	280c      	cmp	r0, #12
   10482:	bf18      	it	ne
   10484:	280b      	cmpne	r0, #11
   10486:	d010      	beq.n	104aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   10488:	280d      	cmp	r0, #13
   1048a:	bf18      	it	ne
   1048c:	281f      	cmpne	r0, #31
   1048e:	d00c      	beq.n	104aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   10490:	2820      	cmp	r0, #32
   10492:	bf18      	it	ne
   10494:	2821      	cmpne	r0, #33	; 0x21
   10496:	d008      	beq.n	104aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   10498:	2822      	cmp	r0, #34	; 0x22
   1049a:	bf18      	it	ne
   1049c:	2823      	cmpne	r0, #35	; 0x23
   1049e:	d004      	beq.n	104aa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   104a0:	2824      	cmp	r0, #36	; 0x24
   104a2:	bf1e      	ittt	ne
   104a4:	2826      	cmpne	r0, #38	; 0x26
   104a6:	2000      	movne	r0, #0
   104a8:	4770      	bxne	lr
   104aa:	f04f 0001 	mov.w	r0, #1
   104ae:	4770      	bx	lr

000104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   104b0:	f011 0f0c 	tst.w	r1, #12
   104b4:	d013      	beq.n	104de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
   104b6:	f001 0104 	and.w	r1, r1, #4
   104ba:	2900      	cmp	r1, #0
   104bc:	bf0d      	iteet	eq
   104be:	2240      	moveq	r2, #64	; 0x40
   104c0:	2210      	movne	r2, #16
   104c2:	2196      	movne	r1, #150	; 0x96
   104c4:	f44f 7116 	moveq.w	r1, #600	; 0x258
   104c8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   104cc:	eba0 0301 	sub.w	r3, r0, r1
   104d0:	4288      	cmp	r0, r1
   104d2:	bf88      	it	hi
   104d4:	fb93 f0f2 	sdivhi	r0, r3, r2
   104d8:	d90e      	bls.n	104f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104da:	b280      	uxth	r0, r0
   104dc:	4770      	bx	lr
   104de:	2902      	cmp	r1, #2
   104e0:	d002      	beq.n	104e8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   104e2:	2870      	cmp	r0, #112	; 0x70
   104e4:	d908      	bls.n	104f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104e6:	e009      	b.n	104fc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
   104e8:	283c      	cmp	r0, #60	; 0x3c
   104ea:	d905      	bls.n	104f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104ec:	383c      	subs	r0, #60	; 0x3c
   104ee:	17c1      	asrs	r1, r0, #31
   104f0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   104f4:	1080      	asrs	r0, r0, #2
   104f6:	e7f0      	b.n	104da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   104f8:	2000      	movs	r0, #0
   104fa:	e7ee      	b.n	104da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   104fc:	3870      	subs	r0, #112	; 0x70
   104fe:	17c1      	asrs	r1, r0, #31
   10500:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   10504:	10c0      	asrs	r0, r0, #3
   10506:	e7e8      	b.n	104da <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

00010508 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   10508:	6809      	ldr	r1, [r1, #0]
   1050a:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
   1050e:	4770      	bx	lr

00010510 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   10510:	f010 0f01 	tst.w	r0, #1
   10514:	bf1c      	itt	ne
   10516:	2001      	movne	r0, #1
   10518:	4770      	bxne	lr
   1051a:	f010 0f02 	tst.w	r0, #2
   1051e:	bf1c      	itt	ne
   10520:	2002      	movne	r0, #2
   10522:	4770      	bxne	lr
   10524:	f010 0004 	ands.w	r0, r0, #4
   10528:	bf18      	it	ne
   1052a:	2008      	movne	r0, #8
   1052c:	4770      	bx	lr

0001052e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   1052e:	2901      	cmp	r1, #1
   10530:	d002      	beq.n	10538 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0xa>
   10532:	2902      	cmp	r1, #2
   10534:	d005      	beq.n	10542 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x14>
   10536:	e007      	b.n	10548 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   10538:	2800      	cmp	r0, #0
   1053a:	bf04      	itt	eq
   1053c:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   10540:	4770      	bxeq	lr
   10542:	f640 10c4 	movw	r0, #2500	; 0x9c4
   10546:	4770      	bx	lr
   10548:	b510      	push	{r4, lr}
   1054a:	f240 514a 	movw	r1, #1354	; 0x54a
   1054e:	2029      	movs	r0, #41	; 0x29
   10550:	f7f3 fd9c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010554 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   10554:	2a16      	cmp	r2, #22
   10556:	d110      	bne.n	1057a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10558:	222a      	movs	r2, #42	; 0x2a
   1055a:	280c      	cmp	r0, #12
   1055c:	bf18      	it	ne
   1055e:	280d      	cmpne	r0, #13
   10560:	d00f      	beq.n	10582 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   10562:	f04f 0c23 	mov.w	ip, #35	; 0x23
   10566:	281f      	cmp	r0, #31
   10568:	d00d      	beq.n	10586 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1056a:	b131      	cbz	r1, 1057a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   1056c:	7808      	ldrb	r0, [r1, #0]
   1056e:	2801      	cmp	r0, #1
   10570:	bf18      	it	ne
   10572:	2800      	cmpne	r0, #0
   10574:	d005      	beq.n	10582 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   10576:	2816      	cmp	r0, #22
   10578:	d005      	beq.n	10586 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   1057a:	2000      	movs	r0, #0
   1057c:	4770      	bx	lr
   1057e:	2001      	movs	r0, #1
   10580:	4770      	bx	lr
   10582:	701a      	strb	r2, [r3, #0]
   10584:	e7fb      	b.n	1057e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   10586:	f883 c000 	strb.w	ip, [r3]
   1058a:	e7f8      	b.n	1057e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

0001058c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   1058c:	b418      	push	{r3, r4}
   1058e:	b2cb      	uxtb	r3, r1
   10590:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   10594:	b2c1      	uxtb	r1, r0
   10596:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1059a:	2b01      	cmp	r3, #1
   1059c:	d005      	beq.n	105aa <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x1e>
   1059e:	2b02      	cmp	r3, #2
   105a0:	bf08      	it	eq
   105a2:	f1bc 0f02 	cmpeq.w	ip, #2
   105a6:	d01a      	beq.n	105de <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   105a8:	e002      	b.n	105b0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
   105aa:	f1bc 0f01 	cmp.w	ip, #1
   105ae:	d016      	beq.n	105de <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   105b0:	2901      	cmp	r1, #1
   105b2:	d004      	beq.n	105be <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x32>
   105b4:	2902      	cmp	r1, #2
   105b6:	bf08      	it	eq
   105b8:	2802      	cmpeq	r0, #2
   105ba:	d010      	beq.n	105de <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   105bc:	e001      	b.n	105c2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
   105be:	2801      	cmp	r0, #1
   105c0:	d00d      	beq.n	105de <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   105c2:	ea01 010c 	and.w	r1, r1, ip
   105c6:	f361 0207 	bfi	r2, r1, #0, #8
   105ca:	4018      	ands	r0, r3
   105cc:	f360 220f 	bfi	r2, r0, #8, #8
   105d0:	b2d0      	uxtb	r0, r2
   105d2:	f010 0f02 	tst.w	r0, #2
   105d6:	bf18      	it	ne
   105d8:	2002      	movne	r0, #2
   105da:	d10b      	bne.n	105f4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   105dc:	e006      	b.n	105ec <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x60>
   105de:	4008      	ands	r0, r1
   105e0:	ea03 010c 	and.w	r1, r3, ip
   105e4:	4008      	ands	r0, r1
   105e6:	f360 0207 	bfi	r2, r0, #0, #8
   105ea:	e7ef      	b.n	105cc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x40>
   105ec:	f010 0001 	ands.w	r0, r0, #1
   105f0:	bf18      	it	ne
   105f2:	2001      	movne	r0, #1
   105f4:	f88d 0000 	strb.w	r0, [sp]
   105f8:	f3c2 2007 	ubfx	r0, r2, #8, #8
   105fc:	f010 0f02 	tst.w	r0, #2
   10600:	bf18      	it	ne
   10602:	2002      	movne	r0, #2
   10604:	d103      	bne.n	1060e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x82>
   10606:	f010 0001 	ands.w	r0, r0, #1
   1060a:	bf18      	it	ne
   1060c:	2001      	movne	r0, #1
   1060e:	f88d 0001 	strb.w	r0, [sp, #1]
   10612:	f8bd 0000 	ldrh.w	r0, [sp]
   10616:	bc18      	pop	{r3, r4}
   10618:	4770      	bx	lr

0001061a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   1061a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1061e:	460c      	mov	r4, r1
   10620:	4605      	mov	r5, r0
   10622:	68c7      	ldr	r7, [r0, #12]
   10624:	f7f1 fd08 	bl	2038 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   10628:	b198      	cbz	r0, 10652 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   1062a:	b1bc      	cbz	r4, 1065c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1062c:	4638      	mov	r0, r7
   1062e:	68e9      	ldr	r1, [r5, #12]
   10630:	f7f1 f9aa 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   10634:	2800      	cmp	r0, #0
   10636:	dd11      	ble.n	1065c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   10638:	4420      	add	r0, r4
   1063a:	1e40      	subs	r0, r0, #1
   1063c:	fbb0 f6f4 	udiv	r6, r0, r4
   10640:	fb06 f104 	mul.w	r1, r6, r4
   10644:	4638      	mov	r0, r7
   10646:	f7f1 f969 	bl	191c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   1064a:	60e8      	str	r0, [r5, #12]
   1064c:	4630      	mov	r0, r6
   1064e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10652:	f240 31cf 	movw	r1, #975	; 0x3cf
   10656:	2029      	movs	r0, #41	; 0x29
   10658:	f7f3 fd18 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1065c:	2000      	movs	r0, #0
   1065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010662 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   10662:	b538      	push	{r3, r4, r5, lr}
   10664:	4605      	mov	r5, r0
   10666:	460c      	mov	r4, r1
   10668:	4668      	mov	r0, sp
   1066a:	f7fd fef7 	bl	e45c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   1066e:	2800      	cmp	r0, #0
   10670:	bf08      	it	eq
   10672:	bd38      	popeq	{r3, r4, r5, pc}
   10674:	f99d 2000 	ldrsb.w	r2, [sp]
   10678:	7222      	strb	r2, [r4, #8]
   1067a:	7ee0      	ldrb	r0, [r4, #27]
   1067c:	7260      	strb	r0, [r4, #9]
   1067e:	f994 100a 	ldrsb.w	r1, [r4, #10]
   10682:	2000      	movs	r0, #0
   10684:	1a51      	subs	r1, r2, r1
   10686:	bf48      	it	mi
   10688:	4249      	negmi	r1, r1
   1068a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1068e:	428b      	cmp	r3, r1
   10690:	bfc8      	it	gt
   10692:	bd38      	popgt	{r3, r4, r5, pc}
   10694:	2bff      	cmp	r3, #255	; 0xff
   10696:	bf08      	it	eq
   10698:	bd38      	popeq	{r3, r4, r5, pc}
   1069a:	7ae1      	ldrb	r1, [r4, #11]
   1069c:	1c49      	adds	r1, r1, #1
   1069e:	b2c9      	uxtb	r1, r1
   106a0:	72e1      	strb	r1, [r4, #11]
   106a2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   106a6:	4299      	cmp	r1, r3
   106a8:	d803      	bhi.n	106b2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   106aa:	7aa1      	ldrb	r1, [r4, #10]
   106ac:	297f      	cmp	r1, #127	; 0x7f
   106ae:	bf18      	it	ne
   106b0:	bd38      	popne	{r3, r4, r5, pc}
   106b2:	72a2      	strb	r2, [r4, #10]
   106b4:	2000      	movs	r0, #0
   106b6:	72e0      	strb	r0, [r4, #11]
   106b8:	2001      	movs	r0, #1
   106ba:	bd38      	pop	{r3, r4, r5, pc}

000106bc <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   106bc:	2300      	movs	r3, #0
   106be:	6203      	str	r3, [r0, #32]
   106c0:	8502      	strh	r2, [r0, #40]	; 0x28
   106c2:	f240 2371 	movw	r3, #625	; 0x271
   106c6:	435a      	muls	r2, r3
   106c8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   106cc:	1e52      	subs	r2, r2, #1
   106ce:	fbb2 f1f1 	udiv	r1, r2, r1
   106d2:	6241      	str	r1, [r0, #36]	; 0x24
   106d4:	4770      	bx	lr

000106d6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   106d6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   106da:	4607      	mov	r7, r0
   106dc:	4691      	mov	r9, r2
   106de:	468a      	mov	sl, r1
   106e0:	f04f 0801 	mov.w	r8, #1
   106e4:	4608      	mov	r0, r1
   106e6:	f000 f91d 	bl	10924 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   106ea:	4604      	mov	r4, r0
   106ec:	4650      	mov	r0, sl
   106ee:	f000 f925 	bl	1093c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   106f2:	4606      	mov	r6, r0
   106f4:	f010 0f01 	tst.w	r0, #1
   106f8:	bf18      	it	ne
   106fa:	2501      	movne	r5, #1
   106fc:	d02a      	beq.n	10754 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x7e>
   106fe:	f014 0f01 	tst.w	r4, #1
   10702:	bf18      	it	ne
   10704:	f04f 0b01 	movne.w	fp, #1
   10708:	d02f      	beq.n	1076a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x94>
   1070a:	ea55 000b 	orrs.w	r0, r5, fp
   1070e:	bf08      	it	eq
   10710:	f04f 0800 	moveq.w	r8, #0
   10714:	f7fc fe14 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10718:	4230      	tst	r0, r6
   1071a:	bf08      	it	eq
   1071c:	2500      	moveq	r5, #0
   1071e:	f7fc fe0f 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10722:	4220      	tst	r0, r4
   10724:	bf08      	it	eq
   10726:	f04f 0b00 	moveq.w	fp, #0
   1072a:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
   1072e:	42a8      	cmp	r0, r5
   10730:	bf08      	it	eq
   10732:	2500      	moveq	r5, #0
   10734:	f889 5000 	strb.w	r5, [r9]
   10738:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
   1073c:	4558      	cmp	r0, fp
   1073e:	bf08      	it	eq
   10740:	f04f 0b00 	moveq.w	fp, #0
   10744:	f889 b001 	strb.w	fp, [r9, #1]
   10748:	2d00      	cmp	r5, #0
   1074a:	bf08      	it	eq
   1074c:	f1bb 0f00 	cmpeq.w	fp, #0
   10750:	d128      	bne.n	107a4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   10752:	e018      	b.n	10786 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb0>
   10754:	f010 0f02 	tst.w	r0, #2
   10758:	bf18      	it	ne
   1075a:	2502      	movne	r5, #2
   1075c:	d1cf      	bne.n	106fe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   1075e:	f016 0f04 	tst.w	r6, #4
   10762:	bf14      	ite	ne
   10764:	2508      	movne	r5, #8
   10766:	2500      	moveq	r5, #0
   10768:	e7c9      	b.n	106fe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   1076a:	f014 0f02 	tst.w	r4, #2
   1076e:	bf18      	it	ne
   10770:	f04f 0b02 	movne.w	fp, #2
   10774:	d1c9      	bne.n	1070a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   10776:	f014 0f04 	tst.w	r4, #4
   1077a:	bf14      	ite	ne
   1077c:	f04f 0b08 	movne.w	fp, #8
   10780:	f04f 0b00 	moveq.w	fp, #0
   10784:	e7c1      	b.n	1070a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   10786:	4650      	mov	r0, sl
   10788:	f000 f8d6 	bl	10938 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   1078c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
   10790:	1a40      	subs	r0, r0, r1
   10792:	b200      	sxth	r0, r0
   10794:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10798:	4288      	cmp	r0, r1
   1079a:	dc01      	bgt.n	107a0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xca>
   1079c:	2800      	cmp	r0, #0
   1079e:	dc01      	bgt.n	107a4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   107a0:	f04f 0800 	mov.w	r8, #0
   107a4:	4640      	mov	r0, r8
   107a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000107aa <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   107aa:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   107ae:	4281      	cmp	r1, r0
   107b0:	bf38      	it	cc
   107b2:	4608      	movcc	r0, r1
   107b4:	1a08      	subs	r0, r1, r0
   107b6:	6819      	ldr	r1, [r3, #0]
   107b8:	0840      	lsrs	r0, r0, #1
   107ba:	4401      	add	r1, r0
   107bc:	6019      	str	r1, [r3, #0]
   107be:	6811      	ldr	r1, [r2, #0]
   107c0:	eba1 0100 	sub.w	r1, r1, r0
   107c4:	6011      	str	r1, [r2, #0]
   107c6:	bf18      	it	ne
   107c8:	2001      	movne	r0, #1
   107ca:	4770      	bx	lr

000107cc <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   107cc:	f641 524c 	movw	r2, #7500	; 0x1d4c
   107d0:	4291      	cmp	r1, r2
   107d2:	bf34      	ite	cc
   107d4:	2164      	movcc	r1, #100	; 0x64
   107d6:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   107da:	4348      	muls	r0, r1
   107dc:	4770      	bx	lr

000107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   107de:	f641 524c 	movw	r2, #7500	; 0x1d4c
   107e2:	4291      	cmp	r1, r2
   107e4:	bf34      	ite	cc
   107e6:	2164      	movcc	r1, #100	; 0x64
   107e8:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   107ec:	fb10 f001 	smulbb	r0, r0, r1
   107f0:	4770      	bx	lr
   107f2:	b510      	push	{r4, lr}
   107f4:	7c0a      	ldrb	r2, [r1, #16]
   107f6:	f002 021f 	and.w	r2, r2, #31
   107fa:	740a      	strb	r2, [r1, #16]
   107fc:	2200      	movs	r2, #0
   107fe:	7642      	strb	r2, [r0, #25]
   10800:	188b      	adds	r3, r1, r2
   10802:	f893 c00c 	ldrb.w	ip, [r3, #12]
   10806:	f00c 0301 	and.w	r3, ip, #1
   1080a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1080e:	f00c 0401 	and.w	r4, ip, #1
   10812:	4423      	add	r3, r4
   10814:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10818:	f00c 0401 	and.w	r4, ip, #1
   1081c:	4423      	add	r3, r4
   1081e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10822:	f00c 0401 	and.w	r4, ip, #1
   10826:	4423      	add	r3, r4
   10828:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1082c:	f00c 0401 	and.w	r4, ip, #1
   10830:	4423      	add	r3, r4
   10832:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10836:	f00c 0401 	and.w	r4, ip, #1
   1083a:	4423      	add	r3, r4
   1083c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10840:	f00c 0401 	and.w	r4, ip, #1
   10844:	4423      	add	r3, r4
   10846:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   1084a:	eb00 0c02 	add.w	ip, r0, r2
   1084e:	1c52      	adds	r2, r2, #1
   10850:	f88c 3014 	strb.w	r3, [ip, #20]
   10854:	f890 c019 	ldrb.w	ip, [r0, #25]
   10858:	2a05      	cmp	r2, #5
   1085a:	4463      	add	r3, ip
   1085c:	7643      	strb	r3, [r0, #25]
   1085e:	dbcf      	blt.n	10800 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   10860:	b2d8      	uxtb	r0, r3
   10862:	2825      	cmp	r0, #37	; 0x25
   10864:	bf98      	it	ls
   10866:	bd10      	popls	{r4, pc}
   10868:	21d8      	movs	r1, #216	; 0xd8
   1086a:	2029      	movs	r0, #41	; 0x29
   1086c:	f7f3 fc0e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010870 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   10870:	b430      	push	{r4, r5}
   10872:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   10876:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   1087a:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   1087e:	7903      	ldrb	r3, [r0, #4]
   10880:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   10884:	2900      	cmp	r1, #0
   10886:	bf18      	it	ne
   10888:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   1088c:	d903      	bls.n	10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   1088e:	f640 5107 	movw	r1, #3335	; 0xd07
   10892:	428a      	cmp	r2, r1
   10894:	d90b      	bls.n	108ae <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   10896:	1f91      	subs	r1, r2, #6
   10898:	f640 457a 	movw	r5, #3194	; 0xc7a
   1089c:	42a9      	cmp	r1, r5
   1089e:	d80f      	bhi.n	108c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   108a0:	b173      	cbz	r3, 108c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   108a2:	2b08      	cmp	r3, #8
   108a4:	bf98      	it	ls
   108a6:	4293      	cmpls	r3, r2
   108a8:	d20a      	bcs.n	108c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   108aa:	4562      	cmp	r2, ip
   108ac:	d308      	bcc.n	108c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   108ae:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   108b2:	d205      	bcs.n	108c0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   108b4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   108b8:	bf9e      	ittt	ls
   108ba:	2001      	movls	r0, #1
   108bc:	bc30      	popls	{r4, r5}
   108be:	4770      	bxls	lr
   108c0:	2000      	movs	r0, #0
   108c2:	bc30      	pop	{r4, r5}
   108c4:	4770      	bx	lr

000108c6 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   108c6:	1d02      	adds	r2, r0, #4
   108c8:	4608      	mov	r0, r1
   108ca:	4611      	mov	r1, r2
   108cc:	f001 bdb7 	b.w	1243e <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

000108d0 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   108d0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   108d4:	4770      	bx	lr

000108d6 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   108d6:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   108da:	4770      	bx	lr

000108dc <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   108dc:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   108e0:	4770      	bx	lr

000108e2 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   108e2:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   108e6:	4770      	bx	lr

000108e8 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   108e8:	8980      	ldrh	r0, [r0, #12]
   108ea:	8008      	strh	r0, [r1, #0]
   108ec:	4770      	bx	lr

000108ee <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   108ee:	f8d0 0016 	ldr.w	r0, [r0, #22]
   108f2:	6008      	str	r0, [r1, #0]
   108f4:	4770      	bx	lr

000108f6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   108f6:	6842      	ldr	r2, [r0, #4]
   108f8:	600a      	str	r2, [r1, #0]
   108fa:	6880      	ldr	r0, [r0, #8]
   108fc:	6048      	str	r0, [r1, #4]
   108fe:	4770      	bx	lr

00010900 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   10900:	f8d0 200e 	ldr.w	r2, [r0, #14]
   10904:	600a      	str	r2, [r1, #0]
   10906:	f8d0 0012 	ldr.w	r0, [r0, #18]
   1090a:	6048      	str	r0, [r1, #4]
   1090c:	4770      	bx	lr

0001090e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   1090e:	6842      	ldr	r2, [r0, #4]
   10910:	600a      	str	r2, [r1, #0]
   10912:	6880      	ldr	r0, [r0, #8]
   10914:	6048      	str	r0, [r1, #4]
   10916:	4770      	bx	lr

00010918 <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   10918:	7840      	ldrb	r0, [r0, #1]
   1091a:	4770      	bx	lr

0001091c <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   1091c:	7800      	ldrb	r0, [r0, #0]
   1091e:	f000 0003 	and.w	r0, r0, #3
   10922:	4770      	bx	lr

00010924 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   10924:	7900      	ldrb	r0, [r0, #4]
   10926:	4770      	bx	lr

00010928 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   10928:	8880      	ldrh	r0, [r0, #4]
   1092a:	4770      	bx	lr

0001092c <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   1092c:	88c0      	ldrh	r0, [r0, #6]
   1092e:	4770      	bx	lr

00010930 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   10930:	8900      	ldrh	r0, [r0, #8]
   10932:	4770      	bx	lr

00010934 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   10934:	8940      	ldrh	r0, [r0, #10]
   10936:	4770      	bx	lr

00010938 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   10938:	88c0      	ldrh	r0, [r0, #6]
   1093a:	4770      	bx	lr

0001093c <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   1093c:	7940      	ldrb	r0, [r0, #5]
   1093e:	4770      	bx	lr

00010940 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   10940:	7900      	ldrb	r0, [r0, #4]
   10942:	4770      	bx	lr

00010944 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   10944:	7900      	ldrb	r0, [r0, #4]
   10946:	4770      	bx	lr

00010948 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   10948:	8901      	ldrh	r1, [r0, #8]
   1094a:	291b      	cmp	r1, #27
   1094c:	bf24      	itt	cs
   1094e:	8941      	ldrhcs	r1, [r0, #10]
   10950:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   10954:	d307      	bcc.n	10966 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   10956:	8881      	ldrh	r1, [r0, #4]
   10958:	291b      	cmp	r1, #27
   1095a:	bf21      	itttt	cs
   1095c:	88c0      	ldrhcs	r0, [r0, #6]
   1095e:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   10962:	2001      	movcs	r0, #1
   10964:	4770      	bxcs	lr
   10966:	2000      	movs	r0, #0
   10968:	4770      	bx	lr

0001096a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   1096a:	b510      	push	{r4, lr}
   1096c:	29fb      	cmp	r1, #251	; 0xfb
   1096e:	bf9c      	itt	ls
   10970:	7041      	strbls	r1, [r0, #1]
   10972:	bd10      	popls	{r4, pc}
   10974:	f240 5156 	movw	r1, #1366	; 0x556
   10978:	202a      	movs	r0, #42	; 0x2a
   1097a:	f7f3 fb87 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001097e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   1097e:	7901      	ldrb	r1, [r0, #4]
   10980:	f011 0f07 	tst.w	r1, #7
   10984:	bf1b      	ittet	ne
   10986:	7940      	ldrbne	r0, [r0, #5]
   10988:	f010 0f07 	tstne.w	r0, #7
   1098c:	2000      	moveq	r0, #0
   1098e:	2001      	movne	r0, #1
   10990:	4770      	bx	lr

00010992 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   10992:	7901      	ldrb	r1, [r0, #4]
   10994:	f011 0f07 	tst.w	r1, #7
   10998:	bf1b      	ittet	ne
   1099a:	7940      	ldrbne	r0, [r0, #5]
   1099c:	f010 0f07 	tstne.w	r0, #7
   109a0:	2000      	moveq	r0, #0
   109a2:	2001      	movne	r0, #1
   109a4:	4770      	bx	lr

000109a6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   109a6:	7900      	ldrb	r0, [r0, #4]
   109a8:	4770      	bx	lr

000109aa <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   109aa:	7940      	ldrb	r0, [r0, #5]
   109ac:	4770      	bx	lr

000109ae <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   109ae:	7101      	strb	r1, [r0, #4]
   109b0:	4770      	bx	lr

000109b2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   109b2:	7141      	strb	r1, [r0, #5]
   109b4:	4770      	bx	lr

000109b6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   109b6:	b510      	push	{r4, lr}
   109b8:	2a1b      	cmp	r2, #27
   109ba:	d904      	bls.n	109c6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   109bc:	f240 31bd 	movw	r1, #957	; 0x3bd
   109c0:	202a      	movs	r0, #42	; 0x2a
   109c2:	f7f3 fb63 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109c6:	7042      	strb	r2, [r0, #1]
   109c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109cc:	1cc0      	adds	r0, r0, #3
   109ce:	f7f3 b9d3 	b.w	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

000109d2 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   109d2:	6809      	ldr	r1, [r1, #0]
   109d4:	60c1      	str	r1, [r0, #12]
   109d6:	4770      	bx	lr

000109d8 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   109d8:	680a      	ldr	r2, [r1, #0]
   109da:	6042      	str	r2, [r0, #4]
   109dc:	6849      	ldr	r1, [r1, #4]
   109de:	6081      	str	r1, [r0, #8]
   109e0:	4770      	bx	lr

000109e2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   109e2:	680a      	ldr	r2, [r1, #0]
   109e4:	6042      	str	r2, [r0, #4]
   109e6:	6849      	ldr	r1, [r1, #4]
   109e8:	6081      	str	r1, [r0, #8]
   109ea:	4770      	bx	lr

000109ec <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   109ec:	680a      	ldr	r2, [r1, #0]
   109ee:	6042      	str	r2, [r0, #4]
   109f0:	6849      	ldr	r1, [r1, #4]
   109f2:	6081      	str	r1, [r0, #8]
   109f4:	4770      	bx	lr

000109f6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   109f6:	7802      	ldrb	r2, [r0, #0]
   109f8:	f001 0103 	and.w	r1, r1, #3
   109fc:	f022 0203 	bic.w	r2, r2, #3
   10a00:	4311      	orrs	r1, r2
   10a02:	7001      	strb	r1, [r0, #0]
   10a04:	4770      	bx	lr

00010a06 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   10a06:	7101      	strb	r1, [r0, #4]
   10a08:	0a09      	lsrs	r1, r1, #8
   10a0a:	7141      	strb	r1, [r0, #5]
   10a0c:	4770      	bx	lr

00010a0e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   10a0e:	7181      	strb	r1, [r0, #6]
   10a10:	0a09      	lsrs	r1, r1, #8
   10a12:	71c1      	strb	r1, [r0, #7]
   10a14:	4770      	bx	lr

00010a16 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   10a16:	7201      	strb	r1, [r0, #8]
   10a18:	0a09      	lsrs	r1, r1, #8
   10a1a:	7241      	strb	r1, [r0, #9]
   10a1c:	4770      	bx	lr

00010a1e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   10a1e:	7281      	strb	r1, [r0, #10]
   10a20:	0a09      	lsrs	r1, r1, #8
   10a22:	72c1      	strb	r1, [r0, #11]
   10a24:	4770      	bx	lr

00010a26 <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   10a26:	7800      	ldrb	r0, [r0, #0]
   10a28:	f000 000f 	and.w	r0, r0, #15
   10a2c:	4770      	bx	lr

00010a2e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   10a2e:	b430      	push	{r4, r5}
   10a30:	7802      	ldrb	r2, [r0, #0]
   10a32:	f002 020f 	and.w	r2, r2, #15
   10a36:	2a03      	cmp	r2, #3
   10a38:	d02d      	beq.n	10a96 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   10a3a:	2a05      	cmp	r2, #5
   10a3c:	d12e      	bne.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a3e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   10a42:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   10a46:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   10a4a:	7d83      	ldrb	r3, [r0, #22]
   10a4c:	2900      	cmp	r1, #0
   10a4e:	bf18      	it	ne
   10a50:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10a54:	d907      	bls.n	10a66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10a56:	f640 5107 	movw	r1, #3335	; 0xd07
   10a5a:	428a      	cmp	r2, r1
   10a5c:	d803      	bhi.n	10a66 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10a5e:	7841      	ldrb	r1, [r0, #1]
   10a60:	2922      	cmp	r1, #34	; 0x22
   10a62:	d11b      	bne.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a64:	e00e      	b.n	10a84 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   10a66:	7841      	ldrb	r1, [r0, #1]
   10a68:	2922      	cmp	r1, #34	; 0x22
   10a6a:	d117      	bne.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a6c:	1f91      	subs	r1, r2, #6
   10a6e:	f640 457a 	movw	r5, #3194	; 0xc7a
   10a72:	42a9      	cmp	r1, r5
   10a74:	d812      	bhi.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a76:	b18b      	cbz	r3, 10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a78:	2b08      	cmp	r3, #8
   10a7a:	bf98      	it	ls
   10a7c:	4293      	cmpls	r3, r2
   10a7e:	d20d      	bcs.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a80:	4562      	cmp	r2, ip
   10a82:	d30b      	bcc.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a84:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10a88:	d208      	bcs.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a8a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   10a8e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   10a92:	d803      	bhi.n	10a9c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a94:	e005      	b.n	10aa2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10a96:	7840      	ldrb	r0, [r0, #1]
   10a98:	280c      	cmp	r0, #12
   10a9a:	d002      	beq.n	10aa2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10a9c:	bc30      	pop	{r4, r5}
   10a9e:	2000      	movs	r0, #0
   10aa0:	4770      	bx	lr
   10aa2:	bc30      	pop	{r4, r5}
   10aa4:	2001      	movs	r0, #1
   10aa6:	4770      	bx	lr

00010aa8 <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   10aa8:	22c0      	movs	r2, #192	; 0xc0
   10aaa:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   10aae:	78c2      	ldrb	r2, [r0, #3]
   10ab0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   10ab4:	4311      	orrs	r1, r2
   10ab6:	70c1      	strb	r1, [r0, #3]
   10ab8:	4770      	bx	lr

00010aba <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   10aba:	b570      	push	{r4, r5, r6, lr}
   10abc:	4614      	mov	r4, r2
   10abe:	4605      	mov	r5, r0
   10ac0:	2a1f      	cmp	r2, #31
   10ac2:	d903      	bls.n	10acc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   10ac4:	21b0      	movs	r1, #176	; 0xb0
   10ac6:	202a      	movs	r0, #42	; 0x2a
   10ac8:	f7f3 fae0 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10acc:	f105 0009 	add.w	r0, r5, #9
   10ad0:	f7f3 f952 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10ad4:	1da0      	adds	r0, r4, #6
   10ad6:	7068      	strb	r0, [r5, #1]
   10ad8:	bd70      	pop	{r4, r5, r6, pc}

00010ada <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   10ada:	b570      	push	{r4, r5, r6, lr}
   10adc:	461e      	mov	r6, r3
   10ade:	000c      	movs	r4, r1
   10ae0:	4605      	mov	r5, r0
   10ae2:	d00a      	beq.n	10afa <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   10ae4:	4611      	mov	r1, r2
   10ae6:	f7f5 ffdf 	bl	6aa8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   10aea:	b158      	cbz	r0, 10b04 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   10aec:	4428      	add	r0, r5
   10aee:	4632      	mov	r2, r6
   10af0:	4621      	mov	r1, r4
   10af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10af6:	f7f3 b93f 	b.w	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10afa:	f240 21be 	movw	r1, #702	; 0x2be
   10afe:	202a      	movs	r0, #42	; 0x2a
   10b00:	f7f3 fac4 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b04:	f240 21bf 	movw	r1, #703	; 0x2bf
   10b08:	202a      	movs	r0, #42	; 0x2a
   10b0a:	f7f3 fabf 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b0e <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   10b0e:	b2c9      	uxtb	r1, r1
   10b10:	f001 0201 	and.w	r2, r1, #1
   10b14:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10b18:	441a      	add	r2, r3
   10b1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10b1e:	f3c1 0380 	ubfx	r3, r1, #2, #1
   10b22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10b26:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   10b2a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10b2e:	f3c1 1300 	ubfx	r3, r1, #4, #1
   10b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10b36:	441a      	add	r2, r3
   10b38:	f3c1 1340 	ubfx	r3, r1, #5, #1
   10b3c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10b40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10b44:	f3c1 1380 	ubfx	r3, r1, #6, #1
   10b48:	441a      	add	r2, r3
   10b4a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10b4e:	d002      	beq.n	10b56 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   10b50:	1c52      	adds	r2, r2, #1
   10b52:	b2d2      	uxtb	r2, r2
   10b54:	7101      	strb	r1, [r0, #4]
   10b56:	78c3      	ldrb	r3, [r0, #3]
   10b58:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10b5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10b60:	4319      	orrs	r1, r3
   10b62:	70c1      	strb	r1, [r0, #3]
   10b64:	1c51      	adds	r1, r2, #1
   10b66:	7041      	strb	r1, [r0, #1]
   10b68:	4770      	bx	lr

00010b6a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   10b6a:	b510      	push	{r4, lr}
   10b6c:	7802      	ldrb	r2, [r0, #0]
   10b6e:	f001 030f 	and.w	r3, r1, #15
   10b72:	f022 020f 	bic.w	r2, r2, #15
   10b76:	431a      	orrs	r2, r3
   10b78:	7002      	strb	r2, [r0, #0]
   10b7a:	2909      	cmp	r1, #9
   10b7c:	d213      	bcs.n	10ba6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   10b7e:	e8df f001 	tbb	[pc, r1]
   10b82:	0705      	.short	0x0705
   10b84:	09050705 	.word	0x09050705
   10b88:	000f0b05 	.word	0x000f0b05
   10b8c:	2106      	movs	r1, #6
   10b8e:	e008      	b.n	10ba2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b90:	210c      	movs	r1, #12
   10b92:	e006      	b.n	10ba2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b94:	2122      	movs	r1, #34	; 0x22
   10b96:	e004      	b.n	10ba2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b98:	2101      	movs	r1, #1
   10b9a:	2200      	movs	r2, #0
   10b9c:	70c2      	strb	r2, [r0, #3]
   10b9e:	e000      	b.n	10ba2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10ba0:	210e      	movs	r1, #14
   10ba2:	7041      	strb	r1, [r0, #1]
   10ba4:	bd10      	pop	{r4, pc}
   10ba6:	216e      	movs	r1, #110	; 0x6e
   10ba8:	202a      	movs	r0, #42	; 0x2a
   10baa:	f7f3 fa6f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010bae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   10bae:	680a      	ldr	r2, [r1, #0]
   10bb0:	f8c0 2009 	str.w	r2, [r0, #9]
   10bb4:	8889      	ldrh	r1, [r1, #4]
   10bb6:	f8a0 100d 	strh.w	r1, [r0, #13]
   10bba:	4770      	bx	lr

00010bbc <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   10bbc:	7802      	ldrb	r2, [r0, #0]
   10bbe:	2380      	movs	r3, #128	; 0x80
   10bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   10bc4:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   10bc8:	4311      	orrs	r1, r2
   10bca:	7001      	strb	r1, [r0, #0]
   10bcc:	4770      	bx	lr

00010bce <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   10bce:	680a      	ldr	r2, [r1, #0]
   10bd0:	f8c0 2003 	str.w	r2, [r0, #3]
   10bd4:	8889      	ldrh	r1, [r1, #4]
   10bd6:	f8a0 1007 	strh.w	r1, [r0, #7]
   10bda:	4770      	bx	lr

00010bdc <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   10bdc:	7802      	ldrb	r2, [r0, #0]
   10bde:	2340      	movs	r3, #64	; 0x40
   10be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10be4:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   10be8:	4311      	orrs	r1, r2
   10bea:	7001      	strb	r1, [r0, #0]
   10bec:	4770      	bx	lr

00010bee <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   10bee:	b570      	push	{r4, r5, r6, lr}
   10bf0:	4614      	mov	r4, r2
   10bf2:	4605      	mov	r5, r0
   10bf4:	2a1f      	cmp	r2, #31
   10bf6:	d903      	bls.n	10c00 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   10bf8:	21d2      	movs	r1, #210	; 0xd2
   10bfa:	202a      	movs	r0, #42	; 0x2a
   10bfc:	f7f3 fa46 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c00:	f105 0009 	add.w	r0, r5, #9
   10c04:	f7f3 f8b8 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10c08:	1da0      	adds	r0, r4, #6
   10c0a:	7068      	strb	r0, [r5, #1]
   10c0c:	bd70      	pop	{r4, r5, r6, pc}

00010c0e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   10c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c12:	4604      	mov	r4, r0
   10c14:	b082      	sub	sp, #8
   10c16:	4688      	mov	r8, r1
   10c18:	2000      	movs	r0, #0
   10c1a:	f7f3 fbeb 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10c1e:	4605      	mov	r5, r0
   10c20:	2001      	movs	r0, #1
   10c22:	f7f3 fbe7 	bl	43f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10c26:	4428      	add	r0, r5
   10c28:	b2c7      	uxtb	r7, r0
   10c2a:	2600      	movs	r6, #0
   10c2c:	eb17 0508 	adds.w	r5, r7, r8
   10c30:	bf18      	it	ne
   10c32:	f04f 0800 	movne.w	r8, #0
   10c36:	d01c      	beq.n	10c72 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   10c38:	8820      	ldrh	r0, [r4, #0]
   10c3a:	1c40      	adds	r0, r0, #1
   10c3c:	b280      	uxth	r0, r0
   10c3e:	8020      	strh	r0, [r4, #0]
   10c40:	42a8      	cmp	r0, r5
   10c42:	bf28      	it	cs
   10c44:	f8a4 8000 	strhcs.w	r8, [r4]
   10c48:	8820      	ldrh	r0, [r4, #0]
   10c4a:	42b8      	cmp	r0, r7
   10c4c:	bf28      	it	cs
   10c4e:	4285      	cmpcs	r5, r0
   10c50:	d903      	bls.n	10c5a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   10c52:	b002      	add	sp, #8
   10c54:	2000      	movs	r0, #0
   10c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c5a:	4669      	mov	r1, sp
   10c5c:	f7ff fb59 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10c60:	2800      	cmp	r0, #0
   10c62:	bf04      	itt	eq
   10c64:	b002      	addeq	sp, #8
   10c66:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c6a:	1c70      	adds	r0, r6, #1
   10c6c:	b2c6      	uxtb	r6, r0
   10c6e:	42b5      	cmp	r5, r6
   10c70:	d8e2      	bhi.n	10c38 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   10c72:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10c76:	8020      	strh	r0, [r4, #0]
   10c78:	b002      	add	sp, #8
   10c7a:	2012      	movs	r0, #18
   10c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c80 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   10c80:	7801      	ldrb	r1, [r0, #0]
   10c82:	2900      	cmp	r1, #0
   10c84:	bf08      	it	eq
   10c86:	4770      	bxeq	lr
   10c88:	6841      	ldr	r1, [r0, #4]
   10c8a:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   10c8e:	2a00      	cmp	r2, #0
   10c90:	bf08      	it	eq
   10c92:	4770      	bxeq	lr
   10c94:	2200      	movs	r2, #0
   10c96:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   10c9a:	6840      	ldr	r0, [r0, #4]
   10c9c:	f000 ba28 	b.w	110f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

00010ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   10ca0:	b430      	push	{r4, r5}
   10ca2:	8050      	strh	r0, [r2, #2]
   10ca4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   10ca8:	f8a2 c004 	strh.w	ip, [r2, #4]
   10cac:	898b      	ldrh	r3, [r1, #12]
   10cae:	80d3      	strh	r3, [r2, #6]
   10cb0:	8948      	ldrh	r0, [r1, #10]
   10cb2:	8110      	strh	r0, [r2, #8]
   10cb4:	89cc      	ldrh	r4, [r1, #14]
   10cb6:	8154      	strh	r4, [r2, #10]
   10cb8:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   10cba:	42a5      	cmp	r5, r4
   10cbc:	bf04      	itt	eq
   10cbe:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   10cc0:	4284      	cmpeq	r4, r0
   10cc2:	d106      	bne.n	10cd2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   10cc4:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   10cc6:	429c      	cmp	r4, r3
   10cc8:	bf02      	ittt	eq
   10cca:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   10ccc:	4563      	cmpeq	r3, ip
   10cce:	2300      	moveq	r3, #0
   10cd0:	d001      	beq.n	10cd6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   10cd2:	f04f 0301 	mov.w	r3, #1
   10cd6:	7313      	strb	r3, [r2, #12]
   10cd8:	8548      	strh	r0, [r1, #42]	; 0x2a
   10cda:	8950      	ldrh	r0, [r2, #10]
   10cdc:	85c8      	strh	r0, [r1, #46]	; 0x2e
   10cde:	8890      	ldrh	r0, [r2, #4]
   10ce0:	8588      	strh	r0, [r1, #44]	; 0x2c
   10ce2:	88d0      	ldrh	r0, [r2, #6]
   10ce4:	8608      	strh	r0, [r1, #48]	; 0x30
   10ce6:	f04f 0001 	mov.w	r0, #1
   10cea:	7010      	strb	r0, [r2, #0]
   10cec:	bc30      	pop	{r4, r5}
   10cee:	4770      	bx	lr

00010cf0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   10cf0:	888a      	ldrh	r2, [r1, #4]
   10cf2:	890b      	ldrh	r3, [r1, #8]
   10cf4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
   10cf8:	88c9      	ldrh	r1, [r1, #6]
   10cfa:	f8a0 c044 	strh.w	ip, [r0, #68]	; 0x44
   10cfe:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
   10d02:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   10d06:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
   10d0a:	4770      	bx	lr

00010d0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   10d0c:	b4f0      	push	{r4, r5, r6, r7}
   10d0e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10d12:	2696      	movs	r6, #150	; 0x96
   10d14:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10d18:	459c      	cmp	ip, r3
   10d1a:	bf3a      	itte	cc
   10d1c:	264d      	movcc	r6, #77	; 0x4d
   10d1e:	4635      	movcc	r5, r6
   10d20:	2596      	movcs	r5, #150	; 0x96
   10d22:	f890 c066 	ldrb.w	ip, [r0, #102]	; 0x66
   10d26:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   10d2a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10d2c:	f1bc 0f02 	cmp.w	ip, #2
   10d30:	bf07      	ittee	eq
   10d32:	009b      	lsleq	r3, r3, #2
   10d34:	333c      	addeq	r3, #60	; 0x3c
   10d36:	00db      	lslne	r3, r3, #3
   10d38:	3370      	addne	r3, #112	; 0x70
   10d3a:	fa1f fc83 	uxth.w	ip, r3
   10d3e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   10d42:	f8b0 7042 	ldrh.w	r7, [r0, #66]	; 0x42
   10d46:	42bb      	cmp	r3, r7
   10d48:	bf28      	it	cs
   10d4a:	463b      	movcs	r3, r7
   10d4c:	4563      	cmp	r3, ip
   10d4e:	bf28      	it	cs
   10d50:	4663      	movcs	r3, ip
   10d52:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10d56:	2c02      	cmp	r4, #2
   10d58:	bf07      	ittee	eq
   10d5a:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10d5e:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10d62:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10d66:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10d6a:	fa1f f48c 	uxth.w	r4, ip
   10d6e:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	; 0x4a
   10d72:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   10d76:	4584      	cmp	ip, r0
   10d78:	bf28      	it	cs
   10d7a:	4684      	movcs	ip, r0
   10d7c:	45a4      	cmp	ip, r4
   10d7e:	bf28      	it	cs
   10d80:	46a4      	movcs	ip, r4
   10d82:	eb03 000c 	add.w	r0, r3, ip
   10d86:	4428      	add	r0, r5
   10d88:	1d80      	adds	r0, r0, #6
   10d8a:	4430      	add	r0, r6
   10d8c:	4410      	add	r0, r2
   10d8e:	4288      	cmp	r0, r1
   10d90:	bf94      	ite	ls
   10d92:	1a08      	subls	r0, r1, r0
   10d94:	2000      	movhi	r0, #0
   10d96:	bcf0      	pop	{r4, r5, r6, r7}
   10d98:	4770      	bx	lr

00010d9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   10d9a:	b470      	push	{r4, r5, r6}
   10d9c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   10da0:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   10da2:	8e45      	ldrh	r5, [r0, #50]	; 0x32
   10da4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
   10da6:	428a      	cmp	r2, r1
   10da8:	bf28      	it	cs
   10daa:	460a      	movcs	r2, r1
   10dac:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   10db0:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   10db4:	428b      	cmp	r3, r1
   10db6:	bf38      	it	cc
   10db8:	4619      	movcc	r1, r3
   10dba:	8642      	strh	r2, [r0, #50]	; 0x32
   10dbc:	86c1      	strh	r1, [r0, #54]	; 0x36
   10dbe:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10dc2:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   10dc4:	4594      	cmp	ip, r2
   10dc6:	bf38      	it	cc
   10dc8:	4694      	movcc	ip, r2
   10dca:	428b      	cmp	r3, r1
   10dcc:	bf38      	it	cc
   10dce:	460b      	movcc	r3, r1
   10dd0:	f8a0 c038 	strh.w	ip, [r0, #56]	; 0x38
   10dd4:	8743      	strh	r3, [r0, #58]	; 0x3a
   10dd6:	42aa      	cmp	r2, r5
   10dd8:	bf0a      	itet	eq
   10dda:	42a1      	cmpeq	r1, r4
   10ddc:	2301      	movne	r3, #1
   10dde:	2300      	moveq	r3, #0
   10de0:	8e04      	ldrh	r4, [r0, #48]	; 0x30
   10de2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   10de6:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   10de8:	f8b0 c034 	ldrh.w	ip, [r0, #52]	; 0x34
   10dec:	428a      	cmp	r2, r1
   10dee:	bf28      	it	cs
   10df0:	460a      	movcs	r2, r1
   10df2:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   10df6:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   10dfa:	428d      	cmp	r5, r1
   10dfc:	bf38      	it	cc
   10dfe:	4629      	movcc	r1, r5
   10e00:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
   10e04:	2d02      	cmp	r5, #2
   10e06:	d00a      	beq.n	10e1e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   10e08:	8602      	strh	r2, [r0, #48]	; 0x30
   10e0a:	8681      	strh	r1, [r0, #52]	; 0x34
   10e0c:	42a2      	cmp	r2, r4
   10e0e:	bf0a      	itet	eq
   10e10:	4561      	cmpeq	r1, ip
   10e12:	2001      	movne	r0, #1
   10e14:	2000      	moveq	r0, #0
   10e16:	ea40 0003 	orr.w	r0, r0, r3
   10e1a:	bc70      	pop	{r4, r5, r6}
   10e1c:	4770      	bx	lr
   10e1e:	4294      	cmp	r4, r2
   10e20:	bf38      	it	cc
   10e22:	4622      	movcc	r2, r4
   10e24:	458c      	cmp	ip, r1
   10e26:	bf38      	it	cc
   10e28:	4661      	movcc	r1, ip
   10e2a:	2500      	movs	r5, #0
   10e2c:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
   10e30:	e7ea      	b.n	10e08 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6e>

00010e32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   10e32:	b4f0      	push	{r4, r5, r6, r7}
   10e34:	6845      	ldr	r5, [r0, #4]
   10e36:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10e3a:	429d      	cmp	r5, r3
   10e3c:	bf34      	ite	cc
   10e3e:	264d      	movcc	r6, #77	; 0x4d
   10e40:	2696      	movcs	r6, #150	; 0x96
   10e42:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
   10e46:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   10e4a:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   10e4e:	2c02      	cmp	r4, #2
   10e50:	bf07      	ittee	eq
   10e52:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10e56:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10e5a:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10e5e:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10e62:	fa1f f48c 	uxth.w	r4, ip
   10e66:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
   10e6a:	f8b0 c042 	ldrh.w	ip, [r0, #66]	; 0x42
   10e6e:	4567      	cmp	r7, ip
   10e70:	bf38      	it	cc
   10e72:	46bc      	movcc	ip, r7
   10e74:	45a4      	cmp	ip, r4
   10e76:	bf38      	it	cc
   10e78:	4664      	movcc	r4, ip
   10e7a:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10e7e:	2b02      	cmp	r3, #2
   10e80:	bf07      	ittee	eq
   10e82:	ea4f 038c 	moveq.w	r3, ip, lsl #2
   10e86:	333c      	addeq	r3, #60	; 0x3c
   10e88:	ea4f 03cc 	movne.w	r3, ip, lsl #3
   10e8c:	3370      	addne	r3, #112	; 0x70
   10e8e:	fa1f fc83 	uxth.w	ip, r3
   10e92:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
   10e96:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10e9a:	429f      	cmp	r7, r3
   10e9c:	bf38      	it	cc
   10e9e:	463b      	movcc	r3, r7
   10ea0:	4563      	cmp	r3, ip
   10ea2:	bf28      	it	cs
   10ea4:	4663      	movcs	r3, ip
   10ea6:	4423      	add	r3, r4
   10ea8:	4433      	add	r3, r6
   10eaa:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
   10eae:	1d9b      	adds	r3, r3, #6
   10eb0:	45ac      	cmp	ip, r5
   10eb2:	bf38      	it	cc
   10eb4:	4665      	movcc	r5, ip
   10eb6:	1a69      	subs	r1, r5, r1
   10eb8:	441a      	add	r2, r3
   10eba:	428a      	cmp	r2, r1
   10ebc:	bf28      	it	cs
   10ebe:	4611      	movcs	r1, r2
   10ec0:	62c1      	str	r1, [r0, #44]	; 0x2c
   10ec2:	bcf0      	pop	{r4, r5, r6, r7}
   10ec4:	4770      	bx	lr

00010ec6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   10ec6:	221b      	movs	r2, #27
   10ec8:	8402      	strh	r2, [r0, #32]
   10eca:	8382      	strh	r2, [r0, #28]
   10ecc:	82c2      	strh	r2, [r0, #22]
   10ece:	8282      	strh	r2, [r0, #20]
   10ed0:	8142      	strh	r2, [r0, #10]
   10ed2:	8202      	strh	r2, [r0, #16]
   10ed4:	8102      	strh	r2, [r0, #8]
   10ed6:	8542      	strh	r2, [r0, #42]	; 0x2a
   10ed8:	8582      	strh	r2, [r0, #44]	; 0x2c
   10eda:	8482      	strh	r2, [r0, #36]	; 0x24
   10edc:	2900      	cmp	r1, #0
   10ede:	bf18      	it	ne
   10ee0:	4770      	bxne	lr
   10ee2:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10ee6:	8441      	strh	r1, [r0, #34]	; 0x22
   10ee8:	83c1      	strh	r1, [r0, #30]
   10eea:	8341      	strh	r1, [r0, #26]
   10eec:	8301      	strh	r1, [r0, #24]
   10eee:	81c1      	strh	r1, [r0, #14]
   10ef0:	8241      	strh	r1, [r0, #18]
   10ef2:	8181      	strh	r1, [r0, #12]
   10ef4:	85c1      	strh	r1, [r0, #46]	; 0x2e
   10ef6:	8601      	strh	r1, [r0, #48]	; 0x30
   10ef8:	4770      	bx	lr

00010efa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   10efa:	6800      	ldr	r0, [r0, #0]
   10efc:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   10f00:	4290      	cmp	r0, r2
   10f02:	bf9c      	itt	ls
   10f04:	2000      	movls	r0, #0
   10f06:	4770      	bxls	lr
   10f08:	1a40      	subs	r0, r0, r1
   10f0a:	389c      	subs	r0, #156	; 0x9c
   10f0c:	0840      	lsrs	r0, r0, #1
   10f0e:	4770      	bx	lr

00010f10 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   10f10:	f8dd c000 	ldr.w	ip, [sp]
   10f14:	8281      	strh	r1, [r0, #20]
   10f16:	82c2      	strh	r2, [r0, #22]
   10f18:	8303      	strh	r3, [r0, #24]
   10f1a:	f8a0 c01a 	strh.w	ip, [r0, #26]
   10f1e:	4770      	bx	lr

00010f20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   10f20:	8050      	strh	r0, [r2, #2]
   10f22:	8a88      	ldrh	r0, [r1, #20]
   10f24:	8090      	strh	r0, [r2, #4]
   10f26:	8ac8      	ldrh	r0, [r1, #22]
   10f28:	80d0      	strh	r0, [r2, #6]
   10f2a:	8b08      	ldrh	r0, [r1, #24]
   10f2c:	8110      	strh	r0, [r2, #8]
   10f2e:	8b48      	ldrh	r0, [r1, #26]
   10f30:	8150      	strh	r0, [r2, #10]
   10f32:	2001      	movs	r0, #1
   10f34:	7010      	strb	r0, [r2, #0]
   10f36:	4770      	bx	lr
   10f38:	2001      	movs	r0, #1
   10f3a:	f7f6 bdff 	b.w	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f3e:	2001      	movs	r0, #1
   10f40:	f7f6 bdfc 	b.w	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f44:	b510      	push	{r4, lr}
   10f46:	f7f7 f86f 	bl	8028 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   10f4a:	2800      	cmp	r0, #0
   10f4c:	bf18      	it	ne
   10f4e:	bd10      	popne	{r4, pc}
   10f50:	2000      	movs	r0, #0
   10f52:	f7f6 fdf3 	bl	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f56:	2000      	movs	r0, #0
   10f58:	bd10      	pop	{r4, pc}
   10f5a:	2001      	movs	r0, #1
   10f5c:	f7f6 bdee 	b.w	7b3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

00010f60 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   10f60:	b510      	push	{r4, lr}
   10f62:	7001      	strb	r1, [r0, #0]
   10f64:	7042      	strb	r2, [r0, #1]
   10f66:	7880      	ldrb	r0, [r0, #2]
   10f68:	f3c0 0380 	ubfx	r3, r0, #2, #1
   10f6c:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   10f70:	4463      	add	r3, ip
   10f72:	f000 0001 	and.w	r0, r0, #1
   10f76:	4418      	add	r0, r3
   10f78:	fb10 f001 	smulbb	r0, r0, r1
   10f7c:	fb10 f002 	smulbb	r0, r0, r2
   10f80:	28ff      	cmp	r0, #255	; 0xff
   10f82:	bf38      	it	cc
   10f84:	bd10      	popcc	{r4, pc}
   10f86:	215c      	movs	r1, #92	; 0x5c
   10f88:	202e      	movs	r0, #46	; 0x2e
   10f8a:	f7f3 f87f 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010f8e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   10f8e:	7881      	ldrb	r1, [r0, #2]
   10f90:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10f94:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10f98:	441a      	add	r2, r3
   10f9a:	f001 0101 	and.w	r1, r1, #1
   10f9e:	4411      	add	r1, r2
   10fa0:	7842      	ldrb	r2, [r0, #1]
   10fa2:	7800      	ldrb	r0, [r0, #0]
   10fa4:	fb12 f000 	smulbb	r0, r2, r0
   10fa8:	4348      	muls	r0, r1
   10faa:	b2c0      	uxtb	r0, r0
   10fac:	4770      	bx	lr

00010fae <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   10fae:	7882      	ldrb	r2, [r0, #2]
   10fb0:	2100      	movs	r1, #0
   10fb2:	f012 0f01 	tst.w	r2, #1
   10fb6:	d005      	beq.n	10fc4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   10fb8:	78c3      	ldrb	r3, [r0, #3]
   10fba:	f013 0f01 	tst.w	r3, #1
   10fbe:	bf08      	it	eq
   10fc0:	2101      	moveq	r1, #1
   10fc2:	d010      	beq.n	10fe6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10fc4:	f012 0f02 	tst.w	r2, #2
   10fc8:	d005      	beq.n	10fd6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   10fca:	78c3      	ldrb	r3, [r0, #3]
   10fcc:	f013 0f02 	tst.w	r3, #2
   10fd0:	bf08      	it	eq
   10fd2:	2102      	moveq	r1, #2
   10fd4:	d007      	beq.n	10fe6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10fd6:	f012 0f04 	tst.w	r2, #4
   10fda:	d004      	beq.n	10fe6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10fdc:	78c3      	ldrb	r3, [r0, #3]
   10fde:	f013 0f04 	tst.w	r3, #4
   10fe2:	bf08      	it	eq
   10fe4:	2104      	moveq	r1, #4
   10fe6:	7943      	ldrb	r3, [r0, #5]
   10fe8:	1c5b      	adds	r3, r3, #1
   10fea:	b2db      	uxtb	r3, r3
   10fec:	7143      	strb	r3, [r0, #5]
   10fee:	f890 c001 	ldrb.w	ip, [r0, #1]
   10ff2:	4563      	cmp	r3, ip
   10ff4:	d10d      	bne.n	11012 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10ff6:	2300      	movs	r3, #0
   10ff8:	7143      	strb	r3, [r0, #5]
   10ffa:	f890 c003 	ldrb.w	ip, [r0, #3]
   10ffe:	ea4c 0c01 	orr.w	ip, ip, r1
   11002:	f880 c003 	strb.w	ip, [r0, #3]
   11006:	4594      	cmp	ip, r2
   11008:	d103      	bne.n	11012 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   1100a:	70c3      	strb	r3, [r0, #3]
   1100c:	7902      	ldrb	r2, [r0, #4]
   1100e:	1c52      	adds	r2, r2, #1
   11010:	7102      	strb	r2, [r0, #4]
   11012:	2901      	cmp	r1, #1
   11014:	bf04      	itt	eq
   11016:	2025      	moveq	r0, #37	; 0x25
   11018:	4770      	bxeq	lr
   1101a:	2902      	cmp	r1, #2
   1101c:	bf04      	itt	eq
   1101e:	2026      	moveq	r0, #38	; 0x26
   11020:	4770      	bxeq	lr
   11022:	2904      	cmp	r1, #4
   11024:	bf04      	itt	eq
   11026:	2027      	moveq	r0, #39	; 0x27
   11028:	4770      	bxeq	lr
   1102a:	b510      	push	{r4, lr}
   1102c:	2139      	movs	r1, #57	; 0x39
   1102e:	202e      	movs	r0, #46	; 0x2e
   11030:	f7f3 f82c 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011034 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   11034:	7081      	strb	r1, [r0, #2]
   11036:	4770      	bx	lr

00011038 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   11038:	b410      	push	{r4}
   1103a:	7881      	ldrb	r1, [r0, #2]
   1103c:	f3c1 0280 	ubfx	r2, r1, #2, #1
   11040:	f3c1 0340 	ubfx	r3, r1, #1, #1
   11044:	441a      	add	r2, r3
   11046:	f001 0101 	and.w	r1, r1, #1
   1104a:	7843      	ldrb	r3, [r0, #1]
   1104c:	4411      	add	r1, r2
   1104e:	fb13 f201 	smulbb	r2, r3, r1
   11052:	78c1      	ldrb	r1, [r0, #3]
   11054:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   11058:	f3c1 0440 	ubfx	r4, r1, #1, #1
   1105c:	44a4      	add	ip, r4
   1105e:	f001 0101 	and.w	r1, r1, #1
   11062:	4461      	add	r1, ip
   11064:	f890 c005 	ldrb.w	ip, [r0, #5]
   11068:	fb11 c103 	smlabb	r1, r1, r3, ip
   1106c:	7803      	ldrb	r3, [r0, #0]
   1106e:	7900      	ldrb	r0, [r0, #4]
   11070:	1a18      	subs	r0, r3, r0
   11072:	fb10 f002 	smulbb	r0, r0, r2
   11076:	1a40      	subs	r0, r0, r1
   11078:	bc10      	pop	{r4}
   1107a:	b2c0      	uxtb	r0, r0
   1107c:	4770      	bx	lr

0001107e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   1107e:	b510      	push	{r4, lr}
   11080:	4604      	mov	r4, r0
   11082:	f001 f9e1 	bl	12448 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   11086:	2001      	movs	r0, #1
   11088:	7060      	strb	r0, [r4, #1]
   1108a:	7020      	strb	r0, [r4, #0]
   1108c:	bd10      	pop	{r4, pc}

0001108e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   1108e:	2100      	movs	r1, #0
   11090:	70c1      	strb	r1, [r0, #3]
   11092:	7141      	strb	r1, [r0, #5]
   11094:	7101      	strb	r1, [r0, #4]
   11096:	4770      	bx	lr

00011098 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   11098:	f240 315a 	movw	r1, #858	; 0x35a
   1109c:	4348      	muls	r0, r1
   1109e:	4770      	bx	lr

000110a0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   110a0:	f240 20ef 	movw	r0, #751	; 0x2ef
   110a4:	4770      	bx	lr
   110a6:	020e      	.short	0x020e
   110a8:	0630041c 	.word	0x0630041c
   110ac:	035a0c60 	.word	0x035a0c60
   110b0:	05c506b4 	.word	0x05c506b4
   110b4:	12250bf5 	.word	0x12250bf5
   110b8:	03b101a3 	.word	0x03b101a3
   110bc:	02ef05bf 	.word	0x02ef05bf
   110c0:	09a30649 	.word	0x09a30649

000110c4 <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   110c4:	b510      	push	{r4, lr}
   110c6:	4604      	mov	r4, r0
   110c8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   110cc:	f001 f92d 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   110d0:	f64d 7141 	movw	r1, #57153	; 0xdf41
   110d4:	4408      	add	r0, r1
   110d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   110da:	fbb0 f0f1 	udiv	r0, r0, r1
   110de:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   110e2:	4620      	mov	r0, r4
   110e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110e8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   110ec:	f7ff bea1 	b.w	10e32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

000110f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   110f0:	b570      	push	{r4, r5, r6, lr}
   110f2:	4604      	mov	r4, r0
   110f4:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   110f8:	b082      	sub	sp, #8
   110fa:	2800      	cmp	r0, #0
   110fc:	bf07      	ittee	eq
   110fe:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   11102:	2803      	cmpeq	r0, #3
   11104:	b002      	addne	sp, #8
   11106:	bd70      	popne	{r4, r5, r6, pc}
   11108:	f7fd fdad 	bl	ec66 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1110c:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   11110:	4601      	mov	r1, r0
   11112:	4610      	mov	r0, r2
   11114:	f7f0 fc38 	bl	1988 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   11118:	2800      	cmp	r0, #0
   1111a:	bfdc      	itt	le
   1111c:	b002      	addle	sp, #8
   1111e:	bd70      	pople	{r4, r5, r6, pc}
   11120:	6861      	ldr	r1, [r4, #4]
   11122:	2900      	cmp	r1, #0
   11124:	bf14      	ite	ne
   11126:	fbb0 f0f1 	udivne	r0, r0, r1
   1112a:	2000      	moveq	r0, #0
   1112c:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   11130:	1c40      	adds	r0, r0, #1
   11132:	4408      	add	r0, r1
   11134:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   11138:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   1113c:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   11140:	1a08      	subs	r0, r1, r0
   11142:	b200      	sxth	r0, r0
   11144:	2800      	cmp	r0, #0
   11146:	bfdc      	itt	le
   11148:	b002      	addle	sp, #8
   1114a:	bd70      	pople	{r4, r5, r6, pc}
   1114c:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   11150:	f7f1 f954 	bl	23fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   11154:	2800      	cmp	r0, #0
   11156:	bf04      	itt	eq
   11158:	b002      	addeq	sp, #8
   1115a:	bd70      	popeq	{r4, r5, r6, pc}
   1115c:	2001      	movs	r0, #1
   1115e:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   11162:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   11166:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1116a:	ae01      	add	r6, sp, #4
   1116c:	1a40      	subs	r0, r0, r1
   1116e:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   11172:	1e40      	subs	r0, r0, #1
   11174:	4408      	add	r0, r1
   11176:	b285      	uxth	r5, r0
   11178:	e019      	b.n	111ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   1117a:	9600      	str	r6, [sp, #0]
   1117c:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   11180:	2300      	movs	r3, #0
   11182:	2201      	movs	r2, #1
   11184:	4620      	mov	r0, r4
   11186:	f7f8 f91b 	bl	93c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
   1118a:	2800      	cmp	r0, #0
   1118c:	bf04      	itt	eq
   1118e:	b002      	addeq	sp, #8
   11190:	bd70      	popeq	{r4, r5, r6, pc}
   11192:	2801      	cmp	r0, #1
   11194:	d004      	beq.n	111a0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   11196:	f240 51df 	movw	r1, #1503	; 0x5df
   1119a:	2030      	movs	r0, #48	; 0x30
   1119c:	f7f2 ff76 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111a0:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   111a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   111a8:	4408      	add	r0, r1
   111aa:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   111ae:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   111b2:	1a28      	subs	r0, r5, r0
   111b4:	b200      	sxth	r0, r0
   111b6:	2800      	cmp	r0, #0
   111b8:	dadf      	bge.n	1117a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   111ba:	b002      	add	sp, #8
   111bc:	bd70      	pop	{r4, r5, r6, pc}
   111be:	01f4      	.short	0x01f4
   111c0:	009600fa 	.word	0x009600fa
   111c4:	004b0064 	.word	0x004b0064
   111c8:	001e0032 	.word	0x001e0032
   111cc:	000a0014 	.word	0x000a0014
   111d0:	00020005 	.word	0x00020005
   111d4:	0001      	.short	0x0001

000111d6 <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   111d6:	b570      	push	{r4, r5, r6, lr}
   111d8:	460c      	mov	r4, r1
   111da:	4605      	mov	r5, r0
   111dc:	f44f 720a 	mov.w	r2, #552	; 0x228
   111e0:	2100      	movs	r1, #0
   111e2:	4620      	mov	r0, r4
   111e4:	f7fd fea4 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   111e8:	8025      	strh	r5, [r4, #0]
   111ea:	bd70      	pop	{r4, r5, r6, pc}

000111ec <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   111ec:	f7f3 ba92 	b.w	4714 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000111f0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   111f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111f4:	460d      	mov	r5, r1
   111f6:	4607      	mov	r7, r0
   111f8:	2101      	movs	r1, #1
   111fa:	f7fe ff7e 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   111fe:	1e04      	subs	r4, r0, #0
   11200:	bf08      	it	eq
   11202:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11206:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   1120a:	2600      	movs	r6, #0
   1120c:	b1b8      	cbz	r0, 1123e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   1120e:	706e      	strb	r6, [r5, #1]
   11210:	2009      	movs	r0, #9
   11212:	7028      	strb	r0, [r5, #0]
   11214:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   11218:	b178      	cbz	r0, 1123a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   1121a:	8466      	strh	r6, [r4, #34]	; 0x22
   1121c:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   11220:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   11224:	6068      	str	r0, [r5, #4]
   11226:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   1122a:	60a8      	str	r0, [r5, #8]
   1122c:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   11230:	81a8      	strh	r0, [r5, #12]
   11232:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   11236:	2800      	cmp	r0, #0
   11238:	d1ef      	bne.n	1121a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   1123a:	712e      	strb	r6, [r5, #4]
   1123c:	e047      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1123e:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   11242:	2800      	cmp	r0, #0
   11244:	d03a      	beq.n	112bc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   11246:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   1124a:	280d      	cmp	r0, #13
   1124c:	d01b      	beq.n	11286 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   1124e:	280e      	cmp	r0, #14
   11250:	d004      	beq.n	1125c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   11252:	f640 21c9 	movw	r1, #2761	; 0xac9
   11256:	2031      	movs	r0, #49	; 0x31
   11258:	f7f2 ff18 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1125c:	8820      	ldrh	r0, [r4, #0]
   1125e:	f7f3 facd 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   11262:	4607      	mov	r7, r0
   11264:	f7fe fde9 	bl	fe3a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   11268:	b9a0      	cbnz	r0, 11294 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   1126a:	706e      	strb	r6, [r5, #1]
   1126c:	200e      	movs	r0, #14
   1126e:	7028      	strb	r0, [r5, #0]
   11270:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   11274:	7128      	strb	r0, [r5, #4]
   11276:	8820      	ldrh	r0, [r4, #0]
   11278:	80e8      	strh	r0, [r5, #6]
   1127a:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   1127e:	4638      	mov	r0, r7
   11280:	f7fe fdf1 	bl	fe66 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   11284:	e023      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11286:	8820      	ldrh	r0, [r4, #0]
   11288:	f7f3 fab8 	bl	47fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   1128c:	4607      	mov	r7, r0
   1128e:	f7fe fdd4 	bl	fe3a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   11292:	b110      	cbz	r0, 1129a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   11294:	2000      	movs	r0, #0
   11296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1129a:	706e      	strb	r6, [r5, #1]
   1129c:	200d      	movs	r0, #13
   1129e:	7028      	strb	r0, [r5, #0]
   112a0:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   112a4:	7128      	strb	r0, [r5, #4]
   112a6:	8820      	ldrh	r0, [r4, #0]
   112a8:	80e8      	strh	r0, [r5, #6]
   112aa:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   112ae:	7228      	strb	r0, [r5, #8]
   112b0:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   112b4:	4638      	mov	r0, r7
   112b6:	f7fe fdd6 	bl	fe66 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   112ba:	e008      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   112bc:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   112c0:	b140      	cbz	r0, 112d4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   112c2:	706e      	strb	r6, [r5, #1]
   112c4:	2010      	movs	r0, #16
   112c6:	7028      	strb	r0, [r5, #0]
   112c8:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   112cc:	80af      	strh	r7, [r5, #4]
   112ce:	2001      	movs	r0, #1
   112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112d4:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   112d8:	b190      	cbz	r0, 11300 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   112da:	706e      	strb	r6, [r5, #1]
   112dc:	200a      	movs	r0, #10
   112de:	7028      	strb	r0, [r5, #0]
   112e0:	8820      	ldrh	r0, [r4, #0]
   112e2:	80a8      	strh	r0, [r5, #4]
   112e4:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   112e8:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   112ec:	f8c5 0006 	str.w	r0, [r5, #6]
   112f0:	f8c5 100a 	str.w	r1, [r5, #10]
   112f4:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   112f8:	81e8      	strh	r0, [r5, #14]
   112fa:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   112fe:	e7e6      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11300:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11304:	b180      	cbz	r0, 11328 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   11306:	706e      	strb	r6, [r5, #1]
   11308:	201a      	movs	r0, #26
   1130a:	7028      	strb	r0, [r5, #0]
   1130c:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11310:	2800      	cmp	r0, #0
   11312:	d0dc      	beq.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11314:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   11318:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   1131c:	6068      	str	r0, [r5, #4]
   1131e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   11322:	2800      	cmp	r0, #0
   11324:	d1f6      	bne.n	11314 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   11326:	e7d2      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11328:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   1132c:	b160      	cbz	r0, 11348 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   1132e:	706e      	strb	r6, [r5, #1]
   11330:	2008      	movs	r0, #8
   11332:	7028      	strb	r0, [r5, #0]
   11334:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   11338:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   1133c:	60ea      	str	r2, [r5, #12]
   1133e:	e9c5 0101 	strd	r0, r1, [r5, #4]
   11342:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   11346:	e7c2      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11348:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   1134c:	b1a0      	cbz	r0, 11378 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   1134e:	706e      	strb	r6, [r5, #1]
   11350:	2015      	movs	r0, #21
   11352:	7028      	strb	r0, [r5, #0]
   11354:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   11358:	2800      	cmp	r0, #0
   1135a:	d0b8      	beq.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1135c:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   11360:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   11364:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   11368:	60ea      	str	r2, [r5, #12]
   1136a:	e9c5 0101 	strd	r0, r1, [r5, #4]
   1136e:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   11372:	2800      	cmp	r0, #0
   11374:	d1f2      	bne.n	1135c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   11376:	e7aa      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11378:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   1137c:	b170      	cbz	r0, 1139c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   1137e:	706e      	strb	r6, [r5, #1]
   11380:	201c      	movs	r0, #28
   11382:	7028      	strb	r0, [r5, #0]
   11384:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   11388:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   1138c:	6068      	str	r0, [r5, #4]
   1138e:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   11392:	60a8      	str	r0, [r5, #8]
   11394:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   11398:	81a8      	strh	r0, [r5, #12]
   1139a:	e798      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1139c:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   113a0:	b138      	cbz	r0, 113b2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   113a2:	201d      	movs	r0, #29
   113a4:	7028      	strb	r0, [r5, #0]
   113a6:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   113aa:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   113ae:	6068      	str	r0, [r5, #4]
   113b0:	e78d      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   113b2:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   113b6:	2800      	cmp	r0, #0
   113b8:	bf08      	it	eq
   113ba:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   113be:	706e      	strb	r6, [r5, #1]
   113c0:	2016      	movs	r0, #22
   113c2:	7028      	strb	r0, [r5, #0]
   113c4:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   113c8:	2800      	cmp	r0, #0
   113ca:	d080      	beq.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   113cc:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   113d0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   113d4:	6068      	str	r0, [r5, #4]
   113d6:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   113da:	8128      	strh	r0, [r5, #8]
   113dc:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   113e0:	2800      	cmp	r0, #0
   113e2:	d1f3      	bne.n	113cc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   113e4:	e773      	b.n	112ce <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

000113e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   113e6:	2100      	movs	r1, #0
   113e8:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   113ec:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   113f0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   113f4:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   113f8:	b111      	cbz	r1, 11400 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   113fa:	2102      	movs	r1, #2
   113fc:	f7f7 beb8 	b.w	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   11400:	2103      	movs	r1, #3
   11402:	f7f7 beb5 	b.w	9170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

00011406 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   11406:	b570      	push	{r4, r5, r6, lr}
   11408:	460c      	mov	r4, r1
   1140a:	4615      	mov	r5, r2
   1140c:	4606      	mov	r6, r0
   1140e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   11412:	2100      	movs	r1, #0
   11414:	4620      	mov	r0, r4
   11416:	f7fd fd8b 	bl	ef30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1141a:	8026      	strh	r6, [r4, #0]
   1141c:	b14d      	cbz	r5, 11432 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY+0x2c>
   1141e:	6828      	ldr	r0, [r5, #0]
   11420:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   11424:	6868      	ldr	r0, [r5, #4]
   11426:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   1142a:	68a8      	ldr	r0, [r5, #8]
   1142c:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   11430:	bd70      	pop	{r4, r5, r6, pc}
   11432:	f640 116b 	movw	r1, #2411	; 0x96b
   11436:	2036      	movs	r0, #54	; 0x36
   11438:	f7f2 fe28 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001143c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   1143c:	f7f3 b96a 	b.w	4714 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   11440:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   11444:	f001 0107 	and.w	r1, r1, #7
   11448:	7800      	ldrb	r0, [r0, #0]
   1144a:	2201      	movs	r2, #1
   1144c:	408a      	lsls	r2, r1
   1144e:	4010      	ands	r0, r2
   11450:	40c8      	lsrs	r0, r1
   11452:	4770      	bx	lr
   11454:	b118      	cbz	r0, 1145e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   11456:	2802      	cmp	r0, #2
   11458:	d001      	beq.n	1145e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   1145a:	2001      	movs	r0, #1
   1145c:	4770      	bx	lr
   1145e:	2000      	movs	r0, #0
   11460:	4770      	bx	lr

00011462 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   11462:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11466:	7881      	ldrb	r1, [r0, #2]
   11468:	4605      	mov	r5, r0
   1146a:	291a      	cmp	r1, #26
   1146c:	d025      	beq.n	114ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   1146e:	dc0e      	bgt.n	1148e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   11470:	2916      	cmp	r1, #22
   11472:	d22e      	bcs.n	114d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11474:	e8df f001 	tbb	[pc, r1]
   11478:	2d2d2d2d 	.word	0x2d2d2d2d
   1147c:	2d2d212d 	.word	0x2d2d212d
   11480:	2d2d2d2d 	.word	0x2d2d2d2d
   11484:	2d2d2d2d 	.word	0x2d2d2d2d
   11488:	212d2d2d 	.word	0x212d2d2d
   1148c:	2121      	.short	0x2121
   1148e:	292a      	cmp	r1, #42	; 0x2a
   11490:	d01f      	beq.n	114d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11492:	dc0b      	bgt.n	114ac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   11494:	f1a1 011e 	sub.w	r1, r1, #30
   11498:	290c      	cmp	r1, #12
   1149a:	d21a      	bcs.n	114d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1149c:	e8df f001 	tbb	[pc, r1]
   114a0:	19191919 	.word	0x19191919
   114a4:	19191919 	.word	0x19191919
   114a8:	0d191919 	.word	0x0d191919
   114ac:	393a      	subs	r1, #58	; 0x3a
   114ae:	2904      	cmp	r1, #4
   114b0:	d20f      	bcs.n	114d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   114b2:	e8df f001 	tbb	[pc, r1]
   114b6:	020e      	.short	0x020e
   114b8:	020e      	.short	0x020e
   114ba:	8828      	ldrh	r0, [r5, #0]
   114bc:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   114c0:	d207      	bcs.n	114d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   114c2:	2701      	movs	r7, #1
   114c4:	4669      	mov	r1, sp
   114c6:	f7fe ff24 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   114ca:	b120      	cbz	r0, 114d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   114cc:	2002      	movs	r0, #2
   114ce:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   114d2:	2012      	movs	r0, #18
   114d4:	e7fb      	b.n	114ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   114d6:	f89d 0000 	ldrb.w	r0, [sp]
   114da:	f000 fc22 	bl	11d22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   114de:	9c01      	ldr	r4, [sp, #4]
   114e0:	b110      	cbz	r0, 114e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   114e2:	f504 7494 	add.w	r4, r4, #296	; 0x128
   114e6:	e001      	b.n	114ec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   114e8:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   114ec:	f89d 0000 	ldrb.w	r0, [sp]
   114f0:	f000 fc17 	bl	11d22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   114f4:	9e01      	ldr	r6, [sp, #4]
   114f6:	b110      	cbz	r0, 114fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   114f8:	f206 1629 	addw	r6, r6, #297	; 0x129
   114fc:	e001      	b.n	11502 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   114fe:	f206 1689 	addw	r6, r6, #393	; 0x189
   11502:	4668      	mov	r0, sp
   11504:	f000 fd6d 	bl	11fe2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   11508:	b108      	cbz	r0, 1150e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   1150a:	7820      	ldrb	r0, [r4, #0]
   1150c:	b108      	cbz	r0, 11512 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   1150e:	200c      	movs	r0, #12
   11510:	e7dd      	b.n	114ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   11512:	7027      	strb	r7, [r4, #0]
   11514:	78a8      	ldrb	r0, [r5, #2]
   11516:	7030      	strb	r0, [r6, #0]
   11518:	4668      	mov	r0, sp
   1151a:	f7ff fbb1 	bl	10c80 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1151e:	2000      	movs	r0, #0
   11520:	e7d5      	b.n	114ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

00011522 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   11522:	b510      	push	{r4, lr}
   11524:	4604      	mov	r4, r0
   11526:	7800      	ldrb	r0, [r0, #0]
   11528:	b118      	cbz	r0, 11532 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1152a:	2801      	cmp	r0, #1
   1152c:	d001      	beq.n	11532 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   1152e:	2012      	movs	r0, #18
   11530:	bd10      	pop	{r4, pc}
   11532:	f000 fd26 	bl	11f82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11536:	b120      	cbz	r0, 11542 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   11538:	f7f4 fc86 	bl	5e48 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1153c:	b108      	cbz	r0, 11542 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1153e:	200c      	movs	r0, #12
   11540:	bd10      	pop	{r4, pc}
   11542:	7820      	ldrb	r0, [r4, #0]
   11544:	f7ff ff86 	bl	11454 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11548:	1de2      	adds	r2, r4, #7
   1154a:	f104 0317 	add.w	r3, r4, #23
   1154e:	1c61      	adds	r1, r4, #1
   11550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11554:	f7f4 bcc8 	b.w	5ee8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00011558 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   11558:	b510      	push	{r4, lr}
   1155a:	4604      	mov	r4, r0
   1155c:	f000 fe48 	bl	121f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   11560:	b108      	cbz	r0, 11566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   11562:	200c      	movs	r0, #12
   11564:	bd10      	pop	{r4, pc}
   11566:	7820      	ldrb	r0, [r4, #0]
   11568:	b128      	cbz	r0, 11576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   1156a:	2801      	cmp	r0, #1
   1156c:	d003      	beq.n	11576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   1156e:	28ff      	cmp	r0, #255	; 0xff
   11570:	d00b      	beq.n	1158a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   11572:	2012      	movs	r0, #18
   11574:	bd10      	pop	{r4, pc}
   11576:	f7ff ff6d 	bl	11454 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   1157a:	1c61      	adds	r1, r4, #1
   1157c:	f7f4 fdfc 	bl	6178 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   11580:	b108      	cbz	r0, 11586 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   11582:	2000      	movs	r0, #0
   11584:	bd10      	pop	{r4, pc}
   11586:	2007      	movs	r0, #7
   11588:	bd10      	pop	{r4, pc}
   1158a:	2001      	movs	r0, #1
   1158c:	f7f4 fe30 	bl	61f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   11590:	e7f7      	b.n	11582 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

00011592 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   11592:	b510      	push	{r4, lr}
   11594:	f000 fcf5 	bl	11f82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11598:	b120      	cbz	r0, 115a4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   1159a:	f7f4 fc55 	bl	5e48 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1159e:	b108      	cbz	r0, 115a4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   115a0:	200c      	movs	r0, #12
   115a2:	bd10      	pop	{r4, pc}
   115a4:	f7f4 fd06 	bl	5fb4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   115a8:	2000      	movs	r0, #0
   115aa:	bd10      	pop	{r4, pc}

000115ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   115ac:	b510      	push	{r4, lr}
   115ae:	f000 fe1f 	bl	121f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   115b2:	b108      	cbz	r0, 115b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   115b4:	200c      	movs	r0, #12
   115b6:	bd10      	pop	{r4, pc}
   115b8:	f7f4 fe20 	bl	61fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   115bc:	2000      	movs	r0, #0
   115be:	bd10      	pop	{r4, pc}

000115c0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   115c0:	b570      	push	{r4, r5, r6, lr}
   115c2:	4605      	mov	r5, r0
   115c4:	f000 fb6d 	bl	11ca2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   115c8:	2800      	cmp	r0, #0
   115ca:	d10e      	bne.n	115ea <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2a>
   115cc:	8828      	ldrh	r0, [r5, #0]
   115ce:	2100      	movs	r1, #0
   115d0:	f7fe fd93 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   115d4:	0004      	movs	r4, r0
   115d6:	d007      	beq.n	115e8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   115d8:	f000 fd0a 	bl	11ff0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   115dc:	b120      	cbz	r0, 115e8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   115de:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   115e2:	7800      	ldrb	r0, [r0, #0]
   115e4:	b930      	cbnz	r0, 115f4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   115e6:	e001      	b.n	115ec <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   115e8:	2002      	movs	r0, #2
   115ea:	bd70      	pop	{r4, r5, r6, pc}
   115ec:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
   115f0:	7800      	ldrb	r0, [r0, #0]
   115f2:	b108      	cbz	r0, 115f8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   115f4:	203a      	movs	r0, #58	; 0x3a
   115f6:	bd70      	pop	{r4, r5, r6, pc}
   115f8:	88a8      	ldrh	r0, [r5, #4]
   115fa:	f7fe fea2 	bl	10342 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   115fe:	4606      	mov	r6, r0
   11600:	4601      	mov	r1, r0
   11602:	2005      	movs	r0, #5
   11604:	f7ff f8eb 	bl	107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   11608:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   1160c:	80c8      	strh	r0, [r1, #6]
   1160e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11612:	2000      	movs	r0, #0
   11614:	6088      	str	r0, [r1, #8]
   11616:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   1161a:	60c6      	str	r6, [r0, #12]
   1161c:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11620:	88e8      	ldrh	r0, [r5, #6]
   11622:	8208      	strh	r0, [r1, #16]
   11624:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11628:	8928      	ldrh	r0, [r5, #8]
   1162a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   1162e:	8248      	strh	r0, [r1, #18]
   11630:	4631      	mov	r1, r6
   11632:	2008      	movs	r0, #8
   11634:	f7ff f8d3 	bl	107de <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   11638:	6821      	ldr	r1, [r4, #0]
   1163a:	4602      	mov	r2, r0
   1163c:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   11640:	88c8      	ldrh	r0, [r1, #6]
   11642:	4282      	cmp	r2, r0
   11644:	d301      	bcc.n	1164a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8a>
   11646:	42b0      	cmp	r0, r6
   11648:	d301      	bcc.n	1164e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8e>
   1164a:	2012      	movs	r0, #18
   1164c:	bd70      	pop	{r4, r5, r6, pc}
   1164e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   11652:	4286      	cmp	r6, r0
   11654:	d209      	bcs.n	1166a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   11656:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   1165a:	2802      	cmp	r0, #2
   1165c:	d103      	bne.n	11666 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xa6>
   1165e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11662:	2802      	cmp	r0, #2
   11664:	d001      	beq.n	1166a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   11666:	200c      	movs	r0, #12
   11668:	bd70      	pop	{r4, r5, r6, pc}
   1166a:	8828      	ldrh	r0, [r5, #0]
   1166c:	8048      	strh	r0, [r1, #2]
   1166e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11672:	2002      	movs	r0, #2
   11674:	7008      	strb	r0, [r1, #0]
   11676:	2000      	movs	r0, #0
   11678:	bd70      	pop	{r4, r5, r6, pc}

0001167a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1167a:	b510      	push	{r4, lr}
   1167c:	460b      	mov	r3, r1
   1167e:	2201      	movs	r2, #1
   11680:	f100 0110 	add.w	r1, r0, #16
   11684:	f7f4 ff70 	bl	6568 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   11688:	2000      	movs	r0, #0
   1168a:	bd10      	pop	{r4, pc}

0001168c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1168c:	b510      	push	{r4, lr}
   1168e:	8800      	ldrh	r0, [r0, #0]
   11690:	2101      	movs	r1, #1
   11692:	f7fe fd32 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11696:	b118      	cbz	r0, 116a0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   11698:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   1169c:	b111      	cbz	r1, 116a4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   1169e:	e007      	b.n	116b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   116a0:	2002      	movs	r0, #2
   116a2:	bd10      	pop	{r4, pc}
   116a4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   116a8:	2914      	cmp	r1, #20
   116aa:	d003      	beq.n	116b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   116ac:	2915      	cmp	r1, #21
   116ae:	d001      	beq.n	116b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   116b0:	200c      	movs	r0, #12
   116b2:	bd10      	pop	{r4, pc}
   116b4:	2102      	movs	r1, #2
   116b6:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   116ba:	2000      	movs	r0, #0
   116bc:	bd10      	pop	{r4, pc}

000116be <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   116be:	b570      	push	{r4, r5, r6, lr}
   116c0:	4605      	mov	r5, r0
   116c2:	8800      	ldrh	r0, [r0, #0]
   116c4:	2101      	movs	r1, #1
   116c6:	f7fe fd18 	bl	100fa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   116ca:	0004      	movs	r4, r0
   116cc:	d003      	beq.n	116d6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   116ce:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   116d2:	b110      	cbz	r0, 116da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   116d4:	e00a      	b.n	116ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   116d6:	2002      	movs	r0, #2
   116d8:	bd70      	pop	{r4, r5, r6, pc}
   116da:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   116de:	2814      	cmp	r0, #20
   116e0:	d001      	beq.n	116e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   116e2:	2815      	cmp	r0, #21
   116e4:	d102      	bne.n	116ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   116e6:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   116ea:	b108      	cbz	r0, 116f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   116ec:	200c      	movs	r0, #12
   116ee:	bd70      	pop	{r4, r5, r6, pc}
   116f0:	2210      	movs	r2, #16
   116f2:	1ca9      	adds	r1, r5, #2
   116f4:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   116f8:	f7f2 fb3e 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   116fc:	2001      	movs	r0, #1
   116fe:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   11702:	2000      	movs	r0, #0
   11704:	bd70      	pop	{r4, r5, r6, pc}

00011706 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   11706:	b510      	push	{r4, lr}
   11708:	2108      	movs	r1, #8
   1170a:	f7f3 fad5 	bl	4cb8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   1170e:	2000      	movs	r0, #0
   11710:	bd10      	pop	{r4, pc}

00011712 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   11712:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11714:	460c      	mov	r4, r1
   11716:	4605      	mov	r5, r0
   11718:	8800      	ldrh	r0, [r0, #0]
   1171a:	4669      	mov	r1, sp
   1171c:	f7fe fdf9 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11720:	2200      	movs	r2, #0
   11722:	b128      	cbz	r0, 11730 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   11724:	f8c4 2002 	str.w	r2, [r4, #2]
   11728:	71a2      	strb	r2, [r4, #6]
   1172a:	8022      	strh	r2, [r4, #0]
   1172c:	2002      	movs	r0, #2
   1172e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11730:	9901      	ldr	r1, [sp, #4]
   11732:	4608      	mov	r0, r1
   11734:	3178      	adds	r1, #120	; 0x78
   11736:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   1173a:	68c3      	ldr	r3, [r0, #12]
   1173c:	f8c4 3002 	str.w	r3, [r4, #2]
   11740:	7c03      	ldrb	r3, [r0, #16]
   11742:	71a3      	strb	r3, [r4, #6]
   11744:	882b      	ldrh	r3, [r5, #0]
   11746:	8023      	strh	r3, [r4, #0]
   11748:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   1174c:	2b00      	cmp	r3, #0
   1174e:	d1f2      	bne.n	11736 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   11750:	2000      	movs	r0, #0
   11752:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011754 <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>:
   11754:	b510      	push	{r4, lr}
   11756:	4604      	mov	r4, r0
   11758:	2000      	movs	r0, #0
   1175a:	6020      	str	r0, [r4, #0]
   1175c:	6060      	str	r0, [r4, #4]
   1175e:	f7fb fde7 	bl	d330 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   11762:	7020      	strb	r0, [r4, #0]
   11764:	2001      	movs	r0, #1
   11766:	f7fb fde3 	bl	d330 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   1176a:	7060      	strb	r0, [r4, #1]
   1176c:	2000      	movs	r0, #0
   1176e:	bd10      	pop	{r4, pc}

00011770 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   11770:	b510      	push	{r4, lr}
   11772:	4604      	mov	r4, r0
   11774:	f000 fc2f 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11778:	b140      	cbz	r0, 1178c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   1177a:	20fb      	movs	r0, #251	; 0xfb
   1177c:	8020      	strh	r0, [r4, #0]
   1177e:	f640 0148 	movw	r1, #2120	; 0x848
   11782:	8061      	strh	r1, [r4, #2]
   11784:	80a0      	strh	r0, [r4, #4]
   11786:	80e1      	strh	r1, [r4, #6]
   11788:	2000      	movs	r0, #0
   1178a:	bd10      	pop	{r4, pc}
   1178c:	2001      	movs	r0, #1
   1178e:	bd10      	pop	{r4, pc}

00011790 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   11790:	2108      	movs	r1, #8
   11792:	7001      	strb	r1, [r0, #0]
   11794:	2000      	movs	r0, #0
   11796:	4770      	bx	lr

00011798 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   11798:	21d8      	movs	r1, #216	; 0xd8
   1179a:	7001      	strb	r1, [r0, #0]
   1179c:	2104      	movs	r1, #4
   1179e:	7041      	strb	r1, [r0, #1]
   117a0:	2000      	movs	r0, #0
   117a2:	4770      	bx	lr

000117a4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   117a4:	2108      	movs	r1, #8
   117a6:	7001      	strb	r1, [r0, #0]
   117a8:	2000      	movs	r0, #0
   117aa:	4770      	bx	lr

000117ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   117ac:	b510      	push	{r4, lr}
   117ae:	4604      	mov	r4, r0
   117b0:	7800      	ldrb	r0, [r0, #0]
   117b2:	b108      	cbz	r0, 117b8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   117b4:	2801      	cmp	r0, #1
   117b6:	d110      	bne.n	117da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   117b8:	f000 fbe3 	bl	11f82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   117bc:	b120      	cbz	r0, 117c8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   117be:	f7f4 fb43 	bl	5e48 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   117c2:	b108      	cbz	r0, 117c8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   117c4:	200c      	movs	r0, #12
   117c6:	bd10      	pop	{r4, pc}
   117c8:	7820      	ldrb	r0, [r4, #0]
   117ca:	f7ff fe43 	bl	11454 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   117ce:	1c61      	adds	r1, r4, #1
   117d0:	f7f4 fc8e 	bl	60f0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   117d4:	b108      	cbz	r0, 117da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   117d6:	2000      	movs	r0, #0
   117d8:	bd10      	pop	{r4, pc}
   117da:	2012      	movs	r0, #18
   117dc:	bd10      	pop	{r4, pc}

000117de <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   117de:	b510      	push	{r4, lr}
   117e0:	4604      	mov	r4, r0
   117e2:	f000 fd05 	bl	121f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   117e6:	b108      	cbz	r0, 117ec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   117e8:	200c      	movs	r0, #12
   117ea:	bd10      	pop	{r4, pc}
   117ec:	7820      	ldrb	r0, [r4, #0]
   117ee:	b120      	cbz	r0, 117fa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   117f0:	2801      	cmp	r0, #1
   117f2:	d002      	beq.n	117fa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   117f4:	28ff      	cmp	r0, #255	; 0xff
   117f6:	d108      	bne.n	1180a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   117f8:	e009      	b.n	1180e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   117fa:	f7ff fe2b 	bl	11454 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   117fe:	1c61      	adds	r1, r4, #1
   11800:	f7fe fd7c 	bl	102fc <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   11804:	b108      	cbz	r0, 1180a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   11806:	2000      	movs	r0, #0
   11808:	bd10      	pop	{r4, pc}
   1180a:	2012      	movs	r0, #18
   1180c:	bd10      	pop	{r4, pc}
   1180e:	2000      	movs	r0, #0
   11810:	f7f4 fcee 	bl	61f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   11814:	e7f7      	b.n	11806 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00011816 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   11816:	b510      	push	{r4, lr}
   11818:	4604      	mov	r4, r0
   1181a:	f000 fbb2 	bl	11f82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   1181e:	b108      	cbz	r0, 11824 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   11820:	200c      	movs	r0, #12
   11822:	bd10      	pop	{r4, pc}
   11824:	7820      	ldrb	r0, [r4, #0]
   11826:	f000 0001 	and.w	r0, r0, #1
   1182a:	f7f4 fb07 	bl	5e3c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   1182e:	2000      	movs	r0, #0
   11830:	bd10      	pop	{r4, pc}

00011832 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   11832:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11834:	460d      	mov	r5, r1
   11836:	4604      	mov	r4, r0
   11838:	f000 fbcd 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   1183c:	b130      	cbz	r0, 1184c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1183e:	88a2      	ldrh	r2, [r4, #4]
   11840:	f244 2090 	movw	r0, #17040	; 0x4290
   11844:	4282      	cmp	r2, r0
   11846:	d903      	bls.n	11850 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   11848:	2012      	movs	r0, #18
   1184a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1184c:	2001      	movs	r0, #1
   1184e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11850:	f640 0048 	movw	r0, #2120	; 0x848
   11854:	4282      	cmp	r2, r0
   11856:	d300      	bcc.n	1185a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   11858:	4602      	mov	r2, r0
   1185a:	8820      	ldrh	r0, [r4, #0]
   1185c:	f8ad 0000 	strh.w	r0, [sp]
   11860:	8860      	ldrh	r0, [r4, #2]
   11862:	f8ad 0002 	strh.w	r0, [sp, #2]
   11866:	f8ad 2004 	strh.w	r2, [sp, #4]
   1186a:	8860      	ldrh	r0, [r4, #2]
   1186c:	f8ad 0006 	strh.w	r0, [sp, #6]
   11870:	f8ad 2008 	strh.w	r2, [sp, #8]
   11874:	8820      	ldrh	r0, [r4, #0]
   11876:	8028      	strh	r0, [r5, #0]
   11878:	4668      	mov	r0, sp
   1187a:	f000 fbdc 	bl	12036 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   1187e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011880 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   11880:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11882:	4604      	mov	r4, r0
   11884:	f7fb fd4e 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11888:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1188c:	b1b0      	cbz	r0, 118bc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   1188e:	f10d 0007 	add.w	r0, sp, #7
   11892:	9000      	str	r0, [sp, #0]
   11894:	7922      	ldrb	r2, [r4, #4]
   11896:	78e1      	ldrb	r1, [r4, #3]
   11898:	78a0      	ldrb	r0, [r4, #2]
   1189a:	f10d 0306 	add.w	r3, sp, #6
   1189e:	f000 fc61 	bl	12164 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
   118a2:	2800      	cmp	r0, #0
   118a4:	d109      	bne.n	118ba <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   118a6:	8820      	ldrh	r0, [r4, #0]
   118a8:	f8ad 0004 	strh.w	r0, [sp, #4]
   118ac:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   118b0:	f8ad 0008 	strh.w	r0, [sp, #8]
   118b4:	a801      	add	r0, sp, #4
   118b6:	f000 f8c7 	bl	11a48 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   118ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   118bc:	2001      	movs	r0, #1
   118be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000118c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   118c0:	b510      	push	{r4, lr}
   118c2:	4604      	mov	r4, r0
   118c4:	f000 fb5d 	bl	11f82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   118c8:	b120      	cbz	r0, 118d4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   118ca:	f7f4 fabd 	bl	5e48 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   118ce:	b108      	cbz	r0, 118d4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   118d0:	200c      	movs	r0, #12
   118d2:	bd10      	pop	{r4, pc}
   118d4:	7820      	ldrb	r0, [r4, #0]
   118d6:	f7ff fdbd 	bl	11454 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   118da:	79e2      	ldrb	r2, [r4, #7]
   118dc:	1c61      	adds	r1, r4, #1
   118de:	f7f4 fa43 	bl	5d68 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   118e2:	b108      	cbz	r0, 118e8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   118e4:	2000      	movs	r0, #0
   118e6:	bd10      	pop	{r4, pc}
   118e8:	2002      	movs	r0, #2
   118ea:	bd10      	pop	{r4, pc}

000118ec <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   118ec:	b510      	push	{r4, lr}
   118ee:	4604      	mov	r4, r0
   118f0:	2001      	movs	r0, #1
   118f2:	f7fb fa3b 	bl	cd6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   118f6:	b128      	cbz	r0, 11904 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   118f8:	4621      	mov	r1, r4
   118fa:	2001      	movs	r0, #1
   118fc:	f7f3 fb3e 	bl	4f7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   11900:	2000      	movs	r0, #0
   11902:	bd10      	pop	{r4, pc}
   11904:	200c      	movs	r0, #12
   11906:	bd10      	pop	{r4, pc}

00011908 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   11908:	b510      	push	{r4, lr}
   1190a:	8800      	ldrh	r0, [r0, #0]
   1190c:	f7f4 fc16 	bl	613c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   11910:	b108      	cbz	r0, 11916 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   11912:	2000      	movs	r0, #0
   11914:	bd10      	pop	{r4, pc}
   11916:	2030      	movs	r0, #48	; 0x30
   11918:	bd10      	pop	{r4, pc}

0001191a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1191a:	b51c      	push	{r2, r3, r4, lr}
   1191c:	4604      	mov	r4, r0
   1191e:	f000 fb5a 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11922:	b178      	cbz	r0, 11944 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   11924:	8820      	ldrh	r0, [r4, #0]
   11926:	f8ad 0000 	strh.w	r0, [sp]
   1192a:	8860      	ldrh	r0, [r4, #2]
   1192c:	f8ad 0002 	strh.w	r0, [sp, #2]
   11930:	8820      	ldrh	r0, [r4, #0]
   11932:	f8ad 0004 	strh.w	r0, [sp, #4]
   11936:	8860      	ldrh	r0, [r4, #2]
   11938:	f8ad 0006 	strh.w	r0, [sp, #6]
   1193c:	4668      	mov	r0, sp
   1193e:	f7fb fc1d 	bl	d17c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   11942:	bd1c      	pop	{r2, r3, r4, pc}
   11944:	2001      	movs	r0, #1
   11946:	bd1c      	pop	{r2, r3, r4, pc}

00011948 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   11948:	b510      	push	{r4, lr}
   1194a:	f7f3 fb45 	bl	4fd8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1194e:	2000      	movs	r0, #0
   11950:	bd10      	pop	{r4, pc}

00011952 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   11952:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11954:	460c      	mov	r4, r1
   11956:	4605      	mov	r5, r0
   11958:	f000 fb3d 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   1195c:	b178      	cbz	r0, 1197e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   1195e:	4669      	mov	r1, sp
   11960:	4628      	mov	r0, r5
   11962:	f7fe fcd6 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11966:	2800      	cmp	r0, #0
   11968:	d108      	bne.n	1197c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   1196a:	f89d 0000 	ldrb.w	r0, [sp]
   1196e:	b140      	cbz	r0, 11982 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   11970:	2100      	movs	r1, #0
   11972:	4622      	mov	r2, r4
   11974:	9801      	ldr	r0, [sp, #4]
   11976:	f000 faca 	bl	11f0e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   1197a:	2000      	movs	r0, #0
   1197c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1197e:	2001      	movs	r0, #1
   11980:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11982:	2101      	movs	r1, #1
   11984:	e7f5      	b.n	11972 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

00011986 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   11986:	b538      	push	{r3, r4, r5, lr}
   11988:	460d      	mov	r5, r1
   1198a:	4604      	mov	r4, r0
   1198c:	f000 fa32 	bl	11df4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   11990:	2800      	cmp	r0, #0
   11992:	d108      	bne.n	119a6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11994:	4620      	mov	r0, r4
   11996:	f000 f9fc 	bl	11d92 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf0>
   1199a:	2800      	cmp	r0, #0
   1199c:	d103      	bne.n	119a6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   1199e:	f7f7 fae7 	bl	8f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   119a2:	b108      	cbz	r0, 119a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   119a4:	200c      	movs	r0, #12
   119a6:	bd38      	pop	{r3, r4, r5, pc}
   119a8:	f7f6 f800 	bl	79ac <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   119ac:	7028      	strb	r0, [r5, #0]
   119ae:	74e0      	strb	r0, [r4, #19]
   119b0:	7e60      	ldrb	r0, [r4, #25]
   119b2:	b150      	cbz	r0, 119ca <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x44>
   119b4:	20ff      	movs	r0, #255	; 0xff
   119b6:	f88d 0000 	strb.w	r0, [sp]
   119ba:	4669      	mov	r1, sp
   119bc:	2000      	movs	r0, #0
   119be:	f7f6 f84f 	bl	7a60 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   119c2:	4669      	mov	r1, sp
   119c4:	2000      	movs	r0, #0
   119c6:	f7f6 f859 	bl	7a7c <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   119ca:	4620      	mov	r0, r4
   119cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119d0:	f7f5 bea0 	b.w	7714 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>

000119d4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   119d4:	b510      	push	{r4, lr}
   119d6:	4604      	mov	r4, r0
   119d8:	2000      	movs	r0, #0
   119da:	f7fb f9c7 	bl	cd6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   119de:	b128      	cbz	r0, 119ec <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   119e0:	4621      	mov	r1, r4
   119e2:	2000      	movs	r0, #0
   119e4:	f7f3 faca 	bl	4f7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   119e8:	2000      	movs	r0, #0
   119ea:	bd10      	pop	{r4, pc}
   119ec:	200c      	movs	r0, #12
   119ee:	bd10      	pop	{r4, pc}

000119f0 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   119f0:	b510      	push	{r4, lr}
   119f2:	4604      	mov	r4, r0
   119f4:	f7fa fbfe 	bl	c1f4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   119f8:	b150      	cbz	r0, 11a10 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   119fa:	f7f7 fb55 	bl	90a8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   119fe:	b138      	cbz	r0, 11a10 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   11a00:	7820      	ldrb	r0, [r4, #0]
   11a02:	f7f7 fb6f 	bl	90e4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   11a06:	7820      	ldrb	r0, [r4, #0]
   11a08:	f7fa fbc8 	bl	c19c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   11a0c:	2000      	movs	r0, #0
   11a0e:	bd10      	pop	{r4, pc}
   11a10:	200c      	movs	r0, #12
   11a12:	bd10      	pop	{r4, pc}

00011a14 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   11a14:	b510      	push	{r4, lr}
   11a16:	4604      	mov	r4, r0
   11a18:	7800      	ldrb	r0, [r0, #0]
   11a1a:	f000 0001 	and.w	r0, r0, #1
   11a1e:	f7fa fbff 	bl	c220 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   11a22:	7820      	ldrb	r0, [r4, #0]
   11a24:	f000 0001 	and.w	r0, r0, #1
   11a28:	f7f7 fb62 	bl	90f0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   11a2c:	2000      	movs	r0, #0
   11a2e:	bd10      	pop	{r4, pc}

00011a30 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   11a30:	b510      	push	{r4, lr}
   11a32:	4604      	mov	r4, r0
   11a34:	f000 facf 	bl	11fd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11a38:	b120      	cbz	r0, 11a44 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   11a3a:	4620      	mov	r0, r4
   11a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a40:	f000 baf9 	b.w	12036 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   11a44:	2001      	movs	r0, #1
   11a46:	bd10      	pop	{r4, pc}

00011a48 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11a48:	b510      	push	{r4, lr}
   11a4a:	4604      	mov	r4, r0
   11a4c:	8880      	ldrh	r0, [r0, #4]
   11a4e:	b128      	cbz	r0, 11a5c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a50:	2801      	cmp	r0, #1
   11a52:	d003      	beq.n	11a5c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a54:	2802      	cmp	r0, #2
   11a56:	d001      	beq.n	11a5c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a58:	2012      	movs	r0, #18
   11a5a:	bd10      	pop	{r4, pc}
   11a5c:	78e0      	ldrb	r0, [r4, #3]
   11a5e:	f000 fa33 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11a62:	b148      	cbz	r0, 11a78 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11a64:	78a0      	ldrb	r0, [r4, #2]
   11a66:	f000 fa2f 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11a6a:	b128      	cbz	r0, 11a78 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11a6c:	4620      	mov	r0, r4
   11a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a72:	2101      	movs	r1, #1
   11a74:	f000 b893 	b.w	11b9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11a78:	2011      	movs	r0, #17
   11a7a:	bd10      	pop	{r4, pc}

00011a7c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11a7c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11a7e:	460c      	mov	r4, r1
   11a80:	4605      	mov	r5, r0
   11a82:	8800      	ldrh	r0, [r0, #0]
   11a84:	4669      	mov	r1, sp
   11a86:	f7fe fc44 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11a8a:	2800      	cmp	r0, #0
   11a8c:	d106      	bne.n	11a9c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11a8e:	9801      	ldr	r0, [sp, #4]
   11a90:	8829      	ldrh	r1, [r5, #0]
   11a92:	8021      	strh	r1, [r4, #0]
   11a94:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   11a98:	8060      	strh	r0, [r4, #2]
   11a9a:	2000      	movs	r0, #0
   11a9c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011a9e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11a9e:	b510      	push	{r4, lr}
   11aa0:	4604      	mov	r4, r0
   11aa2:	4601      	mov	r1, r0
   11aa4:	2000      	movs	r0, #0
   11aa6:	f7f3 fa47 	bl	4f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11aaa:	b910      	cbnz	r0, 11ab2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11aac:	2000      	movs	r0, #0
   11aae:	6020      	str	r0, [r4, #0]
   11ab0:	80a0      	strh	r0, [r4, #4]
   11ab2:	2000      	movs	r0, #0
   11ab4:	bd10      	pop	{r4, pc}

00011ab6 <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>:
   11ab6:	2100      	movs	r1, #0
   11ab8:	6001      	str	r1, [r0, #0]
   11aba:	6041      	str	r1, [r0, #4]
   11abc:	2160      	movs	r1, #96	; 0x60
   11abe:	7101      	strb	r1, [r0, #4]
   11ac0:	2000      	movs	r0, #0
   11ac2:	4770      	bx	lr

00011ac4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   11ac4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11ac6:	8800      	ldrh	r0, [r0, #0]
   11ac8:	4669      	mov	r1, sp
   11aca:	f7fe fc22 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11ace:	b978      	cbnz	r0, 11af0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11ad0:	4668      	mov	r0, sp
   11ad2:	f000 fa86 	bl	11fe2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   11ad6:	b158      	cbz	r0, 11af0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11ad8:	9c01      	ldr	r4, [sp, #4]
   11ada:	f89d 0000 	ldrb.w	r0, [sp]
   11ade:	3478      	adds	r4, #120	; 0x78
   11ae0:	f000 f91f 	bl	11d22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   11ae4:	2800      	cmp	r0, #0
   11ae6:	9801      	ldr	r0, [sp, #4]
   11ae8:	d004      	beq.n	11af4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   11aea:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   11aee:	e003      	b.n	11af8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   11af0:	2002      	movs	r0, #2
   11af2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11af4:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   11af8:	7801      	ldrb	r1, [r0, #0]
   11afa:	b911      	cbnz	r1, 11b02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   11afc:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   11b00:	b109      	cbz	r1, 11b06 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   11b02:	203a      	movs	r0, #58	; 0x3a
   11b04:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11b06:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   11b0a:	f04f 0501 	mov.w	r5, #1
   11b0e:	0789      	lsls	r1, r1, #30
   11b10:	d103      	bne.n	11b1a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   11b12:	7005      	strb	r5, [r0, #0]
   11b14:	4668      	mov	r0, sp
   11b16:	f7ff f8b3 	bl	10c80 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11b1a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   11b1e:	2000      	movs	r0, #0
   11b20:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011b22 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   11b22:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11b24:	460c      	mov	r4, r1
   11b26:	4605      	mov	r5, r0
   11b28:	8800      	ldrh	r0, [r0, #0]
   11b2a:	4669      	mov	r1, sp
   11b2c:	f7fe fbf1 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b30:	b108      	cbz	r0, 11b36 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   11b32:	2002      	movs	r0, #2
   11b34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11b36:	78a8      	ldrb	r0, [r5, #2]
   11b38:	b128      	cbz	r0, 11b46 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   11b3a:	2004      	movs	r0, #4
   11b3c:	70a0      	strb	r0, [r4, #2]
   11b3e:	8828      	ldrh	r0, [r5, #0]
   11b40:	8020      	strh	r0, [r4, #0]
   11b42:	2000      	movs	r0, #0
   11b44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11b46:	9801      	ldr	r0, [sp, #4]
   11b48:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11b4c:	e7f6      	b.n	11b3c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00011b4e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11b4e:	b510      	push	{r4, lr}
   11b50:	f7fb fb44 	bl	d1dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   11b54:	2000      	movs	r0, #0
   11b56:	bd10      	pop	{r4, pc}

00011b58 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   11b58:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11b5c:	460d      	mov	r5, r1
   11b5e:	4604      	mov	r4, r0
   11b60:	8842      	ldrh	r2, [r0, #2]
   11b62:	f64b 3180 	movw	r1, #48000	; 0xbb80
   11b66:	2012      	movs	r0, #18
   11b68:	428a      	cmp	r2, r1
   11b6a:	d816      	bhi.n	11b9a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b6c:	2a00      	cmp	r2, #0
   11b6e:	d014      	beq.n	11b9a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b70:	8820      	ldrh	r0, [r4, #0]
   11b72:	4669      	mov	r1, sp
   11b74:	f7fe fbcd 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b78:	2800      	cmp	r0, #0
   11b7a:	d10e      	bne.n	11b9a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b7c:	8820      	ldrh	r0, [r4, #0]
   11b7e:	8028      	strh	r0, [r5, #0]
   11b80:	9e01      	ldr	r6, [sp, #4]
   11b82:	1d35      	adds	r5, r6, #4
   11b84:	3678      	adds	r6, #120	; 0x78
   11b86:	682f      	ldr	r7, [r5, #0]
   11b88:	8862      	ldrh	r2, [r4, #2]
   11b8a:	4639      	mov	r1, r7
   11b8c:	4630      	mov	r0, r6
   11b8e:	f7fe fd95 	bl	106bc <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   11b92:	6828      	ldr	r0, [r5, #0]
   11b94:	42b8      	cmp	r0, r7
   11b96:	d1f6      	bne.n	11b86 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x2e>
   11b98:	2000      	movs	r0, #0
   11b9a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00011b9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11b9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11ba2:	b089      	sub	sp, #36	; 0x24
   11ba4:	4689      	mov	r9, r1
   11ba6:	4604      	mov	r4, r0
   11ba8:	8800      	ldrh	r0, [r0, #0]
   11baa:	a904      	add	r1, sp, #16
   11bac:	f7fe fbb1 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11bb0:	2800      	cmp	r0, #0
   11bb2:	d14a      	bne.n	11c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11bb4:	9805      	ldr	r0, [sp, #20]
   11bb6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11bba:	4605      	mov	r5, r0
   11bbc:	3078      	adds	r0, #120	; 0x78
   11bbe:	2900      	cmp	r1, #0
   11bc0:	4629      	mov	r1, r5
   11bc2:	d005      	beq.n	11bd0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   11bc4:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   11bc8:	7b41      	ldrb	r1, [r0, #13]
   11bca:	2921      	cmp	r1, #33	; 0x21
   11bcc:	d003      	beq.n	11bd6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   11bce:	e003      	b.n	11bd8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   11bd0:	f891 616e 	ldrb.w	r6, [r1, #366]	; 0x16e
   11bd4:	e7f8      	b.n	11bc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   11bd6:	b13e      	cbz	r6, 11be8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   11bd8:	2700      	movs	r7, #0
   11bda:	3046      	adds	r0, #70	; 0x46
   11bdc:	2108      	movs	r1, #8
   11bde:	4680      	mov	r8, r0
   11be0:	f7ff fc2e 	bl	11440 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11be4:	b110      	cbz	r0, 11bec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   11be6:	e007      	b.n	11bf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11be8:	2701      	movs	r7, #1
   11bea:	e7f6      	b.n	11bda <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   11bec:	210b      	movs	r1, #11
   11bee:	4640      	mov	r0, r8
   11bf0:	f7ff fc26 	bl	11440 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11bf4:	b900      	cbnz	r0, 11bf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11bf6:	b33f      	cbz	r7, 11c48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   11bf8:	a802      	add	r0, sp, #8
   11bfa:	9000      	str	r0, [sp, #0]
   11bfc:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11c00:	ab01      	add	r3, sp, #4
   11c02:	4622      	mov	r2, r4
   11c04:	4629      	mov	r1, r5
   11c06:	f000 f9c6 	bl	11f96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
   11c0a:	0007      	movs	r7, r0
   11c0c:	d11d      	bne.n	11c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11c0e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11c12:	9c05      	ldr	r4, [sp, #20]
   11c14:	b1e0      	cbz	r0, 11c50 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   11c16:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   11c1a:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   11c1e:	b168      	cbz	r0, 11c3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   11c20:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11c24:	f010 0102 	ands.w	r1, r0, #2
   11c28:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11c2c:	f88d 1004 	strb.w	r1, [sp, #4]
   11c30:	f000 0002 	and.w	r0, r0, #2
   11c34:	f88d 0008 	strb.w	r0, [sp, #8]
   11c38:	d00d      	beq.n	11c56 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11c3a:	b160      	cbz	r0, 11c56 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11c3c:	2001      	movs	r0, #1
   11c3e:	7060      	strb	r0, [r4, #1]
   11c40:	f04f 0800 	mov.w	r8, #0
   11c44:	b95e      	cbnz	r6, 11c5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   11c46:	e008      	b.n	11c5a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   11c48:	201a      	movs	r0, #26
   11c4a:	b009      	add	sp, #36	; 0x24
   11c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11c50:	f504 74a1 	add.w	r4, r4, #322	; 0x142
   11c54:	e7e1      	b.n	11c1a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   11c56:	2009      	movs	r0, #9
   11c58:	e7f7      	b.n	11c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11c5a:	7820      	ldrb	r0, [r4, #0]
   11c5c:	b108      	cbz	r0, 11c62 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   11c5e:	273a      	movs	r7, #58	; 0x3a
   11c60:	e011      	b.n	11c86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe8>
   11c62:	f8cd 8018 	str.w	r8, [sp, #24]
   11c66:	f884 9000 	strb.w	r9, [r4]
   11c6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11c6e:	70a1      	strb	r1, [r4, #2]
   11c70:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11c74:	70e0      	strb	r0, [r4, #3]
   11c76:	f88d 1018 	strb.w	r1, [sp, #24]
   11c7a:	f88d 0019 	strb.w	r0, [sp, #25]
   11c7e:	a906      	add	r1, sp, #24
   11c80:	4628      	mov	r0, r5
   11c82:	f7fe fc41 	bl	10508 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   11c86:	f884 8001 	strb.w	r8, [r4, #1]
   11c8a:	4638      	mov	r0, r7
   11c8c:	e7dd      	b.n	11c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00011c8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11c8e:	b510      	push	{r4, lr}
   11c90:	2008      	movs	r0, #8
   11c92:	f7fb fb35 	bl	d300 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   11c96:	f7fa fafb 	bl	c290 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   11c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c9e:	f7f8 b9ad 	b.w	9ffc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

00011ca2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   11ca2:	b510      	push	{r4, lr}
   11ca4:	4604      	mov	r4, r0
   11ca6:	2000      	movs	r0, #0
   11ca8:	8822      	ldrh	r2, [r4, #0]
   11caa:	b086      	sub	sp, #24
   11cac:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   11cb0:	39ff      	subs	r1, #255	; 0xff
   11cb2:	d008      	beq.n	11cc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   11cb4:	a903      	add	r1, sp, #12
   11cb6:	4610      	mov	r0, r2
   11cb8:	f7fe fb2b 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11cbc:	b110      	cbz	r0, 11cc4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   11cbe:	2002      	movs	r0, #2
   11cc0:	b006      	add	sp, #24
   11cc2:	bd10      	pop	{r4, pc}
   11cc4:	9804      	ldr	r0, [sp, #16]
   11cc6:	8921      	ldrh	r1, [r4, #8]
   11cc8:	89a3      	ldrh	r3, [r4, #12]
   11cca:	8962      	ldrh	r2, [r4, #10]
   11ccc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   11cd0:	88e3      	ldrh	r3, [r4, #6]
   11cd2:	88a2      	ldrh	r2, [r4, #4]
   11cd4:	8861      	ldrh	r1, [r4, #2]
   11cd6:	f7fb f8db 	bl	ce90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>
   11cda:	b108      	cbz	r0, 11ce0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   11cdc:	2000      	movs	r0, #0
   11cde:	e7ef      	b.n	11cc0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   11ce0:	2030      	movs	r0, #48	; 0x30
   11ce2:	e7ed      	b.n	11cc0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   11ce4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11ce8:	4288      	cmp	r0, r1
   11cea:	d303      	bcc.n	11cf4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   11cec:	f640 0148 	movw	r1, #2120	; 0x848
   11cf0:	4288      	cmp	r0, r1
   11cf2:	d300      	bcc.n	11cf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   11cf4:	4608      	mov	r0, r1
   11cf6:	4770      	bx	lr
   11cf8:	07c1      	lsls	r1, r0, #31
   11cfa:	d001      	beq.n	11d00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   11cfc:	2001      	movs	r0, #1
   11cfe:	4770      	bx	lr
   11d00:	0780      	lsls	r0, r0, #30
   11d02:	d501      	bpl.n	11d08 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   11d04:	2002      	movs	r0, #2
   11d06:	4770      	bx	lr
   11d08:	2000      	movs	r0, #0
   11d0a:	4770      	bx	lr
   11d0c:	b510      	push	{r4, lr}
   11d0e:	2801      	cmp	r0, #1
   11d10:	d006      	beq.n	11d20 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   11d12:	2802      	cmp	r0, #2
   11d14:	d004      	beq.n	11d20 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   11d16:	f240 218f 	movw	r1, #655	; 0x28f
   11d1a:	2006      	movs	r0, #6
   11d1c:	f7f2 f9b6 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11d20:	bd10      	pop	{r4, pc}
   11d22:	b108      	cbz	r0, 11d28 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x86>
   11d24:	2000      	movs	r0, #0
   11d26:	4770      	bx	lr
   11d28:	2001      	movs	r0, #1
   11d2a:	4770      	bx	lr
   11d2c:	b570      	push	{r4, r5, r6, lr}
   11d2e:	460d      	mov	r5, r1
   11d30:	8899      	ldrh	r1, [r3, #4]
   11d32:	461c      	mov	r4, r3
   11d34:	194b      	adds	r3, r1, r5
   11d36:	4293      	cmp	r3, r2
   11d38:	d901      	bls.n	11d3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   11d3a:	2007      	movs	r0, #7
   11d3c:	bd70      	pop	{r4, r5, r6, pc}
   11d3e:	6822      	ldr	r2, [r4, #0]
   11d40:	1853      	adds	r3, r2, r1
   11d42:	4601      	mov	r1, r0
   11d44:	462a      	mov	r2, r5
   11d46:	4618      	mov	r0, r3
   11d48:	f7f2 f816 	bl	3d78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11d4c:	88a0      	ldrh	r0, [r4, #4]
   11d4e:	4428      	add	r0, r5
   11d50:	80a0      	strh	r0, [r4, #4]
   11d52:	2000      	movs	r0, #0
   11d54:	bd70      	pop	{r4, r5, r6, pc}
   11d56:	b570      	push	{r4, r5, r6, lr}
   11d58:	460c      	mov	r4, r1
   11d5a:	4605      	mov	r5, r0
   11d5c:	b112      	cbz	r2, 11d64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   11d5e:	291f      	cmp	r1, #31
   11d60:	d807      	bhi.n	11d72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11d62:	e010      	b.n	11d86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe4>
   11d64:	2cff      	cmp	r4, #255	; 0xff
   11d66:	d804      	bhi.n	11d72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11d68:	f7f5 fe08 	bl	797c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11d6c:	b118      	cbz	r0, 11d76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11d6e:	2c1f      	cmp	r4, #31
   11d70:	d901      	bls.n	11d76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11d72:	2012      	movs	r0, #18
   11d74:	bd70      	pop	{r4, r5, r6, pc}
   11d76:	4628      	mov	r0, r5
   11d78:	f7f5 fe1e 	bl	79b8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11d7c:	b128      	cbz	r0, 11d8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe8>
   11d7e:	4620      	mov	r0, r4
   11d80:	f7f5 fc7c 	bl	767c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   11d84:	b118      	cbz	r0, 11d8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xec>
   11d86:	2000      	movs	r0, #0
   11d88:	bd70      	pop	{r4, r5, r6, pc}
   11d8a:	2042      	movs	r0, #66	; 0x42
   11d8c:	bd70      	pop	{r4, r5, r6, pc}
   11d8e:	2045      	movs	r0, #69	; 0x45
   11d90:	bd70      	pop	{r4, r5, r6, pc}
   11d92:	b510      	push	{r4, lr}
   11d94:	4604      	mov	r4, r0
   11d96:	7840      	ldrb	r0, [r0, #1]
   11d98:	06c0      	lsls	r0, r0, #27
   11d9a:	d413      	bmi.n	11dc4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11d9c:	f7fb fad0 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11da0:	0780      	lsls	r0, r0, #30
   11da2:	d405      	bmi.n	11db0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10e>
   11da4:	7d20      	ldrb	r0, [r4, #20]
   11da6:	2802      	cmp	r0, #2
   11da8:	d020      	beq.n	11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11daa:	7da0      	ldrb	r0, [r4, #22]
   11dac:	2802      	cmp	r0, #2
   11dae:	d01d      	beq.n	11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11db0:	f7fb fac6 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11db4:	0740      	lsls	r0, r0, #29
   11db6:	d405      	bmi.n	11dc4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11db8:	7d20      	ldrb	r0, [r4, #20]
   11dba:	2803      	cmp	r0, #3
   11dbc:	d016      	beq.n	11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11dbe:	7da0      	ldrb	r0, [r4, #22]
   11dc0:	2803      	cmp	r0, #3
   11dc2:	d013      	beq.n	11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11dc4:	7860      	ldrb	r0, [r4, #1]
   11dc6:	07c0      	lsls	r0, r0, #31
   11dc8:	d002      	beq.n	11dd0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12e>
   11dca:	f7fb fa45 	bl	d258 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   11dce:	b168      	cbz	r0, 11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11dd0:	7860      	ldrb	r0, [r4, #1]
   11dd2:	06c1      	lsls	r1, r0, #27
   11dd4:	d405      	bmi.n	11de2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11dd6:	0700      	lsls	r0, r0, #28
   11dd8:	d503      	bpl.n	11de2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11dda:	7d20      	ldrb	r0, [r4, #20]
   11ddc:	2802      	cmp	r0, #2
   11dde:	d105      	bne.n	11dec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11de0:	e006      	b.n	11df0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11de2:	7d20      	ldrb	r0, [r4, #20]
   11de4:	2802      	cmp	r0, #2
   11de6:	d003      	beq.n	11df0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11de8:	7ea0      	ldrb	r0, [r4, #26]
   11dea:	b108      	cbz	r0, 11df0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11dec:	2011      	movs	r0, #17
   11dee:	bd10      	pop	{r4, pc}
   11df0:	2000      	movs	r0, #0
   11df2:	bd10      	pop	{r4, pc}
   11df4:	b538      	push	{r3, r4, r5, lr}
   11df6:	4604      	mov	r4, r0
   11df8:	7800      	ldrb	r0, [r0, #0]
   11dfa:	28ef      	cmp	r0, #239	; 0xef
   11dfc:	d860      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11dfe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   11e02:	f8ad 0000 	strh.w	r0, [sp]
   11e06:	9800      	ldr	r0, [sp, #0]
   11e08:	f000 f9c3 	bl	12192 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f0>
   11e0c:	b3c0      	cbz	r0, 11e80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11e0e:	7860      	ldrb	r0, [r4, #1]
   11e10:	0701      	lsls	r1, r0, #28
   11e12:	d40f      	bmi.n	11e34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
   11e14:	f8d4 2002 	ldr.w	r2, [r4, #2]
   11e18:	f8d4 1005 	ldr.w	r1, [r4, #5]
   11e1c:	0a13      	lsrs	r3, r2, #8
   11e1e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   11e22:	d84d      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e24:	2320      	movs	r3, #32
   11e26:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   11e2a:	d849      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e2c:	025a      	lsls	r2, r3, #9
   11e2e:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   11e32:	d345      	bcc.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e34:	7a61      	ldrb	r1, [r4, #9]
   11e36:	b319      	cbz	r1, 11e80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11e38:	2907      	cmp	r1, #7
   11e3a:	d841      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e3c:	7aa1      	ldrb	r1, [r4, #10]
   11e3e:	b129      	cbz	r1, 11e4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e40:	2901      	cmp	r1, #1
   11e42:	d003      	beq.n	11e4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e44:	2902      	cmp	r1, #2
   11e46:	d001      	beq.n	11e4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e48:	2903      	cmp	r1, #3
   11e4a:	d139      	bne.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e4c:	0742      	lsls	r2, r0, #29
   11e4e:	d403      	bmi.n	11e58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   11e50:	2902      	cmp	r1, #2
   11e52:	d001      	beq.n	11e58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   11e54:	2903      	cmp	r1, #3
   11e56:	d105      	bne.n	11e64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c2>
   11e58:	7ae1      	ldrb	r1, [r4, #11]
   11e5a:	b109      	cbz	r1, 11e60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1be>
   11e5c:	2901      	cmp	r1, #1
   11e5e:	d12f      	bne.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e60:	0741      	lsls	r1, r0, #29
   11e62:	d407      	bmi.n	11e74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e64:	7ca1      	ldrb	r1, [r4, #18]
   11e66:	b129      	cbz	r1, 11e74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e68:	2901      	cmp	r1, #1
   11e6a:	d003      	beq.n	11e74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e6c:	2902      	cmp	r1, #2
   11e6e:	d001      	beq.n	11e74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e70:	2903      	cmp	r1, #3
   11e72:	d125      	bne.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e74:	06c1      	lsls	r1, r0, #27
   11e76:	d504      	bpl.n	11e82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e0>
   11e78:	7d20      	ldrb	r0, [r4, #20]
   11e7a:	2801      	cmp	r0, #1
   11e7c:	d120      	bne.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e7e:	e01b      	b.n	11eb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   11e80:	e01e      	b.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e82:	7d21      	ldrb	r1, [r4, #20]
   11e84:	2902      	cmp	r1, #2
   11e86:	d10b      	bne.n	11ea0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fe>
   11e88:	07c1      	lsls	r1, r0, #31
   11e8a:	d019      	beq.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e8c:	0741      	lsls	r1, r0, #29
   11e8e:	d417      	bmi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e90:	0701      	lsls	r1, r0, #28
   11e92:	d515      	bpl.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e94:	0641      	lsls	r1, r0, #25
   11e96:	d413      	bmi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e98:	0681      	lsls	r1, r0, #26
   11e9a:	d411      	bmi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e9c:	0781      	lsls	r1, r0, #30
   11e9e:	d40f      	bmi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11ea0:	06c0      	lsls	r0, r0, #27
   11ea2:	d409      	bmi.n	11eb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   11ea4:	7da0      	ldrb	r0, [r4, #22]
   11ea6:	2801      	cmp	r0, #1
   11ea8:	d003      	beq.n	11eb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11eaa:	2802      	cmp	r0, #2
   11eac:	d001      	beq.n	11eb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11eae:	2803      	cmp	r0, #3
   11eb0:	d106      	bne.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11eb2:	7de0      	ldrb	r0, [r4, #23]
   11eb4:	280f      	cmp	r0, #15
   11eb6:	d803      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11eb8:	7e20      	ldrb	r0, [r4, #24]
   11eba:	b118      	cbz	r0, 11ec4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   11ebc:	2801      	cmp	r0, #1
   11ebe:	d001      	beq.n	11ec4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   11ec0:	2012      	movs	r0, #18
   11ec2:	bd38      	pop	{r3, r4, r5, pc}
   11ec4:	2000      	movs	r0, #0
   11ec6:	bd38      	pop	{r3, r4, r5, pc}
   11ec8:	b510      	push	{r4, lr}
   11eca:	0004      	movs	r4, r0
   11ecc:	d005      	beq.n	11eda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11ece:	f7fb fa37 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11ed2:	4384      	bics	r4, r0
   11ed4:	d001      	beq.n	11eda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11ed6:	2000      	movs	r0, #0
   11ed8:	bd10      	pop	{r4, pc}
   11eda:	2001      	movs	r0, #1
   11edc:	bd10      	pop	{r4, pc}
   11ede:	28fb      	cmp	r0, #251	; 0xfb
   11ee0:	d803      	bhi.n	11eea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x248>
   11ee2:	f640 0048 	movw	r0, #2120	; 0x848
   11ee6:	4281      	cmp	r1, r0
   11ee8:	d901      	bls.n	11eee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   11eea:	2011      	movs	r0, #17
   11eec:	4770      	bx	lr
   11eee:	2000      	movs	r0, #0
   11ef0:	4770      	bx	lr
   11ef2:	381b      	subs	r0, #27
   11ef4:	28e1      	cmp	r0, #225	; 0xe1
   11ef6:	d206      	bcs.n	11f06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   11ef8:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   11efc:	d303      	bcc.n	11f06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   11efe:	f244 2090 	movw	r0, #17040	; 0x4290
   11f02:	4281      	cmp	r1, r0
   11f04:	d901      	bls.n	11f0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x268>
   11f06:	2012      	movs	r0, #18
   11f08:	4770      	bx	lr
   11f0a:	2000      	movs	r0, #0
   11f0c:	4770      	bx	lr
   11f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f12:	4605      	mov	r5, r0
   11f14:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   11f18:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   11f1c:	4616      	mov	r6, r2
   11f1e:	3028      	adds	r0, #40	; 0x28
   11f20:	b111      	cbz	r1, 11f28 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   11f22:	f7fa f983 	bl	c22c <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   11f26:	e001      	b.n	11f2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28a>
   11f28:	f7f7 f8e8 	bl	90fc <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   11f2c:	4680      	mov	r8, r0
   11f2e:	2102      	movs	r1, #2
   11f30:	f7fe fabe 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11f34:	4287      	cmp	r7, r0
   11f36:	d200      	bcs.n	11f3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   11f38:	4638      	mov	r0, r7
   11f3a:	4607      	mov	r7, r0
   11f3c:	2102      	movs	r1, #2
   11f3e:	4640      	mov	r0, r8
   11f40:	f7fe fab6 	bl	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11f44:	4284      	cmp	r4, r0
   11f46:	d200      	bcs.n	11f4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   11f48:	4620      	mov	r0, r4
   11f4a:	8829      	ldrh	r1, [r5, #0]
   11f4c:	8031      	strh	r1, [r6, #0]
   11f4e:	2f1b      	cmp	r7, #27
   11f50:	d913      	bls.n	11f7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d8>
   11f52:	2ffb      	cmp	r7, #251	; 0xfb
   11f54:	d300      	bcc.n	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11f56:	27fb      	movs	r7, #251	; 0xfb
   11f58:	8077      	strh	r7, [r6, #2]
   11f5a:	281b      	cmp	r0, #27
   11f5c:	d90f      	bls.n	11f7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2dc>
   11f5e:	28fb      	cmp	r0, #251	; 0xfb
   11f60:	d300      	bcc.n	11f64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11f62:	20fb      	movs	r0, #251	; 0xfb
   11f64:	80f0      	strh	r0, [r6, #6]
   11f66:	4640      	mov	r0, r8
   11f68:	f7ff febc 	bl	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11f6c:	80b0      	strh	r0, [r6, #4]
   11f6e:	4640      	mov	r0, r8
   11f70:	f7ff feb8 	bl	11ce4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11f74:	8130      	strh	r0, [r6, #8]
   11f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f7a:	271b      	movs	r7, #27
   11f7c:	e7ec      	b.n	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11f7e:	201b      	movs	r0, #27
   11f80:	e7f0      	b.n	11f64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11f82:	b510      	push	{r4, lr}
   11f84:	f000 f84c 	bl	12020 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11f88:	b918      	cbnz	r0, 11f92 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11f8a:	f7f6 fff1 	bl	8f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11f8e:	2800      	cmp	r0, #0
   11f90:	d000      	beq.n	11f94 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f2>
   11f92:	2001      	movs	r0, #1
   11f94:	bd10      	pop	{r4, pc}
   11f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f9a:	7890      	ldrb	r0, [r2, #2]
   11f9c:	9e06      	ldr	r6, [sp, #24]
   11f9e:	461d      	mov	r5, r3
   11fa0:	4614      	mov	r4, r2
   11fa2:	b908      	cbnz	r0, 11fa8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x306>
   11fa4:	f7fb f9cc 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11fa8:	78e4      	ldrb	r4, [r4, #3]
   11faa:	4607      	mov	r7, r0
   11fac:	b914      	cbnz	r4, 11fb4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x312>
   11fae:	f7fb f9c7 	bl	d340 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11fb2:	4604      	mov	r4, r0
   11fb4:	b16f      	cbz	r7, 11fd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11fb6:	b164      	cbz	r4, 11fd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11fb8:	4638      	mov	r0, r7
   11fba:	f7ff fe9d 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11fbe:	4620      	mov	r0, r4
   11fc0:	f7ff fe9a 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11fc4:	b12f      	cbz	r7, 11fd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11fc6:	b124      	cbz	r4, 11fd2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11fc8:	702f      	strb	r7, [r5, #0]
   11fca:	7034      	strb	r4, [r6, #0]
   11fcc:	2000      	movs	r0, #0
   11fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fd2:	2009      	movs	r0, #9
   11fd4:	e7fb      	b.n	11fce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32c>
   11fd6:	b510      	push	{r4, lr}
   11fd8:	f7fb f9a4 	bl	d324 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11fdc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11fe0:	bd10      	pop	{r4, pc}
   11fe2:	7801      	ldrb	r1, [r0, #0]
   11fe4:	6840      	ldr	r0, [r0, #4]
   11fe6:	b109      	cbz	r1, 11fec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34a>
   11fe8:	f000 b80e 	b.w	12008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
   11fec:	f000 b800 	b.w	11ff0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   11ff0:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   11ff4:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11ff8:	b920      	cbnz	r0, 12004 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11ffa:	b119      	cbz	r1, 12004 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11ffc:	2904      	cmp	r1, #4
   11ffe:	d001      	beq.n	12004 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   12000:	2001      	movs	r0, #1
   12002:	4770      	bx	lr
   12004:	2000      	movs	r0, #0
   12006:	4770      	bx	lr
   12008:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   1200c:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   12010:	b920      	cbnz	r0, 1201c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   12012:	b119      	cbz	r1, 1201c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   12014:	2904      	cmp	r1, #4
   12016:	d001      	beq.n	1201c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   12018:	2001      	movs	r0, #1
   1201a:	4770      	bx	lr
   1201c:	2000      	movs	r0, #0
   1201e:	4770      	bx	lr
   12020:	b510      	push	{r4, lr}
   12022:	f7fa f911 	bl	c248 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   12026:	2804      	cmp	r0, #4
   12028:	d003      	beq.n	12032 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   1202a:	2805      	cmp	r0, #5
   1202c:	d001      	beq.n	12032 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   1202e:	2000      	movs	r0, #0
   12030:	bd10      	pop	{r4, pc}
   12032:	2001      	movs	r0, #1
   12034:	bd10      	pop	{r4, pc}
   12036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1203a:	b086      	sub	sp, #24
   1203c:	4604      	mov	r4, r0
   1203e:	8800      	ldrh	r0, [r0, #0]
   12040:	4669      	mov	r1, sp
   12042:	f7fe f966 	bl	10312 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   12046:	2800      	cmp	r0, #0
   12048:	d151      	bne.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   1204a:	9801      	ldr	r0, [sp, #4]
   1204c:	f89d 1000 	ldrb.w	r1, [sp]
   12050:	3078      	adds	r0, #120	; 0x78
   12052:	2900      	cmp	r1, #0
   12054:	9901      	ldr	r1, [sp, #4]
   12056:	d007      	beq.n	12068 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   12058:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   1205c:	f88d 1008 	strb.w	r1, [sp, #8]
   12060:	7b81      	ldrb	r1, [r0, #14]
   12062:	0689      	lsls	r1, r1, #26
   12064:	d413      	bmi.n	1208e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   12066:	e009      	b.n	1207c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   12068:	f891 1162 	ldrb.w	r1, [r1, #354]	; 0x162
   1206c:	f88d 1008 	strb.w	r1, [sp, #8]
   12070:	7b41      	ldrb	r1, [r0, #13]
   12072:	291d      	cmp	r1, #29
   12074:	d00b      	beq.n	1208e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   12076:	e001      	b.n	1207c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   12078:	2101      	movs	r1, #1
   1207a:	e000      	b.n	1207e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3dc>
   1207c:	2100      	movs	r1, #0
   1207e:	f88d 100c 	strb.w	r1, [sp, #12]
   12082:	2105      	movs	r1, #5
   12084:	3046      	adds	r0, #70	; 0x46
   12086:	f7ff f9db 	bl	11440 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   1208a:	b128      	cbz	r0, 12098 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f6>
   1208c:	e007      	b.n	1209e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fc>
   1208e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   12092:	2900      	cmp	r1, #0
   12094:	d1f2      	bne.n	1207c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   12096:	e7ef      	b.n	12078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d6>
   12098:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1209c:	b330      	cbz	r0, 120ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44a>
   1209e:	8921      	ldrh	r1, [r4, #8]
   120a0:	88e0      	ldrh	r0, [r4, #6]
   120a2:	f7ff ff26 	bl	11ef2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   120a6:	2800      	cmp	r0, #0
   120a8:	d121      	bne.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   120aa:	88a1      	ldrh	r1, [r4, #4]
   120ac:	8860      	ldrh	r0, [r4, #2]
   120ae:	f7ff ff20 	bl	11ef2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   120b2:	2800      	cmp	r0, #0
   120b4:	d11b      	bne.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   120b6:	8921      	ldrh	r1, [r4, #8]
   120b8:	88e0      	ldrh	r0, [r4, #6]
   120ba:	f7ff ff10 	bl	11ede <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   120be:	2800      	cmp	r0, #0
   120c0:	d115      	bne.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   120c2:	88a1      	ldrh	r1, [r4, #4]
   120c4:	8860      	ldrh	r0, [r4, #2]
   120c6:	f7ff ff0a 	bl	11ede <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   120ca:	0006      	movs	r6, r0
   120cc:	d10f      	bne.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   120ce:	f89d 0000 	ldrb.w	r0, [sp]
   120d2:	9f01      	ldr	r7, [sp, #4]
   120d4:	b170      	cbz	r0, 120f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
   120d6:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   120da:	f04f 0801 	mov.w	r8, #1
   120de:	f885 8001 	strb.w	r8, [r5, #1]
   120e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   120e6:	b140      	cbz	r0, 120fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x458>
   120e8:	263a      	movs	r6, #58	; 0x3a
   120ea:	e037      	b.n	1215c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ba>
   120ec:	201a      	movs	r0, #26
   120ee:	b006      	add	sp, #24
   120f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120f4:	f507 759c 	add.w	r5, r7, #312	; 0x138
   120f8:	e7ef      	b.n	120da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x438>
   120fa:	f89d 0000 	ldrb.w	r0, [sp]
   120fe:	f7ff fe10 	bl	11d22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   12102:	4601      	mov	r1, r0
   12104:	aa02      	add	r2, sp, #8
   12106:	4638      	mov	r0, r7
   12108:	f7ff ff01 	bl	11f0e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   1210c:	8861      	ldrh	r1, [r4, #2]
   1210e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   12112:	4281      	cmp	r1, r0
   12114:	d200      	bcs.n	12118 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   12116:	4608      	mov	r0, r1
   12118:	80e8      	strh	r0, [r5, #6]
   1211a:	88a1      	ldrh	r1, [r4, #4]
   1211c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   12120:	4281      	cmp	r1, r0
   12122:	d200      	bcs.n	12126 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x484>
   12124:	4608      	mov	r0, r1
   12126:	8128      	strh	r0, [r5, #8]
   12128:	88e2      	ldrh	r2, [r4, #6]
   1212a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1212e:	428a      	cmp	r2, r1
   12130:	d200      	bcs.n	12134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x492>
   12132:	4611      	mov	r1, r2
   12134:	8069      	strh	r1, [r5, #2]
   12136:	8921      	ldrh	r1, [r4, #8]
   12138:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1213c:	4291      	cmp	r1, r2
   1213e:	d300      	bcc.n	12142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   12140:	4611      	mov	r1, r2
   12142:	f640 0248 	movw	r2, #2120	; 0x848
   12146:	80a9      	strh	r1, [r5, #4]
   12148:	4291      	cmp	r1, r2
   1214a:	d300      	bcc.n	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ac>
   1214c:	4611      	mov	r1, r2
   1214e:	80a9      	strh	r1, [r5, #4]
   12150:	4290      	cmp	r0, r2
   12152:	d200      	bcs.n	12156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b4>
   12154:	4602      	mov	r2, r0
   12156:	812a      	strh	r2, [r5, #8]
   12158:	f885 8000 	strb.w	r8, [r5]
   1215c:	2000      	movs	r0, #0
   1215e:	7068      	strb	r0, [r5, #1]
   12160:	4630      	mov	r0, r6
   12162:	e7c4      	b.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   12164:	b530      	push	{r4, r5, lr}
   12166:	f340 0400 	sbfx	r4, r0, #0, #1
   1216a:	f340 0040 	sbfx	r0, r0, #1, #1
   1216e:	1c40      	adds	r0, r0, #1
   12170:	9d03      	ldr	r5, [sp, #12]
   12172:	1c64      	adds	r4, r4, #1
   12174:	d000      	beq.n	12178 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   12176:	b119      	cbz	r1, 12180 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   12178:	b100      	cbz	r0, 1217c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4da>
   1217a:	b10a      	cbz	r2, 12180 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   1217c:	b91c      	cbnz	r4, 12186 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   1217e:	e001      	b.n	12184 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e2>
   12180:	2011      	movs	r0, #17
   12182:	bd30      	pop	{r4, r5, pc}
   12184:	2100      	movs	r1, #0
   12186:	7019      	strb	r1, [r3, #0]
   12188:	b900      	cbnz	r0, 1218c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   1218a:	2200      	movs	r2, #0
   1218c:	702a      	strb	r2, [r5, #0]
   1218e:	2000      	movs	r0, #0
   12190:	bd30      	pop	{r4, r5, pc}
   12192:	b2c0      	uxtb	r0, r0
   12194:	06c1      	lsls	r1, r0, #27
   12196:	d415      	bmi.n	121c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x522>
   12198:	0681      	lsls	r1, r0, #26
   1219a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1219e:	d503      	bpl.n	121a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x506>
   121a0:	bb21      	cbnz	r1, 121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121a2:	0781      	lsls	r1, r0, #30
   121a4:	d422      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121a6:	e001      	b.n	121ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50a>
   121a8:	2900      	cmp	r1, #0
   121aa:	d1fa      	bne.n	121a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   121ac:	0701      	lsls	r1, r0, #28
   121ae:	d51b      	bpl.n	121e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   121b0:	07c1      	lsls	r1, r0, #31
   121b2:	d01b      	beq.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121b4:	0781      	lsls	r1, r0, #30
   121b6:	d419      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121b8:	0641      	lsls	r1, r0, #25
   121ba:	d417      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121bc:	0741      	lsls	r1, r0, #29
   121be:	d415      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121c0:	0680      	lsls	r0, r0, #26
   121c2:	e00f      	b.n	121e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x542>
   121c4:	0641      	lsls	r1, r0, #25
   121c6:	d411      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121c8:	0681      	lsls	r1, r0, #26
   121ca:	d40f      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121cc:	07c1      	lsls	r1, r0, #31
   121ce:	ea4f 7180 	mov.w	r1, r0, lsl #30
   121d2:	d004      	beq.n	121de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   121d4:	2900      	cmp	r1, #0
   121d6:	db02      	blt.n	121de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   121d8:	0740      	lsls	r0, r0, #29
   121da:	d405      	bmi.n	121e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   121dc:	e006      	b.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121de:	0701      	lsls	r1, r0, #28
   121e0:	d404      	bmi.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121e2:	0740      	lsls	r0, r0, #29
   121e4:	2800      	cmp	r0, #0
   121e6:	db01      	blt.n	121ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121e8:	2001      	movs	r0, #1
   121ea:	4770      	bx	lr
   121ec:	2000      	movs	r0, #0
   121ee:	4770      	bx	lr
   121f0:	b510      	push	{r4, lr}
   121f2:	f7ff ff15 	bl	12020 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   121f6:	b110      	cbz	r0, 121fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x55c>
   121f8:	f7f9 ffe0 	bl	c1bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   121fc:	b928      	cbnz	r0, 1220a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x568>
   121fe:	f7f6 feb7 	bl	8f70 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   12202:	b120      	cbz	r0, 1220e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   12204:	f7f5 fc92 	bl	7b2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   12208:	b108      	cbz	r0, 1220e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   1220a:	2001      	movs	r0, #1
   1220c:	bd10      	pop	{r4, pc}
   1220e:	2000      	movs	r0, #0
   12210:	bd10      	pop	{r4, pc}

00012212 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   12212:	6802      	ldr	r2, [r0, #0]
   12214:	b912      	cbnz	r2, 1221c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   12216:	6001      	str	r1, [r0, #0]
   12218:	4770      	bx	lr
   1221a:	4602      	mov	r2, r0
   1221c:	6850      	ldr	r0, [r2, #4]
   1221e:	2800      	cmp	r0, #0
   12220:	d1fb      	bne.n	1221a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   12222:	6051      	str	r1, [r2, #4]
   12224:	4770      	bx	lr
   12226:	b510      	push	{r4, lr}
   12228:	f7f5 fbb8 	bl	799c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   1222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12230:	f7fb b818 	b.w	d264 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   12234:	b510      	push	{r4, lr}
   12236:	f7f6 feb5 	bl	8fa4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   1223a:	b108      	cbz	r0, 12240 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   1223c:	21e2      	movs	r1, #226	; 0xe2
   1223e:	e004      	b.n	1224a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
   12240:	f7f5 fbca 	bl	79d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   12244:	2800      	cmp	r0, #0
   12246:	d003      	beq.n	12250 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   12248:	21e7      	movs	r1, #231	; 0xe7
   1224a:	2001      	movs	r0, #1
   1224c:	f7f1 ff1e 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12250:	bd10      	pop	{r4, pc}
   12252:	b50e      	push	{r1, r2, r3, lr}
   12254:	4669      	mov	r1, sp
   12256:	2001      	movs	r0, #1
   12258:	f7fd ff59 	bl	1010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1225c:	b148      	cbz	r0, 12272 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   1225e:	219c      	movs	r1, #156	; 0x9c
   12260:	e01a      	b.n	12298 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   12262:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12266:	2101      	movs	r1, #1
   12268:	f7f2 f93c 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1226c:	b108      	cbz	r0, 12272 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   1226e:	21a0      	movs	r1, #160	; 0xa0
   12270:	e012      	b.n	12298 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   12272:	4668      	mov	r0, sp
   12274:	f7f2 f910 	bl	4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   12278:	2800      	cmp	r0, #0
   1227a:	d0f2      	beq.n	12262 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x50>
   1227c:	4669      	mov	r1, sp
   1227e:	2000      	movs	r0, #0
   12280:	f7fd ff45 	bl	1010e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   12284:	b158      	cbz	r0, 1229e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   12286:	21a6      	movs	r1, #166	; 0xa6
   12288:	e006      	b.n	12298 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   1228a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1228e:	2100      	movs	r1, #0
   12290:	f7f2 f928 	bl	44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12294:	b118      	cbz	r0, 1229e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   12296:	21aa      	movs	r1, #170	; 0xaa
   12298:	2001      	movs	r0, #1
   1229a:	f7f1 fef7 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1229e:	4668      	mov	r0, sp
   122a0:	f7f2 f8fa 	bl	4498 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   122a4:	2800      	cmp	r0, #0
   122a6:	d0f0      	beq.n	1228a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x78>
   122a8:	bd0e      	pop	{r1, r2, r3, pc}
   122aa:	b510      	push	{r4, lr}
   122ac:	4604      	mov	r4, r0
   122ae:	e002      	b.n	122b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   122b0:	6820      	ldr	r0, [r4, #0]
   122b2:	4780      	blx	r0
   122b4:	6864      	ldr	r4, [r4, #4]
   122b6:	2c00      	cmp	r4, #0
   122b8:	d1fa      	bne.n	122b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
   122ba:	bd10      	pop	{r4, pc}
   122bc:	b510      	push	{r4, lr}
   122be:	f7ff ffc8 	bl	12252 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
   122c2:	f7f2 fa87 	bl	47d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   122c6:	f7f2 fdf7 	bl	4eb8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   122ca:	f7f3 f887 	bl	53dc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   122ce:	2800      	cmp	r0, #0
   122d0:	d003      	beq.n	122da <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xc8>
   122d2:	21c0      	movs	r1, #192	; 0xc0
   122d4:	2001      	movs	r0, #1
   122d6:	f7f1 fed9 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122da:	bd10      	pop	{r4, pc}
   122dc:	f7ff bfee 	b.w	122bc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   122e0:	b510      	push	{r4, lr}
   122e2:	f7ff ffa7 	bl	12234 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x22>
   122e6:	f7f8 f84f 	bl	a388 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   122ea:	2800      	cmp	r0, #0
   122ec:	d003      	beq.n	122f6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xe4>
   122ee:	21fe      	movs	r1, #254	; 0xfe
   122f0:	2001      	movs	r0, #1
   122f2:	f7f1 fecb 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122f6:	bd10      	pop	{r4, pc}

000122f8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   122f8:	b510      	push	{r4, lr}
   122fa:	f7fb fccb 	bl	dc94 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   122fe:	f7fb f9d1 	bl	d6a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   12302:	f7fb f885 	bl	d410 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   12306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1230a:	f7fb b965 	b.w	d5d8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1230e:	2801      	cmp	r0, #1
   12310:	bf04      	itt	eq
   12312:	2028      	moveq	r0, #40	; 0x28
   12314:	4770      	bxeq	lr
   12316:	2802      	cmp	r0, #2
   12318:	bf04      	itt	eq
   1231a:	2018      	moveq	r0, #24
   1231c:	4770      	bxeq	lr
   1231e:	b510      	push	{r4, lr}
   12320:	f640 217f 	movw	r1, #2687	; 0xa7f
   12324:	203e      	movs	r0, #62	; 0x3e
   12326:	f7f1 feb1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1232a:	2801      	cmp	r0, #1
   1232c:	bf04      	itt	eq
   1232e:	f641 6014 	movweq	r0, #7700	; 0x1e14
   12332:	4770      	bxeq	lr
   12334:	2802      	cmp	r0, #2
   12336:	bf04      	itt	eq
   12338:	f241 1030 	movweq	r0, #4400	; 0x1130
   1233c:	4770      	bxeq	lr
   1233e:	b510      	push	{r4, lr}
   12340:	f640 2193 	movw	r1, #2707	; 0xa93
   12344:	203e      	movs	r0, #62	; 0x3e
   12346:	f7f1 fea1 	bl	408c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001234a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1234a:	b570      	push	{r4, r5, r6, lr}
   1234c:	4604      	mov	r4, r0
   1234e:	4615      	mov	r5, r2
   12350:	4608      	mov	r0, r1
   12352:	f7ff ffea 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12356:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1235a:	ebc1 11c4 	rsb	r1, r1, r4, lsl #7
   1235e:	ebc0 04c1 	rsb	r4, r0, r1, lsl #3
   12362:	4628      	mov	r0, r5
   12364:	f7ff ffe1 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12368:	4420      	add	r0, r4
   1236a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1236e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   12372:	fbb0 f4f1 	udiv	r4, r0, r1
   12376:	4628      	mov	r0, r5
   12378:	f7ff ffc9 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1237c:	4420      	add	r0, r4
   1237e:	1d40      	adds	r0, r0, #5
   12380:	bd70      	pop	{r4, r5, r6, pc}

00012382 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   12382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12386:	4606      	mov	r6, r0
   12388:	461c      	mov	r4, r3
   1238a:	460d      	mov	r5, r1
   1238c:	4617      	mov	r7, r2
   1238e:	4610      	mov	r0, r2
   12390:	f7ff ffcb 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   12394:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   12398:	ebc1 11c6 	rsb	r1, r1, r6, lsl #7
   1239c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   123a0:	2d02      	cmp	r5, #2
   123a2:	bf0c      	ite	eq
   123a4:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   123a8:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   123ac:	4408      	add	r0, r1
   123ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123b2:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   123b6:	fbb0 f5f1 	udiv	r5, r0, r1
   123ba:	4638      	mov	r0, r7
   123bc:	f7ff ffa7 	bl	1230e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   123c0:	4428      	add	r0, r5
   123c2:	4420      	add	r0, r4
   123c4:	1d40      	adds	r0, r0, #5
   123c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   123ca:	b510      	push	{r4, lr}
   123cc:	4604      	mov	r4, r0
   123ce:	4608      	mov	r0, r1
   123d0:	f7ff ffab 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   123d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123d8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   123dc:	fbb0 f0f1 	udiv	r0, r0, r1
   123e0:	1a20      	subs	r0, r4, r0
   123e2:	1e80      	subs	r0, r0, #2
   123e4:	bd10      	pop	{r4, pc}

000123e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   123e6:	b510      	push	{r4, lr}
   123e8:	4604      	mov	r4, r0
   123ea:	4608      	mov	r0, r1
   123ec:	f7ff ff9d 	bl	1232a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   123f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123f4:	fbb0 f0f1 	udiv	r0, r0, r1
   123f8:	1a20      	subs	r0, r4, r0
   123fa:	bd10      	pop	{r4, pc}

000123fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   123fc:	2902      	cmp	r1, #2
   123fe:	bf0c      	ite	eq
   12400:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   12404:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   12408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1240c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   12410:	fbb1 f1f2 	udiv	r1, r1, r2
   12414:	4408      	add	r0, r1
   12416:	1e80      	subs	r0, r0, #2
   12418:	4770      	bx	lr

0001241a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1241a:	2902      	cmp	r1, #2
   1241c:	bf0c      	ite	eq
   1241e:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   12422:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   12426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1242a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1242e:	fbb1 f1f2 	udiv	r1, r1, r2
   12432:	4408      	add	r0, r1
   12434:	4770      	bx	lr

00012436 <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   12436:	2100      	movs	r1, #0
   12438:	6001      	str	r1, [r0, #0]
   1243a:	6041      	str	r1, [r0, #4]
   1243c:	4770      	bx	lr

0001243e <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   1243e:	680a      	ldr	r2, [r1, #0]
   12440:	6002      	str	r2, [r0, #0]
   12442:	790b      	ldrb	r3, [r1, #4]
   12444:	7103      	strb	r3, [r0, #4]
   12446:	4770      	bx	lr

00012448 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   12448:	2100      	movs	r1, #0
   1244a:	6001      	str	r1, [r0, #0]
   1244c:	8081      	strh	r1, [r0, #4]
   1244e:	4770      	bx	lr
   12450:	05020345 	.word	0x05020345
   12454:	04020231 	.word	0x04020231
   12458:	1702080c 	.word	0x1702080c
   1245c:	0201010d 	.word	0x0201010d
   12460:	01010909 	.word	0x01010909
   12464:	18090206 	.word	0x18090206
   12468:	01010318 	.word	0x01010318
   1246c:	03030909 	.word	0x03030909
   12470:	00000005 	.word	0x00000005
   12474:	00000000 	.word	0x00000000

00012478 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
   12478:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1247a:	4d3e      	ldr	r5, [pc, #248]	; (12574 <hci_init+0xfc>)
   1247c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   12480:	6899      	ldr	r1, [r3, #8]
   12482:	f011 0101 	ands.w	r1, r1, #1
   12486:	d11f      	bne.n	124c8 <hci_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12488:	aa01      	add	r2, sp, #4
   1248a:	f640 4003 	movw	r0, #3075	; 0xc03
   1248e:	f002 fdfb 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   12492:	4604      	mov	r4, r0
   12494:	2800      	cmp	r0, #0
   12496:	d16a      	bne.n	1256e <hci_init+0xf6>
		hci_reset_complete(rsp);
   12498:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   1249a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1249c:	781b      	ldrb	r3, [r3, #0]
   1249e:	b983      	cbnz	r3, 124c2 <hci_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   124a0:	f105 0398 	add.w	r3, r5, #152	; 0x98
   124a4:	4618      	mov	r0, r3
   124a6:	f00b fca5 	bl	1ddf4 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   124aa:	f3bf 8f5b 	dmb	ish
   124ae:	f000 0005 	and.w	r0, r0, #5
   124b2:	e853 2f00 	ldrex	r2, [r3]
   124b6:	e843 0100 	strex	r1, r0, [r3]
   124ba:	2900      	cmp	r1, #0
   124bc:	d1f9      	bne.n	124b2 <hci_init+0x3a>
   124be:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   124c2:	9801      	ldr	r0, [sp, #4]
   124c4:	f006 ffbe 	bl	19444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   124c8:	aa01      	add	r2, sp, #4
   124ca:	2100      	movs	r1, #0
   124cc:	f241 0003 	movw	r0, #4099	; 0x1003
   124d0:	f002 fdda 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   124d4:	4604      	mov	r4, r0
   124d6:	2800      	cmp	r0, #0
   124d8:	d149      	bne.n	1256e <hci_init+0xf6>
	read_local_features_complete(rsp);
   124da:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   124dc:	4826      	ldr	r0, [pc, #152]	; (12578 <hci_init+0x100>)
   124de:	6899      	ldr	r1, [r3, #8]
   124e0:	2208      	movs	r2, #8
   124e2:	3101      	adds	r1, #1
   124e4:	f00b fb44 	bl	1db70 <memcpy>
	net_buf_unref(rsp);
   124e8:	9801      	ldr	r0, [sp, #4]
   124ea:	f006 ffab 	bl	19444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   124ee:	4621      	mov	r1, r4
   124f0:	aa01      	add	r2, sp, #4
   124f2:	f241 0001 	movw	r0, #4097	; 0x1001
   124f6:	f002 fdc7 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   124fa:	4604      	mov	r4, r0
   124fc:	2800      	cmp	r0, #0
   124fe:	d136      	bne.n	1256e <hci_init+0xf6>
	read_local_ver_complete(rsp);
   12500:	9801      	ldr	r0, [sp, #4]
   12502:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   12504:	785a      	ldrb	r2, [r3, #1]
   12506:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1250a:	78d9      	ldrb	r1, [r3, #3]
   1250c:	789a      	ldrb	r2, [r3, #2]
   1250e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12512:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
   12514:	791a      	ldrb	r2, [r3, #4]
   12516:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1251a:	7a19      	ldrb	r1, [r3, #8]
   1251c:	79da      	ldrb	r2, [r3, #7]
   1251e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12522:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12524:	795a      	ldrb	r2, [r3, #5]
   12526:	799b      	ldrb	r3, [r3, #6]
   12528:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1252c:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
   1252e:	f006 ff89 	bl	19444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   12532:	4621      	mov	r1, r4
   12534:	aa01      	add	r2, sp, #4
   12536:	f241 0002 	movw	r0, #4098	; 0x1002
   1253a:	f002 fda5 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1253e:	4604      	mov	r4, r0
   12540:	b9a8      	cbnz	r0, 1256e <hci_init+0xf6>
	read_supported_commands_complete(rsp);
   12542:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   12544:	480d      	ldr	r0, [pc, #52]	; (1257c <hci_init+0x104>)
   12546:	6899      	ldr	r1, [r3, #8]
   12548:	2240      	movs	r2, #64	; 0x40
   1254a:	3101      	adds	r1, #1
   1254c:	f00b fb10 	bl	1db70 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
   12550:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   12554:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
   12556:	f043 0306 	orr.w	r3, r3, #6
   1255a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   1255e:	f006 ff71 	bl	19444 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12562:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   12566:	065a      	lsls	r2, r3, #25
   12568:	d40a      	bmi.n	12580 <hci_init+0x108>
		return -ENODEV;
   1256a:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
   1256e:	4620      	mov	r0, r4
   12570:	b002      	add	sp, #8
   12572:	bd70      	pop	{r4, r5, r6, pc}
   12574:	200003c8 	.word	0x200003c8
   12578:	20000408 	.word	0x20000408
   1257c:	20000410 	.word	0x20000410
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12580:	4621      	mov	r1, r4
   12582:	aa01      	add	r2, sp, #4
   12584:	f242 0003 	movw	r0, #8195	; 0x2003
   12588:	f002 fd7e 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1258c:	4604      	mov	r4, r0
   1258e:	2800      	cmp	r0, #0
   12590:	d1ed      	bne.n	1256e <hci_init+0xf6>
	read_le_features_complete(rsp);
   12592:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12594:	48b4      	ldr	r0, [pc, #720]	; (12868 <hci_init+0x3f0>)
   12596:	6899      	ldr	r1, [r3, #8]
   12598:	2208      	movs	r2, #8
   1259a:	3101      	adds	r1, #1
   1259c:	f00b fae8 	bl	1db70 <memcpy>
	net_buf_unref(rsp);
   125a0:	9801      	ldr	r0, [sp, #4]
   125a2:	f006 ff4f 	bl	19444 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   125a6:	4621      	mov	r1, r4
   125a8:	aa01      	add	r2, sp, #4
   125aa:	f242 0002 	movw	r0, #8194	; 0x2002
   125ae:	f002 fd6b 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   125b2:	4604      	mov	r4, r0
   125b4:	2800      	cmp	r0, #0
   125b6:	d1da      	bne.n	1256e <hci_init+0xf6>
		le_read_buffer_size_complete(rsp);
   125b8:	9b01      	ldr	r3, [sp, #4]
   125ba:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   125bc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   125c0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   125c4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   125c6:	b121      	cbz	r1, 125d2 <hci_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   125c8:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   125ca:	48a8      	ldr	r0, [pc, #672]	; (1286c <hci_init+0x3f4>)
   125cc:	4611      	mov	r1, r2
   125ce:	f00e fc14 	bl	20dfa <z_impl_k_sem_init>
		net_buf_unref(rsp);
   125d2:	9801      	ldr	r0, [sp, #4]
   125d4:	f006 ff36 	bl	19444 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   125d8:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
   125dc:	f016 0620 	ands.w	r6, r6, #32
   125e0:	f000 811b 	beq.w	1281a <hci_init+0x3a2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   125e4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   125e8:	071b      	lsls	r3, r3, #28
   125ea:	d511      	bpl.n	12610 <hci_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   125ec:	aa01      	add	r2, sp, #4
   125ee:	2100      	movs	r1, #0
   125f0:	f242 001c 	movw	r0, #8220	; 0x201c
   125f4:	f002 fd48 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   125f8:	4604      	mov	r4, r0
   125fa:	2800      	cmp	r0, #0
   125fc:	d1b7      	bne.n	1256e <hci_init+0xf6>
		le_read_supp_states_complete(rsp);
   125fe:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12600:	6883      	ldr	r3, [r0, #8]
   12602:	f853 2f01 	ldr.w	r2, [r3, #1]!
   12606:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   12608:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   1260c:	f006 ff1a 	bl	19444 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   12610:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   12614:	069e      	lsls	r6, r3, #26
   12616:	d523      	bpl.n	12660 <hci_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12618:	f10d 0102 	add.w	r1, sp, #2
   1261c:	4668      	mov	r0, sp
   1261e:	f00b fd74 	bl	1e10a <hci_le_read_max_data_len>
		if (err) {
   12622:	4604      	mov	r4, r0
   12624:	2800      	cmp	r0, #0
   12626:	d1a2      	bne.n	1256e <hci_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12628:	2104      	movs	r1, #4
   1262a:	f242 0024 	movw	r0, #8228	; 0x2024
   1262e:	f002 fcd1 	bl	14fd4 <bt_hci_cmd_create>
		if (!buf) {
   12632:	4606      	mov	r6, r0
   12634:	2800      	cmp	r0, #0
   12636:	f000 80f7 	beq.w	12828 <hci_init+0x3b0>
		cp = net_buf_add(buf, sizeof(*cp));
   1263a:	2104      	movs	r1, #4
   1263c:	3008      	adds	r0, #8
   1263e:	f00d ff91 	bl	20564 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12642:	f8bd 3000 	ldrh.w	r3, [sp]
   12646:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   12648:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1264c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1264e:	4622      	mov	r2, r4
   12650:	4631      	mov	r1, r6
   12652:	f242 0024 	movw	r0, #8228	; 0x2024
   12656:	f002 fd17 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   1265a:	4604      	mov	r4, r0
   1265c:	2800      	cmp	r0, #0
   1265e:	d186      	bne.n	1256e <hci_init+0xf6>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   12660:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   12664:	065c      	lsls	r4, r3, #25
   12666:	d510      	bpl.n	1268a <hci_init+0x212>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   12668:	aa01      	add	r2, sp, #4
   1266a:	2100      	movs	r1, #0
   1266c:	f242 002a 	movw	r0, #8234	; 0x202a
   12670:	f002 fd0a 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   12674:	4604      	mov	r4, r0
   12676:	2800      	cmp	r0, #0
   12678:	f47f af79 	bne.w	1256e <hci_init+0xf6>
		le_read_resolving_list_size_complete(rsp);
   1267c:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   1267e:	6883      	ldr	r3, [r0, #8]
   12680:	785b      	ldrb	r3, [r3, #1]
   12682:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
   12686:	f006 fedd 	bl	19444 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1268a:	2108      	movs	r1, #8
   1268c:	f242 0001 	movw	r0, #8193	; 0x2001
   12690:	f002 fca0 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   12694:	4604      	mov	r4, r0
   12696:	2800      	cmp	r0, #0
   12698:	f000 80c6 	beq.w	12828 <hci_init+0x3b0>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   1269c:	2108      	movs	r1, #8
   1269e:	4408      	add	r0, r1
   126a0:	f00d ff60 	bl	20564 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   126a4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   126a8:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   126ac:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   126ae:	f240 2302 	movw	r3, #514	; 0x202
   126b2:	bf08      	it	eq
   126b4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   126b6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   126b8:	bf4c      	ite	mi
   126ba:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   126be:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   126c2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   126c4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   126c8:	bf48      	it	mi
   126ca:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   126ce:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126d2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   126d6:	bf18      	it	ne
   126d8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126dc:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   126e0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   126e2:	bf48      	it	mi
   126e4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126e8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   126ea:	bf08      	it	eq
   126ec:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   126f0:	2100      	movs	r1, #0
   126f2:	f00b fc4b 	bl	1df8c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   126f6:	4621      	mov	r1, r4
   126f8:	2200      	movs	r2, #0
   126fa:	f242 0001 	movw	r0, #8193	; 0x2001
   126fe:	f002 fcc3 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   12702:	4604      	mov	r4, r0
   12704:	2800      	cmp	r0, #0
   12706:	f47f af32 	bne.w	1256e <hci_init+0xf6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1270a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1270e:	0698      	lsls	r0, r3, #26
   12710:	d41e      	bmi.n	12750 <hci_init+0x2d8>
	if (bt_dev.le.acl_mtu) {
   12712:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   12716:	b9d9      	cbnz	r1, 12750 <hci_init+0x2d8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   12718:	aa01      	add	r2, sp, #4
   1271a:	f241 0005 	movw	r0, #4101	; 0x1005
   1271e:	f002 fcb3 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   12722:	4604      	mov	r4, r0
   12724:	2800      	cmp	r0, #0
   12726:	f47f af22 	bne.w	1256e <hci_init+0xf6>
	if (bt_dev.le.acl_mtu) {
   1272a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   1272e:	b963      	cbnz	r3, 1274a <hci_init+0x2d2>
	read_buffer_size_complete(rsp);
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   12734:	785a      	ldrb	r2, [r3, #1]
   12736:	7899      	ldrb	r1, [r3, #2]
   12738:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1273c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   12740:	889a      	ldrh	r2, [r3, #4]
   12742:	484a      	ldr	r0, [pc, #296]	; (1286c <hci_init+0x3f4>)
   12744:	4611      	mov	r1, r2
   12746:	f00e fb58 	bl	20dfa <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1274a:	9801      	ldr	r0, [sp, #4]
   1274c:	f006 fe7a 	bl	19444 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   12750:	2108      	movs	r1, #8
   12752:	f640 4001 	movw	r0, #3073	; 0xc01
   12756:	f002 fc3d 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1275a:	4604      	mov	r4, r0
   1275c:	2800      	cmp	r0, #0
   1275e:	d063      	beq.n	12828 <hci_init+0x3b0>
	ev = net_buf_add(buf, sizeof(*ev));
   12760:	2108      	movs	r1, #8
   12762:	4408      	add	r0, r1
   12764:	f00d fefe 	bl	20564 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12768:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1276c:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
   1276e:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12770:	d56f      	bpl.n	12852 <hci_init+0x3da>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   12772:	a13b      	add	r1, pc, #236	; (adr r1, 12860 <hci_init+0x3e8>)
   12774:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   12778:	f00b fc08 	bl	1df8c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1277c:	4621      	mov	r1, r4
   1277e:	2200      	movs	r2, #0
   12780:	f640 4001 	movw	r0, #3073	; 0xc01
   12784:	f002 fc80 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   12788:	4604      	mov	r4, r0
   1278a:	2800      	cmp	r0, #0
   1278c:	f47f aeef 	bne.w	1256e <hci_init+0xf6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   12790:	4601      	mov	r1, r0
   12792:	aa01      	add	r2, sp, #4
   12794:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12798:	f002 fc76 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1279c:	bb40      	cbnz	r0, 127f0 <hci_init+0x378>
	net_buf_unref(rsp);
   1279e:	9801      	ldr	r0, [sp, #4]
   127a0:	f006 fe50 	bl	19444 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   127a4:	aa01      	add	r2, sp, #4
   127a6:	4621      	mov	r1, r4
   127a8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   127ac:	f002 fc6c 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   127b0:	b9f0      	cbnz	r0, 127f0 <hci_init+0x378>
	rp.cmds = (void *)rsp->data;
   127b2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   127b4:	482e      	ldr	r0, [pc, #184]	; (12870 <hci_init+0x3f8>)
   127b6:	6899      	ldr	r1, [r3, #8]
   127b8:	2202      	movs	r2, #2
   127ba:	3101      	adds	r1, #1
   127bc:	f00b f9d8 	bl	1db70 <memcpy>
	net_buf_unref(rsp);
   127c0:	9801      	ldr	r0, [sp, #4]
   127c2:	f006 fe3f 	bl	19444 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   127c6:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
   127ca:	075b      	lsls	r3, r3, #29
   127cc:	d510      	bpl.n	127f0 <hci_init+0x378>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   127ce:	aa01      	add	r2, sp, #4
   127d0:	4621      	mov	r1, r4
   127d2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   127d6:	f002 fc57 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   127da:	b948      	cbnz	r0, 127f0 <hci_init+0x378>
		rp.feat = (void *)rsp->data;
   127dc:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   127de:	4825      	ldr	r0, [pc, #148]	; (12874 <hci_init+0x3fc>)
   127e0:	6899      	ldr	r1, [r3, #8]
   127e2:	2201      	movs	r2, #1
   127e4:	4411      	add	r1, r2
   127e6:	f00b f9c3 	bl	1db70 <memcpy>
		net_buf_unref(rsp);
   127ea:	9801      	ldr	r0, [sp, #4]
   127ec:	f006 fe2a 	bl	19444 <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   127f0:	79eb      	ldrb	r3, [r5, #7]
   127f2:	2b00      	cmp	r3, #0
   127f4:	f47f aebb 	bne.w	1256e <hci_init+0xf6>
		bt_setup_public_id_addr();
   127f8:	f003 f824 	bl	15844 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   127fc:	79eb      	ldrb	r3, [r5, #7]
   127fe:	2b00      	cmp	r3, #0
   12800:	f47f aeb5 	bne.w	1256e <hci_init+0xf6>
		err = bt_setup_random_id_addr();
   12804:	f003 f890 	bl	15928 <bt_setup_random_id_addr>
		if (err) {
   12808:	4604      	mov	r4, r0
   1280a:	2800      	cmp	r0, #0
   1280c:	f47f aeaf 	bne.w	1256e <hci_init+0xf6>
		err = set_random_address(&bt_dev.id_addr[0].a);
   12810:	4819      	ldr	r0, [pc, #100]	; (12878 <hci_init+0x400>)
   12812:	f002 fc9b 	bl	1514c <set_random_address>
   12816:	4604      	mov	r4, r0
		if (err) {
   12818:	e6a9      	b.n	1256e <hci_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1281a:	2102      	movs	r1, #2
   1281c:	f640 406d 	movw	r0, #3181	; 0xc6d
   12820:	f002 fbd8 	bl	14fd4 <bt_hci_cmd_create>
		if (!buf) {
   12824:	4604      	mov	r4, r0
   12826:	b910      	cbnz	r0, 1282e <hci_init+0x3b6>
		return -ENOBUFS;
   12828:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1282c:	e69f      	b.n	1256e <hci_init+0xf6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
   1282e:	2102      	movs	r1, #2
   12830:	3008      	adds	r0, #8
   12832:	f00d fe97 	bl	20564 <net_buf_simple_add>
		cp_le->le = 0x01;
   12836:	2301      	movs	r3, #1
   12838:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1283a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1283c:	4621      	mov	r1, r4
   1283e:	4632      	mov	r2, r6
   12840:	f640 406d 	movw	r0, #3181	; 0xc6d
   12844:	f002 fc20 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   12848:	4604      	mov	r4, r0
   1284a:	2800      	cmp	r0, #0
   1284c:	f43f aeca 	beq.w	125e4 <hci_init+0x16c>
   12850:	e68d      	b.n	1256e <hci_init+0xf6>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   12852:	480a      	ldr	r0, [pc, #40]	; (1287c <hci_init+0x404>)
   12854:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12858:	e78e      	b.n	12778 <hci_init+0x300>
   1285a:	bf00      	nop
   1285c:	f3af 8000 	nop.w
   12860:	02008890 	.word	0x02008890
   12864:	20008000 	.word	0x20008000
   12868:	20000468 	.word	0x20000468
   1286c:	20000498 	.word	0x20000498
   12870:	20000451 	.word	0x20000451
   12874:	20000450 	.word	0x20000450
   12878:	200003c9 	.word	0x200003c9
   1287c:	02008810 	.word	0x02008810

00012880 <temp_ccc_cfg_changed>:
};

static void temp_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 uint16_t value)
{
	simulate_temp = value == BT_GATT_CCC_NOTIFY;
   12880:	1e4b      	subs	r3, r1, #1
   12882:	4259      	negs	r1, r3
   12884:	4159      	adcs	r1, r3
   12886:	4b01      	ldr	r3, [pc, #4]	; (1288c <temp_ccc_cfg_changed+0xc>)
   12888:	7019      	strb	r1, [r3, #0]
}
   1288a:	4770      	bx	lr
   1288c:	20002a9f 	.word	0x20002a9f

00012890 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
   12890:	4801      	ldr	r0, [pc, #4]	; (12898 <disconnected+0x8>)
   12892:	f009 bc30 	b.w	1c0f6 <printk>
   12896:	bf00      	nop
   12898:	00021e04 	.word	0x00021e04

0001289c <connected>:
	if (err) {
   1289c:	b111      	cbz	r1, 128a4 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
   1289e:	4803      	ldr	r0, [pc, #12]	; (128ac <connected+0x10>)
   128a0:	f009 bc29 	b.w	1c0f6 <printk>
		printk("Connected\n");
   128a4:	4802      	ldr	r0, [pc, #8]	; (128b0 <connected+0x14>)
   128a6:	f009 bc26 	b.w	1c0f6 <printk>
   128aa:	bf00      	nop
   128ac:	00021e22 	.word	0x00021e22
   128b0:	00021e42 	.word	0x00021e42

000128b4 <bt_addr_le_to_str.constprop.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   128b4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   128b6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   128b8:	b08a      	sub	sp, #40	; 0x28
   128ba:	4604      	mov	r4, r0
   128bc:	460e      	mov	r6, r1
   128be:	ad07      	add	r5, sp, #28
   128c0:	2b03      	cmp	r3, #3
   128c2:	d820      	bhi.n	12906 <bt_addr_le_to_str.constprop.0+0x52>
   128c4:	e8df f003 	tbb	[pc, r3]
   128c8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   128cc:	4911      	ldr	r1, [pc, #68]	; (12914 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   128ce:	4628      	mov	r0, r5
   128d0:	f00b f921 	bl	1db16 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   128d4:	7863      	ldrb	r3, [r4, #1]
   128d6:	9304      	str	r3, [sp, #16]
   128d8:	78a3      	ldrb	r3, [r4, #2]
   128da:	9303      	str	r3, [sp, #12]
   128dc:	78e3      	ldrb	r3, [r4, #3]
   128de:	9302      	str	r3, [sp, #8]
   128e0:	7923      	ldrb	r3, [r4, #4]
   128e2:	9301      	str	r3, [sp, #4]
   128e4:	7963      	ldrb	r3, [r4, #5]
   128e6:	9300      	str	r3, [sp, #0]
   128e8:	4a0b      	ldr	r2, [pc, #44]	; (12918 <bt_addr_le_to_str.constprop.0+0x64>)
   128ea:	79a3      	ldrb	r3, [r4, #6]
   128ec:	9505      	str	r5, [sp, #20]
   128ee:	211e      	movs	r1, #30
   128f0:	4630      	mov	r0, r6
   128f2:	f009 fc0d 	bl	1c110 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   128f6:	b00a      	add	sp, #40	; 0x28
   128f8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   128fa:	4908      	ldr	r1, [pc, #32]	; (1291c <bt_addr_le_to_str.constprop.0+0x68>)
   128fc:	e7e7      	b.n	128ce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   128fe:	4908      	ldr	r1, [pc, #32]	; (12920 <bt_addr_le_to_str.constprop.0+0x6c>)
   12900:	e7e5      	b.n	128ce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   12902:	4908      	ldr	r1, [pc, #32]	; (12924 <bt_addr_le_to_str.constprop.0+0x70>)
   12904:	e7e3      	b.n	128ce <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   12906:	4a08      	ldr	r2, [pc, #32]	; (12928 <bt_addr_le_to_str.constprop.0+0x74>)
   12908:	210a      	movs	r1, #10
   1290a:	4628      	mov	r0, r5
   1290c:	f009 fc00 	bl	1c110 <snprintk>
		break;
   12910:	e7e0      	b.n	128d4 <bt_addr_le_to_str.constprop.0+0x20>
   12912:	bf00      	nop
   12914:	00021e4d 	.word	0x00021e4d
   12918:	00021e76 	.word	0x00021e76
   1291c:	00021e54 	.word	0x00021e54
   12920:	00021e5b 	.word	0x00021e5b
   12924:	00021e65 	.word	0x00021e65
   12928:	00021e6f 	.word	0x00021e6f

0001292c <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
   1292c:	b510      	push	{r4, lr}
   1292e:	b088      	sub	sp, #32
   12930:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12932:	f00b ff38 	bl	1e7a6 <bt_conn_get_dst>
   12936:	4669      	mov	r1, sp
   12938:	f7ff ffbc 	bl	128b4 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
   1293c:	4803      	ldr	r0, [pc, #12]	; (1294c <auth_passkey_display+0x20>)
   1293e:	4622      	mov	r2, r4
   12940:	4669      	mov	r1, sp
   12942:	f009 fbd8 	bl	1c0f6 <printk>
}
   12946:	b008      	add	sp, #32
   12948:	bd10      	pop	{r4, pc}
   1294a:	bf00      	nop
   1294c:	00021e99 	.word	0x00021e99

00012950 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
   12950:	b500      	push	{lr}
   12952:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12954:	f00b ff27 	bl	1e7a6 <bt_conn_get_dst>
   12958:	4669      	mov	r1, sp
   1295a:	f7ff ffab 	bl	128b4 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
   1295e:	4803      	ldr	r0, [pc, #12]	; (1296c <auth_cancel+0x1c>)
   12960:	4669      	mov	r1, sp
   12962:	f009 fbc8 	bl	1c0f6 <printk>
}
   12966:	b009      	add	sp, #36	; 0x24
   12968:	f85d fb04 	ldr.w	pc, [sp], #4
   1296c:	00021eaf 	.word	0x00021eaf

00012970 <main>:

	bt_bas_set_battery_level(battery_level);
}

void main(void)
{
   12970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err;

	err = bt_enable(NULL);
   12974:	2000      	movs	r0, #0
{
   12976:	b08a      	sub	sp, #40	; 0x28
	err = bt_enable(NULL);
   12978:	f003 f802 	bl	15980 <bt_enable>
	if (err) {
   1297c:	4606      	mov	r6, r0
   1297e:	b130      	cbz	r0, 1298e <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
   12980:	4601      	mov	r1, r0
   12982:	4889      	ldr	r0, [pc, #548]	; (12ba8 <main+0x238>)
   12984:	f009 fbb7 	bl	1c0f6 <printk>
		if (err) {
			printk("Error in adc sampling: %d\n", err);
		}
		k_sleep(K_MSEC(500));
	}
}
   12988:	b00a      	add	sp, #40	; 0x28
   1298a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   1298e:	4d87      	ldr	r5, [pc, #540]	; (12bac <main+0x23c>)
	printk("Bluetooth initialized\n");
   12990:	4887      	ldr	r0, [pc, #540]	; (12bb0 <main+0x240>)
   12992:	f009 fbb0 	bl	1c0f6 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   12996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12998:	ac04      	add	r4, sp, #16
   1299a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1299c:	682b      	ldr	r3, [r5, #0]
   1299e:	6023      	str	r3, [r4, #0]
   129a0:	4984      	ldr	r1, [pc, #528]	; (12bb4 <main+0x244>)
   129a2:	9600      	str	r6, [sp, #0]
   129a4:	4633      	mov	r3, r6
   129a6:	2203      	movs	r2, #3
   129a8:	a804      	add	r0, sp, #16
   129aa:	f003 f989 	bl	15cc0 <bt_le_adv_start>
	if (err) {
   129ae:	4601      	mov	r1, r0
   129b0:	b190      	cbz	r0, 129d8 <main+0x68>
		printk("Advertising failed to start (err %d)\n", err);
   129b2:	4881      	ldr	r0, [pc, #516]	; (12bb8 <main+0x248>)
   129b4:	f009 fb9f 	bl	1c0f6 <printk>
	bt_conn_cb_register(&conn_callbacks);
   129b8:	4880      	ldr	r0, [pc, #512]	; (12bbc <main+0x24c>)
   129ba:	f003 fcd1 	bl	16360 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
   129be:	4880      	ldr	r0, [pc, #512]	; (12bc0 <main+0x250>)
   129c0:	f003 ffd2 	bl	16968 <bt_conn_auth_cb_register>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   129c4:	487f      	ldr	r0, [pc, #508]	; (12bc4 <main+0x254>)
	adc_dev = device_get_binding("ADC_0");
   129c6:	4d80      	ldr	r5, [pc, #512]	; (12bc8 <main+0x258>)
   129c8:	f008 f950 	bl	1ac6c <z_impl_device_get_binding>
   129cc:	6028      	str	r0, [r5, #0]
	if (!adc_dev) {
   129ce:	b938      	cbnz	r0, 129e0 <main+0x70>
		printk("device_get_binding ADC_0 failed\n");
   129d0:	487e      	ldr	r0, [pc, #504]	; (12bcc <main+0x25c>)
   129d2:	f009 fb90 	bl	1c0f6 <printk>
		while(1);
   129d6:	e7fe      	b.n	129d6 <main+0x66>
	printk("Advertising successfully started\n");
   129d8:	487d      	ldr	r0, [pc, #500]	; (12bd0 <main+0x260>)
   129da:	f009 fb8c 	bl	1c0f6 <printk>
   129de:	e7eb      	b.n	129b8 <main+0x48>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   129e0:	6883      	ldr	r3, [r0, #8]
   129e2:	497c      	ldr	r1, [pc, #496]	; (12bd4 <main+0x264>)
   129e4:	681b      	ldr	r3, [r3, #0]
   129e6:	4798      	blx	r3
	if (err) {
   129e8:	4601      	mov	r1, r0
   129ea:	b118      	cbz	r0, 129f4 <main+0x84>
		printk("Error in adc setup: %d\n", err);
   129ec:	487a      	ldr	r0, [pc, #488]	; (12bd8 <main+0x268>)
   129ee:	f009 fb82 	bl	1c0f6 <printk>
		while(1);
   129f2:	e7fe      	b.n	129f2 <main+0x82>
	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
   129f4:	4b79      	ldr	r3, [pc, #484]	; (12bdc <main+0x26c>)
		adc_voltage = (int)((((float)m_sample_buffer[i] / 4095.0f) *3600.0f)-20.0f);
   129f6:	4e7a      	ldr	r6, [pc, #488]	; (12be0 <main+0x270>)
   129f8:	4f7a      	ldr	r7, [pc, #488]	; (12be4 <main+0x274>)
   129fa:	f8df 8214 	ldr.w	r8, [pc, #532]	; 12c10 <main+0x2a0>
	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
   129fe:	2201      	movs	r2, #1
   12a00:	60da      	str	r2, [r3, #12]
	return z_impl_k_sleep(timeout);
   12a02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12a06:	2100      	movs	r1, #0
   12a08:	f008 fe48 	bl	1b69c <z_impl_k_sleep>
		if (simulate_temp) {
   12a0c:	4b76      	ldr	r3, [pc, #472]	; (12be8 <main+0x278>)
   12a0e:	781b      	ldrb	r3, [r3, #0]
   12a10:	2b00      	cmp	r3, #0
   12a12:	d078      	beq.n	12b06 <main+0x196>
	if (!(i % SENSOR_1_UPDATE_IVAL)) {
   12a14:	4c75      	ldr	r4, [pc, #468]	; (12bec <main+0x27c>)
   12a16:	f894 9000 	ldrb.w	r9, [r4]
   12a1a:	2305      	movs	r3, #5
   12a1c:	fbb9 f3f3 	udiv	r3, r9, r3
   12a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12a24:	eba9 0303 	sub.w	r3, r9, r3
   12a28:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
   12a2c:	d122      	bne.n	12a74 <main+0x104>
	bool notify = check_condition(sensor->condition,
   12a2e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 12c14 <main+0x2a4>
		update_temperature(NULL, &ess_svc.attrs[2], adc_voltage, &sensor_1);
   12a32:	4b6f      	ldr	r3, [pc, #444]	; (12bf0 <main+0x280>)
	bool notify = check_condition(sensor->condition,
   12a34:	f9ba 1000 	ldrsh.w	r1, [sl]
		update_temperature(NULL, &ess_svc.attrs[2], adc_voltage, &sensor_1);
   12a38:	f9b3 2000 	ldrsh.w	r2, [r3]
	bool notify = check_condition(sensor->condition,
   12a3c:	f89a 0006 	ldrb.w	r0, [sl, #6]
   12a40:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
   12a44:	f8ad 200e 	strh.w	r2, [sp, #14]
   12a48:	f009 fa62 	bl	1bf10 <check_condition>
	sensor->temp_value = value;
   12a4c:	f8aa 2000 	strh.w	r2, [sl]
	if (notify) {
   12a50:	b180      	cbz	r0, 12a74 <main+0x104>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12a52:	4649      	mov	r1, r9
   12a54:	2218      	movs	r2, #24
   12a56:	a804      	add	r0, sp, #16
   12a58:	f00b f8b5 	bl	1dbc6 <memset>

	params.attr = attr;
   12a5c:	4b65      	ldr	r3, [pc, #404]	; (12bf4 <main+0x284>)
   12a5e:	9305      	str	r3, [sp, #20]
	params.data = data;
   12a60:	f10d 030e 	add.w	r3, sp, #14
   12a64:	9306      	str	r3, [sp, #24]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   12a66:	a904      	add	r1, sp, #16
	params.len = len;
   12a68:	2302      	movs	r3, #2
	return bt_gatt_notify_cb(conn, &params);
   12a6a:	4648      	mov	r0, r9
	params.len = len;
   12a6c:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   12a70:	f005 f958 	bl	17d24 <bt_gatt_notify_cb>
	if (!(i % SENSOR_2_UPDATE_IVAL)) {
   12a74:	7822      	ldrb	r2, [r4, #0]
   12a76:	230c      	movs	r3, #12
   12a78:	fbb2 f9f3 	udiv	r9, r2, r3
   12a7c:	fb03 2919 	mls	r9, r3, r9, r2
   12a80:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   12a84:	d121      	bne.n	12aca <main+0x15a>
	bool notify = check_condition(sensor->condition,
   12a86:	f8df a190 	ldr.w	sl, [pc, #400]	; 12c18 <main+0x2a8>
		val = 1800 + i;
   12a8a:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
	bool notify = check_condition(sensor->condition,
   12a8e:	f9ba 1000 	ldrsh.w	r1, [sl]
   12a92:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
   12a96:	f89a 0006 	ldrb.w	r0, [sl, #6]
   12a9a:	f8ad 200e 	strh.w	r2, [sp, #14]
   12a9e:	f009 fa37 	bl	1bf10 <check_condition>
	sensor->temp_value = value;
   12aa2:	f8aa 2000 	strh.w	r2, [sl]
	if (notify) {
   12aa6:	b180      	cbz	r0, 12aca <main+0x15a>
	memset(&params, 0, sizeof(params));
   12aa8:	4649      	mov	r1, r9
   12aaa:	2218      	movs	r2, #24
   12aac:	a804      	add	r0, sp, #16
   12aae:	f00b f88a 	bl	1dbc6 <memset>
	params.attr = attr;
   12ab2:	4b51      	ldr	r3, [pc, #324]	; (12bf8 <main+0x288>)
   12ab4:	9305      	str	r3, [sp, #20]
	params.data = data;
   12ab6:	f10d 030e 	add.w	r3, sp, #14
   12aba:	9306      	str	r3, [sp, #24]
	return bt_gatt_notify_cb(conn, &params);
   12abc:	a904      	add	r1, sp, #16
	params.len = len;
   12abe:	2302      	movs	r3, #2
	return bt_gatt_notify_cb(conn, &params);
   12ac0:	4648      	mov	r0, r9
	params.len = len;
   12ac2:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   12ac6:	f005 f92d 	bl	17d24 <bt_gatt_notify_cb>
	if (!(i % SENSOR_3_UPDATE_IVAL)) {
   12aca:	7823      	ldrb	r3, [r4, #0]
   12acc:	213c      	movs	r1, #60	; 0x3c
   12ace:	fbb3 f2f1 	udiv	r2, r3, r1
   12ad2:	fb01 3212 	mls	r2, r1, r2, r3
   12ad6:	f012 0fff 	tst.w	r2, #255	; 0xff
   12ada:	d10a      	bne.n	12af2 <main+0x182>
		sensor_3.humid_value = 6233 + (i % 13);
   12adc:	210d      	movs	r1, #13
   12ade:	fbb3 f2f1 	udiv	r2, r3, r1
   12ae2:	fb01 3212 	mls	r2, r1, r2, r3
   12ae6:	f641 0159 	movw	r1, #6233	; 0x1859
   12aea:	fa51 f282 	uxtab	r2, r1, r2
   12aee:	4943      	ldr	r1, [pc, #268]	; (12bfc <main+0x28c>)
   12af0:	800a      	strh	r2, [r1, #0]
   12af2:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
	if (!(i % INT8_MAX)) {
   12af6:	b2db      	uxtb	r3, r3
   12af8:	2b02      	cmp	r3, #2
		i = 0U;
   12afa:	bf9c      	itt	ls
   12afc:	2300      	movls	r3, #0
   12afe:	7023      	strbls	r3, [r4, #0]
	i++;
   12b00:	7823      	ldrb	r3, [r4, #0]
   12b02:	3301      	adds	r3, #1
   12b04:	7023      	strb	r3, [r4, #0]
	uint8_t battery_level = bt_bas_get_battery_level();
   12b06:	f000 fd11 	bl	1352c <bt_bas_get_battery_level>
	battery_level--;
   12b0a:	3801      	subs	r0, #1
		battery_level = 100U;
   12b0c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
   12b10:	bf08      	it	eq
   12b12:	2064      	moveq	r0, #100	; 0x64
   12b14:	f000 fd10 	bl	13538 <bt_bas_set_battery_level>
	const struct adc_sequence sequence = {
   12b18:	2214      	movs	r2, #20
   12b1a:	2100      	movs	r1, #0
   12b1c:	a804      	add	r0, sp, #16
   12b1e:	f00b f852 	bl	1dbc6 <memset>
   12b22:	2380      	movs	r3, #128	; 0x80
   12b24:	9305      	str	r3, [sp, #20]
	if (!adc_dev) {
   12b26:	6828      	ldr	r0, [r5, #0]
	const struct adc_sequence sequence = {
   12b28:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 12c1c <main+0x2ac>
   12b2c:	f8cd 9018 	str.w	r9, [sp, #24]
   12b30:	2302      	movs	r3, #2
   12b32:	9307      	str	r3, [sp, #28]
   12b34:	230c      	movs	r3, #12
   12b36:	f88d 3020 	strb.w	r3, [sp, #32]
	if (!adc_dev) {
   12b3a:	b930      	cbnz	r0, 12b4a <main+0x1da>
		return -1;
   12b3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			printk("Error in adc sampling: %d\n", err);
   12b40:	482f      	ldr	r0, [pc, #188]	; (12c00 <main+0x290>)
   12b42:	4621      	mov	r1, r4
   12b44:	f009 fad7 	bl	1c0f6 <printk>
   12b48:	e027      	b.n	12b9a <main+0x22a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   12b4a:	6883      	ldr	r3, [r0, #8]
   12b4c:	a904      	add	r1, sp, #16
   12b4e:	685b      	ldr	r3, [r3, #4]
   12b50:	4798      	blx	r3
	printk("ADC read err: %d\n", ret);
   12b52:	4601      	mov	r1, r0
   12b54:	4604      	mov	r4, r0
   12b56:	482b      	ldr	r0, [pc, #172]	; (12c04 <main+0x294>)
   12b58:	f009 facd 	bl	1c0f6 <printk>
		adc_voltage = (int)((((float)m_sample_buffer[i] / 4095.0f) *3600.0f)-20.0f);
   12b5c:	f9b9 a000 	ldrsh.w	sl, [r9]
   12b60:	f8df 908c 	ldr.w	r9, [pc, #140]	; 12bf0 <main+0x280>
   12b64:	4650      	mov	r0, sl
   12b66:	f7ed fb75 	bl	254 <__aeabi_i2f>
   12b6a:	4631      	mov	r1, r6
   12b6c:	f7ed fc7a 	bl	464 <__aeabi_fdiv>
   12b70:	4639      	mov	r1, r7
   12b72:	f7ed fbc3 	bl	2fc <__aeabi_fmul>
   12b76:	4641      	mov	r1, r8
   12b78:	f7ed fab6 	bl	e8 <__aeabi_fsub>
   12b7c:	f7ed fd0e 	bl	59c <__aeabi_f2iz>
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
   12b80:	4651      	mov	r1, sl
		adc_voltage = (int)((((float)m_sample_buffer[i] / 4095.0f) *3600.0f)-20.0f);
   12b82:	f8a9 0000 	strh.w	r0, [r9]
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
   12b86:	4820      	ldr	r0, [pc, #128]	; (12c08 <main+0x298>)
   12b88:	f009 fab5 	bl	1c0f6 <printk>
		printf("Measured voltage: %i mV\n", adc_voltage);
   12b8c:	f9b9 1000 	ldrsh.w	r1, [r9]
   12b90:	481e      	ldr	r0, [pc, #120]	; (12c0c <main+0x29c>)
   12b92:	f001 fcc7 	bl	14524 <printf>
		if (err) {
   12b96:	2c00      	cmp	r4, #0
   12b98:	d1d2      	bne.n	12b40 <main+0x1d0>
   12b9a:	2100      	movs	r1, #0
   12b9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   12ba0:	f008 fd7c 	bl	1b69c <z_impl_k_sleep>
	while (1) {
   12ba4:	e72d      	b.n	12a02 <main+0x92>
   12ba6:	bf00      	nop
   12ba8:	00021ec6 	.word	0x00021ec6
   12bac:	00021550 	.word	0x00021550
   12bb0:	00021ee6 	.word	0x00021ee6
   12bb4:	000215e8 	.word	0x000215e8
   12bb8:	00021efd 	.word	0x00021efd
   12bbc:	2000062c 	.word	0x2000062c
   12bc0:	20000608 	.word	0x20000608
   12bc4:	00021f45 	.word	0x00021f45
   12bc8:	200027c0 	.word	0x200027c0
   12bcc:	00021f4b 	.word	0x00021f4b
   12bd0:	00021f23 	.word	0x00021f23
   12bd4:	00021dfc 	.word	0x00021dfc
   12bd8:	00021f6c 	.word	0x00021f6c
   12bdc:	40007000 	.word	0x40007000
   12be0:	457ff000 	.word	0x457ff000
   12be4:	45610000 	.word	0x45610000
   12be8:	20002a9f 	.word	0x20002a9f
   12bec:	20002a9e 	.word	0x20002a9e
   12bf0:	20002a80 	.word	0x20002a80
   12bf4:	00021628 	.word	0x00021628
   12bf8:	000216b4 	.word	0x000216b4
   12bfc:	20000680 	.word	0x20000680
   12c00:	00021fc2 	.word	0x00021fc2
   12c04:	00021f84 	.word	0x00021f84
   12c08:	00021f96 	.word	0x00021f96
   12c0c:	00021fa9 	.word	0x00021fa9
   12c10:	41a00000 	.word	0x41a00000
   12c14:	20000648 	.word	0x20000648
   12c18:	20000664 	.word	0x20000664
   12c1c:	20002a82 	.word	0x20002a82

00012c20 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12c20:	680b      	ldr	r3, [r1, #0]
   12c22:	3301      	adds	r3, #1
   12c24:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12c26:	4b01      	ldr	r3, [pc, #4]	; (12c2c <char_out+0xc>)
   12c28:	681b      	ldr	r3, [r3, #0]
   12c2a:	4718      	bx	r3
   12c2c:	20000694 	.word	0x20000694

00012c30 <__printk_hook_install>:
	_char_out = fn;
   12c30:	4b01      	ldr	r3, [pc, #4]	; (12c38 <__printk_hook_install+0x8>)
   12c32:	6018      	str	r0, [r3, #0]
}
   12c34:	4770      	bx	lr
   12c36:	bf00      	nop
   12c38:	20000694 	.word	0x20000694

00012c3c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12c3c:	b507      	push	{r0, r1, r2, lr}
   12c3e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12c40:	2100      	movs	r1, #0
{
   12c42:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12c44:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   12c46:	4803      	ldr	r0, [pc, #12]	; (12c54 <vprintk+0x18>)
   12c48:	a901      	add	r1, sp, #4
   12c4a:	f000 fa57 	bl	130fc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12c4e:	b003      	add	sp, #12
   12c50:	f85d fb04 	ldr.w	pc, [sp], #4
   12c54:	00012c21 	.word	0x00012c21

00012c58 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12c58:	b530      	push	{r4, r5, lr}
   12c5a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12c5c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12c60:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   12c62:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   12c64:	a901      	add	r1, sp, #4
   12c66:	4805      	ldr	r0, [pc, #20]	; (12c7c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12c68:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   12c6a:	f000 fa47 	bl	130fc <cbvprintf>

	if (ctx.count < ctx.max) {
   12c6e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12c72:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12c74:	bfb8      	it	lt
   12c76:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12c78:	b005      	add	sp, #20
   12c7a:	bd30      	pop	{r4, r5, pc}
   12c7c:	0001c0d1 	.word	0x0001c0d1

00012c80 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12c84:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12c88:	f019 0808 	ands.w	r8, r9, #8
{
   12c8c:	4604      	mov	r4, r0
   12c8e:	4693      	mov	fp, r2
	if (processing) {
   12c90:	d00d      	beq.n	12cae <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   12c92:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12c94:	bf0c      	ite	eq
   12c96:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12c9a:	f049 0920 	orrne.w	r9, r9, #32
   12c9e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12ca2:	f38b 8811 	msr	BASEPRI, fp
   12ca6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12cae:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12cb2:	2902      	cmp	r1, #2
   12cb4:	d107      	bne.n	12cc6 <process_event+0x46>
			evt = process_recheck(mgr);
   12cb6:	4620      	mov	r0, r4
   12cb8:	f009 fa37 	bl	1c12a <process_recheck>
		if (evt == EVT_NOP) {
   12cbc:	2800      	cmp	r0, #0
   12cbe:	d0f0      	beq.n	12ca2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12cc0:	2801      	cmp	r0, #1
   12cc2:	8b23      	ldrh	r3, [r4, #24]
   12cc4:	d150      	bne.n	12d68 <process_event+0xe8>
			res = mgr->last_res;
   12cc6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12cc8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12cca:	2f00      	cmp	r7, #0
   12ccc:	da15      	bge.n	12cfa <process_event+0x7a>
		*clients = mgr->clients;
   12cce:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12cd0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12cd4:	e9c4 8800 	strd	r8, r8, [r4]
   12cd8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12cdc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   12cde:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12ce0:	8b21      	ldrh	r1, [r4, #24]
   12ce2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12ce6:	45ca      	cmp	sl, r9
   12ce8:	d002      	beq.n	12cf0 <process_event+0x70>
		if (do_monitors
   12cea:	68a3      	ldr	r3, [r4, #8]
   12cec:	2b00      	cmp	r3, #0
   12cee:	d15c      	bne.n	12daa <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   12cf0:	b90d      	cbnz	r5, 12cf6 <process_event+0x76>
		    || (transit != NULL)) {
   12cf2:	2e00      	cmp	r6, #0
   12cf4:	d074      	beq.n	12de0 <process_event+0x160>
   12cf6:	2300      	movs	r3, #0
   12cf8:	e058      	b.n	12dac <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12cfa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12cfe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12d00:	2a01      	cmp	r2, #1
   12d02:	d820      	bhi.n	12d46 <process_event+0xc6>
		*clients = mgr->clients;
   12d04:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12d08:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12d0a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   12d0c:	b289      	uxth	r1, r1
	list->tail = NULL;
   12d0e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12d12:	d10c      	bne.n	12d2e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12d14:	2d00      	cmp	r5, #0
   12d16:	462b      	mov	r3, r5
   12d18:	bf38      	it	cc
   12d1a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12d1c:	b12b      	cbz	r3, 12d2a <process_event+0xaa>
				mgr->refs += 1U;
   12d1e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12d20:	681b      	ldr	r3, [r3, #0]
   12d22:	3201      	adds	r2, #1
   12d24:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12d26:	2b00      	cmp	r3, #0
   12d28:	d1f8      	bne.n	12d1c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d2a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12d2e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12d30:	4620      	mov	r0, r4
   12d32:	f009 f9fa 	bl	1c12a <process_recheck>
   12d36:	4606      	mov	r6, r0
   12d38:	2800      	cmp	r0, #0
   12d3a:	d0d1      	beq.n	12ce0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12d3c:	8b23      	ldrh	r3, [r4, #24]
   12d3e:	f043 0320 	orr.w	r3, r3, #32
   12d42:	8323      	strh	r3, [r4, #24]
   12d44:	e7cb      	b.n	12cde <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12d46:	2b04      	cmp	r3, #4
   12d48:	d10c      	bne.n	12d64 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d4a:	f021 0107 	bic.w	r1, r1, #7
   12d4e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12d50:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12d52:	4620      	mov	r0, r4
   12d54:	f009 f9e9 	bl	1c12a <process_recheck>
   12d58:	4605      	mov	r5, r0
   12d5a:	2800      	cmp	r0, #0
   12d5c:	d0bf      	beq.n	12cde <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12d5e:	f041 0120 	orr.w	r1, r1, #32
   12d62:	8321      	strh	r1, [r4, #24]
   12d64:	2500      	movs	r5, #0
   12d66:	e7ba      	b.n	12cde <process_event+0x5e>
		} else if (evt == EVT_START) {
   12d68:	2803      	cmp	r0, #3
   12d6a:	d109      	bne.n	12d80 <process_event+0x100>
			transit = mgr->transitions->start;
   12d6c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d6e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12d72:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d74:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12d78:	8323      	strh	r3, [r4, #24]
}
   12d7a:	2500      	movs	r5, #0
		res = 0;
   12d7c:	462f      	mov	r7, r5
   12d7e:	e7af      	b.n	12ce0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12d80:	2804      	cmp	r0, #4
   12d82:	d106      	bne.n	12d92 <process_event+0x112>
			transit = mgr->transitions->stop;
   12d84:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d86:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12d8a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d8c:	f043 0304 	orr.w	r3, r3, #4
   12d90:	e7f2      	b.n	12d78 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   12d92:	2805      	cmp	r0, #5
   12d94:	d106      	bne.n	12da4 <process_event+0x124>
			transit = mgr->transitions->reset;
   12d96:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d98:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12d9c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12d9e:	f043 0305 	orr.w	r3, r3, #5
   12da2:	e7e9      	b.n	12d78 <process_event+0xf8>
   12da4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12da6:	462e      	mov	r6, r5
   12da8:	e7e8      	b.n	12d7c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   12daa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12dac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12db0:	8321      	strh	r1, [r4, #24]
   12db2:	f38b 8811 	msr	BASEPRI, fp
   12db6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12dba:	bb03      	cbnz	r3, 12dfe <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   12dbc:	2d00      	cmp	r5, #0
   12dbe:	d133      	bne.n	12e28 <process_event+0x1a8>
			if (transit != NULL) {
   12dc0:	b116      	cbz	r6, 12dc8 <process_event+0x148>
				transit(mgr, transition_complete);
   12dc2:	4921      	ldr	r1, [pc, #132]	; (12e48 <process_event+0x1c8>)
   12dc4:	4620      	mov	r0, r4
   12dc6:	47b0      	blx	r6
	__asm__ volatile(
   12dc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   12dcc:	f3ef 8b11 	mrs	fp, BASEPRI
   12dd0:	f383 8811 	msr	BASEPRI, r3
   12dd4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12dd8:	8b23      	ldrh	r3, [r4, #24]
   12dda:	f023 0308 	bic.w	r3, r3, #8
   12dde:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12de0:	8b23      	ldrh	r3, [r4, #24]
   12de2:	06da      	lsls	r2, r3, #27
   12de4:	d528      	bpl.n	12e38 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12de6:	f023 0310 	bic.w	r3, r3, #16
   12dea:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12dec:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12dee:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12df2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12df6:	2900      	cmp	r1, #0
   12df8:	f47f af5b 	bne.w	12cb2 <process_event+0x32>
out:
   12dfc:	e751      	b.n	12ca2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12dfe:	68a1      	ldr	r1, [r4, #8]
   12e00:	2900      	cmp	r1, #0
   12e02:	d0db      	beq.n	12dbc <process_event+0x13c>
	return node->next;
   12e04:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   12e06:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	bf38      	it	cc
   12e0e:	2300      	movcc	r3, #0
   12e10:	4699      	mov	r9, r3
   12e12:	4652      	mov	r2, sl
   12e14:	463b      	mov	r3, r7
   12e16:	4620      	mov	r0, r4
   12e18:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12e1a:	f1b9 0f00 	cmp.w	r9, #0
   12e1e:	d0cd      	beq.n	12dbc <process_event+0x13c>
   12e20:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12e24:	4649      	mov	r1, r9
   12e26:	e7ee      	b.n	12e06 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e28:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12e2a:	463b      	mov	r3, r7
   12e2c:	4652      	mov	r2, sl
   12e2e:	4620      	mov	r0, r4
   12e30:	682d      	ldr	r5, [r5, #0]
   12e32:	f009 f996 	bl	1c162 <notify_one>
   12e36:	e7c1      	b.n	12dbc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12e38:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12e3c:	bf1e      	ittt	ne
   12e3e:	f023 0320 	bicne.w	r3, r3, #32
   12e42:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12e44:	2102      	movne	r1, #2
   12e46:	e7d2      	b.n	12dee <process_event+0x16e>
   12e48:	0001c18f 	.word	0x0001c18f

00012e4c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   12e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   12e4e:	2200      	movs	r2, #0
   12e50:	e9c0 2200 	strd	r2, r2, [r0]
   12e54:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   12e56:	784a      	ldrb	r2, [r1, #1]
   12e58:	2a25      	cmp	r2, #37	; 0x25
{
   12e5a:	4603      	mov	r3, r0
	if (*sp == '%') {
   12e5c:	d033      	beq.n	12ec6 <extract_conversion+0x7a>
	++sp;
   12e5e:	3101      	adds	r1, #1
   12e60:	460c      	mov	r4, r1
		switch (*sp) {
   12e62:	f811 2b01 	ldrb.w	r2, [r1], #1
   12e66:	2a2b      	cmp	r2, #43	; 0x2b
   12e68:	d03d      	beq.n	12ee6 <extract_conversion+0x9a>
   12e6a:	d82f      	bhi.n	12ecc <extract_conversion+0x80>
   12e6c:	2a20      	cmp	r2, #32
   12e6e:	d03e      	beq.n	12eee <extract_conversion+0xa2>
   12e70:	2a23      	cmp	r2, #35	; 0x23
   12e72:	d040      	beq.n	12ef6 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   12e74:	781a      	ldrb	r2, [r3, #0]
   12e76:	f002 0144 	and.w	r1, r2, #68	; 0x44
   12e7a:	2944      	cmp	r1, #68	; 0x44
   12e7c:	d102      	bne.n	12e84 <extract_conversion+0x38>
		conv->flag_zero = false;
   12e7e:	f36f 1286 	bfc	r2, #6, #1
   12e82:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   12e84:	7822      	ldrb	r2, [r4, #0]
   12e86:	2a2a      	cmp	r2, #42	; 0x2a
   12e88:	d14c      	bne.n	12f24 <extract_conversion+0xd8>
		conv->width_present = true;
   12e8a:	881a      	ldrh	r2, [r3, #0]
   12e8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   12e90:	1c60      	adds	r0, r4, #1
   12e92:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
   12e94:	7802      	ldrb	r2, [r0, #0]
   12e96:	2a2e      	cmp	r2, #46	; 0x2e
   12e98:	d14f      	bne.n	12f3a <extract_conversion+0xee>
	if (*sp == '*') {
   12e9a:	7842      	ldrb	r2, [r0, #1]
   12e9c:	2a2a      	cmp	r2, #42	; 0x2a
   12e9e:	d045      	beq.n	12f2c <extract_conversion+0xe0>
   12ea0:	3001      	adds	r0, #1
	const char *sp = *str;
   12ea2:	4605      	mov	r5, r0
	size_t val = 0;
   12ea4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12ea6:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12ea8:	4601      	mov	r1, r0
   12eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   12eae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12eb2:	2e09      	cmp	r6, #9
   12eb4:	d953      	bls.n	12f5e <extract_conversion+0x112>
	if (sp != wp) {
   12eb6:	42a8      	cmp	r0, r5
		conv->prec_present = true;
   12eb8:	bf1f      	itttt	ne
   12eba:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
   12ebc:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
   12ebe:	f041 0102 	orrne.w	r1, r1, #2
   12ec2:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
   12ec4:	e039      	b.n	12f3a <extract_conversion+0xee>
		conv->specifier = *sp++;
   12ec6:	1c88      	adds	r0, r1, #2
   12ec8:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   12eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   12ecc:	2a2d      	cmp	r2, #45	; 0x2d
   12ece:	d005      	beq.n	12edc <extract_conversion+0x90>
   12ed0:	2a30      	cmp	r2, #48	; 0x30
   12ed2:	d1cf      	bne.n	12e74 <extract_conversion+0x28>
			conv->flag_zero = true;
   12ed4:	781a      	ldrb	r2, [r3, #0]
   12ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12eda:	e002      	b.n	12ee2 <extract_conversion+0x96>
			conv->flag_dash = true;
   12edc:	781a      	ldrb	r2, [r3, #0]
   12ede:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   12ee2:	701a      	strb	r2, [r3, #0]
			break;
   12ee4:	e7bc      	b.n	12e60 <extract_conversion+0x14>
			conv->flag_plus = true;
   12ee6:	781a      	ldrb	r2, [r3, #0]
   12ee8:	f042 0208 	orr.w	r2, r2, #8
   12eec:	e7f9      	b.n	12ee2 <extract_conversion+0x96>
			conv->flag_space = true;
   12eee:	781a      	ldrb	r2, [r3, #0]
   12ef0:	f042 0210 	orr.w	r2, r2, #16
   12ef4:	e7f5      	b.n	12ee2 <extract_conversion+0x96>
			conv->flag_hash = true;
   12ef6:	781a      	ldrb	r2, [r3, #0]
   12ef8:	f042 0220 	orr.w	r2, r2, #32
   12efc:	e7f1      	b.n	12ee2 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   12efe:	fb07 5202 	mla	r2, r7, r2, r5
   12f02:	3a30      	subs	r2, #48	; 0x30
   12f04:	4608      	mov	r0, r1
   12f06:	4601      	mov	r1, r0
   12f08:	f811 5b01 	ldrb.w	r5, [r1], #1
   12f0c:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12f10:	2e09      	cmp	r6, #9
   12f12:	d9f4      	bls.n	12efe <extract_conversion+0xb2>
	if (sp != wp) {
   12f14:	4284      	cmp	r4, r0
		conv->width_present = true;
   12f16:	bf1f      	itttt	ne
   12f18:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
   12f1a:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
   12f1c:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
   12f20:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
   12f22:	e7b7      	b.n	12e94 <extract_conversion+0x48>
   12f24:	4620      	mov	r0, r4
	size_t val = 0;
   12f26:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12f28:	270a      	movs	r7, #10
   12f2a:	e7ec      	b.n	12f06 <extract_conversion+0xba>
		conv->prec_present = true;
   12f2c:	785a      	ldrb	r2, [r3, #1]
   12f2e:	f022 0206 	bic.w	r2, r2, #6
   12f32:	f042 0206 	orr.w	r2, r2, #6
   12f36:	705a      	strb	r2, [r3, #1]
		return ++sp;
   12f38:	3002      	adds	r0, #2
	switch (*sp) {
   12f3a:	4601      	mov	r1, r0
   12f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
   12f40:	2c6c      	cmp	r4, #108	; 0x6c
   12f42:	d03c      	beq.n	12fbe <extract_conversion+0x172>
   12f44:	d810      	bhi.n	12f68 <extract_conversion+0x11c>
   12f46:	2c68      	cmp	r4, #104	; 0x68
   12f48:	d015      	beq.n	12f76 <extract_conversion+0x12a>
   12f4a:	2c6a      	cmp	r4, #106	; 0x6a
   12f4c:	d03f      	beq.n	12fce <extract_conversion+0x182>
   12f4e:	2c4c      	cmp	r4, #76	; 0x4c
   12f50:	d042      	beq.n	12fd8 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
   12f52:	785a      	ldrb	r2, [r3, #1]
   12f54:	f36f 02c6 	bfc	r2, #3, #4
   12f58:	705a      	strb	r2, [r3, #1]
		break;
   12f5a:	4601      	mov	r1, r0
   12f5c:	e014      	b.n	12f88 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
   12f5e:	fb07 4202 	mla	r2, r7, r2, r4
   12f62:	3a30      	subs	r2, #48	; 0x30
   12f64:	4608      	mov	r0, r1
   12f66:	e79f      	b.n	12ea8 <extract_conversion+0x5c>
	switch (*sp) {
   12f68:	2c74      	cmp	r4, #116	; 0x74
   12f6a:	785a      	ldrb	r2, [r3, #1]
   12f6c:	d032      	beq.n	12fd4 <extract_conversion+0x188>
   12f6e:	2c7a      	cmp	r4, #122	; 0x7a
   12f70:	d1ef      	bne.n	12f52 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   12f72:	2006      	movs	r0, #6
   12f74:	e01f      	b.n	12fb6 <extract_conversion+0x16a>
		if (*++sp == 'h') {
   12f76:	7842      	ldrb	r2, [r0, #1]
   12f78:	2a68      	cmp	r2, #104	; 0x68
   12f7a:	785a      	ldrb	r2, [r3, #1]
   12f7c:	d11a      	bne.n	12fb4 <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
   12f7e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12f80:	f361 02c6 	bfi	r2, r1, #3, #4
   12f84:	705a      	strb	r2, [r3, #1]
			++sp;
   12f86:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
   12f88:	4608      	mov	r0, r1
   12f8a:	f810 4b01 	ldrb.w	r4, [r0], #1
   12f8e:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   12f90:	2c78      	cmp	r4, #120	; 0x78
   12f92:	f200 80ac 	bhi.w	130ee <extract_conversion+0x2a2>
   12f96:	2c57      	cmp	r4, #87	; 0x57
   12f98:	d829      	bhi.n	12fee <extract_conversion+0x1a2>
   12f9a:	2c41      	cmp	r4, #65	; 0x41
   12f9c:	d003      	beq.n	12fa6 <extract_conversion+0x15a>
   12f9e:	3c45      	subs	r4, #69	; 0x45
   12fa0:	2c02      	cmp	r4, #2
   12fa2:	f200 80a4 	bhi.w	130ee <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
   12fa6:	789a      	ldrb	r2, [r3, #2]
   12fa8:	2104      	movs	r1, #4
   12faa:	f361 0202 	bfi	r2, r1, #0, #3
   12fae:	709a      	strb	r2, [r3, #2]
			unsupported = true;
   12fb0:	2201      	movs	r2, #1
			break;
   12fb2:	e078      	b.n	130a6 <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
   12fb4:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   12fb6:	f360 02c6 	bfi	r2, r0, #3, #4
   12fba:	705a      	strb	r2, [r3, #1]
   12fbc:	e7e4      	b.n	12f88 <extract_conversion+0x13c>
		if (*++sp == 'l') {
   12fbe:	7842      	ldrb	r2, [r0, #1]
   12fc0:	2a6c      	cmp	r2, #108	; 0x6c
   12fc2:	785a      	ldrb	r2, [r3, #1]
   12fc4:	d101      	bne.n	12fca <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
   12fc6:	2104      	movs	r1, #4
   12fc8:	e7da      	b.n	12f80 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
   12fca:	2003      	movs	r0, #3
   12fcc:	e7f3      	b.n	12fb6 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
   12fce:	785a      	ldrb	r2, [r3, #1]
   12fd0:	2005      	movs	r0, #5
   12fd2:	e7f0      	b.n	12fb6 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
   12fd4:	2007      	movs	r0, #7
   12fd6:	e7ee      	b.n	12fb6 <extract_conversion+0x16a>
		conv->unsupported = true;
   12fd8:	881a      	ldrh	r2, [r3, #0]
   12fda:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12fde:	f022 0202 	bic.w	r2, r2, #2
   12fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12fe6:	f042 0202 	orr.w	r2, r2, #2
   12fea:	801a      	strh	r2, [r3, #0]
		break;
   12fec:	e7cc      	b.n	12f88 <extract_conversion+0x13c>
   12fee:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   12ff2:	2a20      	cmp	r2, #32
   12ff4:	d87b      	bhi.n	130ee <extract_conversion+0x2a2>
   12ff6:	a101      	add	r1, pc, #4	; (adr r1, 12ffc <extract_conversion+0x1b0>)
   12ff8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   12ffc:	000130b7 	.word	0x000130b7
   13000:	000130ef 	.word	0x000130ef
   13004:	000130ef 	.word	0x000130ef
   13008:	000130ef 	.word	0x000130ef
   1300c:	000130ef 	.word	0x000130ef
   13010:	000130ef 	.word	0x000130ef
   13014:	000130ef 	.word	0x000130ef
   13018:	000130ef 	.word	0x000130ef
   1301c:	000130ef 	.word	0x000130ef
   13020:	00012fa7 	.word	0x00012fa7
   13024:	000130ef 	.word	0x000130ef
   13028:	000130b7 	.word	0x000130b7
   1302c:	00013081 	.word	0x00013081
   13030:	00012fa7 	.word	0x00012fa7
   13034:	00012fa7 	.word	0x00012fa7
   13038:	00012fa7 	.word	0x00012fa7
   1303c:	000130ef 	.word	0x000130ef
   13040:	00013081 	.word	0x00013081
   13044:	000130ef 	.word	0x000130ef
   13048:	000130ef 	.word	0x000130ef
   1304c:	000130ef 	.word	0x000130ef
   13050:	000130ef 	.word	0x000130ef
   13054:	000130bd 	.word	0x000130bd
   13058:	000130b7 	.word	0x000130b7
   1305c:	000130d7 	.word	0x000130d7
   13060:	000130ef 	.word	0x000130ef
   13064:	000130ef 	.word	0x000130ef
   13068:	000130d7 	.word	0x000130d7
   1306c:	000130ef 	.word	0x000130ef
   13070:	000130b7 	.word	0x000130b7
   13074:	000130ef 	.word	0x000130ef
   13078:	000130ef 	.word	0x000130ef
   1307c:	000130b7 	.word	0x000130b7
		conv->specifier_cat = SPECIFIER_SINT;
   13080:	789a      	ldrb	r2, [r3, #2]
   13082:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   13084:	f361 0202 	bfi	r2, r1, #0, #3
   13088:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1308a:	785a      	ldrb	r2, [r3, #1]
   1308c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13090:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   13092:	bf02      	ittt	eq
   13094:	7819      	ldrbeq	r1, [r3, #0]
   13096:	f041 0101 	orreq.w	r1, r1, #1
   1309a:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   1309c:	2c63      	cmp	r4, #99	; 0x63
   1309e:	d12a      	bne.n	130f6 <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
   130a0:	3a00      	subs	r2, #0
   130a2:	bf18      	it	ne
   130a4:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   130a6:	7819      	ldrb	r1, [r3, #0]
   130a8:	f3c1 0440 	ubfx	r4, r1, #1, #1
   130ac:	4322      	orrs	r2, r4
   130ae:	f362 0141 	bfi	r1, r2, #1, #1
   130b2:	7019      	strb	r1, [r3, #0]
	return sp;
   130b4:	e709      	b.n	12eca <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
   130b6:	789a      	ldrb	r2, [r3, #2]
   130b8:	2102      	movs	r1, #2
   130ba:	e7e3      	b.n	13084 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
   130bc:	789a      	ldrb	r2, [r3, #2]
   130be:	2103      	movs	r1, #3
   130c0:	f361 0202 	bfi	r2, r1, #0, #3
   130c4:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   130c6:	785a      	ldrb	r2, [r3, #1]
   130c8:	f002 0278 	and.w	r2, r2, #120	; 0x78
   130cc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   130d0:	424a      	negs	r2, r1
   130d2:	414a      	adcs	r2, r1
   130d4:	e7e7      	b.n	130a6 <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
   130d6:	789a      	ldrb	r2, [r3, #2]
   130d8:	2103      	movs	r1, #3
   130da:	f361 0202 	bfi	r2, r1, #0, #3
   130de:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   130e0:	785a      	ldrb	r2, [r3, #1]
   130e2:	f012 0f78 	tst.w	r2, #120	; 0x78
   130e6:	bf14      	ite	ne
   130e8:	2201      	movne	r2, #1
   130ea:	2200      	moveq	r2, #0
   130ec:	e7db      	b.n	130a6 <extract_conversion+0x25a>
		conv->invalid = true;
   130ee:	781a      	ldrb	r2, [r3, #0]
   130f0:	f042 0201 	orr.w	r2, r2, #1
   130f4:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
   130f6:	2200      	movs	r2, #0
   130f8:	e7d5      	b.n	130a6 <extract_conversion+0x25a>
   130fa:	bf00      	nop

000130fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   130fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13100:	4680      	mov	r8, r0
   13102:	b08f      	sub	sp, #60	; 0x3c
   13104:	4689      	mov	r9, r1
   13106:	4692      	mov	sl, r2
   13108:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1310a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1310c:	f89a 0000 	ldrb.w	r0, [sl]
   13110:	b908      	cbnz	r0, 13116 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   13112:	4628      	mov	r0, r5
   13114:	e10b      	b.n	1332e <cbvprintf+0x232>
		if (*fp != '%') {
   13116:	2825      	cmp	r0, #37	; 0x25
   13118:	d009      	beq.n	1312e <cbvprintf+0x32>
			OUTC(*fp++);
   1311a:	4649      	mov	r1, r9
   1311c:	47c0      	blx	r8
   1311e:	2800      	cmp	r0, #0
   13120:	f2c0 8105 	blt.w	1332e <cbvprintf+0x232>
   13124:	f10a 0301 	add.w	r3, sl, #1
   13128:	9302      	str	r3, [sp, #8]
			OUTC('%');
   1312a:	3501      	adds	r5, #1
			break;
   1312c:	e059      	b.n	131e2 <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
   1312e:	4651      	mov	r1, sl
   13130:	a805      	add	r0, sp, #20
   13132:	f7ff fe8b 	bl	12e4c <extract_conversion>
		if (conv.width_star) {
   13136:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
   1313a:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
   1313c:	07d9      	lsls	r1, r3, #31
   1313e:	d51a      	bpl.n	13176 <cbvprintf+0x7a>
			width = va_arg(ap, int);
   13140:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
   13144:	2f00      	cmp	r7, #0
   13146:	da06      	bge.n	13156 <cbvprintf+0x5a>
				conv.flag_dash = true;
   13148:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1314c:	f042 0204 	orr.w	r2, r2, #4
   13150:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
   13154:	427f      	negs	r7, r7
		if (conv.prec_star) {
   13156:	075a      	lsls	r2, r3, #29
   13158:	d515      	bpl.n	13186 <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
   1315a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1315e:	f1bb 0f00 	cmp.w	fp, #0
   13162:	da14      	bge.n	1318e <cbvprintf+0x92>
				conv.prec_present = false;
   13164:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13168:	f36f 0341 	bfc	r3, #1, #1
   1316c:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
   13170:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   13174:	e00b      	b.n	1318e <cbvprintf+0x92>
		} else if (conv.width_present) {
   13176:	f99d 2014 	ldrsb.w	r2, [sp, #20]
   1317a:	2a00      	cmp	r2, #0
			width = conv.width_value;
   1317c:	bfb4      	ite	lt
   1317e:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
   13180:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
   13184:	e7e7      	b.n	13156 <cbvprintf+0x5a>
		} else if (conv.prec_present) {
   13186:	079b      	lsls	r3, r3, #30
   13188:	d5f2      	bpl.n	13170 <cbvprintf+0x74>
			precision = conv.prec_value;
   1318a:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
   1318e:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
   13192:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
   13196:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
   1319a:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
   1319c:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
   1319e:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
   131a2:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
   131a6:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
   131a8:	d130      	bne.n	1320c <cbvprintf+0x110>
			switch (length_mod) {
   131aa:	f1ac 0303 	sub.w	r3, ip, #3
   131ae:	2b04      	cmp	r3, #4
   131b0:	d81a      	bhi.n	131e8 <cbvprintf+0xec>
   131b2:	e8df f003 	tbb	[pc, r3]
   131b6:	3b03      	.short	0x3b03
   131b8:	193b      	.short	0x193b
   131ba:	19          	.byte	0x19
   131bb:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   131bc:	f854 1b04 	ldr.w	r1, [r4], #4
   131c0:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
   131c2:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
   131c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   131c8:	f013 0603 	ands.w	r6, r3, #3
   131cc:	d050      	beq.n	13270 <cbvprintf+0x174>
			OUTS(sp, fp);
   131ce:	9b02      	ldr	r3, [sp, #8]
   131d0:	4652      	mov	r2, sl
   131d2:	4649      	mov	r1, r9
   131d4:	4640      	mov	r0, r8
   131d6:	f009 faf8 	bl	1c7ca <outs>
   131da:	2800      	cmp	r0, #0
   131dc:	f2c0 80a7 	blt.w	1332e <cbvprintf+0x232>
   131e0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   131e2:	f8dd a008 	ldr.w	sl, [sp, #8]
   131e6:	e791      	b.n	1310c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   131e8:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   131ec:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   131f0:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
   131f4:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
   131f6:	d102      	bne.n	131fe <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
   131f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   131fc:	e013      	b.n	13226 <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
   131fe:	f1bc 0f02 	cmp.w	ip, #2
   13202:	d1df      	bne.n	131c4 <cbvprintf+0xc8>
				value.sint = (short)value.sint;
   13204:	b20a      	sxth	r2, r1
   13206:	17d3      	asrs	r3, r2, #31
   13208:	4611      	mov	r1, r2
   1320a:	e7da      	b.n	131c2 <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1320c:	2b02      	cmp	r3, #2
   1320e:	d122      	bne.n	13256 <cbvprintf+0x15a>
			switch (length_mod) {
   13210:	f1ac 0303 	sub.w	r3, ip, #3
   13214:	2b04      	cmp	r3, #4
   13216:	d812      	bhi.n	1323e <cbvprintf+0x142>
   13218:	e8df f003 	tbb	[pc, r3]
   1321c:	11080803 	.word	0x11080803
   13220:	11          	.byte	0x11
   13221:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   13222:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
   13226:	f04f 0e00 	mov.w	lr, #0
   1322a:	e7cb      	b.n	131c4 <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
   1322c:	1de3      	adds	r3, r4, #7
   1322e:	f023 0307 	bic.w	r3, r3, #7
   13232:	461c      	mov	r4, r3
				value.uint =
   13234:	f8d3 e004 	ldr.w	lr, [r3, #4]
   13238:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
   1323c:	e7c2      	b.n	131c4 <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
   1323e:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
   13242:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
   13246:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
   1324a:	d0d5      	beq.n	131f8 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
   1324c:	f1bc 0f02 	cmp.w	ip, #2
   13250:	d1b8      	bne.n	131c4 <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
   13252:	b289      	uxth	r1, r1
   13254:	e7e7      	b.n	13226 <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
   13256:	2b04      	cmp	r3, #4
   13258:	d105      	bne.n	13266 <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
   1325a:	3407      	adds	r4, #7
   1325c:	f024 0407 	bic.w	r4, r4, #7
   13260:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   13264:	e7d0      	b.n	13208 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
   13266:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   13268:	bf08      	it	eq
   1326a:	f854 1b04 	ldreq.w	r1, [r4], #4
   1326e:	e7a9      	b.n	131c4 <cbvprintf+0xc8>
		switch (conv.specifier) {
   13270:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13274:	2878      	cmp	r0, #120	; 0x78
   13276:	d8b4      	bhi.n	131e2 <cbvprintf+0xe6>
   13278:	2862      	cmp	r0, #98	; 0x62
   1327a:	d821      	bhi.n	132c0 <cbvprintf+0x1c4>
   1327c:	2825      	cmp	r0, #37	; 0x25
   1327e:	d051      	beq.n	13324 <cbvprintf+0x228>
   13280:	2858      	cmp	r0, #88	; 0x58
   13282:	d1ae      	bne.n	131e2 <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
   13284:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13288:	9300      	str	r3, [sp, #0]
   1328a:	4608      	mov	r0, r1
   1328c:	ab08      	add	r3, sp, #32
   1328e:	aa05      	add	r2, sp, #20
   13290:	4671      	mov	r1, lr
   13292:	f009 fa4f 	bl	1c734 <encode_uint>
   13296:	4682      	mov	sl, r0
			if (precision >= 0) {
   13298:	f1bb 0f00 	cmp.w	fp, #0
   1329c:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   132a0:	db0c      	blt.n	132bc <cbvprintf+0x1c0>
				conv.flag_zero = false;
   132a2:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
   132a6:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
   132aa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   132ae:	459b      	cmp	fp, r3
				conv.flag_zero = false;
   132b0:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
   132b4:	d902      	bls.n	132bc <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
   132b6:	ebab 0303 	sub.w	r3, fp, r3
   132ba:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
   132bc:	468b      	mov	fp, r1
   132be:	e048      	b.n	13352 <cbvprintf+0x256>
   132c0:	3863      	subs	r0, #99	; 0x63
   132c2:	2815      	cmp	r0, #21
   132c4:	d88d      	bhi.n	131e2 <cbvprintf+0xe6>
   132c6:	a201      	add	r2, pc, #4	; (adr r2, 132cc <cbvprintf+0x1d0>)
   132c8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   132cc:	0001335b 	.word	0x0001335b
   132d0:	000133b9 	.word	0x000133b9
   132d4:	000131e3 	.word	0x000131e3
   132d8:	000131e3 	.word	0x000131e3
   132dc:	000131e3 	.word	0x000131e3
   132e0:	000131e3 	.word	0x000131e3
   132e4:	000133b9 	.word	0x000133b9
   132e8:	000131e3 	.word	0x000131e3
   132ec:	000131e3 	.word	0x000131e3
   132f0:	000131e3 	.word	0x000131e3
   132f4:	000131e3 	.word	0x000131e3
   132f8:	00013413 	.word	0x00013413
   132fc:	000133e1 	.word	0x000133e1
   13300:	000133e5 	.word	0x000133e5
   13304:	000131e3 	.word	0x000131e3
   13308:	000131e3 	.word	0x000131e3
   1330c:	00013335 	.word	0x00013335
   13310:	000131e3 	.word	0x000131e3
   13314:	000133e1 	.word	0x000133e1
   13318:	000131e3 	.word	0x000131e3
   1331c:	000131e3 	.word	0x000131e3
   13320:	000133e1 	.word	0x000133e1
			OUTC('%');
   13324:	4649      	mov	r1, r9
   13326:	47c0      	blx	r8
   13328:	2800      	cmp	r0, #0
   1332a:	f6bf aefe 	bge.w	1312a <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   1332e:	b00f      	add	sp, #60	; 0x3c
   13330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
   13334:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
   13336:	468a      	mov	sl, r1
			size_t len = strlen(bps);
   13338:	9103      	str	r1, [sp, #12]
   1333a:	f00a fbf6 	bl	1db2a <strlen>
			if ((precision >= 0)
   1333e:	f1bb 0f00 	cmp.w	fp, #0
   13342:	9903      	ldr	r1, [sp, #12]
   13344:	db02      	blt.n	1334c <cbvprintf+0x250>
   13346:	4558      	cmp	r0, fp
   13348:	bf28      	it	cs
   1334a:	4658      	movcs	r0, fp
			bpe = bps + len;
   1334c:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
   13350:	2600      	movs	r6, #0
		if (bps == NULL) {
   13352:	f1ba 0f00 	cmp.w	sl, #0
   13356:	d107      	bne.n	13368 <cbvprintf+0x26c>
   13358:	e743      	b.n	131e2 <cbvprintf+0xe6>
			buf[0] = value.uint;
   1335a:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
   1335e:	2600      	movs	r6, #0
			bpe = buf + 1;
   13360:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
   13364:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
   13368:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
   1336c:	b106      	cbz	r6, 13370 <cbvprintf+0x274>
			nj_len += 1U;
   1336e:	3301      	adds	r3, #1
		if (conv.altform_0c) {
   13370:	f89d 2016 	ldrb.w	r2, [sp, #22]
   13374:	06d0      	lsls	r0, r2, #27
   13376:	d567      	bpl.n	13448 <cbvprintf+0x34c>
			nj_len += 2U;
   13378:	3302      	adds	r3, #2
		if (conv.pad_fp) {
   1337a:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
   1337c:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
   1337e:	bf48      	it	mi
   13380:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
   13382:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
   13384:	bf48      	it	mi
   13386:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   13388:	2f00      	cmp	r7, #0
   1338a:	dd70      	ble.n	1346e <cbvprintf+0x372>
			if (!conv.flag_dash) {
   1338c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
   13390:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
   13392:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13396:	9303      	str	r3, [sp, #12]
   13398:	0753      	lsls	r3, r2, #29
   1339a:	d468      	bmi.n	1346e <cbvprintf+0x372>
				if (conv.flag_zero) {
   1339c:	0650      	lsls	r0, r2, #25
   1339e:	f140 80a3 	bpl.w	134e8 <cbvprintf+0x3ec>
					if (sign != 0) {
   133a2:	b13e      	cbz	r6, 133b4 <cbvprintf+0x2b8>
						OUTC(sign);
   133a4:	4649      	mov	r1, r9
   133a6:	4630      	mov	r0, r6
   133a8:	47c0      	blx	r8
   133aa:	2800      	cmp	r0, #0
   133ac:	dbbf      	blt.n	1332e <cbvprintf+0x232>
						sign = 0;
   133ae:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   133b0:	3501      	adds	r5, #1
						sign = 0;
   133b2:	461e      	mov	r6, r3
					pad = '0';
   133b4:	2330      	movs	r3, #48	; 0x30
   133b6:	e098      	b.n	134ea <cbvprintf+0x3ee>
			if (conv.flag_plus) {
   133b8:	071e      	lsls	r6, r3, #28
   133ba:	d40f      	bmi.n	133dc <cbvprintf+0x2e0>
				sign = ' ';
   133bc:	f013 0610 	ands.w	r6, r3, #16
   133c0:	bf18      	it	ne
   133c2:	2620      	movne	r6, #32
			if (value.sint < 0) {
   133c4:	2900      	cmp	r1, #0
   133c6:	f17e 0000 	sbcs.w	r0, lr, #0
   133ca:	f6bf af5b 	bge.w	13284 <cbvprintf+0x188>
				value.uint = -value.sint;
   133ce:	424a      	negs	r2, r1
   133d0:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
   133d4:	4611      	mov	r1, r2
   133d6:	469e      	mov	lr, r3
				sign = '-';
   133d8:	262d      	movs	r6, #45	; 0x2d
   133da:	e753      	b.n	13284 <cbvprintf+0x188>
				sign = '+';
   133dc:	262b      	movs	r6, #43	; 0x2b
   133de:	e7f1      	b.n	133c4 <cbvprintf+0x2c8>
		switch (conv.specifier) {
   133e0:	2600      	movs	r6, #0
   133e2:	e74f      	b.n	13284 <cbvprintf+0x188>
			if (value.ptr != NULL) {
   133e4:	b351      	cbz	r1, 1343c <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   133e6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   133ea:	9300      	str	r3, [sp, #0]
   133ec:	4608      	mov	r0, r1
   133ee:	ab08      	add	r3, sp, #32
   133f0:	aa05      	add	r2, sp, #20
   133f2:	2100      	movs	r1, #0
   133f4:	f009 f99e 	bl	1c734 <encode_uint>
				conv.altform_0c = true;
   133f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   133fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13400:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13404:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   13408:	4682      	mov	sl, r0
				conv.altform_0c = true;
   1340a:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
   1340e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   13410:	e742      	b.n	13298 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
   13412:	f1bc 0f07 	cmp.w	ip, #7
   13416:	f63f aee4 	bhi.w	131e2 <cbvprintf+0xe6>
   1341a:	e8df f00c 	tbb	[pc, ip]
   1341e:	040d      	.short	0x040d
   13420:	08080d06 	.word	0x08080d06
   13424:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   13426:	700d      	strb	r5, [r1, #0]
		break;
   13428:	e6db      	b.n	131e2 <cbvprintf+0xe6>
		*(short *)dp = (short)count;
   1342a:	800d      	strh	r5, [r1, #0]
		break;
   1342c:	e6d9      	b.n	131e2 <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
   1342e:	462a      	mov	r2, r5
   13430:	17eb      	asrs	r3, r5, #31
   13432:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   13436:	e6d4      	b.n	131e2 <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13438:	600d      	str	r5, [r1, #0]
		break;
   1343a:	e6d2      	b.n	131e2 <cbvprintf+0xe6>
			bpe = bps + 5;
   1343c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 13500 <cbvprintf+0x404>
   13440:	460e      	mov	r6, r1
			bps = "(nil)";
   13442:	f1ab 0a05 	sub.w	sl, fp, #5
   13446:	e78f      	b.n	13368 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
   13448:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1344a:	bf48      	it	mi
   1344c:	3301      	addmi	r3, #1
   1344e:	e794      	b.n	1337a <cbvprintf+0x27e>
					OUTC(pad);
   13450:	4618      	mov	r0, r3
   13452:	4649      	mov	r1, r9
   13454:	9303      	str	r3, [sp, #12]
   13456:	47c0      	blx	r8
   13458:	2800      	cmp	r0, #0
   1345a:	9b03      	ldr	r3, [sp, #12]
   1345c:	f6ff af67 	blt.w	1332e <cbvprintf+0x232>
				while (width-- > 0) {
   13460:	2f00      	cmp	r7, #0
   13462:	eba5 0107 	sub.w	r1, r5, r7
   13466:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   1346a:	dcf1      	bgt.n	13450 <cbvprintf+0x354>
   1346c:	460d      	mov	r5, r1
		if (sign != 0) {
   1346e:	b136      	cbz	r6, 1347e <cbvprintf+0x382>
			OUTC(sign);
   13470:	4649      	mov	r1, r9
   13472:	4630      	mov	r0, r6
   13474:	47c0      	blx	r8
   13476:	2800      	cmp	r0, #0
   13478:	f6ff af59 	blt.w	1332e <cbvprintf+0x232>
   1347c:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
   1347e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13482:	06d9      	lsls	r1, r3, #27
   13484:	d401      	bmi.n	1348a <cbvprintf+0x38e>
   13486:	071a      	lsls	r2, r3, #28
   13488:	d506      	bpl.n	13498 <cbvprintf+0x39c>
				OUTC('0');
   1348a:	4649      	mov	r1, r9
   1348c:	2030      	movs	r0, #48	; 0x30
   1348e:	47c0      	blx	r8
   13490:	2800      	cmp	r0, #0
   13492:	f6ff af4c 	blt.w	1332e <cbvprintf+0x232>
   13496:	3501      	adds	r5, #1
			if (conv.altform_0c) {
   13498:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1349c:	06db      	lsls	r3, r3, #27
   1349e:	d507      	bpl.n	134b0 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
   134a0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   134a4:	4649      	mov	r1, r9
   134a6:	47c0      	blx	r8
   134a8:	2800      	cmp	r0, #0
   134aa:	f6ff af40 	blt.w	1332e <cbvprintf+0x232>
   134ae:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   134b0:	9e06      	ldr	r6, [sp, #24]
   134b2:	442e      	add	r6, r5
   134b4:	1b73      	subs	r3, r6, r5
   134b6:	2b00      	cmp	r3, #0
   134b8:	dc19      	bgt.n	134ee <cbvprintf+0x3f2>
			OUTS(bps, bpe);
   134ba:	465b      	mov	r3, fp
   134bc:	4652      	mov	r2, sl
   134be:	4649      	mov	r1, r9
   134c0:	4640      	mov	r0, r8
   134c2:	f009 f982 	bl	1c7ca <outs>
   134c6:	2800      	cmp	r0, #0
   134c8:	f6ff af31 	blt.w	1332e <cbvprintf+0x232>
   134cc:	4405      	add	r5, r0
		while (width > 0) {
   134ce:	442f      	add	r7, r5
   134d0:	1b7b      	subs	r3, r7, r5
   134d2:	2b00      	cmp	r3, #0
   134d4:	f77f ae85 	ble.w	131e2 <cbvprintf+0xe6>
			OUTC(' ');
   134d8:	4649      	mov	r1, r9
   134da:	2020      	movs	r0, #32
   134dc:	47c0      	blx	r8
   134de:	2800      	cmp	r0, #0
   134e0:	f6ff af25 	blt.w	1332e <cbvprintf+0x232>
   134e4:	3501      	adds	r5, #1
			--width;
   134e6:	e7f3      	b.n	134d0 <cbvprintf+0x3d4>
				char pad = ' ';
   134e8:	2320      	movs	r3, #32
   134ea:	443d      	add	r5, r7
   134ec:	e7b8      	b.n	13460 <cbvprintf+0x364>
				OUTC('0');
   134ee:	4649      	mov	r1, r9
   134f0:	2030      	movs	r0, #48	; 0x30
   134f2:	47c0      	blx	r8
   134f4:	2800      	cmp	r0, #0
   134f6:	f6ff af1a 	blt.w	1332e <cbvprintf+0x232>
   134fa:	3501      	adds	r5, #1
   134fc:	e7da      	b.n	134b4 <cbvprintf+0x3b8>
   134fe:	bf00      	nop
   13500:	0002201c 	.word	0x0002201c

00013504 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   13504:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   13506:	4c08      	ldr	r4, [pc, #32]	; (13528 <read_blvl+0x24>)
{
   13508:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   1350a:	7824      	ldrb	r4, [r4, #0]
   1350c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   13510:	2401      	movs	r4, #1
   13512:	9402      	str	r4, [sp, #8]
   13514:	f10d 0417 	add.w	r4, sp, #23
   13518:	9401      	str	r4, [sp, #4]
   1351a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1351e:	9400      	str	r4, [sp, #0]
   13520:	f00c f9ef 	bl	1f902 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   13524:	b006      	add	sp, #24
   13526:	bd10      	pop	{r4, pc}
   13528:	200008b7 	.word	0x200008b7

0001352c <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
   1352c:	4b01      	ldr	r3, [pc, #4]	; (13534 <bt_bas_get_battery_level+0x8>)
   1352e:	7818      	ldrb	r0, [r3, #0]
   13530:	4770      	bx	lr
   13532:	bf00      	nop
   13534:	200008b7 	.word	0x200008b7

00013538 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
   13538:	b500      	push	{lr}
   1353a:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   1353c:	2864      	cmp	r0, #100	; 0x64
{
   1353e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   13542:	d819      	bhi.n	13578 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   13544:	4b0e      	ldr	r3, [pc, #56]	; (13580 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   13546:	2218      	movs	r2, #24
   13548:	7018      	strb	r0, [r3, #0]
   1354a:	2100      	movs	r1, #0
   1354c:	a802      	add	r0, sp, #8
   1354e:	f00a fb3a 	bl	1dbc6 <memset>
	params.attr = attr;
   13552:	4b0c      	ldr	r3, [pc, #48]	; (13584 <bt_bas_set_battery_level+0x4c>)
   13554:	9303      	str	r3, [sp, #12]
	params.data = data;
   13556:	f10d 0307 	add.w	r3, sp, #7
   1355a:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   1355c:	a902      	add	r1, sp, #8
	params.len = len;
   1355e:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   13560:	2000      	movs	r0, #0
	params.len = len;
   13562:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   13566:	f004 fbdd 	bl	17d24 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   1356a:	f110 0f39 	cmn.w	r0, #57	; 0x39
   1356e:	bf08      	it	eq
   13570:	2000      	moveq	r0, #0
}
   13572:	b009      	add	sp, #36	; 0x24
   13574:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   13578:	f06f 0015 	mvn.w	r0, #21
   1357c:	e7f9      	b.n	13572 <bt_bas_set_battery_level+0x3a>
   1357e:	bf00      	nop
   13580:	200008b7 	.word	0x200008b7
   13584:	000217f4 	.word	0x000217f4

00013588 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13588:	b510      	push	{r4, lr}
   1358a:	4807      	ldr	r0, [pc, #28]	; (135a8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   1358c:	4c07      	ldr	r4, [pc, #28]	; (135ac <uart_console_init+0x24>)
   1358e:	f007 fb6d 	bl	1ac6c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13592:	4b07      	ldr	r3, [pc, #28]	; (135b0 <uart_console_init+0x28>)
   13594:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13596:	4620      	mov	r0, r4
   13598:	f000 ffb2 	bl	14500 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1359c:	4620      	mov	r0, r4
   1359e:	f7ff fb47 	bl	12c30 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   135a2:	2000      	movs	r0, #0
   135a4:	bd10      	pop	{r4, pc}
   135a6:	bf00      	nop
   135a8:	00022038 	.word	0x00022038
   135ac:	000135b5 	.word	0x000135b5
   135b0:	200027c4 	.word	0x200027c4

000135b4 <console_out>:
	if ('\n' == c) {
   135b4:	280a      	cmp	r0, #10
{
   135b6:	b538      	push	{r3, r4, r5, lr}
   135b8:	4d07      	ldr	r5, [pc, #28]	; (135d8 <console_out+0x24>)
   135ba:	4604      	mov	r4, r0
	if ('\n' == c) {
   135bc:	d104      	bne.n	135c8 <console_out+0x14>
   135be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   135c0:	6883      	ldr	r3, [r0, #8]
   135c2:	210d      	movs	r1, #13
   135c4:	685b      	ldr	r3, [r3, #4]
   135c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   135c8:	6828      	ldr	r0, [r5, #0]
   135ca:	6883      	ldr	r3, [r0, #8]
   135cc:	b2e1      	uxtb	r1, r4
   135ce:	685b      	ldr	r3, [r3, #4]
   135d0:	4798      	blx	r3
}
   135d2:	4620      	mov	r0, r4
   135d4:	bd38      	pop	{r3, r4, r5, pc}
   135d6:	bf00      	nop
   135d8:	200027c4 	.word	0x200027c4

000135dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   135dc:	4a0e      	ldr	r2, [pc, #56]	; (13618 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   135de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   135e0:	1a84      	subs	r4, r0, r2
   135e2:	10a3      	asrs	r3, r4, #2
   135e4:	4c0d      	ldr	r4, [pc, #52]	; (1361c <onoff_stop+0x40>)
   135e6:	435c      	muls	r4, r3
{
   135e8:	4605      	mov	r5, r0
   135ea:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   135ec:	200c      	movs	r0, #12
   135ee:	fb00 2004 	mla	r0, r0, r4, r2
{
   135f2:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   135f4:	2140      	movs	r1, #64	; 0x40
   135f6:	4408      	add	r0, r1
   135f8:	f009 f924 	bl	1c844 <set_off_state>
	if (err < 0) {
   135fc:	1e01      	subs	r1, r0, #0
   135fe:	db05      	blt.n	1360c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   13600:	4b07      	ldr	r3, [pc, #28]	; (13620 <onoff_stop+0x44>)
   13602:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   13606:	6863      	ldr	r3, [r4, #4]
   13608:	4798      	blx	r3
	return 0;
   1360a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   1360c:	4628      	mov	r0, r5
   1360e:	4633      	mov	r3, r6
}
   13610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13614:	4718      	bx	r3
   13616:	bf00      	nop
   13618:	200027d8 	.word	0x200027d8
   1361c:	b6db6db7 	.word	0xb6db6db7
   13620:	00021844 	.word	0x00021844

00013624 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13628:	4e10      	ldr	r6, [pc, #64]	; (1366c <onoff_start+0x48>)
   1362a:	1b84      	subs	r4, r0, r6
   1362c:	10a3      	asrs	r3, r4, #2
   1362e:	4c10      	ldr	r4, [pc, #64]	; (13670 <onoff_start+0x4c>)
   13630:	435c      	muls	r4, r3
   13632:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   13634:	250c      	movs	r5, #12
   13636:	4365      	muls	r5, r4
{
   13638:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   1363a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1363e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   13640:	4430      	add	r0, r6
   13642:	2140      	movs	r1, #64	; 0x40
   13644:	f009 f917 	bl	1c876 <set_starting_state>
	if (err < 0) {
   13648:	1e01      	subs	r1, r0, #0
   1364a:	db09      	blt.n	13660 <onoff_start+0x3c>
	subdata->cb = cb;
   1364c:	4a09      	ldr	r2, [pc, #36]	; (13674 <onoff_start+0x50>)
   1364e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   13650:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   13654:	4b08      	ldr	r3, [pc, #32]	; (13678 <onoff_start+0x54>)
   13656:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1365e:	4718      	bx	r3
		notify(mgr, err);
   13660:	4640      	mov	r0, r8
   13662:	463b      	mov	r3, r7
}
   13664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13668:	4718      	bx	r3
   1366a:	bf00      	nop
   1366c:	200027d8 	.word	0x200027d8
   13670:	b6db6db7 	.word	0xb6db6db7
   13674:	0001c8d9 	.word	0x0001c8d9
   13678:	00021844 	.word	0x00021844

0001367c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1367c:	2200      	movs	r2, #0
{
   1367e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13680:	2101      	movs	r1, #1
{
   13682:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13684:	4610      	mov	r0, r2
   13686:	f000 fc11 	bl	13eac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1368a:	2000      	movs	r0, #0
   1368c:	f000 fbfe 	bl	13e8c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   13690:	480f      	ldr	r0, [pc, #60]	; (136d0 <clk_init+0x54>)
   13692:	f007 f91d 	bl	1a8d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13696:	4b0f      	ldr	r3, [pc, #60]	; (136d4 <clk_init+0x58>)
   13698:	4298      	cmp	r0, r3
   1369a:	d115      	bne.n	136c8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1369c:	f00d f93c 	bl	20918 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   136a0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   136a2:	490d      	ldr	r1, [pc, #52]	; (136d8 <clk_init+0x5c>)
   136a4:	4630      	mov	r0, r6
   136a6:	f008 fd8f 	bl	1c1c8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   136aa:	2800      	cmp	r0, #0
   136ac:	db0b      	blt.n	136c6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   136ae:	2501      	movs	r5, #1
   136b0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   136b2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   136b4:	4908      	ldr	r1, [pc, #32]	; (136d8 <clk_init+0x5c>)
   136b6:	f104 001c 	add.w	r0, r4, #28
   136ba:	f008 fd85 	bl	1c1c8 <onoff_manager_init>
		if (err < 0) {
   136be:	2800      	cmp	r0, #0
   136c0:	db01      	blt.n	136c6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   136c2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   136c4:	2000      	movs	r0, #0
}
   136c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   136c8:	f06f 0004 	mvn.w	r0, #4
   136cc:	e7fb      	b.n	136c6 <clk_init+0x4a>
   136ce:	bf00      	nop
   136d0:	00013711 	.word	0x00013711
   136d4:	0bad0000 	.word	0x0bad0000
   136d8:	00021854 	.word	0x00021854

000136dc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   136dc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   136de:	230c      	movs	r3, #12
   136e0:	4809      	ldr	r0, [pc, #36]	; (13708 <clkstarted_handle.constprop.0+0x2c>)
   136e2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   136e4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   136e6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   136e8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   136ec:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   136ee:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   136f0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   136f2:	4418      	add	r0, r3
   136f4:	f009 f8dd 	bl	1c8b2 <set_on_state>
	if (callback) {
   136f8:	b12d      	cbz	r5, 13706 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   136fa:	4632      	mov	r2, r6
   136fc:	462b      	mov	r3, r5
   136fe:	4803      	ldr	r0, [pc, #12]	; (1370c <clkstarted_handle.constprop.0+0x30>)
}
   13700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13704:	4718      	bx	r3
}
   13706:	bd70      	pop	{r4, r5, r6, pc}
   13708:	200027d8 	.word	0x200027d8
   1370c:	200008bc 	.word	0x200008bc

00013710 <clock_event_handler>:
	switch (event) {
   13710:	b110      	cbz	r0, 13718 <clock_event_handler+0x8>
   13712:	2801      	cmp	r0, #1
   13714:	d004      	beq.n	13720 <clock_event_handler+0x10>
   13716:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13718:	4b03      	ldr	r3, [pc, #12]	; (13728 <clock_event_handler+0x18>)
   1371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1371c:	075b      	lsls	r3, r3, #29
   1371e:	d101      	bne.n	13724 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13720:	f7ff bfdc 	b.w	136dc <clkstarted_handle.constprop.0>
}
   13724:	4770      	bx	lr
   13726:	bf00      	nop
   13728:	200027d8 	.word	0x200027d8

0001372c <generic_hfclk_start>:
{
   1372c:	b508      	push	{r3, lr}
   1372e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13732:	f3ef 8111 	mrs	r1, BASEPRI
   13736:	f383 8811 	msr	BASEPRI, r3
   1373a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1373e:	4a12      	ldr	r2, [pc, #72]	; (13788 <generic_hfclk_start+0x5c>)
   13740:	6813      	ldr	r3, [r2, #0]
   13742:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   13746:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1374a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1374c:	d00c      	beq.n	13768 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1374e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13752:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13756:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1375a:	f013 0301 	ands.w	r3, r3, #1
   1375e:	d003      	beq.n	13768 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   13760:	480a      	ldr	r0, [pc, #40]	; (1378c <generic_hfclk_start+0x60>)
   13762:	f009 f8a6 	bl	1c8b2 <set_on_state>
			already_started = true;
   13766:	2301      	movs	r3, #1
	__asm__ volatile(
   13768:	f381 8811 	msr	BASEPRI, r1
   1376c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13770:	b123      	cbz	r3, 1377c <generic_hfclk_start+0x50>
}
   13772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   13776:	2000      	movs	r0, #0
   13778:	f7ff bfb0 	b.w	136dc <clkstarted_handle.constprop.0>
}
   1377c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13780:	2001      	movs	r0, #1
   13782:	f007 b895 	b.w	1a8b0 <nrfx_clock_start>
   13786:	bf00      	nop
   13788:	20002828 	.word	0x20002828
   1378c:	20002818 	.word	0x20002818

00013790 <lfclk_start>:
{
   13790:	b510      	push	{r4, lr}
	if (!once) {
   13792:	4c07      	ldr	r4, [pc, #28]	; (137b0 <lfclk_start+0x20>)
   13794:	7823      	ldrb	r3, [r4, #0]
   13796:	b92b      	cbnz	r3, 137a4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   13798:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1379c:	f00d fb43 	bl	20e26 <z_impl_k_busy_wait>
		once = true;
   137a0:	2301      	movs	r3, #1
   137a2:	7023      	strb	r3, [r4, #0]
}
   137a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   137a8:	2000      	movs	r0, #0
   137aa:	f007 b881 	b.w	1a8b0 <nrfx_clock_start>
   137ae:	bf00      	nop
   137b0:	20002aa0 	.word	0x20002aa0

000137b4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137b4:	4b09      	ldr	r3, [pc, #36]	; (137dc <generic_hfclk_stop+0x28>)
   137b6:	f3bf 8f5b 	dmb	ish
   137ba:	e853 2f00 	ldrex	r2, [r3]
   137be:	f022 0102 	bic.w	r1, r2, #2
   137c2:	e843 1000 	strex	r0, r1, [r3]
   137c6:	2800      	cmp	r0, #0
   137c8:	d1f7      	bne.n	137ba <generic_hfclk_stop+0x6>
   137ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   137ce:	07d3      	lsls	r3, r2, #31
   137d0:	d402      	bmi.n	137d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   137d2:	2001      	movs	r0, #1
   137d4:	f00d b89b 	b.w	2090e <nrfx_clock_stop>
}
   137d8:	4770      	bx	lr
   137da:	bf00      	nop
   137dc:	20002828 	.word	0x20002828

000137e0 <api_blocking_start>:
{
   137e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   137e2:	2200      	movs	r2, #0
   137e4:	2301      	movs	r3, #1
   137e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   137ea:	ab04      	add	r3, sp, #16
   137ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   137f0:	4a09      	ldr	r2, [pc, #36]	; (13818 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   137f2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   137f6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   137f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   137fc:	f009 f88f 	bl	1c91e <api_start>
	if (err < 0) {
   13800:	2800      	cmp	r0, #0
   13802:	db05      	blt.n	13810 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   13804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13808:	2300      	movs	r3, #0
   1380a:	4668      	mov	r0, sp
   1380c:	f007 ff92 	bl	1b734 <z_impl_k_sem_take>
}
   13810:	b007      	add	sp, #28
   13812:	f85d fb04 	ldr.w	pc, [sp], #4
   13816:	bf00      	nop
   13818:	0001c8eb 	.word	0x0001c8eb

0001381c <z_nrf_clock_control_lf_on>:
{
   1381c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13820:	493a      	ldr	r1, [pc, #232]	; (1390c <z_nrf_clock_control_lf_on+0xf0>)
   13822:	f3bf 8f5b 	dmb	ish
   13826:	4606      	mov	r6, r0
   13828:	2201      	movs	r2, #1
   1382a:	e851 3f00 	ldrex	r3, [r1]
   1382e:	e841 2000 	strex	r0, r2, [r1]
   13832:	2800      	cmp	r0, #0
   13834:	d1f9      	bne.n	1382a <z_nrf_clock_control_lf_on+0xe>
   13836:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1383a:	b933      	cbnz	r3, 1384a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1383c:	4934      	ldr	r1, [pc, #208]	; (13910 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1383e:	4835      	ldr	r0, [pc, #212]	; (13914 <z_nrf_clock_control_lf_on+0xf8>)
   13840:	604b      	str	r3, [r1, #4]
   13842:	60cb      	str	r3, [r1, #12]
   13844:	608a      	str	r2, [r1, #8]
   13846:	f008 fcd2 	bl	1c1ee <onoff_request>
	switch (start_mode) {
   1384a:	1e73      	subs	r3, r6, #1
   1384c:	2b01      	cmp	r3, #1
   1384e:	d832      	bhi.n	138b6 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13850:	2e01      	cmp	r6, #1
   13852:	d107      	bne.n	13864 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13858:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1385c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   13860:	2b01      	cmp	r3, #1
   13862:	d028      	beq.n	138b6 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13864:	f00d fad9 	bl	20e1a <k_is_in_isr>
   13868:	4604      	mov	r4, r0
   1386a:	b918      	cbnz	r0, 13874 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1386c:	4b2a      	ldr	r3, [pc, #168]	; (13918 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1386e:	781b      	ldrb	r3, [r3, #0]
   13870:	2b00      	cmp	r3, #0
   13872:	d144      	bne.n	138fe <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   13874:	f04f 0340 	mov.w	r3, #64	; 0x40
   13878:	f3ef 8511 	mrs	r5, BASEPRI
   1387c:	f383 8811 	msr	BASEPRI, r3
   13880:	f3bf 8f6f 	isb	sy
   13884:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13886:	4f25      	ldr	r7, [pc, #148]	; (1391c <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13888:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13920 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1388c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 13924 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13894:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13898:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1389c:	03d2      	lsls	r2, r2, #15
   1389e:	d50c      	bpl.n	138ba <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   138a0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   138a4:	2b01      	cmp	r3, #1
   138a6:	d001      	beq.n	138ac <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   138a8:	2e01      	cmp	r6, #1
   138aa:	d106      	bne.n	138ba <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   138ac:	b30c      	cbz	r4, 138f2 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   138ae:	f385 8811 	msr	BASEPRI, r5
   138b2:	f3bf 8f6f 	isb	sy
}
   138b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   138ba:	b1ac      	cbz	r4, 138e8 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   138bc:	4628      	mov	r0, r5
   138be:	f000 fbdd 	bl	1407c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   138c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   138c6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   138ca:	2b00      	cmp	r3, #0
   138cc:	d1e0      	bne.n	13890 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138ce:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   138d0:	2900      	cmp	r1, #0
   138d2:	d0dd      	beq.n	13890 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138d4:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   138d6:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   138d8:	2301      	movs	r3, #1
   138da:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   138de:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138e2:	f8c9 3000 	str.w	r3, [r9]
}
   138e6:	e7d3      	b.n	13890 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   138e8:	2100      	movs	r1, #0
   138ea:	2021      	movs	r0, #33	; 0x21
   138ec:	f007 fed6 	bl	1b69c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   138f0:	e7e7      	b.n	138c2 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   138f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   138f6:	2202      	movs	r2, #2
   138f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   138fc:	e7db      	b.n	138b6 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   138fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13902:	2202      	movs	r2, #2
   13904:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   13908:	4605      	mov	r5, r0
}
   1390a:	e7bc      	b.n	13886 <z_nrf_clock_control_lf_on+0x6a>
   1390c:	2000282c 	.word	0x2000282c
   13910:	200027c8 	.word	0x200027c8
   13914:	200027f4 	.word	0x200027f4
   13918:	200033c3 	.word	0x200033c3
   1391c:	40000104 	.word	0x40000104
   13920:	e000e100 	.word	0xe000e100
   13924:	40000008 	.word	0x40000008

00013928 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   13928:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1392a:	4b08      	ldr	r3, [pc, #32]	; (1394c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1392c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13930:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   13934:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   13938:	4290      	cmp	r0, r2
   1393a:	d100      	bne.n	1393e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   1393c:	4770      	bx	lr
   1393e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   13942:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13944:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13948:	e7f2      	b.n	13930 <handle_next_cycle_case+0x8>
   1394a:	bf00      	nop
   1394c:	40011000 	.word	0x40011000

00013950 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13950:	4b07      	ldr	r3, [pc, #28]	; (13970 <rtc_nrf_isr+0x20>)
   13952:	2200      	movs	r2, #0
   13954:	601a      	str	r2, [r3, #0]
   13956:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   13958:	4a06      	ldr	r2, [pc, #24]	; (13974 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   1395a:	4b07      	ldr	r3, [pc, #28]	; (13978 <rtc_nrf_isr+0x28>)
   1395c:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   13960:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   13962:	1ac0      	subs	r0, r0, r3
   13964:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   13968:	4403      	add	r3, r0
   1396a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   1396c:	f008 b932 	b.w	1bbd4 <z_clock_announce>
   13970:	40011140 	.word	0x40011140
   13974:	20002830 	.word	0x20002830
   13978:	40011000 	.word	0x40011000

0001397c <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   1397c:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1397e:	4d10      	ldr	r5, [pc, #64]	; (139c0 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13980:	4b10      	ldr	r3, [pc, #64]	; (139c4 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   13982:	2400      	movs	r4, #0
   13984:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13988:	601c      	str	r4, [r3, #0]
   1398a:	681b      	ldr	r3, [r3, #0]
   1398c:	4b0e      	ldr	r3, [pc, #56]	; (139c8 <z_clock_driver_init+0x4c>)
   1398e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13992:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   13996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1399a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1399e:	4622      	mov	r2, r4
   139a0:	2101      	movs	r1, #1
   139a2:	2011      	movs	r0, #17
   139a4:	f000 fa82 	bl	13eac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   139a8:	2011      	movs	r0, #17
   139aa:	f000 fa6f 	bl	13e8c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   139ae:	4a07      	ldr	r2, [pc, #28]	; (139cc <z_clock_driver_init+0x50>)
   139b0:	2301      	movs	r3, #1
   139b2:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   139b4:	2002      	movs	r0, #2
   139b6:	602b      	str	r3, [r5, #0]
   139b8:	f7ff ff30 	bl	1381c <z_nrf_clock_control_lf_on>

	return 0;
}
   139bc:	4620      	mov	r0, r4
   139be:	bd38      	pop	{r3, r4, r5, pc}
   139c0:	40011000 	.word	0x40011000
   139c4:	40011140 	.word	0x40011140
   139c8:	e000e100 	.word	0xe000e100
   139cc:	40011008 	.word	0x40011008

000139d0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   139d2:	4b2d      	ldr	r3, [pc, #180]	; (13a88 <z_clock_set_timeout+0xb8>)
   139d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   139d8:	bf08      	it	eq
   139da:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   139dc:	3801      	subs	r0, #1
   139de:	2800      	cmp	r0, #0
   139e0:	dd40      	ble.n	13a64 <z_clock_set_timeout+0x94>
   139e2:	4298      	cmp	r0, r3
   139e4:	bfa8      	it	ge
   139e6:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   139e8:	4c28      	ldr	r4, [pc, #160]	; (13a8c <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   139ea:	4a29      	ldr	r2, [pc, #164]	; (13a90 <z_clock_set_timeout+0xc0>)
   139ec:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   139f0:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   139f2:	4e28      	ldr	r6, [pc, #160]	; (13a94 <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
   139f4:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   139f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   139fa:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
   139fe:	bf18      	it	ne
   13a00:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13a02:	3501      	adds	r5, #1
   13a04:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
   13a06:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   13a0a:	4d1f      	ldr	r5, [pc, #124]	; (13a88 <z_clock_set_timeout+0xb8>)
   13a0c:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
   13a10:	42a8      	cmp	r0, r5
   13a12:	bf94      	ite	ls
   13a14:	1815      	addls	r5, r2, r0
   13a16:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
   13a18:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
   13a1c:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a20:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
   13a22:	1a9b      	subs	r3, r3, r2
   13a24:	6037      	str	r7, [r6, #0]
   13a26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13a2a:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
   13a2c:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13a2e:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13a32:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13a36:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   13a3a:	d104      	bne.n	13a46 <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   13a3c:	200f      	movs	r0, #15
   13a3e:	f00d f9f2 	bl	20e26 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a42:	6037      	str	r7, [r6, #0]
   13a44:	6833      	ldr	r3, [r6, #0]
   13a46:	4b14      	ldr	r3, [pc, #80]	; (13a98 <z_clock_set_timeout+0xc8>)
   13a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13a4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   13a50:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13a54:	1a2b      	subs	r3, r5, r0
   13a56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   13a5a:	2b01      	cmp	r3, #1
   13a5c:	d104      	bne.n	13a68 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
   13a5e:	f7ff ff63 	bl	13928 <handle_next_cycle_case>
   13a62:	e00b      	b.n	13a7c <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13a64:	2000      	movs	r0, #0
   13a66:	e7bf      	b.n	139e8 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13a68:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13a6c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   13a70:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13a74:	1a2d      	subs	r5, r5, r0
   13a76:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
   13a78:	022b      	lsls	r3, r5, #8
   13a7a:	d4f0      	bmi.n	13a5e <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
   13a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13a80:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   13a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a86:	bf00      	nop
   13a88:	007fffff 	.word	0x007fffff
   13a8c:	40011000 	.word	0x40011000
   13a90:	20002830 	.word	0x20002830
   13a94:	40011140 	.word	0x40011140
   13a98:	e000e100 	.word	0xe000e100

00013a9c <z_clock_elapsed>:
	__asm__ volatile(
   13a9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13aa0:	f3ef 8311 	mrs	r3, BASEPRI
   13aa4:	f382 8811 	msr	BASEPRI, r2
   13aa8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   13aac:	4a06      	ldr	r2, [pc, #24]	; (13ac8 <z_clock_elapsed+0x2c>)
   13aae:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   13ab2:	4a06      	ldr	r2, [pc, #24]	; (13acc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   13ab4:	6812      	ldr	r2, [r2, #0]
   13ab6:	1a80      	subs	r0, r0, r2
   13ab8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   13abc:	f383 8811 	msr	BASEPRI, r3
   13ac0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13ac4:	4770      	bx	lr
   13ac6:	bf00      	nop
   13ac8:	40011000 	.word	0x40011000
   13acc:	20002830 	.word	0x20002830

00013ad0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
   13ad0:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13ad2:	4c11      	ldr	r4, [pc, #68]	; (13b18 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   13ad4:	4a11      	ldr	r2, [pc, #68]	; (13b1c <_DoInit+0x4c>)
   13ad6:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   13ad8:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   13ada:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   13ade:	4b10      	ldr	r3, [pc, #64]	; (13b20 <_DoInit+0x50>)
   13ae0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   13ae2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
   13ae8:	4a0e      	ldr	r2, [pc, #56]	; (13b24 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   13aea:	490f      	ldr	r1, [pc, #60]	; (13b28 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   13aec:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   13aee:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   13af0:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13af2:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
   13af4:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   13af6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   13af8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13afa:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   13afc:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   13afe:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   13b00:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   13b02:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   13b04:	f00a f807 	bl	1db16 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   13b08:	4908      	ldr	r1, [pc, #32]	; (13b2c <_DoInit+0x5c>)
   13b0a:	4620      	mov	r0, r4
   13b0c:	f00a f803 	bl	1db16 <strcpy>
  p->acID[6] = ' ';
   13b10:	2320      	movs	r3, #32
   13b12:	71a3      	strb	r3, [r4, #6]
}
   13b14:	bd10      	pop	{r4, pc}
   13b16:	bf00      	nop
   13b18:	20002834 	.word	0x20002834
   13b1c:	0002204f 	.word	0x0002204f
   13b20:	20002ab1 	.word	0x20002ab1
   13b24:	20002aa1 	.word	0x20002aa1
   13b28:	00022058 	.word	0x00022058
   13b2c:	0002205c 	.word	0x0002205c

00013b30 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   13b30:	4b01      	ldr	r3, [pc, #4]	; (13b38 <uECC_get_rng+0x8>)
   13b32:	6818      	ldr	r0, [r3, #0]
   13b34:	4770      	bx	lr
   13b36:	bf00      	nop
   13b38:	200006d4 	.word	0x200006d4

00013b3c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   13b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13b3e:	2208      	movs	r2, #8
{
   13b40:	b089      	sub	sp, #36	; 0x24
   13b42:	460c      	mov	r4, r1
   13b44:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13b46:	f009 f8d0 	bl	1ccea <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   13b4a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13b4c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   13b4e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13b50:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   13b52:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13b54:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   13b56:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   13b58:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13b5a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   13b5c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   13b5e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13b60:	2308      	movs	r3, #8
   13b62:	466a      	mov	r2, sp
   13b64:	4669      	mov	r1, sp
   13b66:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   13b68:	e9cd 7701 	strd	r7, r7, [sp, #4]
   13b6c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13b6e:	f008 ffbe 	bl	1caee <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13b72:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13b74:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13b76:	466a      	mov	r2, sp
   13b78:	4631      	mov	r1, r6
   13b7a:	4630      	mov	r0, r6
   13b7c:	f008 ffb7 	bl	1caee <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   13b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13b82:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   13b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13b86:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   13b88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13b8a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   13b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13b8e:	4405      	add	r5, r0
	tmp[7] = 0;
   13b90:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13b94:	466a      	mov	r2, sp
   13b96:	2308      	movs	r3, #8
   13b98:	4669      	mov	r1, sp
   13b9a:	4668      	mov	r0, sp
   13b9c:	f008 ffa7 	bl	1caee <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13ba0:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13ba2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13ba4:	2308      	movs	r3, #8
   13ba6:	466a      	mov	r2, sp
   13ba8:	4630      	mov	r0, r6
   13baa:	f008 ffa0 	bl	1caee <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   13bae:	6a23      	ldr	r3, [r4, #32]
   13bb0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   13bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13bb4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   13bb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13bb8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   13bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13bbc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13bc0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13bc2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13bc4:	2308      	movs	r3, #8
   13bc6:	466a      	mov	r2, sp
   13bc8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13bca:	e9cd 7704 	strd	r7, r7, [sp, #16]
   13bce:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13bd0:	f008 ff8d 	bl	1caee <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   13bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13bd6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   13bd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   13bda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   13bdc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   13bde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13be0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   13be2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   13be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   13be6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   13be8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   13bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   13bee:	6a23      	ldr	r3, [r4, #32]
   13bf0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13bf2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13bf4:	2308      	movs	r3, #8
   13bf6:	466a      	mov	r2, sp
   13bf8:	4630      	mov	r0, r6
   13bfa:	f008 ff78 	bl	1caee <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   13bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13c00:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   13c02:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13c04:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   13c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c08:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   13c0a:	6a23      	ldr	r3, [r4, #32]
   13c0c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   13c0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13c10:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13c12:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c14:	2308      	movs	r3, #8
   13c16:	466a      	mov	r2, sp
   13c18:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13c1a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   13c1e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c20:	f009 f899 	bl	1cd56 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   13c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13c26:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   13c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c2a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   13c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13c2e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   13c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13c32:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   13c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c36:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   13c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13c3a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c3c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c3e:	2308      	movs	r3, #8
   13c40:	466a      	mov	r2, sp
   13c42:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   13c44:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c48:	f009 f885 	bl	1cd56 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   13c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c4e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   13c50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13c52:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   13c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13c56:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   13c58:	6a23      	ldr	r3, [r4, #32]
   13c5a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   13c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c5e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   13c60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   13c62:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   13c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13c68:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c6a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c6c:	2308      	movs	r3, #8
   13c6e:	466a      	mov	r2, sp
   13c70:	4630      	mov	r0, r6
   13c72:	f009 f870 	bl	1cd56 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   13c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13c78:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   13c7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   13c7c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   13c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c82:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   13c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13c86:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   13c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   13c8a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   13c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c90:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c92:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   13c94:	2308      	movs	r3, #8
   13c96:	466a      	mov	r2, sp
   13c98:	4630      	mov	r0, r6
   13c9a:	f009 f85c 	bl	1cd56 <uECC_vli_sub>

	if (carry < 0) {
   13c9e:	1a2d      	subs	r5, r5, r0
   13ca0:	d410      	bmi.n	13cc4 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   13ca2:	4c0d      	ldr	r4, [pc, #52]	; (13cd8 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   13ca4:	b935      	cbnz	r5, 13cb4 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   13ca6:	2208      	movs	r2, #8
   13ca8:	4631      	mov	r1, r6
   13caa:	4620      	mov	r0, r4
   13cac:	f009 f829 	bl	1cd02 <uECC_vli_cmp_unsafe>
		while (carry || 
   13cb0:	2801      	cmp	r0, #1
   13cb2:	d00f      	beq.n	13cd4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13cb4:	2308      	movs	r3, #8
   13cb6:	4622      	mov	r2, r4
   13cb8:	4631      	mov	r1, r6
   13cba:	4630      	mov	r0, r6
   13cbc:	f009 f84b 	bl	1cd56 <uECC_vli_sub>
   13cc0:	1a2d      	subs	r5, r5, r0
   13cc2:	e7ef      	b.n	13ca4 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   13cc4:	4a04      	ldr	r2, [pc, #16]	; (13cd8 <vli_mmod_fast_secp256r1+0x19c>)
   13cc6:	2308      	movs	r3, #8
   13cc8:	4631      	mov	r1, r6
   13cca:	4630      	mov	r0, r6
   13ccc:	f008 ff0f 	bl	1caee <uECC_vli_add>
		while (carry < 0);
   13cd0:	182d      	adds	r5, r5, r0
   13cd2:	d4f8      	bmi.n	13cc6 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   13cd4:	b009      	add	sp, #36	; 0x24
   13cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cd8:	00021864 	.word	0x00021864

00013cdc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   13cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13cde:	4e26      	ldr	r6, [pc, #152]	; (13d78 <tc_aes128_set_encrypt_key+0x9c>)
{
   13ce0:	4607      	mov	r7, r0
   13ce2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13ce4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13ce6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13ce8:	ad01      	add	r5, sp, #4
   13cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13cec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13cf0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13cf4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   13cf8:	4638      	mov	r0, r7
   13cfa:	2f00      	cmp	r7, #0
   13cfc:	d038      	beq.n	13d70 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   13cfe:	2c00      	cmp	r4, #0
   13d00:	d038      	beq.n	13d74 <tc_aes128_set_encrypt_key+0x98>
   13d02:	1f38      	subs	r0, r7, #4
   13d04:	4621      	mov	r1, r4
   13d06:	4602      	mov	r2, r0
   13d08:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13d0a:	784b      	ldrb	r3, [r1, #1]
   13d0c:	780d      	ldrb	r5, [r1, #0]
   13d0e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13d10:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13d14:	78cd      	ldrb	r5, [r1, #3]
   13d16:	432b      	orrs	r3, r5
   13d18:	788d      	ldrb	r5, [r1, #2]
   13d1a:	3104      	adds	r1, #4
   13d1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13d20:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13d22:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13d26:	d1f0      	bne.n	13d0a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13d28:	4c14      	ldr	r4, [pc, #80]	; (13d7c <tc_aes128_set_encrypt_key+0xa0>)
   13d2a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13d2c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13d2e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13d30:	d116      	bne.n	13d60 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13d32:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13d36:	5ca5      	ldrb	r5, [r4, r2]
   13d38:	0e1a      	lsrs	r2, r3, #24
   13d3a:	5ca2      	ldrb	r2, [r4, r2]
   13d3c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13d40:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13d44:	b2db      	uxtb	r3, r3
   13d46:	5d65      	ldrb	r5, [r4, r5]
   13d48:	5ce3      	ldrb	r3, [r4, r3]
   13d4a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13d4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13d52:	ad0c      	add	r5, sp, #48	; 0x30
   13d54:	f021 0303 	bic.w	r3, r1, #3
   13d58:	442b      	add	r3, r5
   13d5a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13d5e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   13d60:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13d64:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13d66:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13d68:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13d6a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13d6c:	d1de      	bne.n	13d2c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   13d6e:	2001      	movs	r0, #1
}
   13d70:	b00d      	add	sp, #52	; 0x34
   13d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13d74:	4620      	mov	r0, r4
   13d76:	e7fb      	b.n	13d70 <tc_aes128_set_encrypt_key+0x94>
   13d78:	00021564 	.word	0x00021564
   13d7c:	00022063 	.word	0x00022063

00013d80 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d84:	4615      	mov	r5, r2
   13d86:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13d88:	4606      	mov	r6, r0
   13d8a:	2800      	cmp	r0, #0
   13d8c:	d058      	beq.n	13e40 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13d8e:	2900      	cmp	r1, #0
   13d90:	d059      	beq.n	13e46 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   13d92:	2a00      	cmp	r2, #0
   13d94:	d059      	beq.n	13e4a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13d96:	2310      	movs	r3, #16
   13d98:	460a      	mov	r2, r1
   13d9a:	4668      	mov	r0, sp
   13d9c:	4619      	mov	r1, r3
   13d9e:	f008 fde2 	bl	1c966 <_copy>
	add_round_key(state, s->words);
   13da2:	4629      	mov	r1, r5
   13da4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13da6:	4c2a      	ldr	r4, [pc, #168]	; (13e50 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13da8:	f009 fce7 	bl	1d77a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   13dac:	f105 0710 	add.w	r7, r5, #16
   13db0:	46a1      	mov	r9, r4
   13db2:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13db4:	46e8      	mov	r8, sp
{
   13db6:	466a      	mov	r2, sp
   13db8:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   13dba:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13dbc:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   13dbe:	5c61      	ldrb	r1, [r4, r1]
   13dc0:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13dc4:	d1f9      	bne.n	13dba <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13dc6:	4668      	mov	r0, sp
   13dc8:	f009 fd1c 	bl	1d804 <shift_rows>
	mult_row_column(t, s);
   13dcc:	4669      	mov	r1, sp
   13dce:	a804      	add	r0, sp, #16
   13dd0:	f009 fd51 	bl	1d876 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13dd4:	a901      	add	r1, sp, #4
   13dd6:	a805      	add	r0, sp, #20
   13dd8:	f009 fd4d 	bl	1d876 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   13ddc:	a902      	add	r1, sp, #8
   13dde:	a806      	add	r0, sp, #24
   13de0:	f009 fd49 	bl	1d876 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13de4:	a903      	add	r1, sp, #12
   13de6:	a807      	add	r0, sp, #28
   13de8:	f009 fd45 	bl	1d876 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13dec:	2310      	movs	r3, #16
   13dee:	4619      	mov	r1, r3
   13df0:	eb0d 0203 	add.w	r2, sp, r3
   13df4:	4668      	mov	r0, sp
   13df6:	f008 fdb6 	bl	1c966 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13dfa:	4639      	mov	r1, r7
   13dfc:	4668      	mov	r0, sp
   13dfe:	3710      	adds	r7, #16
   13e00:	f009 fcbb 	bl	1d77a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   13e04:	42af      	cmp	r7, r5
   13e06:	d1d5      	bne.n	13db4 <tc_aes_encrypt+0x34>
   13e08:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   13e0a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   13e0e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   13e10:	f819 3003 	ldrb.w	r3, [r9, r3]
   13e14:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13e18:	d1f7      	bne.n	13e0a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   13e1a:	4668      	mov	r0, sp
   13e1c:	f009 fcf2 	bl	1d804 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   13e20:	4629      	mov	r1, r5
   13e22:	4668      	mov	r0, sp
   13e24:	f009 fca9 	bl	1d77a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13e28:	2310      	movs	r3, #16
   13e2a:	4619      	mov	r1, r3
   13e2c:	466a      	mov	r2, sp
   13e2e:	4630      	mov	r0, r6
   13e30:	f008 fd99 	bl	1c966 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13e34:	4668      	mov	r0, sp
   13e36:	2210      	movs	r2, #16
   13e38:	4621      	mov	r1, r4
   13e3a:	f008 fda1 	bl	1c980 <_set>

	return TC_CRYPTO_SUCCESS;
   13e3e:	2001      	movs	r0, #1
}
   13e40:	b009      	add	sp, #36	; 0x24
   13e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   13e46:	4608      	mov	r0, r1
   13e48:	e7fa      	b.n	13e40 <tc_aes_encrypt+0xc0>
   13e4a:	4610      	mov	r0, r2
   13e4c:	e7f8      	b.n	13e40 <tc_aes_encrypt+0xc0>
   13e4e:	bf00      	nop
   13e50:	00022063 	.word	0x00022063

00013e54 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13e54:	4a0a      	ldr	r2, [pc, #40]	; (13e80 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13e56:	490b      	ldr	r1, [pc, #44]	; (13e84 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13e58:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13e5a:	6809      	ldr	r1, [r1, #0]
   13e5c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13e60:	4909      	ldr	r1, [pc, #36]	; (13e88 <arch_swap+0x34>)
	_current->arch.basepri = key;
   13e62:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13e64:	684b      	ldr	r3, [r1, #4]
   13e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13e6a:	604b      	str	r3, [r1, #4]
   13e6c:	2300      	movs	r3, #0
   13e6e:	f383 8811 	msr	BASEPRI, r3
   13e72:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13e76:	6893      	ldr	r3, [r2, #8]
}
   13e78:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   13e7c:	4770      	bx	lr
   13e7e:	bf00      	nop
   13e80:	20002a3c 	.word	0x20002a3c
   13e84:	00021df8 	.word	0x00021df8
   13e88:	e000ed00 	.word	0xe000ed00

00013e8c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13e8c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13e8e:	2b00      	cmp	r3, #0
   13e90:	db08      	blt.n	13ea4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13e92:	2201      	movs	r2, #1
   13e94:	f000 001f 	and.w	r0, r0, #31
   13e98:	fa02 f000 	lsl.w	r0, r2, r0
   13e9c:	095b      	lsrs	r3, r3, #5
   13e9e:	4a02      	ldr	r2, [pc, #8]	; (13ea8 <arch_irq_enable+0x1c>)
   13ea0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13ea4:	4770      	bx	lr
   13ea6:	bf00      	nop
   13ea8:	e000e100 	.word	0xe000e100

00013eac <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   13eac:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13eae:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   13eb0:	bf54      	ite	pl
   13eb2:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13eb4:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13eb6:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13eb8:	bfac      	ite	ge
   13eba:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ebe:	4a07      	ldrlt	r2, [pc, #28]	; (13edc <z_arm_irq_priority_set+0x30>)
   13ec0:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ec4:	bfac      	ite	ge
   13ec6:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13eca:	f000 000f 	andlt.w	r0, r0, #15
   13ece:	b2db      	uxtb	r3, r3
   13ed0:	bfb4      	ite	lt
   13ed2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ed4:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13ed8:	4770      	bx	lr
   13eda:	bf00      	nop
   13edc:	e000ed14 	.word	0xe000ed14

00013ee0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13ee0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13ee2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13ee4:	4b04      	ldr	r3, [pc, #16]	; (13ef8 <_arch_isr_direct_pm+0x18>)
   13ee6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13ee8:	b118      	cbz	r0, 13ef2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   13eea:	2200      	movs	r2, #0
   13eec:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   13eee:	f00c fd34 	bl	2095a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13ef2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13ef4:	bd08      	pop	{r3, pc}
   13ef6:	bf00      	nop
   13ef8:	20002a3c 	.word	0x20002a3c

00013efc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13efc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13f00:	9b00      	ldr	r3, [sp, #0]
   13f02:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13f06:	490a      	ldr	r1, [pc, #40]	; (13f30 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13f08:	9b01      	ldr	r3, [sp, #4]
   13f0a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13f0e:	9b02      	ldr	r3, [sp, #8]
   13f10:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13f14:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13f1c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13f20:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13f24:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13f26:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13f28:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   13f2a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13f2c:	4770      	bx	lr
   13f2e:	bf00      	nop
   13f30:	0001c281 	.word	0x0001c281

00013f34 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13f34:	4a0b      	ldr	r2, [pc, #44]	; (13f64 <z_check_thread_stack_fail+0x30>)
{
   13f36:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13f38:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   13f3a:	b190      	cbz	r0, 13f62 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13f3c:	f113 0f16 	cmn.w	r3, #22
   13f40:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   13f42:	d005      	beq.n	13f50 <z_check_thread_stack_fail+0x1c>
   13f44:	f1a0 0220 	sub.w	r2, r0, #32
   13f48:	429a      	cmp	r2, r3
   13f4a:	d806      	bhi.n	13f5a <z_check_thread_stack_fail+0x26>
   13f4c:	4283      	cmp	r3, r0
   13f4e:	d204      	bcs.n	13f5a <z_check_thread_stack_fail+0x26>
   13f50:	4281      	cmp	r1, r0
   13f52:	bf2c      	ite	cs
   13f54:	2100      	movcs	r1, #0
   13f56:	2101      	movcc	r1, #1
   13f58:	e000      	b.n	13f5c <z_check_thread_stack_fail+0x28>
   13f5a:	2100      	movs	r1, #0
   13f5c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13f5e:	bf08      	it	eq
   13f60:	2000      	moveq	r0, #0
}
   13f62:	4770      	bx	lr
   13f64:	20002a3c 	.word	0x20002a3c

00013f68 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13f68:	b508      	push	{r3, lr}
   13f6a:	4604      	mov	r4, r0
   13f6c:	460e      	mov	r6, r1
   13f6e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   13f70:	f000 f9f0 	bl	14354 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13f74:	4b08      	ldr	r3, [pc, #32]	; (13f98 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13f76:	4620      	mov	r0, r4
	_current = main_thread;
   13f78:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13f7a:	f000 fa07 	bl	1438c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13f7e:	4628      	mov	r0, r5
   13f80:	f386 8809 	msr	PSP, r6
   13f84:	2100      	movs	r1, #0
   13f86:	b663      	cpsie	if
   13f88:	f381 8811 	msr	BASEPRI, r1
   13f8c:	f3bf 8f6f 	isb	sy
   13f90:	2200      	movs	r2, #0
   13f92:	2300      	movs	r3, #0
   13f94:	f008 f974 	bl	1c280 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13f98:	20002a3c 	.word	0x20002a3c

00013f9c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13f9c:	4a0e      	ldr	r2, [pc, #56]	; (13fd8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13f9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13fa0:	4b0e      	ldr	r3, [pc, #56]	; (13fdc <z_arm_prep_c+0x40>)
   13fa2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13fa6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13fb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13fb4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   13fbc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13fc0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13fc4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13fc8:	f006 feb4 	bl	1ad34 <z_bss_zero>
	z_data_copy();
   13fcc:	f006 febc 	bl	1ad48 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13fd0:	f000 f992 	bl	142f8 <z_arm_interrupt_init>
	z_cstart();
   13fd4:	f006 fef6 	bl	1adc4 <z_cstart>
   13fd8:	00000000 	.word	0x00000000
   13fdc:	e000ed00 	.word	0xe000ed00

00013fe0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13fe0:	4912      	ldr	r1, [pc, #72]	; (1402c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13fe2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13fe4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   13fe8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13fea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13fee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13ff2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13ff4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13ff8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13ffc:	4f0c      	ldr	r7, [pc, #48]	; (14030 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13ffe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14002:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   14004:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14006:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14008:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
   1400a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1400c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1400e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14012:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14014:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14016:	f000 f9b9 	bl	1438c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1401a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1401e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   14022:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14026:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1402a:	4770      	bx	lr
    ldr r1, =_kernel
   1402c:	20002a3c 	.word	0x20002a3c
    ldr v4, =_SCS_ICSR
   14030:	e000ed04 	.word	0xe000ed04

00014034 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   14034:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14038:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1403a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1403e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14042:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14044:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14048:	2902      	cmp	r1, #2
    beq _oops
   1404a:	d0ff      	beq.n	1404c <_oops>

0001404c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1404c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1404e:	f009 fd57 	bl	1db00 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14052:	bd01      	pop	{r0, pc}

00014054 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14054:	4901      	ldr	r1, [pc, #4]	; (1405c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14056:	2210      	movs	r2, #16
	str	r2, [r1]
   14058:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1405a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1405c:	e000ed10 	.word	0xe000ed10

00014060 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14060:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14062:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14064:	f380 8811 	msr	BASEPRI, r0
	isb
   14068:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1406c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14070:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14072:	b662      	cpsie	i
	isb
   14074:	f3bf 8f6f 	isb	sy

	bx	lr
   14078:	4770      	bx	lr
   1407a:	bf00      	nop

0001407c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1407c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1407e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14080:	f381 8811 	msr	BASEPRI, r1

	wfe
   14084:	bf20      	wfe

	msr	BASEPRI, r0
   14086:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1408a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1408c:	4770      	bx	lr
   1408e:	bf00      	nop

00014090 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14090:	bf30      	wfi
    b z_SysNmiOnReset
   14092:	f7ff bffd 	b.w	14090 <z_SysNmiOnReset>
   14096:	bf00      	nop

00014098 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14098:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1409a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1409c:	4a0b      	ldr	r2, [pc, #44]	; (140cc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1409e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   140a0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   140a2:	bf1e      	ittt	ne
	movne	r1, #0
   140a4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   140a6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   140a8:	f00c fc57 	blne	2095a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   140ac:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   140ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   140b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   140b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   140ba:	4905      	ldr	r1, [pc, #20]	; (140d0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   140bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   140be:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   140c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   140c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   140c6:	4903      	ldr	r1, [pc, #12]	; (140d4 <_isr_wrapper+0x3c>)
	bx r1
   140c8:	4708      	bx	r1
   140ca:	0000      	.short	0x0000
	ldr r2, =_kernel
   140cc:	20002a3c 	.word	0x20002a3c
	ldr r1, =_sw_isr_table
   140d0:	000213c4 	.word	0x000213c4
	ldr r1, =z_arm_int_exit
   140d4:	0001411d 	.word	0x0001411d

000140d8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   140d8:	f009 fd9d 	bl	1dc16 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   140dc:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   140de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   140e2:	4808      	ldr	r0, [pc, #32]	; (14104 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   140e4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   140e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   140ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   140ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   140f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   140f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   140f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   140fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   140fe:	f7ff ff4d 	bl	13f9c <z_arm_prep_c>
   14102:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   14104:	20005c60 	.word	0x20005c60

00014108 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14108:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1410c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14110:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14112:	4672      	mov	r2, lr
	bl z_arm_fault
   14114:	f000 f872 	bl	141fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14118:	bd01      	pop	{r0, pc}
   1411a:	bf00      	nop

0001411c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1411c:	4b04      	ldr	r3, [pc, #16]	; (14130 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1411e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14120:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   14122:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14124:	d003      	beq.n	1412e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14126:	4903      	ldr	r1, [pc, #12]	; (14134 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1412c:	600a      	str	r2, [r1, #0]

0001412e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1412e:	4770      	bx	lr
	ldr r3, =_kernel
   14130:	20002a3c 	.word	0x20002a3c
	ldr r1, =_SCS_ICSR
   14134:	e000ed04 	.word	0xe000ed04

00014138 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14138:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1413a:	4b17      	ldr	r3, [pc, #92]	; (14198 <mem_manage_fault+0x60>)
{
   1413c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1413e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   14144:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14146:	0790      	lsls	r0, r2, #30
   14148:	d516      	bpl.n	14178 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   1414a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1414c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1414e:	0612      	lsls	r2, r2, #24
   14150:	d504      	bpl.n	1415c <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   14152:	b119      	cbz	r1, 1415c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1415a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1415c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1415e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14162:	06d2      	lsls	r2, r2, #27
   14164:	d40b      	bmi.n	1417e <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14166:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14168:	4a0b      	ldr	r2, [pc, #44]	; (14198 <mem_manage_fault+0x60>)
   1416a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1416c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14170:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   14172:	2300      	movs	r3, #0
   14174:	7023      	strb	r3, [r4, #0]

	return reason;
}
   14176:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   14178:	f06f 0015 	mvn.w	r0, #21
   1417c:	e7ee      	b.n	1415c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1417e:	685b      	ldr	r3, [r3, #4]
   14180:	051b      	lsls	r3, r3, #20
   14182:	d5f0      	bpl.n	14166 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14184:	4629      	mov	r1, r5
   14186:	f7ff fed5 	bl	13f34 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1418a:	2800      	cmp	r0, #0
   1418c:	d0eb      	beq.n	14166 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1418e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14192:	2002      	movs	r0, #2
   14194:	e7e8      	b.n	14168 <mem_manage_fault+0x30>
   14196:	bf00      	nop
   14198:	e000ed00 	.word	0xe000ed00

0001419c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1419c:	4b0d      	ldr	r3, [pc, #52]	; (141d4 <bus_fault.isra.0+0x38>)
   1419e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   141a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   141a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   141a4:	0592      	lsls	r2, r2, #22
   141a6:	d508      	bpl.n	141ba <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   141a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   141aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   141ac:	0412      	lsls	r2, r2, #16
   141ae:	d504      	bpl.n	141ba <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   141b0:	b118      	cbz	r0, 141ba <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   141b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   141b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   141b8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   141ba:	4b06      	ldr	r3, [pc, #24]	; (141d4 <bus_fault.isra.0+0x38>)
   141bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   141be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   141c0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   141c2:	bf58      	it	pl
   141c4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   141c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
   141c8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   141ca:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   141ce:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   141d0:	7008      	strb	r0, [r1, #0]

	return reason;
}
   141d2:	4770      	bx	lr
   141d4:	e000ed00 	.word	0xe000ed00

000141d8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   141d8:	4b07      	ldr	r3, [pc, #28]	; (141f8 <usage_fault.isra.0+0x20>)
   141da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   141dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   141de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   141e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   141e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   141e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   141e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   141e8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   141ec:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   141f0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   141f2:	2000      	movs	r0, #0
   141f4:	4770      	bx	lr
   141f6:	bf00      	nop
   141f8:	e000ed00 	.word	0xe000ed00

000141fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   141fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   141fe:	4b37      	ldr	r3, [pc, #220]	; (142dc <z_arm_fault+0xe0>)
   14200:	685b      	ldr	r3, [r3, #4]
{
   14202:	b08a      	sub	sp, #40	; 0x28
   14204:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14206:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1420a:	2500      	movs	r5, #0
   1420c:	f385 8811 	msr	BASEPRI, r5
   14210:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14214:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   14218:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   1421c:	d111      	bne.n	14242 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1421e:	f002 010c 	and.w	r1, r2, #12
   14222:	2908      	cmp	r1, #8
   14224:	d00d      	beq.n	14242 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14226:	0711      	lsls	r1, r2, #28
   14228:	d401      	bmi.n	1422e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1422a:	4606      	mov	r6, r0
			*nested_exc = true;
   1422c:	2501      	movs	r5, #1
	*recoverable = false;
   1422e:	2200      	movs	r2, #0
   14230:	3b03      	subs	r3, #3
   14232:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   14236:	2b03      	cmp	r3, #3
   14238:	d848      	bhi.n	142cc <z_arm_fault+0xd0>
   1423a:	e8df f003 	tbb	[pc, r3]
   1423e:	3f04      	.short	0x3f04
   14240:	3c43      	.short	0x3c43
		return NULL;
   14242:	462e      	mov	r6, r5
   14244:	e7f3      	b.n	1422e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14246:	4b25      	ldr	r3, [pc, #148]	; (142dc <z_arm_fault+0xe0>)
   14248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1424a:	0792      	lsls	r2, r2, #30
   1424c:	d43e      	bmi.n	142cc <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1424e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14250:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   14254:	d009      	beq.n	1426a <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
   14256:	3328      	adds	r3, #40	; 0x28
   14258:	781b      	ldrb	r3, [r3, #0]
   1425a:	b1f3      	cbz	r3, 1429a <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1425c:	f10d 0207 	add.w	r2, sp, #7
   14260:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14262:	4630      	mov	r0, r6
   14264:	f7ff ff68 	bl	14138 <mem_manage_fault>
		reason = usage_fault(esf);
   14268:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1426a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1426e:	b993      	cbnz	r3, 14296 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14270:	2220      	movs	r2, #32
   14272:	4631      	mov	r1, r6
   14274:	a802      	add	r0, sp, #8
   14276:	f009 fc7b 	bl	1db70 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1427a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1427c:	b345      	cbz	r5, 142d0 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1427e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14282:	b922      	cbnz	r2, 1428e <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14284:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14288:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1428c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1428e:	a902      	add	r1, sp, #8
   14290:	4620      	mov	r0, r4
   14292:	f009 fc33 	bl	1dafc <z_arm_fatal_error>
}
   14296:	b00a      	add	sp, #40	; 0x28
   14298:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   1429a:	4b11      	ldr	r3, [pc, #68]	; (142e0 <z_arm_fault+0xe4>)
   1429c:	781b      	ldrb	r3, [r3, #0]
   1429e:	b12b      	cbz	r3, 142ac <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
   142a0:	f10d 0107 	add.w	r1, sp, #7
   142a4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   142a6:	f7ff ff79 	bl	1419c <bus_fault.isra.0>
   142aa:	e7dd      	b.n	14268 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   142ac:	4b0d      	ldr	r3, [pc, #52]	; (142e4 <z_arm_fault+0xe8>)
   142ae:	8818      	ldrh	r0, [r3, #0]
   142b0:	b284      	uxth	r4, r0
   142b2:	2c00      	cmp	r4, #0
   142b4:	d0d9      	beq.n	1426a <z_arm_fault+0x6e>
		reason = usage_fault(esf);
   142b6:	f7ff ff8f 	bl	141d8 <usage_fault.isra.0>
   142ba:	e7d5      	b.n	14268 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
   142bc:	f10d 0207 	add.w	r2, sp, #7
   142c0:	2100      	movs	r1, #0
   142c2:	e7ce      	b.n	14262 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   142c4:	f10d 0107 	add.w	r1, sp, #7
   142c8:	2000      	movs	r0, #0
   142ca:	e7ec      	b.n	142a6 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   142cc:	2400      	movs	r4, #0
   142ce:	e7cc      	b.n	1426a <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   142d0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   142d4:	f023 0301 	bic.w	r3, r3, #1
   142d8:	e7d8      	b.n	1428c <z_arm_fault+0x90>
   142da:	bf00      	nop
   142dc:	e000ed00 	.word	0xe000ed00
   142e0:	e000ed29 	.word	0xe000ed29
   142e4:	e000ed2a 	.word	0xe000ed2a

000142e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   142e8:	4a02      	ldr	r2, [pc, #8]	; (142f4 <z_arm_fault_init+0xc>)
   142ea:	6953      	ldr	r3, [r2, #20]
   142ec:	f043 0310 	orr.w	r3, r3, #16
   142f0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   142f2:	4770      	bx	lr
   142f4:	e000ed00 	.word	0xe000ed00

000142f8 <z_arm_interrupt_init>:
   142f8:	4804      	ldr	r0, [pc, #16]	; (1430c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   142fa:	2300      	movs	r3, #0
   142fc:	2140      	movs	r1, #64	; 0x40
   142fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14300:	3301      	adds	r3, #1
   14302:	2b27      	cmp	r3, #39	; 0x27
   14304:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14308:	d1f9      	bne.n	142fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1430a:	4770      	bx	lr
   1430c:	e000e100 	.word	0xe000e100

00014310 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14310:	b508      	push	{r3, lr}
	if (_current == thread) {
   14312:	4b0e      	ldr	r3, [pc, #56]	; (1434c <z_impl_k_thread_abort+0x3c>)
   14314:	689b      	ldr	r3, [r3, #8]
   14316:	4283      	cmp	r3, r0
   14318:	d107      	bne.n	1432a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1431a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1431e:	b193      	cbz	r3, 14346 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14320:	4a0b      	ldr	r2, [pc, #44]	; (14350 <z_impl_k_thread_abort+0x40>)
   14322:	6853      	ldr	r3, [r2, #4]
   14324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14328:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   1432a:	f007 f859 	bl	1b3e0 <z_thread_single_abort>
	__asm__ volatile(
   1432e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14332:	f3ef 8011 	mrs	r0, BASEPRI
   14336:	f383 8811 	msr	BASEPRI, r3
   1433a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   1433e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14342:	f00c bc88 	b.w	20c56 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   14346:	f007 faf3 	bl	1b930 <z_self_abort>
   1434a:	bf00      	nop
   1434c:	20002a3c 	.word	0x20002a3c
   14350:	e000ed00 	.word	0xe000ed00

00014354 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   14356:	4b08      	ldr	r3, [pc, #32]	; (14378 <z_arm_configure_static_mpu_regions+0x24>)
   14358:	9301      	str	r3, [sp, #4]
   1435a:	4b08      	ldr	r3, [pc, #32]	; (1437c <z_arm_configure_static_mpu_regions+0x28>)
   1435c:	9302      	str	r3, [sp, #8]
   1435e:	4b08      	ldr	r3, [pc, #32]	; (14380 <z_arm_configure_static_mpu_regions+0x2c>)
   14360:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
   14362:	ab01      	add	r3, sp, #4
   14364:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14366:	4a07      	ldr	r2, [pc, #28]	; (14384 <z_arm_configure_static_mpu_regions+0x30>)
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <z_arm_configure_static_mpu_regions+0x34>)
   1436a:	2101      	movs	r1, #1
   1436c:	4668      	mov	r0, sp
   1436e:	f000 f8a7 	bl	144c0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14372:	b005      	add	sp, #20
   14374:	f85d fb04 	ldr.w	pc, [sp], #4
   14378:	20000000 	.word	0x20000000
   1437c:	00000000 	.word	0x00000000
   14380:	060b0000 	.word	0x060b0000
   14384:	20000000 	.word	0x20000000
   14388:	20010000 	.word	0x20010000

0001438c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1438c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
   1438e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   14390:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
   14392:	9301      	str	r3, [sp, #4]
   14394:	4b06      	ldr	r3, [pc, #24]	; (143b0 <z_arm_configure_dynamic_mpu_regions+0x24>)
   14396:	2220      	movs	r2, #32
   14398:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1439c:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
   1439e:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
   143a0:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
   143a2:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
   143a4:	f000 f896 	bl	144d4 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   143a8:	b005      	add	sp, #20
   143aa:	f85d fb04 	ldr.w	pc, [sp], #4
   143ae:	bf00      	nop
   143b0:	150b0000 	.word	0x150b0000

000143b4 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   143b4:	f8df c084 	ldr.w	ip, [pc, #132]	; 1443c <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   143b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ba:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   143bc:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
   143be:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
   143c0:	428f      	cmp	r7, r1
   143c2:	db00      	blt.n	143c6 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   143c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
   143c6:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
   143ca:	f8de 4004 	ldr.w	r4, [lr, #4]
   143ce:	b394      	cbz	r4, 14436 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
   143d0:	b143      	cbz	r3, 143e4 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   143d2:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   143d4:	422c      	tst	r4, r5
   143d6:	d119      	bne.n	1440c <mpu_configure_regions+0x58>
		&&
   143d8:	2c1f      	cmp	r4, #31
   143da:	d917      	bls.n	1440c <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
   143dc:	f8de 2000 	ldr.w	r2, [lr]
		&&
   143e0:	4215      	tst	r5, r2
   143e2:	d113      	bne.n	1440c <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   143e4:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
   143e6:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
   143e8:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   143ec:	f8de 0008 	ldr.w	r0, [lr, #8]
   143f0:	d90f      	bls.n	14412 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   143f2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   143f6:	d80e      	bhi.n	14416 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   143f8:	3c01      	subs	r4, #1
   143fa:	fab4 f484 	clz	r4, r4
   143fe:	f1c4 041f 	rsb	r4, r4, #31
   14402:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14404:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14406:	ea44 0400 	orr.w	r4, r4, r0
   1440a:	d906      	bls.n	1441a <mpu_configure_regions+0x66>
			return -EINVAL;
   1440c:	f06f 0015 	mvn.w	r0, #21
   14410:	e7d8      	b.n	143c4 <mpu_configure_regions+0x10>
		return REGION_32B;
   14412:	2408      	movs	r4, #8
   14414:	e7f6      	b.n	14404 <mpu_configure_regions+0x50>
		return REGION_4G;
   14416:	243e      	movs	r4, #62	; 0x3e
   14418:	e7f4      	b.n	14404 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1441a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   1441e:	4315      	orrs	r5, r2
   14420:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14424:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   14428:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
   1442c:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1442e:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14432:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
   14436:	3701      	adds	r7, #1
   14438:	e7c2      	b.n	143c0 <mpu_configure_regions+0xc>
   1443a:	bf00      	nop
   1443c:	e000ed90 	.word	0xe000ed90

00014440 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14440:	4b03      	ldr	r3, [pc, #12]	; (14450 <arm_core_mpu_enable+0x10>)
   14442:	2205      	movs	r2, #5
   14444:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1444a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1444e:	4770      	bx	lr
   14450:	e000ed90 	.word	0xe000ed90

00014454 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   14454:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14458:	4b01      	ldr	r3, [pc, #4]	; (14460 <arm_core_mpu_disable+0xc>)
   1445a:	2200      	movs	r2, #0
   1445c:	605a      	str	r2, [r3, #4]
}
   1445e:	4770      	bx	lr
   14460:	e000ed90 	.word	0xe000ed90

00014464 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14464:	4913      	ldr	r1, [pc, #76]	; (144b4 <arm_mpu_init+0x50>)
   14466:	6808      	ldr	r0, [r1, #0]
   14468:	2808      	cmp	r0, #8
{
   1446a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1446c:	d81e      	bhi.n	144ac <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1446e:	f7ff fff1 	bl	14454 <arm_core_mpu_disable>
	MPU->RNR = index;
   14472:	4c11      	ldr	r4, [pc, #68]	; (144b8 <arm_mpu_init+0x54>)
   14474:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14476:	2200      	movs	r2, #0
   14478:	4290      	cmp	r0, r2
   1447a:	f101 010c 	add.w	r1, r1, #12
   1447e:	d105      	bne.n	1448c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14480:	4b0e      	ldr	r3, [pc, #56]	; (144bc <arm_mpu_init+0x58>)
   14482:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   14484:	f7ff ffdc 	bl	14440 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   14488:	2000      	movs	r0, #0
}
   1448a:	bd10      	pop	{r4, pc}
   1448c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1448e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   14492:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14496:	4313      	orrs	r3, r2
   14498:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1449c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1449e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   144a2:	f043 0301 	orr.w	r3, r3, #1
   144a6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   144a8:	3201      	adds	r2, #1
   144aa:	e7e5      	b.n	14478 <arm_mpu_init+0x14>
		return -1;
   144ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144b0:	e7eb      	b.n	1448a <arm_mpu_init+0x26>
   144b2:	bf00      	nop
   144b4:	00021910 	.word	0x00021910
   144b8:	e000ed90 	.word	0xe000ed90
   144bc:	20002eb1 	.word	0x20002eb1

000144c0 <arm_core_mpu_configure_static_mpu_regions>:
{
   144c0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   144c2:	4c03      	ldr	r4, [pc, #12]	; (144d0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   144c4:	2301      	movs	r3, #1
   144c6:	7822      	ldrb	r2, [r4, #0]
   144c8:	f7ff ff74 	bl	143b4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   144cc:	7020      	strb	r0, [r4, #0]
}
   144ce:	bd10      	pop	{r4, pc}
   144d0:	20002eb1 	.word	0x20002eb1

000144d4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   144d4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   144d6:	4a08      	ldr	r2, [pc, #32]	; (144f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   144d8:	2300      	movs	r3, #0
   144da:	7812      	ldrb	r2, [r2, #0]
   144dc:	f7ff ff6a 	bl	143b4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   144e0:	f110 0f16 	cmn.w	r0, #22
   144e4:	d003      	beq.n	144ee <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   144e6:	4b05      	ldr	r3, [pc, #20]	; (144fc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   144e8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   144ea:	2807      	cmp	r0, #7
   144ec:	dd00      	ble.n	144f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   144ee:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   144f0:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   144f2:	611a      	str	r2, [r3, #16]
   144f4:	3001      	adds	r0, #1
   144f6:	e7f8      	b.n	144ea <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   144f8:	20002eb1 	.word	0x20002eb1
   144fc:	e000ed90 	.word	0xe000ed90

00014500 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14500:	4b01      	ldr	r3, [pc, #4]	; (14508 <__stdout_hook_install+0x8>)
   14502:	6018      	str	r0, [r3, #0]
}
   14504:	4770      	bx	lr
   14506:	bf00      	nop
   14508:	200006d8 	.word	0x200006d8

0001450c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   1450c:	3902      	subs	r1, #2
   1450e:	2901      	cmp	r1, #1
   14510:	d802      	bhi.n	14518 <z_impl_zephyr_fputc+0xc>
   14512:	4b03      	ldr	r3, [pc, #12]	; (14520 <z_impl_zephyr_fputc+0x14>)
   14514:	681b      	ldr	r3, [r3, #0]
   14516:	4718      	bx	r3
}
   14518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1451c:	4770      	bx	lr
   1451e:	bf00      	nop
   14520:	200006d8 	.word	0x200006d8

00014524 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   14524:	b40f      	push	{r0, r1, r2, r3}
   14526:	b507      	push	{r0, r1, r2, lr}
   14528:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   1452a:	2102      	movs	r1, #2
{
   1452c:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   14530:	4804      	ldr	r0, [pc, #16]	; (14544 <printf+0x20>)
	va_start(vargs, format);
   14532:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   14534:	f7fe fde2 	bl	130fc <cbvprintf>
	va_end(vargs);

	return r;
}
   14538:	b003      	add	sp, #12
   1453a:	f85d eb04 	ldr.w	lr, [sp], #4
   1453e:	b004      	add	sp, #16
   14540:	4770      	bx	lr
   14542:	bf00      	nop
   14544:	0001dc13 	.word	0x0001dc13

00014548 <nordicsemi_nrf52_init>:
   14548:	f04f 0340 	mov.w	r3, #64	; 0x40
   1454c:	f3ef 8211 	mrs	r2, BASEPRI
   14550:	f383 8811 	msr	BASEPRI, r3
   14554:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14558:	4906      	ldr	r1, [pc, #24]	; (14574 <nordicsemi_nrf52_init+0x2c>)
   1455a:	2301      	movs	r3, #1
   1455c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14560:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14564:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14568:	f382 8811 	msr	BASEPRI, r2
   1456c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14570:	2000      	movs	r0, #0
   14572:	4770      	bx	lr
   14574:	4001e000 	.word	0x4001e000

00014578 <sys_arch_reboot>:
    *p_gpregret = val;
   14578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1457c:	b2c0      	uxtb	r0, r0
   1457e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14582:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14586:	4905      	ldr	r1, [pc, #20]	; (1459c <sys_arch_reboot+0x24>)
   14588:	4b05      	ldr	r3, [pc, #20]	; (145a0 <sys_arch_reboot+0x28>)
   1458a:	68ca      	ldr	r2, [r1, #12]
   1458c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14590:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14592:	60cb      	str	r3, [r1, #12]
   14594:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14598:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1459a:	e7fd      	b.n	14598 <sys_arch_reboot+0x20>
   1459c:	e000ed00 	.word	0xe000ed00
   145a0:	05fa0004 	.word	0x05fa0004

000145a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   145a4:	b120      	cbz	r0, 145b0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   145a6:	4b03      	ldr	r3, [pc, #12]	; (145b4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   145a8:	0180      	lsls	r0, r0, #6
   145aa:	f043 0301 	orr.w	r3, r3, #1
   145ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   145b0:	4770      	bx	lr
   145b2:	bf00      	nop
   145b4:	000215e0 	.word	0x000215e0

000145b8 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   145b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   145bc:	4f5b      	ldr	r7, [pc, #364]	; (1472c <ecc_thread+0x174>)
	return z_impl_k_sem_take(sem, timeout);
   145be:	f8df 8184 	ldr.w	r8, [pc, #388]	; 14744 <ecc_thread+0x18c>
   145c2:	463e      	mov	r6, r7
   145c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145cc:	4640      	mov	r0, r8
   145ce:	f007 f8b1 	bl	1b734 <z_impl_k_sem_take>
   145d2:	f3bf 8f5b 	dmb	ish
   145d6:	683c      	ldr	r4, [r7, #0]
   145d8:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   145dc:	f014 0401 	ands.w	r4, r4, #1
   145e0:	d055      	beq.n	1468e <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   145e2:	f8df 915c 	ldr.w	r9, [pc, #348]	; 14740 <ecc_thread+0x188>
   145e6:	4c52      	ldr	r4, [pc, #328]	; (14730 <ecc_thread+0x178>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   145e8:	4d52      	ldr	r5, [pc, #328]	; (14734 <ecc_thread+0x17c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   145ea:	4853      	ldr	r0, [pc, #332]	; (14738 <ecc_thread+0x180>)
   145ec:	464a      	mov	r2, r9
   145ee:	4621      	mov	r1, r4
   145f0:	f008 f9d1 	bl	1c996 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   145f4:	2800      	cmp	r0, #0
   145f6:	d03e      	beq.n	14676 <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   145f8:	2220      	movs	r2, #32
   145fa:	4629      	mov	r1, r5
   145fc:	4620      	mov	r0, r4
   145fe:	f009 faa7 	bl	1db50 <memcmp>
   14602:	2800      	cmp	r0, #0
   14604:	d0f1      	beq.n	145ea <ecc_thread+0x32>
	return 0;
   14606:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1460a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1460e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14612:	2001      	movs	r0, #1
   14614:	f001 fc96 	bl	15f44 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   14618:	f100 0508 	add.w	r5, r0, #8
   1461c:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1461e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   14620:	4628      	mov	r0, r5
   14622:	f00b ff9f 	bl	20564 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   14626:	233e      	movs	r3, #62	; 0x3e
   14628:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1462a:	2342      	movs	r3, #66	; 0x42
   1462c:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   1462e:	2101      	movs	r1, #1
   14630:	4628      	mov	r0, r5
   14632:	f00b ff97 	bl	20564 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   14636:	2308      	movs	r3, #8
   14638:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   1463a:	2141      	movs	r1, #65	; 0x41
   1463c:	4628      	mov	r0, r5
   1463e:	f00b ff91 	bl	20564 <net_buf_simple_add>
   14642:	4605      	mov	r5, r0
	evt->status = status;
   14644:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   14648:	f1b9 0f00 	cmp.w	r9, #0
   1464c:	d016      	beq.n	1467c <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1464e:	2240      	movs	r2, #64	; 0x40
   14650:	2100      	movs	r1, #0
   14652:	f009 fab8 	bl	1dbc6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14656:	f3bf 8f5b 	dmb	ish
   1465a:	e856 3f00 	ldrex	r3, [r6]
   1465e:	f023 0301 	bic.w	r3, r3, #1
   14662:	e846 3200 	strex	r2, r3, [r6]
   14666:	2a00      	cmp	r2, #0
   14668:	d1f7      	bne.n	1465a <ecc_thread+0xa2>
   1466a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1466e:	4620      	mov	r0, r4
	bt_recv(buf);
   14670:	f001 f874 	bl	1575c <bt_recv>
	while (true) {
   14674:	e7a6      	b.n	145c4 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   14676:	f04f 091f 	mov.w	r9, #31
   1467a:	e7c6      	b.n	1460a <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
   1467c:	492e      	ldr	r1, [pc, #184]	; (14738 <ecc_thread+0x180>)
   1467e:	f009 fb20 	bl	1dcc2 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
   14682:	492e      	ldr	r1, [pc, #184]	; (1473c <ecc_thread+0x184>)
   14684:	f105 0021 	add.w	r0, r5, #33	; 0x21
   14688:	f009 fb1b 	bl	1dcc2 <sys_memcpy_swap.constprop.0>
   1468c:	e7e3      	b.n	14656 <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1468e:	f3bf 8f5b 	dmb	ish
   14692:	683b      	ldr	r3, [r7, #0]
   14694:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   14698:	079b      	lsls	r3, r3, #30
   1469a:	d593      	bpl.n	145c4 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
   1469c:	4928      	ldr	r1, [pc, #160]	; (14740 <ecc_thread+0x188>)
   1469e:	4826      	ldr	r0, [pc, #152]	; (14738 <ecc_thread+0x180>)
   146a0:	f009 f848 	bl	1d734 <uECC_valid_public_key>
	if (ret < 0) {
   146a4:	2800      	cmp	r0, #0
   146a6:	db07      	blt.n	146b8 <ecc_thread+0x100>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
   146a8:	4a23      	ldr	r2, [pc, #140]	; (14738 <ecc_thread+0x180>)
   146aa:	4b25      	ldr	r3, [pc, #148]	; (14740 <ecc_thread+0x188>)
   146ac:	f1a2 0120 	sub.w	r1, r2, #32
   146b0:	4610      	mov	r0, r2
   146b2:	f008 f9bf 	bl	1ca34 <uECC_shared_secret>
   146b6:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   146b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146c0:	2001      	movs	r0, #1
   146c2:	f001 fc3f 	bl	15f44 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   146c6:	f100 0908 	add.w	r9, r0, #8
   146ca:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   146cc:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   146ce:	4648      	mov	r0, r9
   146d0:	f00b ff48 	bl	20564 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   146d4:	233e      	movs	r3, #62	; 0x3e
   146d6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   146d8:	2322      	movs	r3, #34	; 0x22
   146da:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   146dc:	2101      	movs	r1, #1
   146de:	4648      	mov	r0, r9
   146e0:	f00b ff40 	bl	20564 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   146e4:	2309      	movs	r3, #9
   146e6:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   146e8:	2121      	movs	r1, #33	; 0x21
   146ea:	4648      	mov	r0, r9
   146ec:	f00b ff3a 	bl	20564 <net_buf_simple_add>
   146f0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   146f2:	3001      	adds	r0, #1
   146f4:	b99c      	cbnz	r4, 1471e <ecc_thread+0x166>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   146f6:	221f      	movs	r2, #31
   146f8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   146fa:	21ff      	movs	r1, #255	; 0xff
   146fc:	2220      	movs	r2, #32
   146fe:	f009 fa62 	bl	1dbc6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14702:	f3bf 8f5b 	dmb	ish
   14706:	e856 3f00 	ldrex	r3, [r6]
   1470a:	f023 0302 	bic.w	r3, r3, #2
   1470e:	e846 3200 	strex	r2, r3, [r6]
   14712:	2a00      	cmp	r2, #0
   14714:	d1f7      	bne.n	14706 <ecc_thread+0x14e>
   14716:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1471a:	4628      	mov	r0, r5
   1471c:	e7a8      	b.n	14670 <ecc_thread+0xb8>
		evt->status = 0U;
   1471e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   14720:	4905      	ldr	r1, [pc, #20]	; (14738 <ecc_thread+0x180>)
		evt->status = 0U;
   14722:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   14724:	f009 facd 	bl	1dcc2 <sys_memcpy_swap.constprop.0>
   14728:	e7eb      	b.n	14702 <ecc_thread+0x14a>
   1472a:	bf00      	nop
   1472c:	200028dc 	.word	0x200028dc
   14730:	20002eb2 	.word	0x20002eb2
   14734:	000219e0 	.word	0x000219e0
   14738:	20002ed2 	.word	0x20002ed2
   1473c:	20002ef2 	.word	0x20002ef2
   14740:	00021930 	.word	0x00021930
   14744:	20000974 	.word	0x20000974

00014748 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   14748:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   1474a:	7d05      	ldrb	r5, [r0, #20]
   1474c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   1474e:	b9ad      	cbnz	r5, 1477c <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   14750:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   14752:	881a      	ldrh	r2, [r3, #0]
   14754:	f242 0125 	movw	r1, #8229	; 0x2025
   14758:	428a      	cmp	r2, r1
   1475a:	d017      	beq.n	1478c <bt_hci_ecc_send+0x44>
   1475c:	f242 0126 	movw	r1, #8230	; 0x2026
   14760:	428a      	cmp	r2, r1
   14762:	d03c      	beq.n	147de <bt_hci_ecc_send+0x96>
   14764:	f242 0101 	movw	r1, #8193	; 0x2001
   14768:	428a      	cmp	r2, r1
   1476a:	d107      	bne.n	1477c <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   1476c:	78da      	ldrb	r2, [r3, #3]
   1476e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   14772:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   14774:	791a      	ldrb	r2, [r3, #4]
   14776:	f022 0201 	bic.w	r2, r2, #1
   1477a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   1477c:	4b31      	ldr	r3, [pc, #196]	; (14844 <bt_hci_ecc_send+0xfc>)
   1477e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   14782:	4620      	mov	r0, r4
   14784:	691b      	ldr	r3, [r3, #16]
}
   14786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   1478a:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
   1478c:	2103      	movs	r1, #3
   1478e:	3008      	adds	r0, #8
   14790:	f00b ff07 	bl	205a2 <net_buf_simple_pull>
	net_buf_unref(buf);
   14794:	4620      	mov	r0, r4
   14796:	f004 fe55 	bl	19444 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1479a:	f3bf 8f5b 	dmb	ish
   1479e:	4b2a      	ldr	r3, [pc, #168]	; (14848 <bt_hci_ecc_send+0x100>)
   147a0:	681a      	ldr	r2, [r3, #0]
   147a2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   147a6:	0790      	lsls	r0, r2, #30
   147a8:	d507      	bpl.n	147ba <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   147aa:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   147ac:	4629      	mov	r1, r5
   147ae:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   147b2:	f009 fa62 	bl	1dc7a <send_cmd_status>
}
   147b6:	2000      	movs	r0, #0
   147b8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   147ba:	f3bf 8f5b 	dmb	ish
   147be:	e853 2f00 	ldrex	r2, [r3]
   147c2:	f042 0101 	orr.w	r1, r2, #1
   147c6:	e843 1000 	strex	r0, r1, [r3]
   147ca:	2800      	cmp	r0, #0
   147cc:	d1f7      	bne.n	147be <bt_hci_ecc_send+0x76>
   147ce:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   147d2:	07d1      	lsls	r1, r2, #31
   147d4:	d4e9      	bmi.n	147aa <bt_hci_ecc_send+0x62>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   147d6:	481d      	ldr	r0, [pc, #116]	; (1484c <bt_hci_ecc_send+0x104>)
   147d8:	f006 ff86 	bl	1b6e8 <z_impl_k_sem_give>
}
   147dc:	e7e6      	b.n	147ac <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
   147de:	2103      	movs	r1, #3
   147e0:	3008      	adds	r0, #8
   147e2:	f00b fede 	bl	205a2 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147e6:	f3bf 8f5b 	dmb	ish
   147ea:	4b17      	ldr	r3, [pc, #92]	; (14848 <bt_hci_ecc_send+0x100>)
   147ec:	681a      	ldr	r2, [r3, #0]
   147ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   147f2:	07d2      	lsls	r2, r2, #31
   147f4:	d507      	bpl.n	14806 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   147f6:	250c      	movs	r5, #12
	net_buf_unref(buf);
   147f8:	4620      	mov	r0, r4
   147fa:	f004 fe23 	bl	19444 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   147fe:	4629      	mov	r1, r5
   14800:	f242 0026 	movw	r0, #8230	; 0x2026
   14804:	e7d5      	b.n	147b2 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
   14806:	89a2      	ldrh	r2, [r4, #12]
   14808:	2a3f      	cmp	r2, #63	; 0x3f
   1480a:	d919      	bls.n	14840 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1480c:	f3bf 8f5b 	dmb	ish
   14810:	e853 2f00 	ldrex	r2, [r3]
   14814:	f042 0102 	orr.w	r1, r2, #2
   14818:	e843 1000 	strex	r0, r1, [r3]
   1481c:	2800      	cmp	r0, #0
   1481e:	d1f7      	bne.n	14810 <bt_hci_ecc_send+0xc8>
   14820:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   14824:	0793      	lsls	r3, r2, #30
   14826:	d4e6      	bmi.n	147f6 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
   14828:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
   1482a:	4809      	ldr	r0, [pc, #36]	; (14850 <bt_hci_ecc_send+0x108>)
   1482c:	f009 fa49 	bl	1dcc2 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
   14830:	4808      	ldr	r0, [pc, #32]	; (14854 <bt_hci_ecc_send+0x10c>)
   14832:	3120      	adds	r1, #32
   14834:	f009 fa45 	bl	1dcc2 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
   14838:	4804      	ldr	r0, [pc, #16]	; (1484c <bt_hci_ecc_send+0x104>)
   1483a:	f006 ff55 	bl	1b6e8 <z_impl_k_sem_give>
}
   1483e:	e7db      	b.n	147f8 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
   14840:	2512      	movs	r5, #18
   14842:	e7d9      	b.n	147f8 <bt_hci_ecc_send+0xb0>
   14844:	200003c8 	.word	0x200003c8
   14848:	200028dc 	.word	0x200028dc
   1484c:	20000974 	.word	0x20000974
   14850:	20002ed2 	.word	0x20002ed2
   14854:	20002ef2 	.word	0x20002ef2

00014858 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   14858:	b510      	push	{r4, lr}
   1485a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1485c:	4c0c      	ldr	r4, [pc, #48]	; (14890 <bt_hci_ecc_init+0x38>)
   1485e:	490d      	ldr	r1, [pc, #52]	; (14894 <bt_hci_ecc_init+0x3c>)
   14860:	2200      	movs	r2, #0
   14862:	2300      	movs	r3, #0
   14864:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14868:	2300      	movs	r3, #0
   1486a:	220a      	movs	r2, #10
   1486c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14870:	e9cd 3301 	strd	r3, r3, [sp, #4]
   14874:	9300      	str	r3, [sp, #0]
   14876:	f44f 628a 	mov.w	r2, #1104	; 0x450
   1487a:	4b07      	ldr	r3, [pc, #28]	; (14898 <bt_hci_ecc_init+0x40>)
   1487c:	4620      	mov	r0, r4
   1487e:	f006 ffcd 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   14882:	4906      	ldr	r1, [pc, #24]	; (1489c <bt_hci_ecc_init+0x44>)
   14884:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   14886:	b008      	add	sp, #32
   14888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1488c:	f00c bacf 	b.w	20e2e <z_impl_k_thread_name_set>
   14890:	20001f90 	.word	0x20001f90
   14894:	200033e0 	.word	0x200033e0
   14898:	000145b9 	.word	0x000145b9
   1489c:	00022172 	.word	0x00022172

000148a0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   148a0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   148a2:	7802      	ldrb	r2, [r0, #0]
   148a4:	2a01      	cmp	r2, #1
{
   148a6:	4604      	mov	r4, r0
   148a8:	460b      	mov	r3, r1
	switch (src->type) {
   148aa:	d016      	beq.n	148da <uuid_to_uuid128+0x3a>
   148ac:	2a02      	cmp	r2, #2
   148ae:	d02c      	beq.n	1490a <uuid_to_uuid128+0x6a>
   148b0:	b98a      	cbnz	r2, 148d6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   148b2:	4a19      	ldr	r2, [pc, #100]	; (14918 <uuid_to_uuid128+0x78>)
   148b4:	460d      	mov	r5, r1
   148b6:	f102 0710 	add.w	r7, r2, #16
   148ba:	6810      	ldr	r0, [r2, #0]
   148bc:	6851      	ldr	r1, [r2, #4]
   148be:	462e      	mov	r6, r5
   148c0:	c603      	stmia	r6!, {r0, r1}
   148c2:	3208      	adds	r2, #8
   148c4:	42ba      	cmp	r2, r7
   148c6:	4635      	mov	r5, r6
   148c8:	d1f7      	bne.n	148ba <uuid_to_uuid128+0x1a>
   148ca:	7812      	ldrb	r2, [r2, #0]
   148cc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   148ce:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   148d0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   148d2:	0a12      	lsrs	r2, r2, #8
   148d4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   148d6:	bcf0      	pop	{r4, r5, r6, r7}
   148d8:	4770      	bx	lr
		*dst = uuid128_base;
   148da:	4a0f      	ldr	r2, [pc, #60]	; (14918 <uuid_to_uuid128+0x78>)
   148dc:	460d      	mov	r5, r1
   148de:	f102 0710 	add.w	r7, r2, #16
   148e2:	6810      	ldr	r0, [r2, #0]
   148e4:	6851      	ldr	r1, [r2, #4]
   148e6:	462e      	mov	r6, r5
   148e8:	c603      	stmia	r6!, {r0, r1}
   148ea:	3208      	adds	r2, #8
   148ec:	42ba      	cmp	r2, r7
   148ee:	4635      	mov	r5, r6
   148f0:	d1f7      	bne.n	148e2 <uuid_to_uuid128+0x42>
   148f2:	7812      	ldrb	r2, [r2, #0]
   148f4:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   148f6:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   148f8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   148fa:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   148fe:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   14900:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   14902:	0a12      	lsrs	r2, r2, #8
   14904:	7399      	strb	r1, [r3, #14]
   14906:	741a      	strb	r2, [r3, #16]
}
   14908:	e7e5      	b.n	148d6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1490a:	4601      	mov	r1, r0
}
   1490c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1490e:	2211      	movs	r2, #17
   14910:	4618      	mov	r0, r3
   14912:	f009 b92d 	b.w	1db70 <memcpy>
   14916:	bf00      	nop
   14918:	00022179 	.word	0x00022179

0001491c <le_dhkey_complete>:
{
   1491c:	b510      	push	{r4, lr}
	if (dh_key_cb) {
   1491e:	4c06      	ldr	r4, [pc, #24]	; (14938 <le_dhkey_complete+0x1c>)
   14920:	6822      	ldr	r2, [r4, #0]
   14922:	b132      	cbz	r2, 14932 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14924:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   14926:	7803      	ldrb	r3, [r0, #0]
   14928:	b923      	cbnz	r3, 14934 <le_dhkey_complete+0x18>
   1492a:	3001      	adds	r0, #1
   1492c:	4790      	blx	r2
		dh_key_cb = NULL;
   1492e:	2300      	movs	r3, #0
   14930:	6023      	str	r3, [r4, #0]
}
   14932:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   14934:	2000      	movs	r0, #0
   14936:	e7f9      	b.n	1492c <le_dhkey_complete+0x10>
   14938:	200028f8 	.word	0x200028f8

0001493c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   1493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1493e:	4f0a      	ldr	r7, [pc, #40]	; (14968 <id_find+0x2c>)
{
   14940:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14942:	2500      	movs	r5, #0
   14944:	79fb      	ldrb	r3, [r7, #7]
   14946:	b2ec      	uxtb	r4, r5
   14948:	42a3      	cmp	r3, r4
   1494a:	d802      	bhi.n	14952 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1494c:	f06f 0401 	mvn.w	r4, #1
   14950:	e008      	b.n	14964 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14952:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14956:	4439      	add	r1, r7
   14958:	4630      	mov	r0, r6
   1495a:	f009 fa54 	bl	1de06 <bt_addr_le_cmp>
   1495e:	3501      	adds	r5, #1
   14960:	2800      	cmp	r0, #0
   14962:	d1ef      	bne.n	14944 <id_find+0x8>
}
   14964:	4620      	mov	r0, r4
   14966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14968:	200003c8 	.word	0x200003c8

0001496c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1496c:	6843      	ldr	r3, [r0, #4]
{
   1496e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14970:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14972:	0558      	lsls	r0, r3, #21
   14974:	d502      	bpl.n	1497c <valid_adv_param+0x10>
		return false;
   14976:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   14978:	b003      	add	sp, #12
   1497a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1497c:	6922      	ldr	r2, [r4, #16]
   1497e:	b10a      	cbz	r2, 14984 <valid_adv_param+0x18>
   14980:	07d9      	lsls	r1, r3, #31
   14982:	d5f8      	bpl.n	14976 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14984:	4d17      	ldr	r5, [pc, #92]	; (149e4 <valid_adv_param+0x78>)
   14986:	7820      	ldrb	r0, [r4, #0]
   14988:	79eb      	ldrb	r3, [r5, #7]
   1498a:	4283      	cmp	r3, r0
   1498c:	d9f3      	bls.n	14976 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1498e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14992:	2300      	movs	r3, #0
   14994:	4669      	mov	r1, sp
   14996:	4428      	add	r0, r5
   14998:	9300      	str	r3, [sp, #0]
   1499a:	f8cd 3003 	str.w	r3, [sp, #3]
   1499e:	f009 fa32 	bl	1de06 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   149a2:	2800      	cmp	r0, #0
   149a4:	d0e7      	beq.n	14976 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   149a6:	6860      	ldr	r0, [r4, #4]
   149a8:	07c2      	lsls	r2, r0, #31
   149aa:	d406      	bmi.n	149ba <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   149ac:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   149b0:	2b08      	cmp	r3, #8
   149b2:	d802      	bhi.n	149ba <valid_adv_param+0x4e>
   149b4:	68a3      	ldr	r3, [r4, #8]
   149b6:	2b9f      	cmp	r3, #159	; 0x9f
   149b8:	d9dd      	bls.n	14976 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   149ba:	06c3      	lsls	r3, r0, #27
   149bc:	d401      	bmi.n	149c2 <valid_adv_param+0x56>
   149be:	6923      	ldr	r3, [r4, #16]
   149c0:	b943      	cbnz	r3, 149d4 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
   149c2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   149c6:	429a      	cmp	r2, r3
   149c8:	d8d5      	bhi.n	14976 <valid_adv_param+0xa>
   149ca:	2a1f      	cmp	r2, #31
   149cc:	d9d3      	bls.n	14976 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   149ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   149d2:	d8d0      	bhi.n	14976 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   149d4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   149d8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   149dc:	bf18      	it	ne
   149de:	2001      	movne	r0, #1
   149e0:	e7ca      	b.n	14978 <valid_adv_param+0xc>
   149e2:	bf00      	nop
   149e4:	200003c8 	.word	0x200003c8

000149e8 <le_pkey_complete>:
{
   149e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   149ea:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   149ec:	480f      	ldr	r0, [pc, #60]	; (14a2c <le_pkey_complete+0x44>)
   149ee:	f06f 0110 	mvn.w	r1, #16
   149f2:	f009 fa0b 	bl	1de0c <atomic_and>
	if (!evt->status) {
   149f6:	7833      	ldrb	r3, [r6, #0]
   149f8:	b943      	cbnz	r3, 14a0c <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
   149fa:	1c71      	adds	r1, r6, #1
   149fc:	480c      	ldr	r0, [pc, #48]	; (14a30 <le_pkey_complete+0x48>)
   149fe:	2240      	movs	r2, #64	; 0x40
   14a00:	f009 f8b6 	bl	1db70 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14a04:	4809      	ldr	r0, [pc, #36]	; (14a2c <le_pkey_complete+0x44>)
   14a06:	2108      	movs	r1, #8
   14a08:	f009 fa0f 	bl	1de2a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   14a0c:	4d09      	ldr	r5, [pc, #36]	; (14a34 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
   14a0e:	4f08      	ldr	r7, [pc, #32]	; (14a30 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   14a10:	682c      	ldr	r4, [r5, #0]
   14a12:	b90c      	cbnz	r4, 14a18 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
   14a14:	602c      	str	r4, [r5, #0]
}
   14a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
   14a18:	7832      	ldrb	r2, [r6, #0]
   14a1a:	6823      	ldr	r3, [r4, #0]
   14a1c:	2a00      	cmp	r2, #0
   14a1e:	bf0c      	ite	eq
   14a20:	4638      	moveq	r0, r7
   14a22:	2000      	movne	r0, #0
   14a24:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   14a26:	6864      	ldr	r4, [r4, #4]
   14a28:	e7f3      	b.n	14a12 <le_pkey_complete+0x2a>
   14a2a:	bf00      	nop
   14a2c:	20000460 	.word	0x20000460
   14a30:	20002f12 	.word	0x20002f12
   14a34:	200028fc 	.word	0x200028fc

00014a38 <hci_le_meta_event>:
{
   14a38:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14a3a:	2101      	movs	r1, #1
{
   14a3c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14a3e:	3008      	adds	r0, #8
   14a40:	f00b fdb7 	bl	205b2 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14a44:	4621      	mov	r1, r4
   14a46:	4a03      	ldr	r2, [pc, #12]	; (14a54 <hci_le_meta_event+0x1c>)
   14a48:	7800      	ldrb	r0, [r0, #0]
}
   14a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14a4e:	230a      	movs	r3, #10
   14a50:	f009 b9ac 	b.w	1ddac <handle_event>
   14a54:	00021a00 	.word	0x00021a00

00014a58 <hci_encrypt_key_refresh_complete>:
{
   14a58:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   14a5a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   14a5c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   14a60:	f001 fd54 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   14a64:	4604      	mov	r4, r0
   14a66:	b1c8      	cbz	r0, 14a9c <hci_encrypt_key_refresh_complete+0x44>
	if (evt->status) {
   14a68:	7829      	ldrb	r1, [r5, #0]
   14a6a:	b161      	cbz	r1, 14a86 <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
   14a6c:	2929      	cmp	r1, #41	; 0x29
   14a6e:	bf9a      	itte	ls
   14a70:	4b0b      	ldrls	r3, [pc, #44]	; (14aa0 <hci_encrypt_key_refresh_complete+0x48>)
   14a72:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   14a74:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   14a76:	4620      	mov	r0, r4
   14a78:	f001 fc5c 	bl	16334 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14a7c:	4620      	mov	r0, r4
}
   14a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14a82:	f009 be73 	b.w	1e76c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14a86:	7883      	ldrb	r3, [r0, #2]
   14a88:	2b01      	cmp	r3, #1
   14a8a:	d104      	bne.n	14a96 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   14a8c:	f00b fc7a 	bl	20384 <bt_smp_update_keys>
		update_sec_level(conn);
   14a90:	4620      	mov	r0, r4
   14a92:	f009 fa5c 	bl	1df4e <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   14a96:	7829      	ldrb	r1, [r5, #0]
   14a98:	2200      	movs	r2, #0
   14a9a:	e7ec      	b.n	14a76 <hci_encrypt_key_refresh_complete+0x1e>
}
   14a9c:	bd38      	pop	{r3, r4, r5, pc}
   14a9e:	bf00      	nop
   14aa0:	00022283 	.word	0x00022283

00014aa4 <hci_encrypt_change>:
{
   14aa4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   14aa6:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   14aa8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   14aac:	f001 fd2e 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   14ab0:	4604      	mov	r4, r0
   14ab2:	b1e0      	cbz	r0, 14aee <hci_encrypt_change+0x4a>
	if (evt->status) {
   14ab4:	7829      	ldrb	r1, [r5, #0]
   14ab6:	b161      	cbz	r1, 14ad2 <hci_encrypt_change+0x2e>
	switch (hci_err) {
   14ab8:	2929      	cmp	r1, #41	; 0x29
   14aba:	bf9a      	itte	ls
   14abc:	4b0c      	ldrls	r3, [pc, #48]	; (14af0 <hci_encrypt_change+0x4c>)
   14abe:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   14ac0:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   14ac2:	4620      	mov	r0, r4
   14ac4:	f001 fc36 	bl	16334 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14ac8:	4620      	mov	r0, r4
}
   14aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14ace:	f009 be4d 	b.w	1e76c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14ad2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   14ad4:	78eb      	ldrb	r3, [r5, #3]
   14ad6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   14ad8:	2a01      	cmp	r2, #1
   14ada:	d105      	bne.n	14ae8 <hci_encrypt_change+0x44>
		if (conn->encrypt) {
   14adc:	b10b      	cbz	r3, 14ae2 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   14ade:	f00b fc51 	bl	20384 <bt_smp_update_keys>
		update_sec_level(conn);
   14ae2:	4620      	mov	r0, r4
   14ae4:	f009 fa33 	bl	1df4e <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   14ae8:	7829      	ldrb	r1, [r5, #0]
   14aea:	2200      	movs	r2, #0
   14aec:	e7e9      	b.n	14ac2 <hci_encrypt_change+0x1e>
}
   14aee:	bd38      	pop	{r3, r4, r5, pc}
   14af0:	00022283 	.word	0x00022283

00014af4 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14af4:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14af6:	4c0c      	ldr	r4, [pc, #48]	; (14b28 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14af8:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14afa:	2205      	movs	r2, #5
   14afc:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   14b00:	f001 fd2c 	bl	1655c <bt_conn_lookup_state_le>
		if (!conn) {
   14b04:	b970      	cbnz	r0, 14b24 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   14b06:	4b09      	ldr	r3, [pc, #36]	; (14b2c <find_pending_connect.part.0+0x38>)
   14b08:	6818      	ldr	r0, [r3, #0]
   14b0a:	889a      	ldrh	r2, [r3, #4]
   14b0c:	9000      	str	r0, [sp, #0]
   14b0e:	799b      	ldrb	r3, [r3, #6]
   14b10:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14b14:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
   14b18:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14b1c:	2204      	movs	r2, #4
   14b1e:	4669      	mov	r1, sp
   14b20:	f001 fd1c 	bl	1655c <bt_conn_lookup_state_le>
}
   14b24:	b002      	add	sp, #8
   14b26:	bd10      	pop	{r4, pc}
   14b28:	200003c8 	.word	0x200003c8
   14b2c:	00021598 	.word	0x00021598

00014b30 <hci_rx_thread>:
{
   14b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14b34:	4f3b      	ldr	r7, [pc, #236]	; (14c24 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14b36:	f8df 8100 	ldr.w	r8, [pc, #256]	; 14c38 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14b3a:	4e3b      	ldr	r6, [pc, #236]	; (14c28 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b44:	4638      	mov	r0, r7
   14b46:	f00b fcbc 	bl	204c2 <net_buf_get>
   14b4a:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14b4c:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14b4e:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   14b50:	d039      	beq.n	14bc6 <hci_rx_thread+0x96>
   14b52:	2b03      	cmp	r3, #3
   14b54:	d120      	bne.n	14b98 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14b56:	8983      	ldrh	r3, [r0, #12]
   14b58:	2b03      	cmp	r3, #3
   14b5a:	d80c      	bhi.n	14b76 <hci_rx_thread+0x46>
   14b5c:	4933      	ldr	r1, [pc, #204]	; (14c2c <hci_rx_thread+0xfc>)
   14b5e:	4834      	ldr	r0, [pc, #208]	; (14c30 <hci_rx_thread+0x100>)
   14b60:	f240 530a 	movw	r3, #1290	; 0x50a
   14b64:	4632      	mov	r2, r6
   14b66:	f007 fac6 	bl	1c0f6 <printk>
   14b6a:	4040      	eors	r0, r0
   14b6c:	f380 8811 	msr	BASEPRI, r0
   14b70:	f04f 0003 	mov.w	r0, #3
   14b74:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   14b76:	2104      	movs	r1, #4
   14b78:	f104 0008 	add.w	r0, r4, #8
   14b7c:	f00b fd19 	bl	205b2 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14b80:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   14b82:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14b84:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14b88:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14b8a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   14b8c:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   14b90:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   14b92:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   14b94:	d003      	beq.n	14b9e <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   14b96:	4620      	mov	r0, r4
			net_buf_unref(buf);
   14b98:	f004 fc54 	bl	19444 <net_buf_unref>
			break;
   14b9c:	e010      	b.n	14bc0 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14b9e:	f001 fcb5 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   14ba2:	4605      	mov	r5, r0
   14ba4:	2800      	cmp	r0, #0
   14ba6:	d0f6      	beq.n	14b96 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   14ba8:	f001 fefa 	bl	169a0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   14bac:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   14bb0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14bb2:	4621      	mov	r1, r4
   14bb4:	4628      	mov	r0, r5
   14bb6:	f009 fd51 	bl	1e65c <bt_conn_recv>
	bt_conn_unref(conn);
   14bba:	4628      	mov	r0, r5
   14bbc:	f009 fdd6 	bl	1e76c <bt_conn_unref>
	z_impl_k_yield();
   14bc0:	f006 fd1e 	bl	1b600 <z_impl_k_yield>
	while (1) {
   14bc4:	e7ba      	b.n	14b3c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14bc6:	8983      	ldrh	r3, [r0, #12]
   14bc8:	2b01      	cmp	r3, #1
   14bca:	d80c      	bhi.n	14be6 <hci_rx_thread+0xb6>
   14bcc:	4917      	ldr	r1, [pc, #92]	; (14c2c <hci_rx_thread+0xfc>)
   14bce:	4818      	ldr	r0, [pc, #96]	; (14c30 <hci_rx_thread+0x100>)
   14bd0:	f241 4359 	movw	r3, #5209	; 0x1459
   14bd4:	4632      	mov	r2, r6
   14bd6:	f007 fa8e 	bl	1c0f6 <printk>
   14bda:	4040      	eors	r0, r0
   14bdc:	f380 8811 	msr	BASEPRI, r0
   14be0:	f04f 0003 	mov.w	r0, #3
   14be4:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   14be6:	2102      	movs	r1, #2
   14be8:	f104 0008 	add.w	r0, r4, #8
   14bec:	f00b fce1 	bl	205b2 <net_buf_simple_pull_mem>
   14bf0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14bf2:	7800      	ldrb	r0, [r0, #0]
   14bf4:	f009 f8c8 	bl	1dd88 <bt_hci_evt_get_flags>
   14bf8:	0783      	lsls	r3, r0, #30
   14bfa:	d40c      	bmi.n	14c16 <hci_rx_thread+0xe6>
   14bfc:	490d      	ldr	r1, [pc, #52]	; (14c34 <hci_rx_thread+0x104>)
   14bfe:	480c      	ldr	r0, [pc, #48]	; (14c30 <hci_rx_thread+0x100>)
   14c00:	f241 435d 	movw	r3, #5213	; 0x145d
   14c04:	4632      	mov	r2, r6
   14c06:	f007 fa76 	bl	1c0f6 <printk>
   14c0a:	4040      	eors	r0, r0
   14c0c:	f380 8811 	msr	BASEPRI, r0
   14c10:	f04f 0003 	mov.w	r0, #3
   14c14:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14c16:	7828      	ldrb	r0, [r5, #0]
   14c18:	2306      	movs	r3, #6
   14c1a:	4642      	mov	r2, r8
   14c1c:	4621      	mov	r1, r4
   14c1e:	f009 f8c5 	bl	1ddac <handle_event>
   14c22:	e7b8      	b.n	14b96 <hci_rx_thread+0x66>
   14c24:	200004d4 	.word	0x200004d4
   14c28:	0002218a 	.word	0x0002218a
   14c2c:	000221be 	.word	0x000221be
   14c30:	000221d7 	.word	0x000221d7
   14c34:	000221f4 	.word	0x000221f4
   14c38:	00021a90 	.word	0x00021a90

00014c3c <hci_num_completed_packets>:
{
   14c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   14c40:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14c42:	6887      	ldr	r7, [r0, #8]
		k_queue_append(&work_q->queue, work);
   14c44:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 14d30 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
   14c48:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   14c4a:	783b      	ldrb	r3, [r7, #0]
   14c4c:	429d      	cmp	r5, r3
   14c4e:	db01      	blt.n	14c54 <hci_num_completed_packets+0x18>
}
   14c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14c54:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   14c58:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14c5c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
   14c60:	f04f 0340 	mov.w	r3, #64	; 0x40
   14c64:	f3ef 8a11 	mrs	sl, BASEPRI
   14c68:	f383 8811 	msr	BASEPRI, r3
   14c6c:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
   14c70:	f001 fc4c 	bl	1650c <bt_conn_lookup_handle>
		if (!conn) {
   14c74:	4604      	mov	r4, r0
   14c76:	b928      	cbnz	r0, 14c84 <hci_num_completed_packets+0x48>
	__asm__ volatile(
   14c78:	f38a 8811 	msr	BASEPRI, sl
   14c7c:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
   14c80:	3501      	adds	r5, #1
   14c82:	e7e2      	b.n	14c4a <hci_num_completed_packets+0xe>
   14c84:	f38a 8811 	msr	BASEPRI, sl
   14c88:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14c8c:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   14c90:	b326      	cbz	r6, 14cdc <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   14c92:	f04f 0340 	mov.w	r3, #64	; 0x40
   14c96:	f3ef 8211 	mrs	r2, BASEPRI
   14c9a:	f383 8811 	msr	BASEPRI, r3
   14c9e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14ca2:	69e3      	ldr	r3, [r4, #28]
   14ca4:	b16b      	cbz	r3, 14cc2 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
   14ca6:	3b01      	subs	r3, #1
   14ca8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14caa:	f382 8811 	msr	BASEPRI, r2
   14cae:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14cb2:	4620      	mov	r0, r4
   14cb4:	f001 facc 	bl	16250 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14cb8:	3e01      	subs	r6, #1
   14cba:	f006 fd15 	bl	1b6e8 <z_impl_k_sem_give>
   14cbe:	b2b6      	uxth	r6, r6
   14cc0:	e7e6      	b.n	14c90 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
   14cc2:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14cc4:	b12b      	cbz	r3, 14cd2 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14cc6:	69a1      	ldr	r1, [r4, #24]
   14cc8:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14cca:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ccc:	428b      	cmp	r3, r1
	list->tail = node;
   14cce:	bf08      	it	eq
   14cd0:	61a0      	streq	r0, [r4, #24]
   14cd2:	f382 8811 	msr	BASEPRI, r2
   14cd6:	f3bf 8f6f 	isb	sy
			if (!node) {
   14cda:	b91b      	cbnz	r3, 14ce4 <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
   14cdc:	4620      	mov	r0, r4
   14cde:	f009 fd45 	bl	1e76c <bt_conn_unref>
   14ce2:	e7cd      	b.n	14c80 <hci_num_completed_packets+0x44>
	__asm__ volatile(
   14ce4:	f04f 0240 	mov.w	r2, #64	; 0x40
   14ce8:	f3ef 8111 	mrs	r1, BASEPRI
   14cec:	f382 8811 	msr	BASEPRI, r2
   14cf0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14cf4:	68da      	ldr	r2, [r3, #12]
   14cf6:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   14cf8:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   14cfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   14cfe:	f8c3 800c 	str.w	r8, [r3, #12]
   14d02:	b98a      	cbnz	r2, 14d28 <hci_num_completed_packets+0xec>
	list->head = node;
   14d04:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   14d08:	f381 8811 	msr	BASEPRI, r1
   14d0c:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14d10:	2101      	movs	r1, #1
   14d12:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14d16:	f009 f888 	bl	1de2a <atomic_or>
   14d1a:	07c3      	lsls	r3, r0, #31
   14d1c:	d4c9      	bmi.n	14cb2 <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
   14d1e:	4651      	mov	r1, sl
   14d20:	4648      	mov	r0, r9
   14d22:	f00b ff1e 	bl	20b62 <k_queue_append>
   14d26:	e7c4      	b.n	14cb2 <hci_num_completed_packets+0x76>
	parent->next = child;
   14d28:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14d2a:	6263      	str	r3, [r4, #36]	; 0x24
}
   14d2c:	e7ec      	b.n	14d08 <hci_num_completed_packets+0xcc>
   14d2e:	bf00      	nop
   14d30:	20002718 	.word	0x20002718

00014d34 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   14d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d36:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14d38:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   14d3a:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14d3c:	f004 fac6 	bl	192cc <net_buf_pool_get>
   14d40:	4b19      	ldr	r3, [pc, #100]	; (14da8 <hci_cmd_done.isra.0+0x74>)
   14d42:	4283      	cmp	r3, r0
   14d44:	d12e      	bne.n	14da4 <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
   14d46:	4620      	mov	r0, r4
   14d48:	f004 fac8 	bl	192dc <net_buf_id>
	if (cmd(buf)->state && !status) {
   14d4c:	4620      	mov	r0, r4
   14d4e:	f004 fac5 	bl	192dc <net_buf_id>
   14d52:	4d16      	ldr	r5, [pc, #88]	; (14dac <hci_cmd_done.isra.0+0x78>)
   14d54:	270c      	movs	r7, #12
   14d56:	fb07 5300 	mla	r3, r7, r0, r5
   14d5a:	685b      	ldr	r3, [r3, #4]
   14d5c:	b15b      	cbz	r3, 14d76 <hci_cmd_done.isra.0+0x42>
   14d5e:	b956      	cbnz	r6, 14d76 <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
   14d60:	4620      	mov	r0, r4
   14d62:	f004 fabb 	bl	192dc <net_buf_id>
   14d66:	fb07 5000 	mla	r0, r7, r0, r5
   14d6a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
   14d70:	7a1a      	ldrb	r2, [r3, #8]
   14d72:	f009 f869 	bl	1de48 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   14d76:	4620      	mov	r0, r4
   14d78:	f004 fab0 	bl	192dc <net_buf_id>
   14d7c:	270c      	movs	r7, #12
   14d7e:	fb07 5000 	mla	r0, r7, r0, r5
   14d82:	6883      	ldr	r3, [r0, #8]
   14d84:	b173      	cbz	r3, 14da4 <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
   14d86:	4620      	mov	r0, r4
   14d88:	f004 faa8 	bl	192dc <net_buf_id>
   14d8c:	4378      	muls	r0, r7
   14d8e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14d90:	4620      	mov	r0, r4
   14d92:	f004 faa3 	bl	192dc <net_buf_id>
   14d96:	fb07 5500 	mla	r5, r7, r0, r5
   14d9a:	68a8      	ldr	r0, [r5, #8]
}
   14d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14da0:	f006 bca2 	b.w	1b6e8 <z_impl_k_sem_give>
   14da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14da6:	bf00      	nop
   14da8:	20000a7c 	.word	0x20000a7c
   14dac:	200028e0 	.word	0x200028e0

00014db0 <hci_cmd_complete>:
{
   14db0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14db2:	2103      	movs	r1, #3
{
   14db4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14db6:	3008      	adds	r0, #8
   14db8:	f00b fbfb 	bl	205b2 <net_buf_simple_pull_mem>
	status = buf->data[0];
   14dbc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   14dbe:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   14dc0:	7818      	ldrb	r0, [r3, #0]
   14dc2:	4621      	mov	r1, r4
   14dc4:	f7ff ffb6 	bl	14d34 <hci_cmd_done.isra.0>
	if (ncmd) {
   14dc8:	b125      	cbz	r5, 14dd4 <hci_cmd_complete+0x24>
   14dca:	4803      	ldr	r0, [pc, #12]	; (14dd8 <hci_cmd_complete+0x28>)
}
   14dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14dd0:	f006 bc8a 	b.w	1b6e8 <z_impl_k_sem_give>
   14dd4:	bd38      	pop	{r3, r4, r5, pc}
   14dd6:	bf00      	nop
   14dd8:	200004b8 	.word	0x200004b8

00014ddc <hci_tx_thread>:
{
   14ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14de0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 14ee8 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
   14de4:	f8df a114 	ldr.w	sl, [pc, #276]	; 14efc <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
   14de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14dec:	483d      	ldr	r0, [pc, #244]	; (14ee4 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14dee:	f36f 3310 	bfc	r3, #12, #5
   14df2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14df6:	f001 fb21 	bl	1643c <bt_conn_prepare_events>
   14dfa:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14dfc:	483a      	ldr	r0, [pc, #232]	; (14ee8 <hci_tx_thread+0x10c>)
   14dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e06:	4629      	mov	r1, r5
   14e08:	f006 ffec 	bl	1bde4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14e0c:	b160      	cbz	r0, 14e28 <hci_tx_thread+0x4c>
   14e0e:	4937      	ldr	r1, [pc, #220]	; (14eec <hci_tx_thread+0x110>)
   14e10:	4837      	ldr	r0, [pc, #220]	; (14ef0 <hci_tx_thread+0x114>)
   14e12:	f241 43cf 	movw	r3, #5327	; 0x14cf
   14e16:	4652      	mov	r2, sl
   14e18:	f007 f96d 	bl	1c0f6 <printk>
   14e1c:	4040      	eors	r0, r0
   14e1e:	f380 8811 	msr	BASEPRI, r0
   14e22:	f04f 0003 	mov.w	r0, #3
   14e26:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14e28:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14f00 <hci_tx_thread+0x124>
{
   14e2c:	4e2e      	ldr	r6, [pc, #184]	; (14ee8 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
   14e2e:	f5a9 7792 	sub.w	r7, r9, #292	; 0x124
   14e32:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   14e36:	b915      	cbnz	r5, 14e3e <hci_tx_thread+0x62>
	z_impl_k_yield();
   14e38:	f006 fbe2 	bl	1b600 <z_impl_k_yield>
	while (1) {
   14e3c:	e7d4      	b.n	14de8 <hci_tx_thread+0xc>
		switch (ev->state) {
   14e3e:	68f3      	ldr	r3, [r6, #12]
   14e40:	f3c3 3304 	ubfx	r3, r3, #12, #5
   14e44:	2b04      	cmp	r3, #4
   14e46:	d142      	bne.n	14ece <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14e48:	7b33      	ldrb	r3, [r6, #12]
   14e4a:	2b00      	cmp	r3, #0
   14e4c:	d142      	bne.n	14ed4 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14e4e:	2200      	movs	r2, #0
   14e50:	2300      	movs	r3, #0
   14e52:	4648      	mov	r0, r9
   14e54:	f00b fb35 	bl	204c2 <net_buf_get>
	BT_ASSERT(buf);
   14e58:	4604      	mov	r4, r0
   14e5a:	b960      	cbnz	r0, 14e76 <hci_tx_thread+0x9a>
   14e5c:	4925      	ldr	r1, [pc, #148]	; (14ef4 <hci_tx_thread+0x118>)
   14e5e:	4824      	ldr	r0, [pc, #144]	; (14ef0 <hci_tx_thread+0x114>)
   14e60:	f241 436c 	movw	r3, #5228	; 0x146c
   14e64:	4652      	mov	r2, sl
   14e66:	f007 f946 	bl	1c0f6 <printk>
   14e6a:	4040      	eors	r0, r0
   14e6c:	f380 8811 	msr	BASEPRI, r0
   14e70:	f04f 0003 	mov.w	r0, #3
   14e74:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   14e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e7e:	4658      	mov	r0, fp
   14e80:	f006 fc58 	bl	1b734 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14e84:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   14e88:	b120      	cbz	r0, 14e94 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   14e8a:	f004 fadb 	bl	19444 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14e8e:	2300      	movs	r3, #0
   14e90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   14e94:	4620      	mov	r0, r4
   14e96:	f00b fb3f 	bl	20518 <net_buf_ref>
   14e9a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   14e9e:	4620      	mov	r0, r4
   14ea0:	f7ff fc52 	bl	14748 <bt_hci_ecc_send>
	if (err) {
   14ea4:	b198      	cbz	r0, 14ece <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   14ea6:	4814      	ldr	r0, [pc, #80]	; (14ef8 <hci_tx_thread+0x11c>)
   14ea8:	f006 fc1e 	bl	1b6e8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14eac:	4620      	mov	r0, r4
   14eae:	f004 fa15 	bl	192dc <net_buf_id>
   14eb2:	4621      	mov	r1, r4
   14eb4:	201f      	movs	r0, #31
   14eb6:	f7ff ff3d 	bl	14d34 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
   14eba:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
   14ebe:	f004 fac1 	bl	19444 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14ec2:	2300      	movs	r3, #0
		net_buf_unref(buf);
   14ec4:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		net_buf_unref(buf);
   14eca:	f004 fabb 	bl	19444 <net_buf_unref>
	for (; count; ev++, count--) {
   14ece:	3614      	adds	r6, #20
   14ed0:	3d01      	subs	r5, #1
   14ed2:	e7b0      	b.n	14e36 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14ed4:	2b01      	cmp	r3, #1
   14ed6:	d1fa      	bne.n	14ece <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   14ed8:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14eda:	3834      	subs	r0, #52	; 0x34
   14edc:	f001 fcdc 	bl	16898 <bt_conn_process_tx>
   14ee0:	e7f5      	b.n	14ece <hci_tx_thread+0xf2>
   14ee2:	bf00      	nop
   14ee4:	200006f0 	.word	0x200006f0
   14ee8:	200006dc 	.word	0x200006dc
   14eec:	00022222 	.word	0x00022222
   14ef0:	000221d7 	.word	0x000221d7
   14ef4:	0002222b 	.word	0x0002222b
   14ef8:	200004b8 	.word	0x200004b8
   14efc:	0002218a 	.word	0x0002218a
   14f00:	200004ec 	.word	0x200004ec

00014f04 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14f04:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14f06:	4b28      	ldr	r3, [pc, #160]	; (14fa8 <le_adv_start_add_conn+0xa4>)
   14f08:	b085      	sub	sp, #20
   14f0a:	4605      	mov	r5, r0
   14f0c:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   14f0e:	7801      	ldrb	r1, [r0, #0]
   14f10:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   14f14:	f008 ff6e 	bl	1ddf4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   14f18:	f010 0f40 	tst.w	r0, #64	; 0x40
   14f1c:	461a      	mov	r2, r3
   14f1e:	d008      	beq.n	14f32 <le_adv_start_add_conn+0x2e>
   14f20:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   14f24:	f008 ff66 	bl	1ddf4 <atomic_get>
   14f28:	05c0      	lsls	r0, r0, #23
   14f2a:	d502      	bpl.n	14f32 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   14f2c:	7e1b      	ldrb	r3, [r3, #24]
   14f2e:	428b      	cmp	r3, r1
   14f30:	d131      	bne.n	14f96 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   14f32:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14f34:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   14f36:	f816 3b0b 	ldrb.w	r3, [r6], #11
   14f3a:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14f3e:	4630      	mov	r0, r6
   14f40:	2300      	movs	r3, #0
   14f42:	9300      	str	r3, [sp, #0]
   14f44:	f8cd 3003 	str.w	r3, [sp, #3]
   14f48:	f008 ff5d 	bl	1de06 <bt_addr_le_cmp>
   14f4c:	4604      	mov	r4, r0
   14f4e:	7828      	ldrb	r0, [r5, #0]
   14f50:	b164      	cbz	r4, 14f6c <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14f52:	4631      	mov	r1, r6
   14f54:	f009 fc1f 	bl	1e796 <bt_conn_exists_le>
   14f58:	4604      	mov	r4, r0
   14f5a:	b9f8      	cbnz	r0, 14f9c <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14f5c:	7828      	ldrb	r0, [r5, #0]
   14f5e:	4631      	mov	r1, r6
   14f60:	f001 faaa 	bl	164b8 <bt_conn_add_le>
	if (!conn) {
   14f64:	4605      	mov	r5, r0
   14f66:	b1e0      	cbz	r0, 14fa2 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14f68:	2105      	movs	r1, #5
   14f6a:	e00e      	b.n	14f8a <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14f6c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   14f70:	9302      	str	r3, [sp, #8]
   14f72:	a902      	add	r1, sp, #8
   14f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14f78:	f8ad 300c 	strh.w	r3, [sp, #12]
   14f7c:	f88d 300e 	strb.w	r3, [sp, #14]
   14f80:	f001 fa9a 	bl	164b8 <bt_conn_add_le>
		if (!conn) {
   14f84:	4605      	mov	r5, r0
   14f86:	b160      	cbz	r0, 14fa2 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14f88:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14f8a:	f001 fb0d 	bl	165a8 <bt_conn_set_state>
	*out_conn = conn;
   14f8e:	603d      	str	r5, [r7, #0]
	return 0;
}
   14f90:	4620      	mov	r0, r4
   14f92:	b005      	add	sp, #20
   14f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   14f96:	f06f 0422 	mvn.w	r4, #34	; 0x22
   14f9a:	e7f9      	b.n	14f90 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   14f9c:	f06f 0415 	mvn.w	r4, #21
   14fa0:	e7f6      	b.n	14f90 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   14fa2:	f06f 040b 	mvn.w	r4, #11
   14fa6:	e7f3      	b.n	14f90 <le_adv_start_add_conn+0x8c>
   14fa8:	200003c8 	.word	0x200003c8

00014fac <hci_cmd_status>:
{
   14fac:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14fae:	2104      	movs	r1, #4
{
   14fb0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   14fb2:	3008      	adds	r0, #8
   14fb4:	f00b fafd 	bl	205b2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14fb8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14fba:	7800      	ldrb	r0, [r0, #0]
   14fbc:	4621      	mov	r1, r4
   14fbe:	f7ff feb9 	bl	14d34 <hci_cmd_done.isra.0>
	if (ncmd) {
   14fc2:	b125      	cbz	r5, 14fce <hci_cmd_status+0x22>
   14fc4:	4802      	ldr	r0, [pc, #8]	; (14fd0 <hci_cmd_status+0x24>)
}
   14fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14fca:	f006 bb8d 	b.w	1b6e8 <z_impl_k_sem_give>
   14fce:	bd38      	pop	{r3, r4, r5, pc}
   14fd0:	200004b8 	.word	0x200004b8

00014fd4 <bt_hci_cmd_create>:
{
   14fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   14fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   14fe0:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   14fe2:	4816      	ldr	r0, [pc, #88]	; (1503c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   14fe4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15040 <bt_hci_cmd_create+0x6c>
{
   14fe8:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   14fea:	f00b fa65 	bl	204b8 <net_buf_alloc_fixed>
   14fee:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
   14ff0:	f100 0b08 	add.w	fp, r0, #8
   14ff4:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
   14ff6:	2700      	movs	r7, #0
   14ff8:	4658      	mov	r0, fp
   14ffa:	f00b fa7c 	bl	204f6 <net_buf_simple_reserve>
   14ffe:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   15000:	4620      	mov	r0, r4
   15002:	f004 f96b 	bl	192dc <net_buf_id>
   15006:	f04f 0a0c 	mov.w	sl, #12
   1500a:	fb0a 8000 	mla	r0, sl, r0, r8
   1500e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   15010:	4620      	mov	r0, r4
   15012:	f004 f963 	bl	192dc <net_buf_id>
   15016:	fb0a 8000 	mla	r0, sl, r0, r8
   1501a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1501c:	4620      	mov	r0, r4
   1501e:	f004 f95d 	bl	192dc <net_buf_id>
   15022:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
   15026:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
   15028:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1502a:	4658      	mov	r0, fp
   1502c:	f00b fa9a 	bl	20564 <net_buf_simple_add>
	hdr->param_len = param_len;
   15030:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15032:	8005      	strh	r5, [r0, #0]
}
   15034:	4620      	mov	r0, r4
   15036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1503a:	bf00      	nop
   1503c:	20000a7c 	.word	0x20000a7c
   15040:	200028e0 	.word	0x200028e0

00015044 <bt_hci_cmd_send>:
{
   15044:	b538      	push	{r3, r4, r5, lr}
   15046:	4605      	mov	r5, r0
	if (!buf) {
   15048:	460c      	mov	r4, r1
   1504a:	b919      	cbnz	r1, 15054 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1504c:	f7ff ffc2 	bl	14fd4 <bt_hci_cmd_create>
		if (!buf) {
   15050:	4604      	mov	r4, r0
   15052:	b198      	cbz	r0, 1507c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15054:	f640 4335 	movw	r3, #3125	; 0xc35
   15058:	429d      	cmp	r5, r3
   1505a:	d109      	bne.n	15070 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   1505c:	4620      	mov	r0, r4
   1505e:	f7ff fb73 	bl	14748 <bt_hci_ecc_send>
		if (err) {
   15062:	4605      	mov	r5, r0
   15064:	b110      	cbz	r0, 1506c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   15066:	4620      	mov	r0, r4
   15068:	f004 f9ec 	bl	19444 <net_buf_unref>
}
   1506c:	4628      	mov	r0, r5
   1506e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15070:	4804      	ldr	r0, [pc, #16]	; (15084 <bt_hci_cmd_send+0x40>)
   15072:	4621      	mov	r1, r4
   15074:	f00b fa43 	bl	204fe <net_buf_put>
	return 0;
   15078:	2500      	movs	r5, #0
   1507a:	e7f7      	b.n	1506c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   1507c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   15080:	e7f4      	b.n	1506c <bt_hci_cmd_send+0x28>
   15082:	bf00      	nop
   15084:	200004ec 	.word	0x200004ec

00015088 <bt_hci_cmd_send_sync>:
{
   15088:	b5f0      	push	{r4, r5, r6, r7, lr}
   1508a:	4615      	mov	r5, r2
   1508c:	b087      	sub	sp, #28
	if (!buf) {
   1508e:	460c      	mov	r4, r1
   15090:	b921      	cbnz	r1, 1509c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   15092:	f7ff ff9f 	bl	14fd4 <bt_hci_cmd_create>
		if (!buf) {
   15096:	4604      	mov	r4, r0
   15098:	2800      	cmp	r0, #0
   1509a:	d048      	beq.n	1512e <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1509c:	2201      	movs	r2, #1
   1509e:	2100      	movs	r1, #0
   150a0:	4668      	mov	r0, sp
   150a2:	f00b feaa 	bl	20dfa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   150a6:	4620      	mov	r0, r4
   150a8:	f004 f918 	bl	192dc <net_buf_id>
   150ac:	4e21      	ldr	r6, [pc, #132]	; (15134 <bt_hci_cmd_send_sync+0xac>)
   150ae:	230c      	movs	r3, #12
   150b0:	fb03 6000 	mla	r0, r3, r0, r6
   150b4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   150b8:	4620      	mov	r0, r4
   150ba:	f00b fa2d 	bl	20518 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   150be:	481e      	ldr	r0, [pc, #120]	; (15138 <bt_hci_cmd_send_sync+0xb0>)
   150c0:	4621      	mov	r1, r4
   150c2:	f00b fa1c 	bl	204fe <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   150c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   150ca:	2300      	movs	r3, #0
   150cc:	4668      	mov	r0, sp
   150ce:	f006 fb31 	bl	1b734 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   150d2:	4607      	mov	r7, r0
   150d4:	b180      	cbz	r0, 150f8 <bt_hci_cmd_send_sync+0x70>
   150d6:	4a19      	ldr	r2, [pc, #100]	; (1513c <bt_hci_cmd_send_sync+0xb4>)
   150d8:	4919      	ldr	r1, [pc, #100]	; (15140 <bt_hci_cmd_send_sync+0xb8>)
   150da:	481a      	ldr	r0, [pc, #104]	; (15144 <bt_hci_cmd_send_sync+0xbc>)
   150dc:	f44f 73bb 	mov.w	r3, #374	; 0x176
   150e0:	f007 f809 	bl	1c0f6 <printk>
   150e4:	4818      	ldr	r0, [pc, #96]	; (15148 <bt_hci_cmd_send_sync+0xc0>)
   150e6:	4639      	mov	r1, r7
   150e8:	f007 f805 	bl	1c0f6 <printk>
   150ec:	4040      	eors	r0, r0
   150ee:	f380 8811 	msr	BASEPRI, r0
   150f2:	f04f 0003 	mov.w	r0, #3
   150f6:	df02      	svc	2
	status = cmd(buf)->status;
   150f8:	4620      	mov	r0, r4
   150fa:	f004 f8ef 	bl	192dc <net_buf_id>
   150fe:	230c      	movs	r3, #12
   15100:	4343      	muls	r3, r0
   15102:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   15104:	b156      	cbz	r6, 1511c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   15106:	4620      	mov	r0, r4
   15108:	f004 f99c 	bl	19444 <net_buf_unref>
			return -EIO;
   1510c:	2e09      	cmp	r6, #9
   1510e:	bf0c      	ite	eq
   15110:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   15114:	f06f 0004 	mvnne.w	r0, #4
}
   15118:	b007      	add	sp, #28
   1511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1511c:	b115      	cbz	r5, 15124 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1511e:	602c      	str	r4, [r5, #0]
	return 0;
   15120:	4630      	mov	r0, r6
   15122:	e7f9      	b.n	15118 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   15124:	4620      	mov	r0, r4
   15126:	f004 f98d 	bl	19444 <net_buf_unref>
	return 0;
   1512a:	4628      	mov	r0, r5
   1512c:	e7f4      	b.n	15118 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1512e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15132:	e7f1      	b.n	15118 <bt_hci_cmd_send_sync+0x90>
   15134:	200028e0 	.word	0x200028e0
   15138:	200004ec 	.word	0x200004ec
   1513c:	0002218a 	.word	0x0002218a
   15140:	00022222 	.word	0x00022222
   15144:	000221d7 	.word	0x000221d7
   15148:	0002222f 	.word	0x0002222f

0001514c <set_random_address>:
{
   1514c:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
   1514e:	4e15      	ldr	r6, [pc, #84]	; (151a4 <set_random_address+0x58>)
   15150:	2206      	movs	r2, #6
   15152:	f106 0131 	add.w	r1, r6, #49	; 0x31
   15156:	4605      	mov	r5, r0
   15158:	f008 fcfa 	bl	1db50 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1515c:	4604      	mov	r4, r0
   1515e:	b1e0      	cbz	r0, 1519a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15160:	2106      	movs	r1, #6
   15162:	f242 0005 	movw	r0, #8197	; 0x2005
   15166:	f7ff ff35 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1516a:	4604      	mov	r4, r0
   1516c:	b1b8      	cbz	r0, 1519e <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
   1516e:	2206      	movs	r2, #6
   15170:	4629      	mov	r1, r5
   15172:	3008      	adds	r0, #8
   15174:	f00b f9fc 	bl	20570 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15178:	4621      	mov	r1, r4
   1517a:	2200      	movs	r2, #0
   1517c:	f242 0005 	movw	r0, #8197	; 0x2005
   15180:	f7ff ff82 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   15184:	4604      	mov	r4, r0
   15186:	b940      	cbnz	r0, 1519a <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   15188:	2206      	movs	r2, #6
   1518a:	4629      	mov	r1, r5
   1518c:	f106 0031 	add.w	r0, r6, #49	; 0x31
   15190:	f008 fcee 	bl	1db70 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15194:	2301      	movs	r3, #1
   15196:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1519a:	4620      	mov	r0, r4
   1519c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1519e:	f06f 0436 	mvn.w	r4, #54	; 0x36
   151a2:	e7fa      	b.n	1519a <set_random_address+0x4e>
   151a4:	200003c8 	.word	0x200003c8

000151a8 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   151a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   151ac:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   151ae:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   151b2:	460e      	mov	r6, r1
   151b4:	4690      	mov	r8, r2
   151b6:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   151b8:	d027      	beq.n	1520a <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   151ba:	4f27      	ldr	r7, [pc, #156]	; (15258 <le_adv_set_random_addr.isra.0+0xb0>)
   151bc:	b12a      	cbz	r2, 151ca <le_adv_set_random_addr.isra.0+0x22>
   151be:	0688      	lsls	r0, r1, #26
   151c0:	d503      	bpl.n	151ca <le_adv_set_random_addr.isra.0+0x22>
   151c2:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   151c6:	0659      	lsls	r1, r3, #25
   151c8:	d542      	bpl.n	15250 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   151ca:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   151ce:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   151d2:	5cfb      	ldrb	r3, [r7, r3]
   151d4:	2b01      	cmp	r3, #1
   151d6:	d008      	beq.n	151ea <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   151d8:	eba9 0404 	sub.w	r4, r9, r4
   151dc:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   151de:	f1b8 0f00 	cmp.w	r8, #0
   151e2:	d10d      	bne.n	15200 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   151e4:	702b      	strb	r3, [r5, #0]
	return 0;
   151e6:	2000      	movs	r0, #0
   151e8:	e007      	b.n	151fa <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   151ea:	2007      	movs	r0, #7
   151ec:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   151f0:	4438      	add	r0, r7
   151f2:	f7ff ffab 	bl	1514c <set_random_address>
				if (err) {
   151f6:	2800      	cmp	r0, #0
   151f8:	d0ee      	beq.n	151d8 <le_adv_set_random_addr.isra.0+0x30>
}
   151fa:	b003      	add	sp, #12
   151fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15200:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15202:	bf48      	it	mi
   15204:	f043 0302 	orrmi.w	r3, r3, #2
   15208:	e7ec      	b.n	151e4 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1520a:	074b      	lsls	r3, r1, #29
   1520c:	d510      	bpl.n	15230 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1520e:	4e12      	ldr	r6, [pc, #72]	; (15258 <le_adv_set_random_addr.isra.0+0xb0>)
   15210:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15214:	00e7      	lsls	r7, r4, #3
   15216:	5cf3      	ldrb	r3, [r6, r3]
   15218:	2b01      	cmp	r3, #1
   1521a:	d105      	bne.n	15228 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   1521c:	2007      	movs	r0, #7
   1521e:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   15222:	4430      	add	r0, r6
   15224:	f7ff ff92 	bl	1514c <set_random_address>
			*own_addr_type = id_addr->type;
   15228:	1b3c      	subs	r4, r7, r4
   1522a:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1522c:	702b      	strb	r3, [r5, #0]
		if (err) {
   1522e:	e7e4      	b.n	151fa <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   15230:	2106      	movs	r1, #6
   15232:	4668      	mov	r0, sp
   15234:	f005 faac 	bl	1a790 <bt_rand>
	if (err) {
   15238:	b940      	cbnz	r0, 1524c <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
   1523a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1523e:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   15240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15244:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   15248:	f7ff ff80 	bl	1514c <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1524c:	2301      	movs	r3, #1
   1524e:	e7ed      	b.n	1522c <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   15250:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15254:	e7d1      	b.n	151fa <le_adv_set_random_addr.isra.0+0x52>
   15256:	bf00      	nop
   15258:	200003c8 	.word	0x200003c8

0001525c <set_le_adv_enable_legacy>:
{
   1525c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1525e:	4606      	mov	r6, r0
   15260:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   15262:	f242 000a 	movw	r0, #8202	; 0x200a
   15266:	2101      	movs	r1, #1
   15268:	f7ff feb4 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1526c:	4604      	mov	r4, r0
   1526e:	b1e8      	cbz	r0, 152ac <set_le_adv_enable_legacy+0x50>
	if (enable) {
   15270:	3008      	adds	r0, #8
   15272:	b1cd      	cbz	r5, 152a8 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
   15274:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   15276:	f00b f984 	bl	20582 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   1527a:	3614      	adds	r6, #20
	state->bit = bit;
   1527c:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   1527e:	4620      	mov	r0, r4
	state->bit = bit;
   15280:	9302      	str	r3, [sp, #8]
	state->target = target;
   15282:	9601      	str	r6, [sp, #4]
	state->val = val;
   15284:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
   15288:	f004 f828 	bl	192dc <net_buf_id>
   1528c:	4b09      	ldr	r3, [pc, #36]	; (152b4 <set_le_adv_enable_legacy+0x58>)
   1528e:	220c      	movs	r2, #12
   15290:	fb02 3000 	mla	r0, r2, r0, r3
   15294:	ab01      	add	r3, sp, #4
   15296:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   15298:	2200      	movs	r2, #0
   1529a:	4621      	mov	r1, r4
   1529c:	f242 000a 	movw	r0, #8202	; 0x200a
   152a0:	f7ff fef2 	bl	15088 <bt_hci_cmd_send_sync>
}
   152a4:	b004      	add	sp, #16
   152a6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   152a8:	4629      	mov	r1, r5
   152aa:	e7e4      	b.n	15276 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   152ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   152b0:	e7f8      	b.n	152a4 <set_le_adv_enable_legacy+0x48>
   152b2:	bf00      	nop
   152b4:	200028e0 	.word	0x200028e0

000152b8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   152b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152bc:	b087      	sub	sp, #28
   152be:	4606      	mov	r6, r0
   152c0:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   152c4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   152c8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   152cc:	460c      	mov	r4, r1
   152ce:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   152d0:	2100      	movs	r1, #0
   152d2:	2210      	movs	r2, #16
   152d4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   152d6:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   152d8:	f008 fc75 	bl	1dbc6 <memset>
	if (use_name) {
   152dc:	f1b8 0f00 	cmp.w	r8, #0
   152e0:	d00e      	beq.n	15300 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   152e2:	bbb4      	cbnz	r4, 15352 <le_adv_update.constprop.0+0x9a>
   152e4:	2d00      	cmp	r5, #0
   152e6:	d13f      	bne.n	15368 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   152e8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1539c <le_adv_update.constprop.0+0xe4>
   152ec:	4658      	mov	r0, fp
   152ee:	f008 fc1c 	bl	1db2a <strlen>
   152f2:	2309      	movs	r3, #9
   152f4:	f88d 3000 	strb.w	r3, [sp]
   152f8:	f88d 0001 	strb.w	r0, [sp, #1]
   152fc:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   15300:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   15304:	f1b8 0f00 	cmp.w	r8, #0
   15308:	d030      	beq.n	1536c <le_adv_update.constprop.0+0xb4>
   1530a:	f1ba 0f00 	cmp.w	sl, #0
   1530e:	d12d      	bne.n	1536c <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   15310:	2301      	movs	r3, #1
			d[1].data = &data;
   15312:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   15316:	9305      	str	r3, [sp, #20]
			d_len = 2;
   15318:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1531a:	a902      	add	r1, sp, #8
   1531c:	f242 0008 	movw	r0, #8200	; 0x2008
   15320:	f008 ff79 	bl	1e216 <hci_set_ad>
		if (err) {
   15324:	4604      	mov	r4, r0
   15326:	b938      	cbnz	r0, 15338 <le_adv_update.constprop.0+0x80>
	if (scannable) {
   15328:	f1ba 0f00 	cmp.w	sl, #0
   1532c:	d120      	bne.n	15370 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1532e:	2104      	movs	r1, #4
   15330:	f106 0014 	add.w	r0, r6, #20
   15334:	f008 fd79 	bl	1de2a <atomic_or>
}
   15338:	4620      	mov	r0, r4
   1533a:	b007      	add	sp, #28
   1533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   15340:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   15344:	3a08      	subs	r2, #8
   15346:	2a01      	cmp	r2, #1
   15348:	d925      	bls.n	15396 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1534a:	3301      	adds	r3, #1
   1534c:	429f      	cmp	r7, r3
   1534e:	d1f7      	bne.n	15340 <le_adv_update.constprop.0+0x88>
   15350:	e7c8      	b.n	152e4 <le_adv_update.constprop.0+0x2c>
   15352:	2300      	movs	r3, #0
   15354:	e7fa      	b.n	1534c <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   15356:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1535a:	3a08      	subs	r2, #8
   1535c:	2a01      	cmp	r2, #1
   1535e:	d91a      	bls.n	15396 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   15360:	3301      	adds	r3, #1
   15362:	4599      	cmp	r9, r3
   15364:	d1f7      	bne.n	15356 <le_adv_update.constprop.0+0x9e>
   15366:	e7bf      	b.n	152e8 <le_adv_update.constprop.0+0x30>
   15368:	2300      	movs	r3, #0
   1536a:	e7fa      	b.n	15362 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   1536c:	2201      	movs	r2, #1
   1536e:	e7d4      	b.n	1531a <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   15370:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   15374:	2201      	movs	r2, #1
   15376:	f1b8 0f00 	cmp.w	r8, #0
   1537a:	d003      	beq.n	15384 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   1537c:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   1537e:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   15382:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   15384:	a902      	add	r1, sp, #8
   15386:	f242 0009 	movw	r0, #8201	; 0x2009
   1538a:	f008 ff44 	bl	1e216 <hci_set_ad>
		if (err) {
   1538e:	2800      	cmp	r0, #0
   15390:	d0cd      	beq.n	1532e <le_adv_update.constprop.0+0x76>
   15392:	4604      	mov	r4, r0
   15394:	e7d0      	b.n	15338 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   15396:	f06f 0415 	mvn.w	r4, #21
   1539a:	e7cd      	b.n	15338 <le_adv_update.constprop.0+0x80>
   1539c:	0002224f 	.word	0x0002224f

000153a0 <conn_auto_initiate>:
{
   153a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   153a2:	7b43      	ldrb	r3, [r0, #13]
   153a4:	2b07      	cmp	r3, #7
{
   153a6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   153a8:	d11e      	bne.n	153e8 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   153aa:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   153ac:	4630      	mov	r0, r6
   153ae:	f008 fd21 	bl	1ddf4 <atomic_get>
   153b2:	0483      	lsls	r3, r0, #18
   153b4:	d41a      	bmi.n	153ec <conn_auto_initiate+0x4c>
   153b6:	78e3      	ldrb	r3, [r4, #3]
   153b8:	b123      	cbz	r3, 153c4 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   153ba:	4b25      	ldr	r3, [pc, #148]	; (15450 <conn_auto_initiate+0xb0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   153bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   153c0:	071d      	lsls	r5, r3, #28
   153c2:	d513      	bpl.n	153ec <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   153c4:	2102      	movs	r1, #2
   153c6:	f242 0016 	movw	r0, #8214	; 0x2016
   153ca:	f7ff fe03 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   153ce:	4605      	mov	r5, r0
   153d0:	b160      	cbz	r0, 153ec <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
   153d2:	2102      	movs	r1, #2
   153d4:	3008      	adds	r0, #8
   153d6:	f00b f8c5 	bl	20564 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   153da:	8823      	ldrh	r3, [r4, #0]
   153dc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   153de:	4629      	mov	r1, r5
   153e0:	f242 0016 	movw	r0, #8214	; 0x2016
   153e4:	f7ff fe2e 	bl	15044 <bt_hci_cmd_send>
}
   153e8:	b004      	add	sp, #16
   153ea:	bd70      	pop	{r4, r5, r6, pc}
   153ec:	4630      	mov	r0, r6
   153ee:	f008 fd01 	bl	1ddf4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   153f2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   153f6:	4d16      	ldr	r5, [pc, #88]	; (15450 <conn_auto_initiate+0xb0>)
   153f8:	f3c0 3100 	ubfx	r1, r0, #12, #1
   153fc:	d10f      	bne.n	1541e <conn_auto_initiate+0x7e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   153fe:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   15402:	07d8      	lsls	r0, r3, #31
   15404:	d50b      	bpl.n	1541e <conn_auto_initiate+0x7e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15406:	2302      	movs	r3, #2
   15408:	9100      	str	r1, [sp, #0]
   1540a:	461a      	mov	r2, r3
   1540c:	4620      	mov	r0, r4
   1540e:	f008 ffa2 	bl	1e356 <bt_le_set_phy>
		if (!err) {
   15412:	b920      	cbnz	r0, 1541e <conn_auto_initiate+0x7e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15414:	2180      	movs	r1, #128	; 0x80
   15416:	4630      	mov	r0, r6
   15418:	f008 fd07 	bl	1de2a <atomic_or>
			return;
   1541c:	e7e4      	b.n	153e8 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1541e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   15422:	069a      	lsls	r2, r3, #26
   15424:	d5e0      	bpl.n	153e8 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15426:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   1542a:	689b      	ldr	r3, [r3, #8]
   1542c:	079b      	lsls	r3, r3, #30
   1542e:	d5db      	bpl.n	153e8 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15430:	f10d 010e 	add.w	r1, sp, #14
   15434:	a803      	add	r0, sp, #12
   15436:	f008 fe68 	bl	1e10a <hci_le_read_max_data_len>
			if (!err) {
   1543a:	2800      	cmp	r0, #0
   1543c:	d1d4      	bne.n	153e8 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   1543e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15442:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15446:	4620      	mov	r0, r4
   15448:	f008 ff68 	bl	1e31c <bt_le_set_data_len>
		}
   1544c:	e7cc      	b.n	153e8 <conn_auto_initiate+0x48>
   1544e:	bf00      	nop
   15450:	200003c8 	.word	0x200003c8

00015454 <bt_id_add>:
{
   15454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15456:	4f42      	ldr	r7, [pc, #264]	; (15560 <bt_id_add+0x10c>)
   15458:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   1545c:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   15460:	4604      	mov	r4, r0
   15462:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15464:	b10a      	cbz	r2, 1546a <bt_id_add+0x16>
   15466:	429a      	cmp	r2, r3
   15468:	d208      	bcs.n	1547c <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   1546a:	3301      	adds	r3, #1
   1546c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   15470:	7a23      	ldrb	r3, [r4, #8]
   15472:	f043 0304 	orr.w	r3, r3, #4
   15476:	7223      	strb	r3, [r4, #8]
}
   15478:	b003      	add	sp, #12
   1547a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   1547c:	2100      	movs	r1, #0
   1547e:	2206      	movs	r2, #6
   15480:	4608      	mov	r0, r1
   15482:	f001 f86b 	bl	1655c <bt_conn_lookup_state_le>
	if (conn) {
   15486:	4606      	mov	r6, r0
   15488:	b168      	cbz	r0, 154a6 <bt_id_add+0x52>
   1548a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1548e:	f107 0098 	add.w	r0, r7, #152	; 0x98
   15492:	f008 fcca 	bl	1de2a <atomic_or>
	keys->state |= flag;
   15496:	7a23      	ldrb	r3, [r4, #8]
   15498:	f043 0301 	orr.w	r3, r3, #1
   1549c:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1549e:	4630      	mov	r0, r6
   154a0:	f009 f964 	bl	1e76c <bt_conn_unref>
		return;
   154a4:	e7e8      	b.n	15478 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
   154a6:	4601      	mov	r1, r0
   154a8:	f107 0018 	add.w	r0, r7, #24
   154ac:	f008 fe45 	bl	1e13a <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
   154b0:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   154b4:	b9b3      	cbnz	r3, 154e4 <bt_id_add+0x90>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   154b6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   154ba:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   154be:	429a      	cmp	r2, r3
   154c0:	d11d      	bne.n	154fe <bt_id_add+0xaa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   154c2:	2200      	movs	r2, #0
   154c4:	4611      	mov	r1, r2
   154c6:	f242 0029 	movw	r0, #8233	; 0x2029
   154ca:	f7ff fddd 	bl	15088 <bt_hci_cmd_send_sync>
		if (err) {
   154ce:	b970      	cbnz	r0, 154ee <bt_id_add+0x9a>
		bt_dev.le.rl_entries++;
   154d0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   154d4:	3301      	adds	r3, #1
   154d6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   154da:	7a23      	ldrb	r3, [r4, #8]
   154dc:	f043 0304 	orr.w	r3, r3, #4
   154e0:	7223      	strb	r3, [r4, #8]
		goto done;
   154e2:	e004      	b.n	154ee <bt_id_add+0x9a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   154e4:	4630      	mov	r0, r6
   154e6:	f008 fe7e 	bl	1e1e6 <addr_res_enable>
		if (err) {
   154ea:	2800      	cmp	r0, #0
   154ec:	d0e3      	beq.n	154b6 <bt_id_add+0x62>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   154ee:	2001      	movs	r0, #1
   154f0:	f008 fe79 	bl	1e1e6 <addr_res_enable>
	func(&bt_dev.adv, data);
   154f4:	481b      	ldr	r0, [pc, #108]	; (15564 <bt_id_add+0x110>)
   154f6:	2100      	movs	r1, #0
   154f8:	f008 fe34 	bl	1e164 <adv_unpause_enabled>
}
   154fc:	e7bc      	b.n	15478 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   154fe:	1c67      	adds	r7, r4, #1
   15500:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   15504:	4638      	mov	r0, r7
   15506:	f008 fe3d 	bl	1e184 <hci_id_add.isra.0>
	if (err) {
   1550a:	4606      	mov	r6, r0
   1550c:	2800      	cmp	r0, #0
   1550e:	d1ee      	bne.n	154ee <bt_id_add+0x9a>
	bt_dev.le.rl_entries++;
   15510:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   15514:	3301      	adds	r3, #1
   15516:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   1551a:	7a23      	ldrb	r3, [r4, #8]
   1551c:	f043 0304 	orr.w	r3, r3, #4
   15520:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   15522:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
   15526:	075b      	lsls	r3, r3, #29
   15528:	d5e1      	bpl.n	154ee <bt_id_add+0x9a>
	bt_addr_le_copy(&cp.id_addr, addr);
   1552a:	4639      	mov	r1, r7
   1552c:	4668      	mov	r0, sp
   1552e:	f008 fc67 	bl	1de00 <bt_addr_le_copy>
	cp.mode = mode;
   15532:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   15534:	2108      	movs	r1, #8
   15536:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1553a:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1553e:	f7ff fd49 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   15542:	4604      	mov	r4, r0
   15544:	2800      	cmp	r0, #0
   15546:	d0d2      	beq.n	154ee <bt_id_add+0x9a>
	net_buf_add_mem(buf, &cp, sizeof(cp));
   15548:	2208      	movs	r2, #8
   1554a:	4669      	mov	r1, sp
   1554c:	4410      	add	r0, r2
   1554e:	f00b f80f 	bl	20570 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   15552:	4632      	mov	r2, r6
   15554:	4621      	mov	r1, r4
   15556:	f242 004e 	movw	r0, #8270	; 0x204e
   1555a:	f7ff fd95 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1555e:	e7c6      	b.n	154ee <bt_id_add+0x9a>
   15560:	200003c8 	.word	0x200003c8
   15564:	200003e0 	.word	0x200003e0

00015568 <bt_id_del>:
{
   15568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   1556c:	4f3a      	ldr	r7, [pc, #232]	; (15658 <bt_id_del+0xf0>)
   1556e:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   15572:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   15576:	4604      	mov	r4, r0
   15578:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   1557a:	b112      	cbz	r2, 15582 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1557c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1557e:	4293      	cmp	r3, r2
   15580:	dd08      	ble.n	15594 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   15582:	3b01      	subs	r3, #1
   15584:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   15588:	7a23      	ldrb	r3, [r4, #8]
   1558a:	f023 0304 	bic.w	r3, r3, #4
   1558e:	7223      	strb	r3, [r4, #8]
}
   15590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   15594:	2100      	movs	r1, #0
   15596:	2206      	movs	r2, #6
   15598:	4608      	mov	r0, r1
   1559a:	f000 ffdf 	bl	1655c <bt_conn_lookup_state_le>
	if (conn) {
   1559e:	4606      	mov	r6, r0
   155a0:	b170      	cbz	r0, 155c0 <bt_id_del+0x58>
   155a2:	f107 0098 	add.w	r0, r7, #152	; 0x98
   155a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   155aa:	f008 fc3e 	bl	1de2a <atomic_or>
	keys->state |= flag;
   155ae:	7a23      	ldrb	r3, [r4, #8]
   155b0:	f043 0302 	orr.w	r3, r3, #2
   155b4:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   155b6:	4630      	mov	r0, r6
}
   155b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   155bc:	f009 b8d6 	b.w	1e76c <bt_conn_unref>
	func(&bt_dev.adv, data);
   155c0:	4601      	mov	r1, r0
   155c2:	f107 0018 	add.w	r0, r7, #24
   155c6:	f008 fdb8 	bl	1e13a <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   155ca:	4630      	mov	r0, r6
   155cc:	f008 fe0b 	bl	1e1e6 <addr_res_enable>
	if (err) {
   155d0:	4607      	mov	r7, r0
   155d2:	b988      	cbnz	r0, 155f8 <bt_id_del+0x90>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   155d4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   155d8:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   155dc:	429a      	cmp	r2, r3
   155de:	d217      	bcs.n	15610 <bt_id_del+0xa8>
		bt_dev.le.rl_entries--;
   155e0:	3b01      	subs	r3, #1
   155e2:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   155e6:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   155e8:	491c      	ldr	r1, [pc, #112]	; (1565c <bt_id_del+0xf4>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   155ea:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   155ee:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   155f0:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   155f2:	2002      	movs	r0, #2
   155f4:	f003 fdfc 	bl	191f0 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   155f8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   155fc:	b113      	cbz	r3, 15604 <bt_id_del+0x9c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   155fe:	2001      	movs	r0, #1
   15600:	f008 fdf1 	bl	1e1e6 <addr_res_enable>
}
   15604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
   15608:	4815      	ldr	r0, [pc, #84]	; (15660 <bt_id_del+0xf8>)
   1560a:	2100      	movs	r1, #0
   1560c:	f008 bdaa 	b.w	1e164 <adv_unpause_enabled>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   15610:	2107      	movs	r1, #7
   15612:	f242 0028 	movw	r0, #8232	; 0x2028
   15616:	f7ff fcdd 	bl	14fd4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1561a:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   1561e:	4606      	mov	r6, r0
   15620:	2800      	cmp	r0, #0
   15622:	d0e9      	beq.n	155f8 <bt_id_del+0x90>
	cp = net_buf_add(buf, sizeof(*cp));
   15624:	2107      	movs	r1, #7
   15626:	3008      	adds	r0, #8
   15628:	f00a ff9c 	bl	20564 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1562c:	4641      	mov	r1, r8
   1562e:	f008 fbe7 	bl	1de00 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   15632:	463a      	mov	r2, r7
   15634:	4631      	mov	r1, r6
   15636:	f242 0028 	movw	r0, #8232	; 0x2028
   1563a:	f7ff fd25 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1563e:	2800      	cmp	r0, #0
   15640:	d1da      	bne.n	155f8 <bt_id_del+0x90>
	bt_dev.le.rl_entries--;
   15642:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   15646:	3b01      	subs	r3, #1
   15648:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   1564c:	7a23      	ldrb	r3, [r4, #8]
   1564e:	f023 0304 	bic.w	r3, r3, #4
   15652:	7223      	strb	r3, [r4, #8]
   15654:	e7d0      	b.n	155f8 <bt_id_del+0x90>
   15656:	bf00      	nop
   15658:	200003c8 	.word	0x200003c8
   1565c:	0001e1d5 	.word	0x0001e1d5
   15660:	200003e0 	.word	0x200003e0

00015664 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   15664:	b530      	push	{r4, r5, lr}
   15666:	4d13      	ldr	r5, [pc, #76]	; (156b4 <id_create.isra.0+0x50>)
   15668:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1566c:	b085      	sub	sp, #20
   1566e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15670:	460c      	mov	r4, r1
   15672:	b171      	cbz	r1, 15692 <id_create.isra.0+0x2e>
   15674:	2300      	movs	r3, #0
   15676:	4669      	mov	r1, sp
   15678:	4620      	mov	r0, r4
   1567a:	9300      	str	r3, [sp, #0]
   1567c:	f8cd 3003 	str.w	r3, [sp, #3]
   15680:	f008 fbc1 	bl	1de06 <bt_addr_le_cmp>
   15684:	b128      	cbz	r0, 15692 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15686:	4621      	mov	r1, r4
   15688:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1568a:	f008 fbb9 	bl	1de00 <bt_addr_le_copy>
}
   1568e:	b005      	add	sp, #20
   15690:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   15692:	a802      	add	r0, sp, #8
   15694:	f008 fef0 	bl	1e478 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   15698:	a802      	add	r0, sp, #8
   1569a:	f7ff f94f 	bl	1493c <id_find>
   1569e:	2800      	cmp	r0, #0
   156a0:	daf7      	bge.n	15692 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   156a2:	a902      	add	r1, sp, #8
   156a4:	4628      	mov	r0, r5
   156a6:	f008 fbab 	bl	1de00 <bt_addr_le_copy>
		if (addr) {
   156aa:	2c00      	cmp	r4, #0
   156ac:	d0ef      	beq.n	1568e <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   156ae:	4629      	mov	r1, r5
   156b0:	4620      	mov	r0, r4
   156b2:	e7ea      	b.n	1568a <id_create.isra.0+0x26>
   156b4:	200003c8 	.word	0x200003c8

000156b8 <hci_event_prio>:
{
   156b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156bc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   156be:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   156c2:	4630      	mov	r0, r6
   156c4:	f00a ff85 	bl	205d2 <net_buf_simple_headroom>
	state->len = buf->len;
   156c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   156cc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   156d0:	4605      	mov	r5, r0
   156d2:	d80c      	bhi.n	156ee <hci_event_prio+0x36>
   156d4:	4a1c      	ldr	r2, [pc, #112]	; (15748 <hci_event_prio+0x90>)
   156d6:	491d      	ldr	r1, [pc, #116]	; (1574c <hci_event_prio+0x94>)
   156d8:	481d      	ldr	r0, [pc, #116]	; (15750 <hci_event_prio+0x98>)
   156da:	f641 1326 	movw	r3, #6438	; 0x1926
   156de:	f006 fd0a 	bl	1c0f6 <printk>
   156e2:	4040      	eors	r0, r0
   156e4:	f380 8811 	msr	BASEPRI, r0
   156e8:	f04f 0003 	mov.w	r0, #3
   156ec:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   156ee:	2102      	movs	r1, #2
   156f0:	4630      	mov	r0, r6
   156f2:	f00a ff5e 	bl	205b2 <net_buf_simple_pull_mem>
   156f6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   156f8:	7800      	ldrb	r0, [r0, #0]
   156fa:	f008 fb45 	bl	1dd88 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   156fe:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15700:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15702:	d40c      	bmi.n	1571e <hci_event_prio+0x66>
   15704:	4a10      	ldr	r2, [pc, #64]	; (15748 <hci_event_prio+0x90>)
   15706:	4913      	ldr	r1, [pc, #76]	; (15754 <hci_event_prio+0x9c>)
   15708:	4811      	ldr	r0, [pc, #68]	; (15750 <hci_event_prio+0x98>)
   1570a:	f641 132a 	movw	r3, #6442	; 0x192a
   1570e:	f006 fcf2 	bl	1c0f6 <printk>
   15712:	4040      	eors	r0, r0
   15714:	f380 8811 	msr	BASEPRI, r0
   15718:	f04f 0003 	mov.w	r0, #3
   1571c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1571e:	2305      	movs	r3, #5
   15720:	4a0d      	ldr	r2, [pc, #52]	; (15758 <hci_event_prio+0xa0>)
   15722:	7838      	ldrb	r0, [r7, #0]
   15724:	4621      	mov	r1, r4
   15726:	f008 fb41 	bl	1ddac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1572a:	07b3      	lsls	r3, r6, #30
   1572c:	d507      	bpl.n	1573e <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   1572e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15730:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15734:	fa10 f585 	uxtah	r5, r0, r5
   15738:	60a5      	str	r5, [r4, #8]
}
   1573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1573e:	4620      	mov	r0, r4
}
   15740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   15744:	f003 be7e 	b.w	19444 <net_buf_unref>
   15748:	0002218a 	.word	0x0002218a
   1574c:	000221be 	.word	0x000221be
   15750:	000221d7 	.word	0x000221d7
   15754:	0002225e 	.word	0x0002225e
   15758:	00021ac0 	.word	0x00021ac0

0001575c <bt_recv>:
{
   1575c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   1575e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15760:	2b01      	cmp	r3, #1
{
   15762:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   15764:	d007      	beq.n	15776 <bt_recv+0x1a>
   15766:	2b03      	cmp	r3, #3
   15768:	d113      	bne.n	15792 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1576a:	480c      	ldr	r0, [pc, #48]	; (1579c <bt_recv+0x40>)
   1576c:	4629      	mov	r1, r5
   1576e:	f00a fec6 	bl	204fe <net_buf_put>
		return 0;
   15772:	2000      	movs	r0, #0
   15774:	e00c      	b.n	15790 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15776:	6883      	ldr	r3, [r0, #8]
   15778:	7818      	ldrb	r0, [r3, #0]
   1577a:	f008 fb05 	bl	1dd88 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1577e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15780:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15782:	d502      	bpl.n	1578a <bt_recv+0x2e>
			hci_event_prio(buf);
   15784:	4628      	mov	r0, r5
   15786:	f7ff ff97 	bl	156b8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1578a:	f014 0002 	ands.w	r0, r4, #2
   1578e:	d1ec      	bne.n	1576a <bt_recv+0xe>
}
   15790:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   15792:	f003 fe57 	bl	19444 <net_buf_unref>
		return -EINVAL;
   15796:	f06f 0015 	mvn.w	r0, #21
   1579a:	e7f9      	b.n	15790 <bt_recv+0x34>
   1579c:	200004d4 	.word	0x200004d4

000157a0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   157a0:	4a08      	ldr	r2, [pc, #32]	; (157c4 <bt_hci_driver_register+0x24>)
{
   157a2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   157a4:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
   157a8:	b930      	cbnz	r0, 157b8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   157aa:	68d9      	ldr	r1, [r3, #12]
   157ac:	b139      	cbz	r1, 157be <bt_hci_driver_register+0x1e>
   157ae:	6919      	ldr	r1, [r3, #16]
   157b0:	b129      	cbz	r1, 157be <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   157b2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	return 0;
   157b6:	4770      	bx	lr
		return -EALREADY;
   157b8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   157bc:	4770      	bx	lr
		return -EINVAL;
   157be:	f06f 0015 	mvn.w	r0, #21
}
   157c2:	4770      	bx	lr
   157c4:	200003c8 	.word	0x200003c8

000157c8 <bt_finalize_init>:
   157c8:	4801      	ldr	r0, [pc, #4]	; (157d0 <bt_finalize_init+0x8>)
   157ca:	2102      	movs	r1, #2
   157cc:	f008 bb2d 	b.w	1de2a <atomic_or>
   157d0:	20000460 	.word	0x20000460

000157d4 <bt_get_name>:
}
   157d4:	4800      	ldr	r0, [pc, #0]	; (157d8 <bt_get_name+0x4>)
   157d6:	4770      	bx	lr
   157d8:	0002224f 	.word	0x0002224f

000157dc <bt_id_create>:
{
   157dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   157de:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   157e0:	4605      	mov	r5, r0
   157e2:	b918      	cbnz	r0, 157ec <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   157e4:	b1ec      	cbz	r4, 15822 <bt_id_create+0x46>
		return -EINVAL;
   157e6:	f06f 0415 	mvn.w	r4, #21
   157ea:	e017      	b.n	1581c <bt_id_create+0x40>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   157ec:	2300      	movs	r3, #0
   157ee:	4669      	mov	r1, sp
   157f0:	9300      	str	r3, [sp, #0]
   157f2:	f8cd 3003 	str.w	r3, [sp, #3]
   157f6:	f008 fb06 	bl	1de06 <bt_addr_le_cmp>
   157fa:	2800      	cmp	r0, #0
   157fc:	d0f2      	beq.n	157e4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   157fe:	782b      	ldrb	r3, [r5, #0]
   15800:	2b01      	cmp	r3, #1
   15802:	d1f0      	bne.n	157e6 <bt_id_create+0xa>
   15804:	79ab      	ldrb	r3, [r5, #6]
   15806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1580a:	2bc0      	cmp	r3, #192	; 0xc0
   1580c:	d1eb      	bne.n	157e6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1580e:	4628      	mov	r0, r5
   15810:	f7ff f894 	bl	1493c <id_find>
   15814:	2800      	cmp	r0, #0
   15816:	dbe5      	blt.n	157e4 <bt_id_create+0x8>
			return -EALREADY;
   15818:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1581c:	4620      	mov	r0, r4
   1581e:	b003      	add	sp, #12
   15820:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15822:	4b07      	ldr	r3, [pc, #28]	; (15840 <bt_id_create+0x64>)
   15824:	79dc      	ldrb	r4, [r3, #7]
   15826:	2c01      	cmp	r4, #1
   15828:	d006      	beq.n	15838 <bt_id_create+0x5c>
	new_id = bt_dev.id_count++;
   1582a:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   1582c:	4629      	mov	r1, r5
   1582e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   15830:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   15832:	f7ff ff17 	bl	15664 <id_create.isra.0>
	return new_id;
   15836:	e7f1      	b.n	1581c <bt_id_create+0x40>
		return -ENOMEM;
   15838:	f06f 040b 	mvn.w	r4, #11
   1583c:	e7ee      	b.n	1581c <bt_id_create+0x40>
   1583e:	bf00      	nop
   15840:	200003c8 	.word	0x200003c8

00015844 <bt_setup_public_id_addr>:
{
   15844:	b570      	push	{r4, r5, r6, lr}
   15846:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15848:	aa01      	add	r2, sp, #4
   1584a:	2100      	movs	r1, #0
   1584c:	f241 0009 	movw	r0, #4105	; 0x1009
   15850:	f7ff fc1a 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   15854:	4e1a      	ldr	r6, [pc, #104]	; (158c0 <bt_setup_public_id_addr+0x7c>)
   15856:	4604      	mov	r4, r0
   15858:	b118      	cbz	r0, 15862 <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1585a:	2300      	movs	r3, #0
   1585c:	71f3      	strb	r3, [r6, #7]
}
   1585e:	b006      	add	sp, #24
   15860:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15862:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15864:	689d      	ldr	r5, [r3, #8]
   15866:	9004      	str	r0, [sp, #16]
   15868:	3501      	adds	r5, #1
   1586a:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   1586e:	2206      	movs	r2, #6
   15870:	a904      	add	r1, sp, #16
   15872:	4628      	mov	r0, r5
   15874:	f008 f96c 	bl	1db50 <memcmp>
   15878:	b918      	cbnz	r0, 15882 <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
   1587a:	9801      	ldr	r0, [sp, #4]
   1587c:	f003 fde2 	bl	19444 <net_buf_unref>
   15880:	e7eb      	b.n	1585a <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15882:	4b10      	ldr	r3, [pc, #64]	; (158c4 <bt_setup_public_id_addr+0x80>)
   15884:	6818      	ldr	r0, [r3, #0]
   15886:	9002      	str	r0, [sp, #8]
   15888:	889b      	ldrh	r3, [r3, #4]
   1588a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1588e:	2206      	movs	r2, #6
   15890:	a902      	add	r1, sp, #8
   15892:	4628      	mov	r0, r5
   15894:	f008 f95c 	bl	1db50 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15898:	2800      	cmp	r0, #0
   1589a:	d0ee      	beq.n	1587a <bt_setup_public_id_addr+0x36>
	memcpy(dst, src, sizeof(*dst));
   1589c:	4629      	mov	r1, r5
   1589e:	2206      	movs	r2, #6
   158a0:	f10d 0011 	add.w	r0, sp, #17
   158a4:	f008 f964 	bl	1db70 <memcpy>
	net_buf_unref(rsp);
   158a8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   158aa:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   158ae:	f003 fdc9 	bl	19444 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   158b2:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   158b4:	a904      	add	r1, sp, #16
   158b6:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   158b8:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   158ba:	f7ff fed3 	bl	15664 <id_create.isra.0>
   158be:	e7ce      	b.n	1585e <bt_setup_public_id_addr+0x1a>
   158c0:	200003c8 	.word	0x200003c8
   158c4:	0002159f 	.word	0x0002159f

000158c8 <bt_read_static_addr>:
{
   158c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   158cc:	4b15      	ldr	r3, [pc, #84]	; (15924 <bt_read_static_addr+0x5c>)
   158ce:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
   158d2:	f014 0401 	ands.w	r4, r4, #1
{
   158d6:	4607      	mov	r7, r0
   158d8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   158da:	d015      	beq.n	15908 <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   158dc:	aa01      	add	r2, sp, #4
   158de:	2100      	movs	r1, #0
   158e0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   158e4:	f7ff fbd0 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   158e8:	4605      	mov	r5, r0
   158ea:	b9c8      	cbnz	r0, 15920 <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
   158ec:	9b01      	ldr	r3, [sp, #4]
   158ee:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   158f0:	785c      	ldrb	r4, [r3, #1]
   158f2:	42b4      	cmp	r4, r6
   158f4:	bf28      	it	cs
   158f6:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   158f8:	f04f 0816 	mov.w	r8, #22
   158fc:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   158fe:	42a5      	cmp	r5, r4
   15900:	db06      	blt.n	15910 <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
   15902:	9801      	ldr	r0, [sp, #4]
   15904:	f003 fd9e 	bl	19444 <net_buf_unref>
}
   15908:	4620      	mov	r0, r4
   1590a:	b002      	add	sp, #8
   1590c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   15910:	fb08 7005 	mla	r0, r8, r5, r7
   15914:	2216      	movs	r2, #22
   15916:	4631      	mov	r1, r6
   15918:	f008 f92a 	bl	1db70 <memcpy>
	for (i = 0; i < cnt; i++) {
   1591c:	3501      	adds	r5, #1
   1591e:	e7ee      	b.n	158fe <bt_read_static_addr+0x36>
		return 0;
   15920:	2400      	movs	r4, #0
   15922:	e7f1      	b.n	15908 <bt_read_static_addr+0x40>
   15924:	200003c8 	.word	0x200003c8

00015928 <bt_setup_random_id_addr>:
{
   15928:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1592a:	4d14      	ldr	r5, [pc, #80]	; (1597c <bt_setup_random_id_addr+0x54>)
   1592c:	79ec      	ldrb	r4, [r5, #7]
{
   1592e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   15930:	b9f4      	cbnz	r4, 15970 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15932:	2101      	movs	r1, #1
   15934:	a802      	add	r0, sp, #8
   15936:	f7ff ffc7 	bl	158c8 <bt_read_static_addr>
   1593a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   1593c:	b1c0      	cbz	r0, 15970 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1593e:	2716      	movs	r7, #22
   15940:	e00f      	b.n	15962 <bt_setup_random_id_addr+0x3a>
   15942:	ab02      	add	r3, sp, #8
   15944:	fb07 3106 	mla	r1, r7, r6, r3
   15948:	2206      	movs	r2, #6
   1594a:	f10d 0001 	add.w	r0, sp, #1
   1594e:	f008 f90f 	bl	1db70 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15952:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   15954:	4669      	mov	r1, sp
   15956:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   15958:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   1595c:	f7ff fe82 	bl	15664 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15960:	3401      	adds	r4, #1
   15962:	79eb      	ldrb	r3, [r5, #7]
   15964:	b2e6      	uxtb	r6, r4
   15966:	42b3      	cmp	r3, r6
   15968:	d8eb      	bhi.n	15942 <bt_setup_random_id_addr+0x1a>
			return 0;
   1596a:	2000      	movs	r0, #0
}
   1596c:	b009      	add	sp, #36	; 0x24
   1596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   15970:	2100      	movs	r1, #0
   15972:	4608      	mov	r0, r1
   15974:	f7ff ff32 	bl	157dc <bt_id_create>
   15978:	e7f8      	b.n	1596c <bt_setup_random_id_addr+0x44>
   1597a:	bf00      	nop
   1597c:	200003c8 	.word	0x200003c8

00015980 <bt_enable>:
{
   15980:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   15984:	4d33      	ldr	r5, [pc, #204]	; (15a54 <bt_enable+0xd4>)
   15986:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
{
   1598a:	b088      	sub	sp, #32
   1598c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1598e:	2b00      	cmp	r3, #0
   15990:	d059      	beq.n	15a46 <bt_enable+0xc6>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15992:	2101      	movs	r1, #1
   15994:	f105 0098 	add.w	r0, r5, #152	; 0x98
   15998:	f008 fa47 	bl	1de2a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1599c:	f010 0401 	ands.w	r4, r0, #1
   159a0:	d154      	bne.n	15a4c <bt_enable+0xcc>
	ready_cb = cb;
   159a2:	4b2d      	ldr	r3, [pc, #180]	; (15a58 <bt_enable+0xd8>)
   159a4:	f04f 0800 	mov.w	r8, #0
   159a8:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   159aa:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   159ae:	f06f 0308 	mvn.w	r3, #8
   159b2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   159b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   159ba:	e9cd 4400 	strd	r4, r4, [sp]
   159be:	4b27      	ldr	r3, [pc, #156]	; (15a5c <bt_enable+0xdc>)
   159c0:	4927      	ldr	r1, [pc, #156]	; (15a60 <bt_enable+0xe0>)
   159c2:	9404      	str	r4, [sp, #16]
   159c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   159c8:	4826      	ldr	r0, [pc, #152]	; (15a64 <bt_enable+0xe4>)
   159ca:	f005 ff27 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   159ce:	4926      	ldr	r1, [pc, #152]	; (15a68 <bt_enable+0xe8>)
   159d0:	4824      	ldr	r0, [pc, #144]	; (15a64 <bt_enable+0xe4>)
   159d2:	f00b fa2c 	bl	20e2e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   159d6:	f06f 0307 	mvn.w	r3, #7
   159da:	e9cd 4302 	strd	r4, r3, [sp, #8]
   159de:	e9cd 8906 	strd	r8, r9, [sp, #24]
   159e2:	e9cd 4400 	strd	r4, r4, [sp]
   159e6:	4b21      	ldr	r3, [pc, #132]	; (15a6c <bt_enable+0xec>)
   159e8:	4921      	ldr	r1, [pc, #132]	; (15a70 <bt_enable+0xf0>)
   159ea:	9404      	str	r4, [sp, #16]
   159ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   159f0:	4820      	ldr	r0, [pc, #128]	; (15a74 <bt_enable+0xf4>)
   159f2:	f005 ff13 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   159f6:	4920      	ldr	r1, [pc, #128]	; (15a78 <bt_enable+0xf8>)
   159f8:	481e      	ldr	r0, [pc, #120]	; (15a74 <bt_enable+0xf4>)
   159fa:	f00b fa18 	bl	20e2e <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   159fe:	f7fe ff2b 	bl	14858 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   15a02:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
   15a06:	68db      	ldr	r3, [r3, #12]
   15a08:	4798      	blx	r3
	if (err) {
   15a0a:	4604      	mov	r4, r0
   15a0c:	b950      	cbnz	r0, 15a24 <bt_enable+0xa4>
	if (!cb) {
   15a0e:	b96e      	cbnz	r6, 15a2c <bt_enable+0xac>
	err = hci_init();
   15a10:	f7fc fd32 	bl	12478 <hci_init>
	if (err) {
   15a14:	4604      	mov	r4, r0
   15a16:	b928      	cbnz	r0, 15a24 <bt_enable+0xa4>
		err = bt_conn_init();
   15a18:	f000 ffce 	bl	169b8 <bt_conn_init>
		if (err) {
   15a1c:	4604      	mov	r4, r0
   15a1e:	b908      	cbnz	r0, 15a24 <bt_enable+0xa4>
	bt_finalize_init();
   15a20:	f7ff fed2 	bl	157c8 <bt_finalize_init>
}
   15a24:	4620      	mov	r0, r4
   15a26:	b008      	add	sp, #32
   15a28:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15a2c:	2101      	movs	r1, #1
   15a2e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   15a32:	f008 f9fa 	bl	1de2a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15a36:	07c3      	lsls	r3, r0, #31
   15a38:	d4f4      	bmi.n	15a24 <bt_enable+0xa4>
		k_queue_append(&work_q->queue, work);
   15a3a:	4810      	ldr	r0, [pc, #64]	; (15a7c <bt_enable+0xfc>)
   15a3c:	f105 018c 	add.w	r1, r5, #140	; 0x8c
   15a40:	f00b f88f 	bl	20b62 <k_queue_append>
   15a44:	e7ee      	b.n	15a24 <bt_enable+0xa4>
		return -ENODEV;
   15a46:	f06f 0412 	mvn.w	r4, #18
   15a4a:	e7eb      	b.n	15a24 <bt_enable+0xa4>
		return -EALREADY;
   15a4c:	f06f 0444 	mvn.w	r4, #68	; 0x44
   15a50:	e7e8      	b.n	15a24 <bt_enable+0xa4>
   15a52:	bf00      	nop
   15a54:	200003c8 	.word	0x200003c8
   15a58:	20002900 	.word	0x20002900
   15a5c:	00014ddd 	.word	0x00014ddd
   15a60:	20003c80 	.word	0x20003c80
   15a64:	200020a0 	.word	0x200020a0
   15a68:	00022277 	.word	0x00022277
   15a6c:	00014b31 	.word	0x00014b31
   15a70:	20003860 	.word	0x20003860
   15a74:	20002018 	.word	0x20002018
   15a78:	0002227d 	.word	0x0002227d
   15a7c:	20002718 	.word	0x20002718

00015a80 <init_work>:
{
   15a80:	b510      	push	{r4, lr}
	err = hci_init();
   15a82:	f7fc fcf9 	bl	12478 <hci_init>
	if (err) {
   15a86:	4604      	mov	r4, r0
   15a88:	b928      	cbnz	r0, 15a96 <init_work+0x16>
		err = bt_conn_init();
   15a8a:	f000 ff95 	bl	169b8 <bt_conn_init>
		if (err) {
   15a8e:	4604      	mov	r4, r0
   15a90:	b908      	cbnz	r0, 15a96 <init_work+0x16>
	bt_finalize_init();
   15a92:	f7ff fe99 	bl	157c8 <bt_finalize_init>
	if (ready_cb) {
   15a96:	4b04      	ldr	r3, [pc, #16]	; (15aa8 <init_work+0x28>)
   15a98:	681b      	ldr	r3, [r3, #0]
   15a9a:	b11b      	cbz	r3, 15aa4 <init_work+0x24>
		ready_cb(err);
   15a9c:	4620      	mov	r0, r4
}
   15a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15aa2:	4718      	bx	r3
}
   15aa4:	bd10      	pop	{r4, pc}
   15aa6:	bf00      	nop
   15aa8:	20002900 	.word	0x20002900

00015aac <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   15ab0:	690d      	ldr	r5, [r1, #16]
{
   15ab2:	b08f      	sub	sp, #60	; 0x3c
   15ab4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   15ab6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   15ab8:	ebb5 0b03 	subs.w	fp, r5, r3
{
   15abc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15abe:	487e      	ldr	r0, [pc, #504]	; (15cb8 <bt_le_adv_start_legacy+0x20c>)
	struct bt_conn *conn = NULL;
   15ac0:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   15ac2:	bf18      	it	ne
   15ac4:	f04f 0b01 	movne.w	fp, #1
{
   15ac8:	460c      	mov	r4, r1
   15aca:	4691      	mov	r9, r2
   15acc:	f008 f992 	bl	1ddf4 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15ad0:	0787      	lsls	r7, r0, #30
   15ad2:	f140 80e3 	bpl.w	15c9c <bt_le_adv_start_legacy+0x1f0>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15ad6:	4608      	mov	r0, r1
   15ad8:	f7fe ff48 	bl	1496c <valid_adv_param>
   15adc:	4607      	mov	r7, r0
   15ade:	2800      	cmp	r0, #0
   15ae0:	f000 80df 	beq.w	15ca2 <bt_le_adv_start_legacy+0x1f6>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15ae4:	f106 0814 	add.w	r8, r6, #20
   15ae8:	4640      	mov	r0, r8
   15aea:	f008 f983 	bl	1ddf4 <atomic_get>
   15aee:	f3c0 1180 	ubfx	r1, r0, #6, #1
   15af2:	0640      	lsls	r0, r0, #25
   15af4:	f100 80d8 	bmi.w	15ca8 <bt_le_adv_start_legacy+0x1fc>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   15af8:	220f      	movs	r2, #15
   15afa:	a80a      	add	r0, sp, #40	; 0x28
   15afc:	9105      	str	r1, [sp, #20]
   15afe:	f008 f862 	bl	1dbc6 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15b02:	68a3      	ldr	r3, [r4, #8]
   15b04:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b08:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15b0a:	68e3      	ldr	r3, [r4, #12]
   15b0c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b10:	f008 f961 	bl	1ddd6 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   15b14:	7832      	ldrb	r2, [r6, #0]
   15b16:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   15b18:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b1a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   15b1e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15b20:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   15b24:	d004      	beq.n	15b30 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b26:	4864      	ldr	r0, [pc, #400]	; (15cb8 <bt_le_adv_start_legacy+0x20c>)
   15b28:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15b2c:	f008 f96e 	bl	1de0c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   15b30:	4b62      	ldr	r3, [pc, #392]	; (15cbc <bt_le_adv_start_legacy+0x210>)
	adv->id = param->id;
   15b32:	7820      	ldrb	r0, [r4, #0]
   15b34:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   15b36:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   15b3a:	465a      	mov	r2, fp
   15b3c:	6861      	ldr	r1, [r4, #4]
   15b3e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   15b42:	f7ff fb31 	bl	151a8 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   15b46:	4683      	mov	fp, r0
   15b48:	2800      	cmp	r0, #0
   15b4a:	d166      	bne.n	15c1a <bt_le_adv_start_legacy+0x16e>
		return err;
	}

	if (dir_adv) {
   15b4c:	f106 000b 	add.w	r0, r6, #11
   15b50:	2d00      	cmp	r5, #0
   15b52:	d03f      	beq.n	15bd4 <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   15b54:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15b56:	f008 f953 	bl	1de00 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15b5a:	6860      	ldr	r0, [r4, #4]
   15b5c:	07c1      	lsls	r1, r0, #31
   15b5e:	d541      	bpl.n	15be4 <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
   15b60:	2d00      	cmp	r5, #0
   15b62:	d03c      	beq.n	15bde <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   15b64:	f010 0f10 	tst.w	r0, #16
   15b68:	bf14      	ite	ne
   15b6a:	2304      	movne	r3, #4
   15b6c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   15b6e:	6921      	ldr	r1, [r4, #16]
   15b70:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15b74:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   15b78:	f008 f942 	bl	1de00 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15b7c:	210f      	movs	r1, #15
   15b7e:	f242 0006 	movw	r0, #8198	; 0x2006
   15b82:	f7ff fa27 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   15b86:	4683      	mov	fp, r0
   15b88:	2800      	cmp	r0, #0
   15b8a:	f000 8090 	beq.w	15cae <bt_le_adv_start_legacy+0x202>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
   15b8e:	220f      	movs	r2, #15
   15b90:	a90a      	add	r1, sp, #40	; 0x28
   15b92:	3008      	adds	r0, #8
   15b94:	f00a fcec 	bl	20570 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15b98:	2200      	movs	r2, #0
   15b9a:	4659      	mov	r1, fp
   15b9c:	f242 0006 	movw	r0, #8198	; 0x2006
   15ba0:	f7ff fa72 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   15ba4:	2800      	cmp	r0, #0
   15ba6:	f040 8085 	bne.w	15cb4 <bt_le_adv_start_legacy+0x208>
		return err;
	}

	if (!dir_adv) {
   15baa:	b335      	cbz	r5, 15bfa <bt_le_adv_start_legacy+0x14e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15bac:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15bae:	07da      	lsls	r2, r3, #31
   15bb0:	d437      	bmi.n	15c22 <bt_le_adv_start_legacy+0x176>
	return set_le_adv_enable_legacy(adv, enable);
   15bb2:	2101      	movs	r1, #1
   15bb4:	4630      	mov	r0, r6
   15bb6:	f7ff fb51 	bl	1525c <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   15bba:	4683      	mov	fp, r0
   15bbc:	9807      	ldr	r0, [sp, #28]
   15bbe:	f1bb 0f00 	cmp.w	fp, #0
   15bc2:	d065      	beq.n	15c90 <bt_le_adv_start_legacy+0x1e4>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15bc4:	b348      	cbz	r0, 15c1a <bt_le_adv_start_legacy+0x16e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15bc6:	2100      	movs	r1, #0
   15bc8:	f000 fcee 	bl	165a8 <bt_conn_set_state>
			bt_conn_unref(conn);
   15bcc:	9807      	ldr	r0, [sp, #28]
   15bce:	f008 fdcd 	bl	1e76c <bt_conn_unref>
   15bd2:	e022      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15bd4:	9508      	str	r5, [sp, #32]
   15bd6:	a908      	add	r1, sp, #32
   15bd8:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   15bdc:	e7bb      	b.n	15b56 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   15bde:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   15be2:	e7cb      	b.n	15b7c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15be4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15be6:	b933      	cbnz	r3, 15bf6 <bt_le_adv_start_legacy+0x14a>
   15be8:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   15bec:	f1c7 0303 	rsb	r3, r7, #3
   15bf0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15bf4:	e7c2      	b.n	15b7c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15bf6:	2701      	movs	r7, #1
   15bf8:	e7f8      	b.n	15bec <bt_le_adv_start_legacy+0x140>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15bfa:	6863      	ldr	r3, [r4, #4]
   15bfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15c00:	e9cd 7301 	strd	r7, r3, [sp, #4]
   15c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15c06:	9300      	str	r3, [sp, #0]
   15c08:	4652      	mov	r2, sl
   15c0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15c0c:	4649      	mov	r1, r9
   15c0e:	4630      	mov	r0, r6
   15c10:	f7ff fb52 	bl	152b8 <le_adv_update.constprop.0>
		if (err) {
   15c14:	4683      	mov	fp, r0
   15c16:	2800      	cmp	r0, #0
   15c18:	d0c8      	beq.n	15bac <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   15c1a:	4658      	mov	r0, fp
   15c1c:	b00f      	add	sp, #60	; 0x3c
   15c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   15c22:	a907      	add	r1, sp, #28
   15c24:	4630      	mov	r0, r6
   15c26:	f7ff f96d 	bl	14f04 <le_adv_start_add_conn>
		if (err) {
   15c2a:	4683      	mov	fp, r0
   15c2c:	2800      	cmp	r0, #0
   15c2e:	d0c0      	beq.n	15bb2 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   15c30:	f110 0f0c 	cmn.w	r0, #12
   15c34:	d1f1      	bne.n	15c1a <bt_le_adv_start_legacy+0x16e>
   15c36:	2d00      	cmp	r5, #0
   15c38:	d1ef      	bne.n	15c1a <bt_le_adv_start_legacy+0x16e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15c3a:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15c3c:	079b      	lsls	r3, r3, #30
   15c3e:	d4ec      	bmi.n	15c1a <bt_le_adv_start_legacy+0x16e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15c40:	6860      	ldr	r0, [r4, #4]
   15c42:	f080 0002 	eor.w	r0, r0, #2
   15c46:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   15c4a:	f00b 0201 	and.w	r2, fp, #1
   15c4e:	210c      	movs	r1, #12
   15c50:	4640      	mov	r0, r8
   15c52:	f008 f8f9 	bl	1de48 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   15c56:	6862      	ldr	r2, [r4, #4]
   15c58:	2107      	movs	r1, #7
   15c5a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   15c5e:	4640      	mov	r0, r8
   15c60:	f008 f8f2 	bl	1de48 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15c64:	6862      	ldr	r2, [r4, #4]
   15c66:	2108      	movs	r1, #8
   15c68:	f002 0201 	and.w	r2, r2, #1
   15c6c:	4640      	mov	r0, r8
   15c6e:	f008 f8eb 	bl	1de48 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   15c72:	463a      	mov	r2, r7
   15c74:	2109      	movs	r1, #9
   15c76:	4640      	mov	r0, r8
   15c78:	f008 f8e6 	bl	1de48 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15c7c:	6862      	ldr	r2, [r4, #4]
   15c7e:	210b      	movs	r1, #11
   15c80:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15c84:	4640      	mov	r0, r8
   15c86:	f008 f8df 	bl	1de48 <atomic_set_bit_to>
	return 0;
   15c8a:	f04f 0b00 	mov.w	fp, #0
   15c8e:	e7c4      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15c90:	b108      	cbz	r0, 15c96 <bt_le_adv_start_legacy+0x1ea>
		bt_conn_unref(conn);
   15c92:	f008 fd6b 	bl	1e76c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15c96:	2d00      	cmp	r5, #0
   15c98:	d1d7      	bne.n	15c4a <bt_le_adv_start_legacy+0x19e>
   15c9a:	e7d1      	b.n	15c40 <bt_le_adv_start_legacy+0x194>
		return -EAGAIN;
   15c9c:	f06f 0b0a 	mvn.w	fp, #10
   15ca0:	e7bb      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
		return -EINVAL;
   15ca2:	f06f 0b15 	mvn.w	fp, #21
   15ca6:	e7b8      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
		return -EALREADY;
   15ca8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   15cac:	e7b5      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
		return -ENOBUFS;
   15cae:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   15cb2:	e7b2      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
   15cb4:	4683      	mov	fp, r0
   15cb6:	e7b0      	b.n	15c1a <bt_le_adv_start_legacy+0x16e>
   15cb8:	20000460 	.word	0x20000460
   15cbc:	200003c8 	.word	0x200003c8

00015cc0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15cc0:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15cc2:	9c04      	ldr	r4, [sp, #16]
   15cc4:	e9cd 3400 	strd	r3, r4, [sp]
   15cc8:	4613      	mov	r3, r2
   15cca:	460a      	mov	r2, r1
   15ccc:	4601      	mov	r1, r0
   15cce:	4802      	ldr	r0, [pc, #8]	; (15cd8 <bt_le_adv_start+0x18>)
   15cd0:	f7ff feec 	bl	15aac <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   15cd4:	b002      	add	sp, #8
   15cd6:	bd10      	pop	{r4, pc}
   15cd8:	200003e0 	.word	0x200003e0

00015cdc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15cdc:	b530      	push	{r4, r5, lr}
   15cde:	4c22      	ldr	r4, [pc, #136]	; (15d68 <bt_le_adv_stop+0x8c>)
   15ce0:	b085      	sub	sp, #20
   15ce2:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15ce6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15cea:	f008 f88f 	bl	1de0c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15cee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15cf2:	f008 f87f 	bl	1ddf4 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15cf6:	0642      	lsls	r2, r0, #25
   15cf8:	f3c0 1380 	ubfx	r3, r0, #6, #1
   15cfc:	d531      	bpl.n	15d62 <bt_le_adv_stop+0x86>
   15cfe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15d02:	f008 f877 	bl	1ddf4 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15d06:	05c3      	lsls	r3, r0, #23
   15d08:	d521      	bpl.n	15d4e <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15d0a:	2300      	movs	r3, #0
   15d0c:	4669      	mov	r1, sp
   15d0e:	f104 0023 	add.w	r0, r4, #35	; 0x23
   15d12:	9300      	str	r3, [sp, #0]
   15d14:	f8cd 3003 	str.w	r3, [sp, #3]
   15d18:	f008 f875 	bl	1de06 <bt_addr_le_cmp>
   15d1c:	7e25      	ldrb	r5, [r4, #24]
   15d1e:	b9e0      	cbnz	r0, 15d5a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   15d20:	4b12      	ldr	r3, [pc, #72]	; (15d6c <bt_le_adv_stop+0x90>)
   15d22:	889a      	ldrh	r2, [r3, #4]
   15d24:	6818      	ldr	r0, [r3, #0]
   15d26:	799b      	ldrb	r3, [r3, #6]
   15d28:	f8ad 200c 	strh.w	r2, [sp, #12]
   15d2c:	9002      	str	r0, [sp, #8]
   15d2e:	f88d 300e 	strb.w	r3, [sp, #14]
   15d32:	2204      	movs	r2, #4
   15d34:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15d36:	4628      	mov	r0, r5
   15d38:	f000 fc10 	bl	1655c <bt_conn_lookup_state_le>
   15d3c:	4604      	mov	r4, r0
	if (conn) {
   15d3e:	b130      	cbz	r0, 15d4e <bt_le_adv_stop+0x72>
		conn->err = status;
   15d40:	2100      	movs	r1, #0
   15d42:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15d44:	f000 fc30 	bl	165a8 <bt_conn_set_state>
		bt_conn_unref(conn);
   15d48:	4620      	mov	r0, r4
   15d4a:	f008 fd0f 	bl	1e76c <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
   15d4e:	4808      	ldr	r0, [pc, #32]	; (15d70 <bt_le_adv_stop+0x94>)
   15d50:	2100      	movs	r1, #0
   15d52:	f7ff fa83 	bl	1525c <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   15d56:	b005      	add	sp, #20
   15d58:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15d5a:	2205      	movs	r2, #5
   15d5c:	f104 0123 	add.w	r1, r4, #35	; 0x23
   15d60:	e7e9      	b.n	15d36 <bt_le_adv_stop+0x5a>
		return 0;
   15d62:	4618      	mov	r0, r3
   15d64:	e7f7      	b.n	15d56 <bt_le_adv_stop+0x7a>
   15d66:	bf00      	nop
   15d68:	200003c8 	.word	0x200003c8
   15d6c:	00021598 	.word	0x00021598
   15d70:	200003e0 	.word	0x200003e0

00015d74 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15d74:	b513      	push	{r0, r1, r4, lr}
   15d76:	4818      	ldr	r0, [pc, #96]	; (15dd8 <bt_le_adv_resume+0x64>)
   15d78:	f008 f83c 	bl	1ddf4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15d7c:	04c1      	lsls	r1, r0, #19
   15d7e:	d529      	bpl.n	15dd4 <bt_le_adv_resume+0x60>
   15d80:	4815      	ldr	r0, [pc, #84]	; (15dd8 <bt_le_adv_resume+0x64>)
   15d82:	f008 f837 	bl	1ddf4 <atomic_get>
   15d86:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15d88:	f3c0 1480 	ubfx	r4, r0, #6, #1
   15d8c:	d422      	bmi.n	15dd4 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15d8e:	4812      	ldr	r0, [pc, #72]	; (15dd8 <bt_le_adv_resume+0x64>)
   15d90:	f008 f830 	bl	1ddf4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15d94:	05c3      	lsls	r3, r0, #23
   15d96:	d51d      	bpl.n	15dd4 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   15d98:	4810      	ldr	r0, [pc, #64]	; (15ddc <bt_le_adv_resume+0x68>)
   15d9a:	a901      	add	r1, sp, #4
   15d9c:	f7ff f8b2 	bl	14f04 <le_adv_start_add_conn>
	if (err) {
   15da0:	b9c0      	cbnz	r0, 15dd4 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   15da2:	480e      	ldr	r0, [pc, #56]	; (15ddc <bt_le_adv_resume+0x68>)
   15da4:	2101      	movs	r1, #1
   15da6:	f7ff fa59 	bl	1525c <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   15daa:	b150      	cbz	r0, 15dc2 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15dac:	4621      	mov	r1, r4
   15dae:	9801      	ldr	r0, [sp, #4]
   15db0:	f000 fbfa 	bl	165a8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15db4:	4808      	ldr	r0, [pc, #32]	; (15dd8 <bt_le_adv_resume+0x64>)
   15db6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15dba:	f008 f827 	bl	1de0c <atomic_and>
	return (old & mask) != 0;
   15dbe:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   15dc2:	9801      	ldr	r0, [sp, #4]
   15dc4:	f008 fcd2 	bl	1e76c <bt_conn_unref>
	if (persist_paused) {
   15dc8:	b124      	cbz	r4, 15dd4 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15dca:	4803      	ldr	r0, [pc, #12]	; (15dd8 <bt_le_adv_resume+0x64>)
   15dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   15dd0:	f008 f82b 	bl	1de2a <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   15dd4:	b002      	add	sp, #8
   15dd6:	bd10      	pop	{r4, pc}
   15dd8:	200003f4 	.word	0x200003f4
   15ddc:	200003e0 	.word	0x200003e0

00015de0 <enh_conn_complete>:
{
   15de0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15de4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
   15de8:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15dea:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15dee:	4851      	ldr	r0, [pc, #324]	; (15f34 <enh_conn_complete+0x154>)
   15df0:	f008 f80c 	bl	1de0c <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   15df4:	0443      	lsls	r3, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15df6:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   15dfa:	d504      	bpl.n	15e06 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   15dfc:	494e      	ldr	r1, [pc, #312]	; (15f38 <enh_conn_complete+0x158>)
   15dfe:	2200      	movs	r2, #0
   15e00:	2002      	movs	r0, #2
   15e02:	f003 f9f5 	bl	191f0 <bt_keys_foreach>
	if (evt->status) {
   15e06:	7825      	ldrb	r5, [r4, #0]
   15e08:	b19d      	cbz	r5, 15e32 <enh_conn_complete+0x52>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e0a:	2d3c      	cmp	r5, #60	; 0x3c
   15e0c:	d13e      	bne.n	15e8c <enh_conn_complete+0xac>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15e0e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15e12:	484a      	ldr	r0, [pc, #296]	; (15f3c <enh_conn_complete+0x15c>)
   15e14:	f007 fffa 	bl	1de0c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   15e18:	2000      	movs	r0, #0
   15e1a:	f7fe fe6b 	bl	14af4 <find_pending_connect.part.0>
		if (!conn) {
   15e1e:	4604      	mov	r4, r0
   15e20:	b3a0      	cbz	r0, 15e8c <enh_conn_complete+0xac>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15e22:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15e24:	2100      	movs	r1, #0
   15e26:	f000 fbbf 	bl	165a8 <bt_conn_set_state>
		bt_conn_unref(conn);
   15e2a:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   15e2c:	f008 fc9e 	bl	1e76c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15e30:	e02c      	b.n	15e8c <enh_conn_complete+0xac>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15e32:	7923      	ldrb	r3, [r4, #4]
   15e34:	3b02      	subs	r3, #2
   15e36:	2b01      	cmp	r3, #1
   15e38:	f104 0604 	add.w	r6, r4, #4
   15e3c:	d829      	bhi.n	15e92 <enh_conn_complete+0xb2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15e3e:	4631      	mov	r1, r6
   15e40:	a802      	add	r0, sp, #8
   15e42:	f007 ffdd 	bl	1de00 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15e46:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15e4a:	2206      	movs	r2, #6
   15e4c:	3b02      	subs	r3, #2
   15e4e:	f104 0111 	add.w	r1, r4, #17
   15e52:	f10d 0001 	add.w	r0, sp, #1
   15e56:	f88d 3008 	strb.w	r3, [sp, #8]
   15e5a:	f007 fe89 	bl	1db70 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15e5e:	2301      	movs	r3, #1
   15e60:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   15e64:	78e3      	ldrb	r3, [r4, #3]
   15e66:	2b01      	cmp	r3, #1
   15e68:	d10c      	bne.n	15e84 <enh_conn_complete+0xa4>
   15e6a:	a802      	add	r0, sp, #8
   15e6c:	f7fe fe42 	bl	14af4 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e70:	78e3      	ldrb	r3, [r4, #3]
   15e72:	2b01      	cmp	r3, #1
   15e74:	4605      	mov	r5, r0
   15e76:	d104      	bne.n	15e82 <enh_conn_complete+0xa2>
   15e78:	4830      	ldr	r0, [pc, #192]	; (15f3c <enh_conn_complete+0x15c>)
   15e7a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15e7e:	f007 ffc5 	bl	1de0c <atomic_and>
	if (!conn) {
   15e82:	b9cd      	cbnz	r5, 15eb8 <enh_conn_complete+0xd8>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15e84:	211f      	movs	r1, #31
   15e86:	4640      	mov	r0, r8
   15e88:	f008 fa2e 	bl	1e2e8 <bt_hci_disconnect>
}
   15e8c:	b004      	add	sp, #16
   15e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   15e92:	78e3      	ldrb	r3, [r4, #3]
   15e94:	2b01      	cmp	r3, #1
   15e96:	bf04      	itt	eq
   15e98:	4b29      	ldreq	r3, [pc, #164]	; (15f40 <enh_conn_complete+0x160>)
   15e9a:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
   15e9e:	4631      	mov	r1, r6
   15ea0:	4628      	mov	r0, r5
   15ea2:	f008 fa19 	bl	1e2d8 <bt_lookup_id_addr>
   15ea6:	4601      	mov	r1, r0
   15ea8:	a802      	add	r0, sp, #8
   15eaa:	f007 ffa9 	bl	1de00 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15eae:	4631      	mov	r1, r6
   15eb0:	4668      	mov	r0, sp
   15eb2:	f007 ffa5 	bl	1de00 <bt_addr_le_copy>
   15eb6:	e7d5      	b.n	15e64 <enh_conn_complete+0x84>
	conn->handle = handle;
   15eb8:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15eba:	a902      	add	r1, sp, #8
	conn->handle = handle;
   15ebc:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15ec0:	f007 ff9e 	bl	1de00 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15ec4:	7e22      	ldrb	r2, [r4, #24]
   15ec6:	7de3      	ldrb	r3, [r4, #23]
   15ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ecc:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15ed0:	7ea2      	ldrb	r2, [r4, #26]
   15ed2:	7e63      	ldrb	r3, [r4, #25]
   15ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ed8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15edc:	7ee3      	ldrb	r3, [r4, #27]
   15ede:	7f22      	ldrb	r2, [r4, #28]
   15ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ee4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   15ee8:	78e3      	ldrb	r3, [r4, #3]
   15eea:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   15eec:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15eee:	2b01      	cmp	r3, #1
	conn->err = 0U;
   15ef0:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ef2:	d116      	bne.n	15f22 <enh_conn_complete+0x142>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   15ef4:	4669      	mov	r1, sp
   15ef6:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   15efa:	f007 ff81 	bl	1de00 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   15efe:	7a29      	ldrb	r1, [r5, #8]
   15f00:	4e0f      	ldr	r6, [pc, #60]	; (15f40 <enh_conn_complete+0x160>)
   15f02:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   15f06:	4431      	add	r1, r6
   15f08:	f105 0096 	add.w	r0, r5, #150	; 0x96
   15f0c:	f007 ff78 	bl	1de00 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   15f10:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   15f14:	4622      	mov	r2, r4
   15f16:	f001 0340 	and.w	r3, r1, #64	; 0x40
   15f1a:	4313      	orrs	r3, r2
   15f1c:	d001      	beq.n	15f22 <enh_conn_complete+0x142>
			bt_le_adv_resume();
   15f1e:	f7ff ff29 	bl	15d74 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15f22:	2107      	movs	r1, #7
   15f24:	4628      	mov	r0, r5
   15f26:	f000 fb3f 	bl	165a8 <bt_conn_set_state>
	conn_auto_initiate(conn);
   15f2a:	4628      	mov	r0, r5
   15f2c:	f7ff fa38 	bl	153a0 <conn_auto_initiate>
	bt_conn_unref(conn);
   15f30:	4628      	mov	r0, r5
   15f32:	e77b      	b.n	15e2c <enh_conn_complete+0x4c>
   15f34:	20000460 	.word	0x20000460
   15f38:	0001e459 	.word	0x0001e459
   15f3c:	200003f4 	.word	0x200003f4
   15f40:	200003c8 	.word	0x200003c8

00015f44 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15f44:	b538      	push	{r3, r4, r5, lr}
   15f46:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
   15f48:	4805      	ldr	r0, [pc, #20]	; (15f60 <bt_buf_get_rx+0x1c>)
   15f4a:	f00a fab5 	bl	204b8 <net_buf_alloc_fixed>
#endif

	if (buf) {
   15f4e:	4604      	mov	r4, r0
   15f50:	b120      	cbz	r0, 15f5c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
   15f52:	2100      	movs	r1, #0
   15f54:	3008      	adds	r0, #8
   15f56:	f00a face 	bl	204f6 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
   15f5a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15f5c:	4620      	mov	r0, r4
   15f5e:	bd38      	pop	{r3, r4, r5, pc}
   15f60:	20000aa4 	.word	0x20000aa4

00015f64 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15f64:	b570      	push	{r4, r5, r6, lr}
   15f66:	4602      	mov	r2, r0
   15f68:	460b      	mov	r3, r1
	__asm__ volatile(
   15f6a:	f04f 0140 	mov.w	r1, #64	; 0x40
   15f6e:	f3ef 8511 	mrs	r5, BASEPRI
   15f72:	f381 8811 	msr	BASEPRI, r1
   15f76:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   15f7a:	480c      	ldr	r0, [pc, #48]	; (15fac <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   15f7c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   15f7e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   15f82:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   15f86:	f385 8811 	msr	BASEPRI, r5
   15f8a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   15f8e:	b924      	cbnz	r4, 15f9a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15f94:	2001      	movs	r0, #1
   15f96:	f7ff bfd5 	b.w	15f44 <bt_buf_get_rx>
   15f9a:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
   15f9c:	f104 0008 	add.w	r0, r4, #8
   15fa0:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   15fa2:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
   15fa4:	f00a faa7 	bl	204f6 <net_buf_simple_reserve>
}
   15fa8:	4620      	mov	r0, r4
   15faa:	bd70      	pop	{r4, r5, r6, pc}
   15fac:	200003c8 	.word	0x200003c8

00015fb0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
   15fb0:	b570      	push	{r4, r5, r6, lr}
   15fb2:	4604      	mov	r4, r0
	switch (evt) {
   15fb4:	2c0f      	cmp	r4, #15
{
   15fb6:	460d      	mov	r5, r1
   15fb8:	4610      	mov	r0, r2
   15fba:	4619      	mov	r1, r3
	switch (evt) {
   15fbc:	d805      	bhi.n	15fca <bt_buf_get_evt+0x1a>
   15fbe:	2c0d      	cmp	r4, #13
   15fc0:	d912      	bls.n	15fe8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15fc6:	f7ff bfcd 	b.w	15f64 <bt_buf_get_cmd_complete>
	switch (evt) {
   15fca:	2c13      	cmp	r4, #19
   15fcc:	d10c      	bne.n	15fe8 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
   15fce:	480b      	ldr	r0, [pc, #44]	; (15ffc <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
   15fd0:	f00a fa72 	bl	204b8 <net_buf_alloc_fixed>
			if (buf) {
   15fd4:	4604      	mov	r4, r0
   15fd6:	b128      	cbz	r0, 15fe4 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
   15fd8:	2100      	movs	r1, #0
   15fda:	3008      	adds	r0, #8
   15fdc:	f00a fa8b 	bl	204f6 <net_buf_simple_reserve>
   15fe0:	2301      	movs	r3, #1
   15fe2:	7523      	strb	r3, [r4, #20]
}
   15fe4:	4620      	mov	r0, r4
   15fe6:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
   15fe8:	4602      	mov	r2, r0
   15fea:	460b      	mov	r3, r1
		if (discardable) {
   15fec:	b10d      	cbz	r5, 15ff2 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
   15fee:	4804      	ldr	r0, [pc, #16]	; (16000 <bt_buf_get_evt+0x50>)
   15ff0:	e7ee      	b.n	15fd0 <bt_buf_get_evt+0x20>
}
   15ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15ff6:	2001      	movs	r0, #1
   15ff8:	f7ff bfa4 	b.w	15f44 <bt_buf_get_rx>
   15ffc:	20000acc 	.word	0x20000acc
   16000:	20000a2c 	.word	0x20000a2c

00016004 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16006:	4e17      	ldr	r6, [pc, #92]	; (16064 <bt_pub_key_gen+0x60>)
   16008:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
   1600c:	f003 0306 	and.w	r3, r3, #6
   16010:	2b06      	cmp	r3, #6
   16012:	d122      	bne.n	1605a <bt_pub_key_gen+0x56>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
   16014:	4f14      	ldr	r7, [pc, #80]	; (16068 <bt_pub_key_gen+0x64>)
   16016:	683b      	ldr	r3, [r7, #0]
   16018:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
   1601a:	6038      	str	r0, [r7, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1601c:	2110      	movs	r1, #16
   1601e:	f106 0098 	add.w	r0, r6, #152	; 0x98
   16022:	f007 ff02 	bl	1de2a <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16026:	f010 0510 	ands.w	r5, r0, #16
   1602a:	d119      	bne.n	16060 <bt_pub_key_gen+0x5c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1602c:	f06f 0108 	mvn.w	r1, #8
   16030:	f106 0098 	add.w	r0, r6, #152	; 0x98
   16034:	f007 feea 	bl	1de0c <atomic_and>
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16038:	462a      	mov	r2, r5
   1603a:	4629      	mov	r1, r5
   1603c:	f242 0025 	movw	r0, #8229	; 0x2025
   16040:	f7ff f822 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   16044:	4604      	mov	r4, r0
   16046:	b130      	cbz	r0, 16056 <bt_pub_key_gen+0x52>
   16048:	f06f 0110 	mvn.w	r1, #16
   1604c:	f106 0098 	add.w	r0, r6, #152	; 0x98
   16050:	f007 fedc 	bl	1de0c <atomic_and>
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
   16054:	603d      	str	r5, [r7, #0]
		return err;
	}

	return 0;
}
   16056:	4620      	mov	r0, r4
   16058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
   1605a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1605e:	e7fa      	b.n	16056 <bt_pub_key_gen+0x52>
		return 0;
   16060:	2400      	movs	r4, #0
   16062:	e7f8      	b.n	16056 <bt_pub_key_gen+0x52>
   16064:	200003c8 	.word	0x200003c8
   16068:	200028fc 	.word	0x200028fc

0001606c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   1606c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1606e:	4804      	ldr	r0, [pc, #16]	; (16080 <bt_pub_key_get+0x14>)
   16070:	f007 fec0 	bl	1ddf4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16074:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
   16078:	4802      	ldr	r0, [pc, #8]	; (16084 <bt_pub_key_get+0x18>)
   1607a:	bf08      	it	eq
   1607c:	2000      	moveq	r0, #0
   1607e:	bd08      	pop	{r3, pc}
   16080:	20000460 	.word	0x20000460
   16084:	20002f12 	.word	0x20002f12

00016088 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   16088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1608a:	4d1a      	ldr	r5, [pc, #104]	; (160f4 <bt_dh_key_gen+0x6c>)
   1608c:	682b      	ldr	r3, [r5, #0]
{
   1608e:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16090:	b113      	cbz	r3, 16098 <bt_dh_key_gen+0x10>
		return -EBUSY;
   16092:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   16096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16098:	4817      	ldr	r0, [pc, #92]	; (160f8 <bt_dh_key_gen+0x70>)
   1609a:	f007 feab 	bl	1ddf4 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1609e:	06c2      	lsls	r2, r0, #27
   160a0:	f3c0 1700 	ubfx	r7, r0, #4, #1
   160a4:	d4f5      	bmi.n	16092 <bt_dh_key_gen+0xa>
   160a6:	4814      	ldr	r0, [pc, #80]	; (160f8 <bt_dh_key_gen+0x70>)
   160a8:	f007 fea4 	bl	1ddf4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   160ac:	0703      	lsls	r3, r0, #28
   160ae:	d51d      	bpl.n	160ec <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
   160b0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   160b2:	f242 0026 	movw	r0, #8230	; 0x2026
   160b6:	2140      	movs	r1, #64	; 0x40
   160b8:	f7fe ff8c 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   160bc:	4604      	mov	r4, r0
   160be:	b918      	cbnz	r0, 160c8 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
   160c0:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   160c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   160c6:	e7e6      	b.n	16096 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
   160c8:	2140      	movs	r1, #64	; 0x40
   160ca:	3008      	adds	r0, #8
   160cc:	f00a fa4a 	bl	20564 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   160d0:	2240      	movs	r2, #64	; 0x40
   160d2:	4631      	mov	r1, r6
   160d4:	f007 fd4c 	bl	1db70 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   160d8:	463a      	mov	r2, r7
   160da:	4621      	mov	r1, r4
   160dc:	f242 0026 	movw	r0, #8230	; 0x2026
   160e0:	f7fe ffd2 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   160e4:	2800      	cmp	r0, #0
   160e6:	d0d6      	beq.n	16096 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
   160e8:	602f      	str	r7, [r5, #0]
		return err;
   160ea:	e7d4      	b.n	16096 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
   160ec:	f06f 0030 	mvn.w	r0, #48	; 0x30
   160f0:	e7d1      	b.n	16096 <bt_dh_key_gen+0xe>
   160f2:	bf00      	nop
   160f4:	200028f8 	.word	0x200028f8
   160f8:	20000460 	.word	0x20000460

000160fc <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   160fc:	2300      	movs	r3, #0
	tx->user_data = NULL;
   160fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   16102:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   16104:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   16106:	4801      	ldr	r0, [pc, #4]	; (1610c <tx_free+0x10>)
   16108:	f00a bd2b 	b.w	20b62 <k_queue_append>
   1610c:	200009ec 	.word	0x200009ec

00016110 <notify_connected>:
{
   16110:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   16112:	4b09      	ldr	r3, [pc, #36]	; (16138 <notify_connected+0x28>)
   16114:	681d      	ldr	r5, [r3, #0]
{
   16116:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16118:	7b21      	ldrb	r1, [r4, #12]
   1611a:	b92d      	cbnz	r5, 16128 <notify_connected+0x18>
	if (!conn->err) {
   1611c:	b951      	cbnz	r1, 16134 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1611e:	4620      	mov	r0, r4
}
   16120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   16124:	f001 bf9a 	b.w	1805c <bt_gatt_connected>
		if (cb->connected) {
   16128:	682b      	ldr	r3, [r5, #0]
   1612a:	b10b      	cbz	r3, 16130 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1612c:	4620      	mov	r0, r4
   1612e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16130:	69ad      	ldr	r5, [r5, #24]
   16132:	e7f1      	b.n	16118 <notify_connected+0x8>
}
   16134:	bd38      	pop	{r3, r4, r5, pc}
   16136:	bf00      	nop
   16138:	20002908 	.word	0x20002908

0001613c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   1613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16140:	694d      	ldr	r5, [r1, #20]
{
   16142:	4604      	mov	r4, r0
   16144:	460e      	mov	r6, r1
   16146:	4690      	mov	r8, r2
   16148:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1614a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1614e:	483f      	ldr	r0, [pc, #252]	; (1624c <send_frag+0x110>)
   16150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16154:	f005 faee 	bl	1b734 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   16158:	7b63      	ldrb	r3, [r4, #13]
   1615a:	2b07      	cmp	r3, #7
   1615c:	d146      	bne.n	161ec <send_frag+0xb0>
	__asm__ volatile(
   1615e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16162:	f3ef 8211 	mrs	r2, BASEPRI
   16166:	f383 8811 	msr	BASEPRI, r3
   1616a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1616e:	2d00      	cmp	r5, #0
   16170:	d04e      	beq.n	16210 <send_frag+0xd4>
	parent->next = child;
   16172:	2300      	movs	r3, #0
   16174:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   16176:	69a3      	ldr	r3, [r4, #24]
   16178:	2b00      	cmp	r3, #0
   1617a:	d146      	bne.n	1620a <send_frag+0xce>
	list->head = node;
   1617c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   16180:	f382 8811 	msr	BASEPRI, r2
   16184:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
   16188:	2104      	movs	r1, #4
   1618a:	f106 0008 	add.w	r0, r6, #8
   1618e:	f00a fa00 	bl	20592 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   16192:	8823      	ldrh	r3, [r4, #0]
   16194:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   16198:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1619c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1619e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   161a2:	3b04      	subs	r3, #4
   161a4:	8043      	strh	r3, [r0, #2]
   161a6:	2302      	movs	r3, #2
   161a8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   161aa:	4630      	mov	r0, r6
   161ac:	f008 f972 	bl	1e494 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   161b0:	2800      	cmp	r0, #0
   161b2:	d049      	beq.n	16248 <send_frag+0x10c>
	__asm__ volatile(
   161b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   161b8:	f3ef 8111 	mrs	r1, BASEPRI
   161bc:	f383 8811 	msr	BASEPRI, r3
   161c0:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   161c4:	2d00      	cmp	r5, #0
   161c6:	d039      	beq.n	1623c <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   161c8:	6963      	ldr	r3, [r4, #20]
   161ca:	2200      	movs	r2, #0
   161cc:	b153      	cbz	r3, 161e4 <send_frag+0xa8>
   161ce:	429d      	cmp	r5, r3
   161d0:	d131      	bne.n	16236 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   161d2:	682b      	ldr	r3, [r5, #0]
   161d4:	bb4a      	cbnz	r2, 1622a <send_frag+0xee>
   161d6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   161d8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   161da:	4295      	cmp	r5, r2
   161dc:	d100      	bne.n	161e0 <send_frag+0xa4>
	list->tail = node;
   161de:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   161e0:	2300      	movs	r3, #0
   161e2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   161e4:	f381 8811 	msr	BASEPRI, r1
   161e8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   161ec:	4817      	ldr	r0, [pc, #92]	; (1624c <send_frag+0x110>)
   161ee:	f005 fa7b 	bl	1b6e8 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   161f2:	b115      	cbz	r5, 161fa <send_frag+0xbe>
		tx_free(tx);
   161f4:	4628      	mov	r0, r5
   161f6:	f7ff ff81 	bl	160fc <tx_free>
	}

	if (always_consume) {
   161fa:	b11f      	cbz	r7, 16204 <send_frag+0xc8>
		net_buf_unref(buf);
   161fc:	4630      	mov	r0, r6
   161fe:	f003 f921 	bl	19444 <net_buf_unref>
	}
	return false;
   16202:	2700      	movs	r7, #0
}
   16204:	4638      	mov	r0, r7
   16206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1620a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1620c:	61a5      	str	r5, [r4, #24]
}
   1620e:	e7b7      	b.n	16180 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   16210:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   16212:	b133      	cbz	r3, 16222 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   16214:	f103 090c 	add.w	r9, r3, #12
   16218:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1621a:	3301      	adds	r3, #1
   1621c:	f8c9 3000 	str.w	r3, [r9]
   16220:	e7ae      	b.n	16180 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16222:	69e3      	ldr	r3, [r4, #28]
   16224:	f104 091c 	add.w	r9, r4, #28
   16228:	e7f7      	b.n	1621a <send_frag+0xde>
	parent->next = child;
   1622a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1622c:	69a3      	ldr	r3, [r4, #24]
   1622e:	429d      	cmp	r5, r3
	list->tail = node;
   16230:	bf08      	it	eq
   16232:	61a2      	streq	r2, [r4, #24]
}
   16234:	e7d4      	b.n	161e0 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16236:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16238:	681b      	ldr	r3, [r3, #0]
   1623a:	e7c7      	b.n	161cc <send_frag+0x90>
			(*pending_no_cb)--;
   1623c:	f8d9 3000 	ldr.w	r3, [r9]
   16240:	3b01      	subs	r3, #1
   16242:	f8c9 3000 	str.w	r3, [r9]
   16246:	e7cd      	b.n	161e4 <send_frag+0xa8>
	return true;
   16248:	2701      	movs	r7, #1
   1624a:	e7db      	b.n	16204 <send_frag+0xc8>
   1624c:	20000498 	.word	0x20000498

00016250 <bt_conn_get_pkts>:
}
   16250:	4800      	ldr	r0, [pc, #0]	; (16254 <bt_conn_get_pkts+0x4>)
   16252:	4770      	bx	lr
   16254:	20000498 	.word	0x20000498

00016258 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   16258:	1d03      	adds	r3, r0, #4
{
   1625a:	b570      	push	{r4, r5, r6, lr}
   1625c:	4604      	mov	r4, r0
   1625e:	4618      	mov	r0, r3
   16260:	f008 f95e 	bl	1e520 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   16264:	0582      	lsls	r2, r0, #22
   16266:	d519      	bpl.n	1629c <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   16268:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1626c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   16270:	4291      	cmp	r1, r2
   16272:	d813      	bhi.n	1629c <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   16274:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   16278:	4291      	cmp	r1, r2
   1627a:	d30f      	bcc.n	1629c <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
   1627c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   16280:	4291      	cmp	r1, r2
   16282:	d10b      	bne.n	1629c <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16284:	f3bf 8f5b 	dmb	ish
   16288:	e853 2f00 	ldrex	r2, [r3]
   1628c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   16290:	e843 2100 	strex	r1, r2, [r3]
   16294:	2900      	cmp	r1, #0
   16296:	d1f7      	bne.n	16288 <notify_le_param_updated+0x30>
   16298:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   1629c:	4b07      	ldr	r3, [pc, #28]	; (162bc <notify_le_param_updated+0x64>)
   1629e:	681d      	ldr	r5, [r3, #0]
   162a0:	b905      	cbnz	r5, 162a4 <notify_le_param_updated+0x4c>
}
   162a2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   162a4:	68ee      	ldr	r6, [r5, #12]
   162a6:	b13e      	cbz	r6, 162b8 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
   162a8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   162ac:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   162b0:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   162b4:	4620      	mov	r0, r4
   162b6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   162b8:	69ad      	ldr	r5, [r5, #24]
   162ba:	e7f1      	b.n	162a0 <notify_le_param_updated+0x48>
   162bc:	20002908 	.word	0x20002908

000162c0 <le_param_req>:
{
   162c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162c2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   162c4:	4608      	mov	r0, r1
{
   162c6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   162c8:	f008 f8a6 	bl	1e418 <bt_le_conn_params_valid>
   162cc:	4604      	mov	r4, r0
   162ce:	b910      	cbnz	r0, 162d6 <le_param_req+0x16>
		return false;
   162d0:	2400      	movs	r4, #0
}
   162d2:	4620      	mov	r0, r4
   162d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   162d6:	4b09      	ldr	r3, [pc, #36]	; (162fc <le_param_req+0x3c>)
   162d8:	681e      	ldr	r6, [r3, #0]
   162da:	2e00      	cmp	r6, #0
   162dc:	d0f9      	beq.n	162d2 <le_param_req+0x12>
		if (!cb->le_param_req) {
   162de:	68b3      	ldr	r3, [r6, #8]
   162e0:	b90b      	cbnz	r3, 162e6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   162e2:	69b6      	ldr	r6, [r6, #24]
   162e4:	e7f9      	b.n	162da <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   162e6:	4629      	mov	r1, r5
   162e8:	4638      	mov	r0, r7
   162ea:	4798      	blx	r3
   162ec:	2800      	cmp	r0, #0
   162ee:	d0ef      	beq.n	162d0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   162f0:	4628      	mov	r0, r5
   162f2:	f008 f891 	bl	1e418 <bt_le_conn_params_valid>
   162f6:	2800      	cmp	r0, #0
   162f8:	d1f3      	bne.n	162e2 <le_param_req+0x22>
   162fa:	e7e9      	b.n	162d0 <le_param_req+0x10>
   162fc:	20002908 	.word	0x20002908

00016300 <bt_conn_identity_resolved>:
{
   16300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   16302:	78c3      	ldrb	r3, [r0, #3]
{
   16304:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   16306:	b93b      	cbnz	r3, 16318 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   16308:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
   1630c:	4b08      	ldr	r3, [pc, #32]	; (16330 <bt_conn_identity_resolved+0x30>)
   1630e:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16310:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   16314:	b91d      	cbnz	r5, 1631e <bt_conn_identity_resolved+0x1e>
}
   16316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   16318:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1631c:	e7f6      	b.n	1630c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   1631e:	692b      	ldr	r3, [r5, #16]
   16320:	b11b      	cbz	r3, 1632a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16322:	463a      	mov	r2, r7
   16324:	4631      	mov	r1, r6
   16326:	4620      	mov	r0, r4
   16328:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1632a:	69ad      	ldr	r5, [r5, #24]
   1632c:	e7f2      	b.n	16314 <bt_conn_identity_resolved+0x14>
   1632e:	bf00      	nop
   16330:	20002908 	.word	0x20002908

00016334 <bt_conn_security_changed>:
{
   16334:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   16336:	7a43      	ldrb	r3, [r0, #9]
   16338:	7283      	strb	r3, [r0, #10]
{
   1633a:	4604      	mov	r4, r0
   1633c:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   1633e:	f008 faf6 	bl	1e92e <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   16342:	4b06      	ldr	r3, [pc, #24]	; (1635c <bt_conn_security_changed+0x28>)
   16344:	681d      	ldr	r5, [r3, #0]
   16346:	b905      	cbnz	r5, 1634a <bt_conn_security_changed+0x16>
}
   16348:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   1634a:	696b      	ldr	r3, [r5, #20]
   1634c:	b11b      	cbz	r3, 16356 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   1634e:	7a61      	ldrb	r1, [r4, #9]
   16350:	4632      	mov	r2, r6
   16352:	4620      	mov	r0, r4
   16354:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16356:	69ad      	ldr	r5, [r5, #24]
   16358:	e7f5      	b.n	16346 <bt_conn_security_changed+0x12>
   1635a:	bf00      	nop
   1635c:	20002908 	.word	0x20002908

00016360 <bt_conn_cb_register>:
	cb->_next = callback_list;
   16360:	4b02      	ldr	r3, [pc, #8]	; (1636c <bt_conn_cb_register+0xc>)
   16362:	681a      	ldr	r2, [r3, #0]
   16364:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   16366:	6018      	str	r0, [r3, #0]
}
   16368:	4770      	bx	lr
   1636a:	bf00      	nop
   1636c:	20002908 	.word	0x20002908

00016370 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   16370:	b570      	push	{r4, r5, r6, lr}
   16372:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   16374:	f100 0634 	add.w	r6, r0, #52	; 0x34
   16378:	2200      	movs	r2, #0
   1637a:	2300      	movs	r3, #0
   1637c:	4630      	mov	r0, r6
   1637e:	f00a f8a0 	bl	204c2 <net_buf_get>
   16382:	4605      	mov	r5, r0
   16384:	b958      	cbnz	r0, 1639e <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
   16386:	4620      	mov	r0, r4
   16388:	f008 f95f 	bl	1e64a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1638c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   16390:	4807      	ldr	r0, [pc, #28]	; (163b0 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   16392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16396:	2200      	movs	r2, #0
   16398:	2300      	movs	r3, #0
   1639a:	f005 bb03 	b.w	1b9a4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1639e:	6968      	ldr	r0, [r5, #20]
   163a0:	b108      	cbz	r0, 163a6 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
   163a2:	f7ff feab 	bl	160fc <tx_free>
		net_buf_unref(buf);
   163a6:	4628      	mov	r0, r5
   163a8:	f003 f84c 	bl	19444 <net_buf_unref>
   163ac:	e7e4      	b.n	16378 <conn_cleanup+0x8>
   163ae:	bf00      	nop
   163b0:	20002718 	.word	0x20002718

000163b4 <bt_conn_send_cb>:
{
   163b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163b8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   163ba:	7b43      	ldrb	r3, [r0, #13]
   163bc:	2b07      	cmp	r3, #7
{
   163be:	4606      	mov	r6, r0
   163c0:	460d      	mov	r5, r1
   163c2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   163c4:	d005      	beq.n	163d2 <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
   163c6:	4608      	mov	r0, r1
   163c8:	f003 f83c 	bl	19444 <net_buf_unref>
			return -ENOTCONN;
   163cc:	f06f 0038 	mvn.w	r0, #56	; 0x38
   163d0:	e015      	b.n	163fe <bt_conn_send_cb+0x4a>
	if (cb) {
   163d2:	b362      	cbz	r2, 1642e <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
   163d4:	f005 f982 	bl	1b6dc <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   163d8:	4b16      	ldr	r3, [pc, #88]	; (16434 <bt_conn_send_cb+0x80>)
   163da:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   163dc:	4816      	ldr	r0, [pc, #88]	; (16438 <bt_conn_send_cb+0x84>)
   163de:	bf07      	ittee	eq
   163e0:	2200      	moveq	r2, #0
   163e2:	2300      	moveq	r3, #0
   163e4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   163e8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   163ec:	f004 fdfc 	bl	1afe8 <z_impl_k_queue_get>
   163f0:	4604      	mov	r4, r0
		if (!tx) {
   163f2:	b930      	cbnz	r0, 16402 <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
   163f4:	4628      	mov	r0, r5
   163f6:	f003 f825 	bl	19444 <net_buf_unref>
			return -ENOBUFS;
   163fa:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   163fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   16402:	7b73      	ldrb	r3, [r6, #13]
   16404:	2b07      	cmp	r3, #7
   16406:	d006      	beq.n	16416 <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
   16408:	4628      	mov	r0, r5
   1640a:	f003 f81b 	bl	19444 <net_buf_unref>
			tx_free(tx);
   1640e:	4620      	mov	r0, r4
   16410:	f7ff fe74 	bl	160fc <tx_free>
   16414:	e7da      	b.n	163cc <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
   16416:	2300      	movs	r3, #0
		tx->user_data = user_data;
   16418:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1641c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1641e:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   16420:	f106 0034 	add.w	r0, r6, #52	; 0x34
   16424:	4629      	mov	r1, r5
   16426:	f00a f86a 	bl	204fe <net_buf_put>
	return 0;
   1642a:	2000      	movs	r0, #0
   1642c:	e7e7      	b.n	163fe <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
   1642e:	614a      	str	r2, [r1, #20]
   16430:	e7f6      	b.n	16420 <bt_conn_send_cb+0x6c>
   16432:	bf00      	nop
   16434:	20002730 	.word	0x20002730
   16438:	200009ec 	.word	0x200009ec

0001643c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   1643c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   1643e:	4b1b      	ldr	r3, [pc, #108]	; (164ac <bt_conn_prepare_events+0x70>)
   16440:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16442:	2101      	movs	r1, #1
{
   16444:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   16446:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16448:	f00a ff38 	bl	212bc <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1644c:	4b18      	ldr	r3, [pc, #96]	; (164b0 <bt_conn_prepare_events+0x74>)
   1644e:	f103 0054 	add.w	r0, r3, #84	; 0x54
   16452:	f008 f865 	bl	1e520 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   16456:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1645a:	4619      	mov	r1, r3
   1645c:	b908      	cbnz	r0, 16462 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   1645e:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   16460:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16462:	7b5a      	ldrb	r2, [r3, #13]
   16464:	b99a      	cbnz	r2, 1648e <bt_conn_prepare_events+0x52>
   16466:	f3bf 8f5b 	dmb	ish
   1646a:	1d1a      	adds	r2, r3, #4
   1646c:	e852 0f00 	ldrex	r0, [r2]
   16470:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   16474:	e842 ce00 	strex	lr, ip, [r2]
   16478:	f1be 0f00 	cmp.w	lr, #0
   1647c:	d1f6      	bne.n	1646c <bt_conn_prepare_events+0x30>
   1647e:	f3bf 8f5b 	dmb	ish
   16482:	0642      	lsls	r2, r0, #25
   16484:	d503      	bpl.n	1648e <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   16486:	4618      	mov	r0, r3
   16488:	f7ff ff72 	bl	16370 <conn_cleanup>
   1648c:	e7e7      	b.n	1645e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1648e:	7b4b      	ldrb	r3, [r1, #13]
   16490:	2b07      	cmp	r3, #7
   16492:	d1e4      	bne.n	1645e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   16494:	4b07      	ldr	r3, [pc, #28]	; (164b4 <bt_conn_prepare_events+0x78>)
   16496:	4628      	mov	r0, r5
   16498:	2200      	movs	r2, #0
   1649a:	2104      	movs	r1, #4
   1649c:	f00a ff0e 	bl	212bc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   164a0:	2301      	movs	r3, #1
   164a2:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   164a6:	2002      	movs	r0, #2
	return ev_count;
   164a8:	e7da      	b.n	16460 <bt_conn_prepare_events+0x24>
   164aa:	bf00      	nop
   164ac:	20000718 	.word	0x20000718
   164b0:	20002128 	.word	0x20002128
   164b4:	2000215c 	.word	0x2000215c

000164b8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   164b8:	b570      	push	{r4, r5, r6, lr}
   164ba:	4606      	mov	r6, r0
   164bc:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   164be:	480f      	ldr	r0, [pc, #60]	; (164fc <bt_conn_add_le+0x44>)
   164c0:	2101      	movs	r1, #1
   164c2:	f008 f866 	bl	1e592 <bt_conn_new>
	if (!conn) {
   164c6:	4604      	mov	r4, r0
   164c8:	b1b0      	cbz	r0, 164f8 <bt_conn_add_le+0x40>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
   164ca:	490d      	ldr	r1, [pc, #52]	; (16500 <bt_conn_add_le+0x48>)
   164cc:	3058      	adds	r0, #88	; 0x58
   164ce:	f00a fd14 	bl	20efa <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   164d2:	4a0c      	ldr	r2, [pc, #48]	; (16504 <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   164d4:	7226      	strb	r6, [r4, #8]
   164d6:	2300      	movs	r3, #0
   164d8:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   164dc:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   164de:	2207      	movs	r2, #7
   164e0:	4629      	mov	r1, r5
   164e2:	f104 0088 	add.w	r0, r4, #136	; 0x88
   164e6:	f007 fb43 	bl	1db70 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   164ea:	2301      	movs	r3, #1
   164ec:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   164ee:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   164f0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   164f2:	4b05      	ldr	r3, [pc, #20]	; (16508 <bt_conn_add_le+0x50>)
   164f4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   164f8:	4620      	mov	r0, r4
   164fa:	bd70      	pop	{r4, r5, r6, pc}
   164fc:	20002128 	.word	0x20002128
   16500:	00016761 	.word	0x00016761
   16504:	0001e58d 	.word	0x0001e58d
   16508:	00280018 	.word	0x00280018

0001650c <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   1650c:	4602      	mov	r2, r0
   1650e:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16510:	2101      	movs	r1, #1
   16512:	4803      	ldr	r0, [pc, #12]	; (16520 <bt_conn_lookup_handle+0x14>)
   16514:	f008 f8e9 	bl	1e6ea <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   16518:	2800      	cmp	r0, #0
   1651a:	bf38      	it	cc
   1651c:	2000      	movcc	r0, #0
   1651e:	bd08      	pop	{r3, pc}
   16520:	20002128 	.word	0x20002128

00016524 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16524:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
   16526:	4c0c      	ldr	r4, [pc, #48]	; (16558 <bt_conn_lookup_addr_le+0x34>)
{
   16528:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   1652a:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   1652e:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
   16530:	f007 fff6 	bl	1e520 <atomic_get>
   16534:	b908      	cbnz	r0, 1653a <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
   16536:	2000      	movs	r0, #0
}
   16538:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   1653a:	78a1      	ldrb	r1, [r4, #2]
   1653c:	2901      	cmp	r1, #1
   1653e:	d1fa      	bne.n	16536 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   16540:	4619      	mov	r1, r3
   16542:	4620      	mov	r0, r4
   16544:	f008 f8f2 	bl	1e72c <bt_conn_is_peer_addr_le>
   16548:	2800      	cmp	r0, #0
   1654a:	d0f4      	beq.n	16536 <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
   1654c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   16550:	f007 ffec 	bl	1e52c <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   16554:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
   16556:	e7ef      	b.n	16538 <bt_conn_lookup_addr_le+0x14>
   16558:	20002128 	.word	0x20002128

0001655c <bt_conn_lookup_state_le>:
{
   1655c:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
   1655e:	4c10      	ldr	r4, [pc, #64]	; (165a0 <bt_conn_lookup_state_le+0x44>)
{
   16560:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   16562:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
   16566:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
   16568:	f007 ffda 	bl	1e520 <atomic_get>
   1656c:	b908      	cbnz	r0, 16572 <bt_conn_lookup_state_le+0x16>
	return NULL;
   1656e:	2000      	movs	r0, #0
}
   16570:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   16572:	78a3      	ldrb	r3, [r4, #2]
   16574:	2b01      	cmp	r3, #1
   16576:	d1fa      	bne.n	1656e <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   16578:	b951      	cbnz	r1, 16590 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
   1657a:	7b63      	ldrb	r3, [r4, #13]
   1657c:	42b3      	cmp	r3, r6
   1657e:	d1f6      	bne.n	1656e <bt_conn_lookup_state_le+0x12>
   16580:	7a23      	ldrb	r3, [r4, #8]
   16582:	42ab      	cmp	r3, r5
   16584:	d1f3      	bne.n	1656e <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
   16586:	4807      	ldr	r0, [pc, #28]	; (165a4 <bt_conn_lookup_state_le+0x48>)
   16588:	f007 ffd0 	bl	1e52c <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
   1658c:	4804      	ldr	r0, [pc, #16]	; (165a0 <bt_conn_lookup_state_le+0x44>)
   1658e:	e7ef      	b.n	16570 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   16590:	460a      	mov	r2, r1
   16592:	4620      	mov	r0, r4
   16594:	4629      	mov	r1, r5
   16596:	f008 f8c9 	bl	1e72c <bt_conn_is_peer_addr_le>
   1659a:	2800      	cmp	r0, #0
   1659c:	d1ed      	bne.n	1657a <bt_conn_lookup_state_le+0x1e>
   1659e:	e7e6      	b.n	1656e <bt_conn_lookup_state_le+0x12>
   165a0:	20002128 	.word	0x20002128
   165a4:	2000217c 	.word	0x2000217c

000165a8 <bt_conn_set_state>:
{
   165a8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   165aa:	7b45      	ldrb	r5, [r0, #13]
   165ac:	428d      	cmp	r5, r1
{
   165ae:	4604      	mov	r4, r0
	if (conn->state == state) {
   165b0:	f000 80a1 	beq.w	166f6 <bt_conn_set_state+0x14e>
	conn->state = state;
   165b4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   165b6:	b915      	cbnz	r5, 165be <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
   165b8:	3054      	adds	r0, #84	; 0x54
   165ba:	f007 ffb7 	bl	1e52c <atomic_inc>
	switch (conn->state) {
   165be:	7b63      	ldrb	r3, [r4, #13]
   165c0:	2b01      	cmp	r3, #1
   165c2:	d116      	bne.n	165f2 <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
   165c4:	4d4c      	ldr	r5, [pc, #304]	; (166f8 <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
   165c6:	2600      	movs	r6, #0
	__asm__ volatile(
   165c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   165cc:	f3ef 8211 	mrs	r2, BASEPRI
   165d0:	f383 8811 	msr	BASEPRI, r3
   165d4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   165d8:	69e3      	ldr	r3, [r4, #28]
   165da:	2b00      	cmp	r3, #0
   165dc:	d06c      	beq.n	166b8 <bt_conn_set_state+0x110>
			conn->pending_no_cb--;
   165de:	3b01      	subs	r3, #1
   165e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   165e2:	f382 8811 	msr	BASEPRI, r2
   165e6:	f3bf 8f6f 	isb	sy
   165ea:	4628      	mov	r0, r5
   165ec:	f005 f87c 	bl	1b6e8 <z_impl_k_sem_give>
}
   165f0:	e7ea      	b.n	165c8 <bt_conn_set_state+0x20>
	switch (conn->state) {
   165f2:	2b07      	cmp	r3, #7
   165f4:	d009      	beq.n	1660a <bt_conn_set_state+0x62>
   165f6:	2b00      	cmp	r3, #0
   165f8:	d17d      	bne.n	166f6 <bt_conn_set_state+0x14e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   165fa:	78a3      	ldrb	r3, [r4, #2]
   165fc:	2b04      	cmp	r3, #4
   165fe:	d125      	bne.n	1664c <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
   16600:	4620      	mov	r0, r4
}
   16602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   16606:	f008 b8b1 	b.w	1e76c <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1660a:	78a3      	ldrb	r3, [r4, #2]
   1660c:	2b04      	cmp	r3, #4
   1660e:	d072      	beq.n	166f6 <bt_conn_set_state+0x14e>
	z_impl_k_queue_init(queue);
   16610:	f104 0034 	add.w	r0, r4, #52	; 0x34
   16614:	f00a fa99 	bl	20b4a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   16618:	2100      	movs	r1, #0
   1661a:	4838      	ldr	r0, [pc, #224]	; (166fc <bt_conn_set_state+0x154>)
   1661c:	f005 fc3e 	bl	1be9c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16620:	2300      	movs	r3, #0
	list->tail = NULL;
   16622:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
   16626:	4620      	mov	r0, r4
   16628:	f000 f9f4 	bl	16a14 <bt_l2cap_connected>
		notify_connected(conn);
   1662c:	4620      	mov	r0, r4
   1662e:	f7ff fd6f 	bl	16110 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16632:	78e3      	ldrb	r3, [r4, #3]
   16634:	2b01      	cmp	r3, #1
   16636:	d15e      	bne.n	166f6 <bt_conn_set_state+0x14e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16638:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1663c:	4830      	ldr	r0, [pc, #192]	; (16700 <bt_conn_set_state+0x158>)
}
   1663e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16642:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16646:	2300      	movs	r3, #0
   16648:	f005 b9ac 	b.w	1b9a4 <k_delayed_work_submit_to_queue>
		switch (old_state) {
   1664c:	3d01      	subs	r5, #1
   1664e:	2d05      	cmp	r5, #5
   16650:	d851      	bhi.n	166f6 <bt_conn_set_state+0x14e>
   16652:	a301      	add	r3, pc, #4	; (adr r3, 16658 <bt_conn_set_state+0xb0>)
   16654:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   16658:	00016671 	.word	0x00016671
   1665c:	000166ab 	.word	0x000166ab
   16660:	00016601 	.word	0x00016601
   16664:	00016601 	.word	0x00016601
   16668:	000166ab 	.word	0x000166ab
   1666c:	000166ab 	.word	0x000166ab
			tx_notify(conn);
   16670:	4620      	mov	r0, r4
   16672:	f007 ff68 	bl	1e546 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   16676:	78a3      	ldrb	r3, [r4, #2]
   16678:	2b01      	cmp	r3, #1
   1667a:	d103      	bne.n	16684 <bt_conn_set_state+0xdc>
				k_delayed_work_cancel(&conn->deferred_work);
   1667c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16680:	f00a fc43 	bl	20f0a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16684:	f3bf 8f5b 	dmb	ish
   16688:	3404      	adds	r4, #4
   1668a:	e854 3f00 	ldrex	r3, [r4]
   1668e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16692:	e844 3200 	strex	r2, r3, [r4]
   16696:	2a00      	cmp	r2, #0
   16698:	d1f7      	bne.n	1668a <bt_conn_set_state+0xe2>
   1669a:	f3bf 8f5b 	dmb	ish
   1669e:	4817      	ldr	r0, [pc, #92]	; (166fc <bt_conn_set_state+0x154>)
}
   166a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   166a4:	2100      	movs	r1, #0
   166a6:	f005 bbf9 	b.w	1be9c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   166aa:	7b23      	ldrb	r3, [r4, #12]
   166ac:	2b00      	cmp	r3, #0
   166ae:	d0a7      	beq.n	16600 <bt_conn_set_state+0x58>
				notify_connected(conn);
   166b0:	4620      	mov	r0, r4
   166b2:	f7ff fd2d 	bl	16110 <notify_connected>
   166b6:	e7a3      	b.n	16600 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
   166b8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   166ba:	b128      	cbz	r0, 166c8 <bt_conn_set_state+0x120>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166bc:	69a1      	ldr	r1, [r4, #24]
   166be:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   166c0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166c2:	4288      	cmp	r0, r1
	list->tail = node;
   166c4:	bf08      	it	eq
   166c6:	61a3      	streq	r3, [r4, #24]
   166c8:	f382 8811 	msr	BASEPRI, r2
   166cc:	f3bf 8f6f 	isb	sy
		if (!node) {
   166d0:	b188      	cbz	r0, 166f6 <bt_conn_set_state+0x14e>
	__asm__ volatile(
   166d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   166d6:	f3ef 8311 	mrs	r3, BASEPRI
   166da:	f382 8811 	msr	BASEPRI, r2
   166de:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   166e2:	68c2      	ldr	r2, [r0, #12]
   166e4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   166e6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   166e8:	f383 8811 	msr	BASEPRI, r3
   166ec:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   166f0:	f7ff fd04 	bl	160fc <tx_free>
   166f4:	e779      	b.n	165ea <bt_conn_set_state+0x42>
}
   166f6:	bd70      	pop	{r4, r5, r6, pc}
   166f8:	20000498 	.word	0x20000498
   166fc:	20000718 	.word	0x20000718
   16700:	20002718 	.word	0x20002718

00016704 <send_conn_le_param_update>:
{
   16704:	b538      	push	{r3, r4, r5, lr}
   16706:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   16708:	4608      	mov	r0, r1
{
   1670a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1670c:	f007 fe84 	bl	1e418 <bt_le_conn_params_valid>
   16710:	b308      	cbz	r0, 16756 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16712:	4b12      	ldr	r3, [pc, #72]	; (1675c <send_conn_le_param_update+0x58>)
   16714:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   16718:	0799      	lsls	r1, r3, #30
   1671a:	d407      	bmi.n	1672c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1671c:	78e3      	ldrb	r3, [r4, #3]
   1671e:	b173      	cbz	r3, 1673e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   16720:	4629      	mov	r1, r5
   16722:	4620      	mov	r0, r4
}
   16724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   16728:	f000 b9d0 	b.w	16acc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1672c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   16730:	079a      	lsls	r2, r3, #30
   16732:	d5f3      	bpl.n	1671c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16734:	1d20      	adds	r0, r4, #4
   16736:	f007 fef3 	bl	1e520 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1673a:	0543      	lsls	r3, r0, #21
   1673c:	d4ee      	bmi.n	1671c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1673e:	4629      	mov	r1, r5
   16740:	4620      	mov	r0, r4
   16742:	f008 f85b 	bl	1e7fc <bt_conn_le_conn_update>
		if (rc == 0) {
   16746:	b928      	cbnz	r0, 16754 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   16748:	88ab      	ldrh	r3, [r5, #4]
   1674a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1674e:	88eb      	ldrh	r3, [r5, #6]
   16750:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   16754:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16756:	f06f 0015 	mvn.w	r0, #21
   1675a:	e7fb      	b.n	16754 <send_conn_le_param_update+0x50>
   1675c:	200003c8 	.word	0x200003c8

00016760 <deferred_work>:
{
   16760:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   16762:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   16766:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   16768:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1676c:	b993      	cbnz	r3, 16794 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   1676e:	4630      	mov	r0, r6
   16770:	f008 f8c7 	bl	1e902 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   16774:	4b1f      	ldr	r3, [pc, #124]	; (167f4 <deferred_work+0x94>)
   16776:	681d      	ldr	r5, [r3, #0]
   16778:	b925      	cbnz	r5, 16784 <deferred_work+0x24>
		bt_conn_unref(conn);
   1677a:	4630      	mov	r0, r6
   1677c:	f007 fff6 	bl	1e76c <bt_conn_unref>
}
   16780:	b002      	add	sp, #8
   16782:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   16784:	686b      	ldr	r3, [r5, #4]
   16786:	b11b      	cbz	r3, 16790 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   16788:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1678c:	4630      	mov	r0, r6
   1678e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16790:	69ad      	ldr	r5, [r5, #24]
   16792:	e7f1      	b.n	16778 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   16794:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16798:	2b01      	cmp	r3, #1
   1679a:	d1f1      	bne.n	16780 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1679c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   167a0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   167a4:	e855 3f00 	ldrex	r3, [r5]
   167a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   167ac:	e845 2100 	strex	r1, r2, [r5]
   167b0:	2900      	cmp	r1, #0
   167b2:	d1f7      	bne.n	167a4 <deferred_work+0x44>
   167b4:	f3bf 8f5b 	dmb	ish
   167b8:	059b      	lsls	r3, r3, #22
   167ba:	d514      	bpl.n	167e6 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   167bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   167be:	9300      	str	r3, [sp, #0]
   167c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   167c2:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   167c4:	4669      	mov	r1, sp
   167c6:	4630      	mov	r0, r6
   167c8:	f7ff ff9c 	bl	16704 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   167cc:	f3bf 8f5b 	dmb	ish
   167d0:	e855 3f00 	ldrex	r3, [r5]
   167d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   167d8:	e845 3200 	strex	r2, r3, [r5]
   167dc:	2a00      	cmp	r2, #0
   167de:	d1f7      	bne.n	167d0 <deferred_work+0x70>
   167e0:	f3bf 8f5b 	dmb	ish
   167e4:	e7cc      	b.n	16780 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   167e6:	4a04      	ldr	r2, [pc, #16]	; (167f8 <deferred_work+0x98>)
   167e8:	6810      	ldr	r0, [r2, #0]
   167ea:	6851      	ldr	r1, [r2, #4]
   167ec:	466b      	mov	r3, sp
   167ee:	c303      	stmia	r3!, {r0, r1}
   167f0:	e7e8      	b.n	167c4 <deferred_work+0x64>
   167f2:	bf00      	nop
   167f4:	20002908 	.word	0x20002908
   167f8:	00021590 	.word	0x00021590

000167fc <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   167fc:	b538      	push	{r3, r4, r5, lr}
   167fe:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
   16800:	4906      	ldr	r1, [pc, #24]	; (1681c <bt_conn_create_pdu_timeout+0x20>)
   16802:	2800      	cmp	r0, #0
   16804:	bf08      	it	eq
   16806:	4608      	moveq	r0, r1
   16808:	f009 fe56 	bl	204b8 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
   1680c:	4604      	mov	r4, r0
   1680e:	b118      	cbz	r0, 16818 <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
   16810:	1d29      	adds	r1, r5, #4
   16812:	3008      	adds	r0, #8
   16814:	f009 fe6f 	bl	204f6 <net_buf_simple_reserve>

	return buf;
}
   16818:	4620      	mov	r0, r4
   1681a:	bd38      	pop	{r3, r4, r5, pc}
   1681c:	20000a04 	.word	0x20000a04

00016820 <bt_conn_create_frag_timeout>:
{
   16820:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16822:	4801      	ldr	r0, [pc, #4]	; (16828 <bt_conn_create_frag_timeout+0x8>)
   16824:	f7ff bfea 	b.w	167fc <bt_conn_create_pdu_timeout>
   16828:	20000a54 	.word	0x20000a54

0001682c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16830:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1683a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1683c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1683e:	f7ff ffef 	bl	16820 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16842:	7833      	ldrb	r3, [r6, #0]
   16844:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   16846:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16848:	f04f 0600 	mov.w	r6, #0
   1684c:	d005      	beq.n	1685a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1684e:	f002 fdf9 	bl	19444 <net_buf_unref>
		return NULL;
   16852:	4635      	mov	r5, r6
}
   16854:	4628      	mov	r0, r5
   16856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1685a:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1685c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16860:	4e0c      	ldr	r6, [pc, #48]	; (16894 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16862:	4638      	mov	r0, r7
   16864:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   16868:	f009 feb7 	bl	205da <net_buf_simple_tailroom>
   1686c:	4580      	cmp	r8, r0
   1686e:	d20c      	bcs.n	1688a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   16870:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
   16874:	f854 1f08 	ldr.w	r1, [r4, #8]!
   16878:	4632      	mov	r2, r6
   1687a:	4638      	mov	r0, r7
   1687c:	f009 fe78 	bl	20570 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
   16880:	4631      	mov	r1, r6
   16882:	4620      	mov	r0, r4
   16884:	f009 fe8d 	bl	205a2 <net_buf_simple_pull>
	return frag;
   16888:	e7e4      	b.n	16854 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1688a:	4638      	mov	r0, r7
   1688c:	f009 fea5 	bl	205da <net_buf_simple_tailroom>
   16890:	b286      	uxth	r6, r0
   16892:	e7ef      	b.n	16874 <create_frag.isra.0+0x48>
   16894:	200003c8 	.word	0x200003c8

00016898 <bt_conn_process_tx>:
{
   16898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1689a:	7b43      	ldrb	r3, [r0, #13]
{
   1689c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1689e:	b993      	cbnz	r3, 168c6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   168a0:	f3bf 8f5b 	dmb	ish
   168a4:	1d03      	adds	r3, r0, #4
   168a6:	e853 2f00 	ldrex	r2, [r3]
   168aa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   168ae:	e843 1400 	strex	r4, r1, [r3]
   168b2:	2c00      	cmp	r4, #0
   168b4:	d1f7      	bne.n	168a6 <bt_conn_process_tx+0xe>
   168b6:	f3bf 8f5b 	dmb	ish
   168ba:	0653      	lsls	r3, r2, #25
   168bc:	d503      	bpl.n	168c6 <bt_conn_process_tx+0x2e>
}
   168be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   168c2:	f7ff bd55 	b.w	16370 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   168c6:	2200      	movs	r2, #0
   168c8:	2300      	movs	r3, #0
   168ca:	f105 0034 	add.w	r0, r5, #52	; 0x34
   168ce:	f009 fdf8 	bl	204c2 <net_buf_get>
	BT_ASSERT(buf);
   168d2:	4604      	mov	r4, r0
   168d4:	b960      	cbnz	r0, 168f0 <bt_conn_process_tx+0x58>
   168d6:	4a20      	ldr	r2, [pc, #128]	; (16958 <bt_conn_process_tx+0xc0>)
   168d8:	4920      	ldr	r1, [pc, #128]	; (1695c <bt_conn_process_tx+0xc4>)
   168da:	4821      	ldr	r0, [pc, #132]	; (16960 <bt_conn_process_tx+0xc8>)
   168dc:	f240 5355 	movw	r3, #1365	; 0x555
   168e0:	f005 fc09 	bl	1c0f6 <printk>
   168e4:	4040      	eors	r0, r0
   168e6:	f380 8811 	msr	BASEPRI, r0
   168ea:	f04f 0003 	mov.w	r0, #3
   168ee:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   168f0:	4f1c      	ldr	r7, [pc, #112]	; (16964 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   168f2:	89a1      	ldrh	r1, [r4, #12]
   168f4:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   168f8:	4291      	cmp	r1, r2
   168fa:	d807      	bhi.n	1690c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   168fc:	2300      	movs	r3, #0
   168fe:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16900:	4621      	mov	r1, r4
   16902:	4628      	mov	r0, r5
   16904:	f7ff fc1a 	bl	1613c <send_frag>
	if (!send_buf(conn, buf)) {
   16908:	b140      	cbz	r0, 1691c <bt_conn_process_tx+0x84>
}
   1690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1690c:	f105 060d 	add.w	r6, r5, #13
   16910:	4621      	mov	r1, r4
   16912:	4630      	mov	r0, r6
   16914:	f7ff ff8a 	bl	1682c <create_frag.isra.0>
	if (!frag) {
   16918:	4601      	mov	r1, r0
   1691a:	b920      	cbnz	r0, 16926 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   1691c:	4620      	mov	r0, r4
}
   1691e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   16922:	f002 bd8f 	b.w	19444 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16926:	2301      	movs	r3, #1
   16928:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1692a:	4628      	mov	r0, r5
   1692c:	f7ff fc06 	bl	1613c <send_frag>
   16930:	2800      	cmp	r0, #0
   16932:	d0f3      	beq.n	1691c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   16934:	89a2      	ldrh	r2, [r4, #12]
   16936:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1693a:	429a      	cmp	r2, r3
   1693c:	d802      	bhi.n	16944 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1693e:	2300      	movs	r3, #0
   16940:	2203      	movs	r2, #3
   16942:	e7dd      	b.n	16900 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   16944:	4621      	mov	r1, r4
   16946:	4630      	mov	r0, r6
   16948:	f7ff ff70 	bl	1682c <create_frag.isra.0>
		if (!frag) {
   1694c:	4601      	mov	r1, r0
   1694e:	2800      	cmp	r0, #0
   16950:	d0e4      	beq.n	1691c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16952:	2301      	movs	r3, #1
   16954:	461a      	mov	r2, r3
   16956:	e7e8      	b.n	1692a <bt_conn_process_tx+0x92>
   16958:	000222ad 	.word	0x000222ad
   1695c:	0002222b 	.word	0x0002222b
   16960:	000221d7 	.word	0x000221d7
   16964:	200003c8 	.word	0x200003c8

00016968 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   16968:	4b0c      	ldr	r3, [pc, #48]	; (1699c <bt_conn_auth_cb_register+0x34>)
   1696a:	b908      	cbnz	r0, 16970 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   1696c:	6018      	str	r0, [r3, #0]
		return 0;
   1696e:	4770      	bx	lr
	}

	if (bt_auth) {
   16970:	681a      	ldr	r2, [r3, #0]
   16972:	b962      	cbnz	r2, 1698e <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   16974:	6902      	ldr	r2, [r0, #16]
   16976:	b93a      	cbnz	r2, 16988 <bt_conn_auth_cb_register+0x20>
   16978:	6802      	ldr	r2, [r0, #0]
   1697a:	b95a      	cbnz	r2, 16994 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1697c:	6842      	ldr	r2, [r0, #4]
   1697e:	b94a      	cbnz	r2, 16994 <bt_conn_auth_cb_register+0x2c>
   16980:	6882      	ldr	r2, [r0, #8]
   16982:	b93a      	cbnz	r2, 16994 <bt_conn_auth_cb_register+0x2c>
   16984:	6942      	ldr	r2, [r0, #20]
   16986:	b92a      	cbnz	r2, 16994 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   16988:	6018      	str	r0, [r3, #0]
	return 0;
   1698a:	2000      	movs	r0, #0
   1698c:	4770      	bx	lr
		return -EALREADY;
   1698e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   16992:	4770      	bx	lr
		return -EINVAL;
   16994:	f06f 0015 	mvn.w	r0, #21
}
   16998:	4770      	bx	lr
   1699a:	bf00      	nop
   1699c:	20002904 	.word	0x20002904

000169a0 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   169a0:	4b03      	ldr	r3, [pc, #12]	; (169b0 <bt_conn_index+0x10>)
   169a2:	1ac0      	subs	r0, r0, r3
   169a4:	4b03      	ldr	r3, [pc, #12]	; (169b4 <bt_conn_index+0x14>)
   169a6:	10c0      	asrs	r0, r0, #3
   169a8:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
   169aa:	b2c0      	uxtb	r0, r0
   169ac:	4770      	bx	lr
   169ae:	bf00      	nop
   169b0:	20002128 	.word	0x20002128
   169b4:	e9bd37a7 	.word	0xe9bd37a7

000169b8 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
   169b8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   169ba:	490b      	ldr	r1, [pc, #44]	; (169e8 <bt_conn_init+0x30>)
   169bc:	480b      	ldr	r0, [pc, #44]	; (169ec <bt_conn_init+0x34>)
   169be:	f00a f8d0 	bl	20b62 <k_queue_append>
   169c2:	490b      	ldr	r1, [pc, #44]	; (169f0 <bt_conn_init+0x38>)
   169c4:	4809      	ldr	r0, [pc, #36]	; (169ec <bt_conn_init+0x34>)
   169c6:	f00a f8cc 	bl	20b62 <k_queue_append>
   169ca:	490a      	ldr	r1, [pc, #40]	; (169f4 <bt_conn_init+0x3c>)
   169cc:	4807      	ldr	r0, [pc, #28]	; (169ec <bt_conn_init+0x34>)
   169ce:	f00a f8c8 	bl	20b62 <k_queue_append>
	}

	bt_att_init();
   169d2:	f008 fc17 	bl	1f204 <bt_att_init>

	err = bt_smp_init();
   169d6:	f002 fbcd 	bl	19174 <bt_smp_init>
	if (err) {
   169da:	4604      	mov	r4, r0
   169dc:	b908      	cbnz	r0, 169e2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   169de:	f008 f844 	bl	1ea6a <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
   169e2:	4620      	mov	r0, r4
   169e4:	bd10      	pop	{r4, pc}
   169e6:	bf00      	nop
   169e8:	2000290c 	.word	0x2000290c
   169ec:	200009ec 	.word	0x200009ec
   169f0:	2000291c 	.word	0x2000291c
   169f4:	2000292c 	.word	0x2000292c

000169f8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   169f8:	4b04      	ldr	r3, [pc, #16]	; (16a0c <l2cap_accept+0x14>)
   169fa:	6818      	ldr	r0, [r3, #0]
   169fc:	b918      	cbnz	r0, 16a06 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   169fe:	4a04      	ldr	r2, [pc, #16]	; (16a10 <l2cap_accept+0x18>)
   16a00:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   16a02:	600b      	str	r3, [r1, #0]

		return 0;
   16a04:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   16a06:	f06f 000b 	mvn.w	r0, #11
}
   16a0a:	4770      	bx	lr
   16a0c:	200021e0 	.word	0x200021e0
   16a10:	00021b08 	.word	0x00021b08

00016a14 <bt_l2cap_connected>:
{
   16a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16a18:	4e29      	ldr	r6, [pc, #164]	; (16ac0 <bt_l2cap_connected+0xac>)
   16a1a:	4f2a      	ldr	r7, [pc, #168]	; (16ac4 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   16a1c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 16ac8 <bt_l2cap_connected+0xb4>
{
   16a20:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16a22:	42be      	cmp	r6, r7
   16a24:	d302      	bcc.n	16a2c <bt_l2cap_connected+0x18>
}
   16a26:	b003      	add	sp, #12
   16a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   16a2c:	6873      	ldr	r3, [r6, #4]
   16a2e:	a901      	add	r1, sp, #4
   16a30:	4620      	mov	r0, r4
   16a32:	4798      	blx	r3
   16a34:	2800      	cmp	r0, #0
   16a36:	db3d      	blt.n	16ab4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   16a38:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   16a3a:	8833      	ldrh	r3, [r6, #0]
   16a3c:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   16a40:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   16a44:	4641      	mov	r1, r8
   16a46:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16a4a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   16a4e:	f00a fa54 	bl	20efa <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16a52:	f3bf 8f5b 	dmb	ish
   16a56:	f105 0340 	add.w	r3, r5, #64	; 0x40
   16a5a:	2200      	movs	r2, #0
   16a5c:	e853 1f00 	ldrex	r1, [r3]
   16a60:	e843 2000 	strex	r0, r2, [r3]
   16a64:	2800      	cmp	r0, #0
   16a66:	d1f9      	bne.n	16a5c <bt_l2cap_connected+0x48>
   16a68:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   16a6c:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   16a6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
   16a70:	f105 0308 	add.w	r3, r5, #8
   16a74:	bb02      	cbnz	r2, 16ab8 <bt_l2cap_connected+0xa4>
	list->head = node;
   16a76:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
   16a7a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   16a7c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   16a7e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   16a80:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   16a84:	681b      	ldr	r3, [r3, #0]
   16a86:	b103      	cbz	r3, 16a8a <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   16a88:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a8a:	9b01      	ldr	r3, [sp, #4]
   16a8c:	f3bf 8f5b 	dmb	ish
   16a90:	3340      	adds	r3, #64	; 0x40
   16a92:	e853 2f00 	ldrex	r2, [r3]
   16a96:	f042 0201 	orr.w	r2, r2, #1
   16a9a:	e843 2100 	strex	r1, r2, [r3]
   16a9e:	2900      	cmp	r1, #0
   16aa0:	d1f7      	bne.n	16a92 <bt_l2cap_connected+0x7e>
   16aa2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16aa6:	9801      	ldr	r0, [sp, #4]
   16aa8:	6843      	ldr	r3, [r0, #4]
   16aaa:	699b      	ldr	r3, [r3, #24]
   16aac:	b113      	cbz	r3, 16ab4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   16aae:	f100 0140 	add.w	r1, r0, #64	; 0x40
   16ab2:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16ab4:	360c      	adds	r6, #12
   16ab6:	e7b4      	b.n	16a22 <bt_l2cap_connected+0xe>
	parent->next = child;
   16ab8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16aba:	6523      	str	r3, [r4, #80]	; 0x50
}
   16abc:	e7dd      	b.n	16a7a <bt_l2cap_connected+0x66>
   16abe:	bf00      	nop
   16ac0:	000214fc 	.word	0x000214fc
   16ac4:	00021520 	.word	0x00021520
   16ac8:	0001e8eb 	.word	0x0001e8eb

00016acc <bt_l2cap_update_conn_param>:
{
   16acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   16ace:	4b15      	ldr	r3, [pc, #84]	; (16b24 <bt_l2cap_update_conn_param+0x58>)
   16ad0:	781a      	ldrb	r2, [r3, #0]
   16ad2:	3201      	adds	r2, #1
	if (!ident) {
   16ad4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   16ad8:	bf08      	it	eq
   16ada:	2201      	moveq	r2, #1
   16adc:	701a      	strb	r2, [r3, #0]
{
   16ade:	4605      	mov	r5, r0
   16ae0:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   16ae2:	2208      	movs	r2, #8
   16ae4:	7819      	ldrb	r1, [r3, #0]
   16ae6:	2012      	movs	r0, #18
   16ae8:	f007 feb1 	bl	1e84e <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   16aec:	4606      	mov	r6, r0
   16aee:	b1b0      	cbz	r0, 16b1e <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
   16af0:	2108      	movs	r1, #8
   16af2:	4408      	add	r0, r1
   16af4:	f009 fd36 	bl	20564 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   16af8:	8822      	ldrh	r2, [r4, #0]
   16afa:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   16afc:	8862      	ldrh	r2, [r4, #2]
   16afe:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   16b00:	88a2      	ldrh	r2, [r4, #4]
   16b02:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   16b04:	88e2      	ldrh	r2, [r4, #6]
   16b06:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   16b08:	2400      	movs	r4, #0
   16b0a:	9400      	str	r4, [sp, #0]
   16b0c:	4623      	mov	r3, r4
   16b0e:	4632      	mov	r2, r6
   16b10:	2105      	movs	r1, #5
   16b12:	4628      	mov	r0, r5
   16b14:	f007 ff28 	bl	1e968 <bt_l2cap_send_cb>
	return 0;
   16b18:	4620      	mov	r0, r4
}
   16b1a:	b002      	add	sp, #8
   16b1c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   16b1e:	f06f 000b 	mvn.w	r0, #11
   16b22:	e7fa      	b.n	16b1a <bt_l2cap_update_conn_param+0x4e>
   16b24:	20002f52 	.word	0x20002f52

00016b28 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16b28:	4b02      	ldr	r3, [pc, #8]	; (16b34 <att_cfm_sent+0xc>)
   16b2a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   16b2e:	f007 bfca 	b.w	1eac6 <att_sent>
   16b32:	bf00      	nop
   16b34:	0001ee7d 	.word	0x0001ee7d

00016b38 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16b38:	4b02      	ldr	r3, [pc, #8]	; (16b44 <att_rsp_sent+0xc>)
   16b3a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   16b3e:	f007 bfc2 	b.w	1eac6 <att_sent>
   16b42:	bf00      	nop
   16b44:	0001ee61 	.word	0x0001ee61

00016b48 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16b48:	4b02      	ldr	r3, [pc, #8]	; (16b54 <att_req_sent+0xc>)
   16b4a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
   16b4e:	f007 bfba 	b.w	1eac6 <att_sent>
   16b52:	bf00      	nop
   16b54:	00016cc5 	.word	0x00016cc5

00016b58 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   16b58:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16b5a:	3808      	subs	r0, #8
   16b5c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   16b5e:	a901      	add	r1, sp, #4
   16b60:	4802      	ldr	r0, [pc, #8]	; (16b6c <bt_att_released+0x14>)
   16b62:	f004 fa17 	bl	1af94 <k_mem_slab_free>
}
   16b66:	b003      	add	sp, #12
   16b68:	f85d fb04 	ldr.w	pc, [sp], #4
   16b6c:	2000093c 	.word	0x2000093c

00016b70 <read_group_cb>:
{
   16b70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16b74:	4606      	mov	r6, r0
   16b76:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16b78:	f04f 0800 	mov.w	r8, #0
   16b7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16b80:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   16b82:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16b84:	f88d 8008 	strb.w	r8, [sp, #8]
   16b88:	a902      	add	r1, sp, #8
{
   16b8a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16b8c:	f8ad 300a 	strh.w	r3, [sp, #10]
   16b90:	f007 f8a8 	bl	1dce4 <bt_uuid_cmp>
   16b94:	b1a0      	cbz	r0, 16bc0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16b96:	f642 0301 	movw	r3, #10241	; 0x2801
   16b9a:	6830      	ldr	r0, [r6, #0]
   16b9c:	f88d 800c 	strb.w	r8, [sp, #12]
   16ba0:	a903      	add	r1, sp, #12
   16ba2:	f8ad 300e 	strh.w	r3, [sp, #14]
   16ba6:	f007 f89d 	bl	1dce4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16baa:	b148      	cbz	r0, 16bc0 <read_group_cb+0x50>
		if (data->group &&
   16bac:	6923      	ldr	r3, [r4, #16]
   16bae:	b11b      	cbz	r3, 16bb8 <read_group_cb+0x48>
   16bb0:	885a      	ldrh	r2, [r3, #2]
   16bb2:	42aa      	cmp	r2, r5
   16bb4:	d200      	bcs.n	16bb8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16bb6:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16bb8:	2001      	movs	r0, #1
}
   16bba:	b004      	add	sp, #16
   16bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16bc0:	6861      	ldr	r1, [r4, #4]
   16bc2:	6830      	ldr	r0, [r6, #0]
   16bc4:	f007 f88e 	bl	1dce4 <bt_uuid_cmp>
   16bc8:	b110      	cbz	r0, 16bd0 <read_group_cb+0x60>
		data->group = NULL;
   16bca:	2300      	movs	r3, #0
   16bcc:	6123      	str	r3, [r4, #16]
   16bce:	e7f3      	b.n	16bb8 <read_group_cb+0x48>
	if (data->rsp->len &&
   16bd0:	68e3      	ldr	r3, [r4, #12]
   16bd2:	68a0      	ldr	r0, [r4, #8]
   16bd4:	781a      	ldrb	r2, [r3, #0]
   16bd6:	b13a      	cbz	r2, 16be8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16bd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   16bdc:	8981      	ldrh	r1, [r0, #12]
   16bde:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16be0:	4293      	cmp	r3, r2
   16be2:	da01      	bge.n	16be8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   16be4:	2000      	movs	r0, #0
   16be6:	e7e8      	b.n	16bba <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16be8:	2104      	movs	r1, #4
   16bea:	3008      	adds	r0, #8
   16bec:	f009 fcba 	bl	20564 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16bf0:	4b09      	ldr	r3, [pc, #36]	; (16c18 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16bf2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16bf4:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16bf6:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16bf8:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16bfa:	4631      	mov	r1, r6
   16bfc:	9300      	str	r3, [sp, #0]
   16bfe:	9401      	str	r4, [sp, #4]
   16c00:	2300      	movs	r3, #0
   16c02:	4638      	mov	r0, r7
   16c04:	f007 ffaf 	bl	1eb66 <att_chan_read>
	if (read < 0) {
   16c08:	2800      	cmp	r0, #0
   16c0a:	dbeb      	blt.n	16be4 <read_group_cb+0x74>
	if (!data->group) {
   16c0c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16c0e:	3800      	subs	r0, #0
   16c10:	bf18      	it	ne
   16c12:	2001      	movne	r0, #1
   16c14:	e7d1      	b.n	16bba <read_group_cb+0x4a>
   16c16:	bf00      	nop
   16c18:	0001ee3d 	.word	0x0001ee3d

00016c1c <read_type_cb>:
{
   16c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16c20:	f8d2 8000 	ldr.w	r8, [r2]
{
   16c24:	4606      	mov	r6, r0
   16c26:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c28:	6800      	ldr	r0, [r0, #0]
   16c2a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16c2c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   16c30:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c32:	f007 f857 	bl	1dce4 <bt_uuid_cmp>
   16c36:	4607      	mov	r7, r0
   16c38:	2800      	cmp	r0, #0
   16c3a:	d13e      	bne.n	16cba <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16c3c:	4628      	mov	r0, r5
   16c3e:	2215      	movs	r2, #21
   16c40:	4631      	mov	r1, r6
   16c42:	f008 feef 	bl	1fa24 <bt_gatt_check_perm>
   16c46:	4605      	mov	r5, r0
   16c48:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16c4a:	b148      	cbz	r0, 16c60 <read_type_cb+0x44>
		if (data->rsp->len) {
   16c4c:	68e3      	ldr	r3, [r4, #12]
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	b923      	cbnz	r3, 16c5c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   16c52:	2500      	movs	r5, #0
}
   16c54:	4628      	mov	r0, r5
   16c56:	b003      	add	sp, #12
   16c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   16c5c:	7527      	strb	r7, [r4, #20]
   16c5e:	e7f8      	b.n	16c52 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c60:	68a0      	ldr	r0, [r4, #8]
   16c62:	f009 fc5d 	bl	20520 <net_buf_frag_last>
   16c66:	2102      	movs	r1, #2
   16c68:	3008      	adds	r0, #8
   16c6a:	f009 fc7b 	bl	20564 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c6e:	4b14      	ldr	r3, [pc, #80]	; (16cc0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c70:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c72:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   16c74:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c78:	4631      	mov	r1, r6
   16c7a:	9300      	str	r3, [sp, #0]
   16c7c:	9401      	str	r4, [sp, #4]
   16c7e:	462b      	mov	r3, r5
   16c80:	4640      	mov	r0, r8
   16c82:	f007 ff70 	bl	1eb66 <att_chan_read>
	if (read < 0) {
   16c86:	2800      	cmp	r0, #0
   16c88:	da07      	bge.n	16c9a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   16c8a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   16c8e:	bf26      	itte	cs
   16c90:	4240      	negcs	r0, r0
   16c92:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16c94:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   16c96:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16c98:	e7dc      	b.n	16c54 <read_type_cb+0x38>
	if (!data->item) {
   16c9a:	6923      	ldr	r3, [r4, #16]
   16c9c:	2b00      	cmp	r3, #0
   16c9e:	d0d8      	beq.n	16c52 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16ca0:	68a0      	ldr	r0, [r4, #8]
   16ca2:	f007 ff08 	bl	1eab6 <net_buf_frags_len>
   16ca6:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16caa:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16cac:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16cae:	7818      	ldrb	r0, [r3, #0]
   16cb0:	4285      	cmp	r5, r0
   16cb2:	bf94      	ite	ls
   16cb4:	2500      	movls	r5, #0
   16cb6:	2501      	movhi	r5, #1
   16cb8:	e7cc      	b.n	16c54 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16cba:	2501      	movs	r5, #1
   16cbc:	e7ca      	b.n	16c54 <read_type_cb+0x38>
   16cbe:	bf00      	nop
   16cc0:	0001ead3 	.word	0x0001ead3

00016cc4 <chan_req_sent>:
	if (chan->req) {
   16cc4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   16cc8:	b13b      	cbz	r3, 16cda <chan_req_sent+0x16>
   16cca:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   16cce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16cd2:	4802      	ldr	r0, [pc, #8]	; (16cdc <chan_req_sent+0x18>)
   16cd4:	2300      	movs	r3, #0
   16cd6:	f004 be65 	b.w	1b9a4 <k_delayed_work_submit_to_queue>
}
   16cda:	4770      	bx	lr
   16cdc:	20002718 	.word	0x20002718

00016ce0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16ce2:	2300      	movs	r3, #0
{
   16ce4:	4607      	mov	r7, r0
   16ce6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16ce8:	4822      	ldr	r0, [pc, #136]	; (16d74 <bt_att_accept+0x94>)
   16cea:	2200      	movs	r2, #0
   16cec:	4669      	mov	r1, sp
   16cee:	f004 f91f 	bl	1af30 <k_mem_slab_alloc>
   16cf2:	4604      	mov	r4, r0
   16cf4:	b120      	cbz	r0, 16d00 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   16cf6:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16cfa:	4620      	mov	r0, r4
   16cfc:	b003      	add	sp, #12
   16cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   16d00:	4601      	mov	r1, r0
   16d02:	222c      	movs	r2, #44	; 0x2c
   16d04:	9800      	ldr	r0, [sp, #0]
   16d06:	f006 ff5e 	bl	1dbc6 <memset>
	att->conn = conn;
   16d0a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16d0c:	481a      	ldr	r0, [pc, #104]	; (16d78 <bt_att_accept+0x98>)
	list->tail = NULL;
   16d0e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   16d10:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   16d14:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   16d18:	2200      	movs	r2, #0
   16d1a:	2300      	movs	r3, #0
   16d1c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16d1e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16d20:	f004 f906 	bl	1af30 <k_mem_slab_alloc>
   16d24:	4604      	mov	r4, r0
   16d26:	2800      	cmp	r0, #0
   16d28:	d1e5      	bne.n	16cf6 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   16d2a:	4601      	mov	r1, r0
   16d2c:	f44f 7298 	mov.w	r2, #304	; 0x130
   16d30:	9801      	ldr	r0, [sp, #4]
   16d32:	f006 ff48 	bl	1dbc6 <memset>
	chan->chan.chan.ops = &ops;
   16d36:	9801      	ldr	r0, [sp, #4]
   16d38:	4b10      	ldr	r3, [pc, #64]	; (16d7c <bt_att_accept+0x9c>)
   16d3a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   16d3c:	30c8      	adds	r0, #200	; 0xc8
   16d3e:	f009 ff04 	bl	20b4a <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   16d42:	9801      	ldr	r0, [sp, #4]
   16d44:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
   16d48:	2203      	movs	r2, #3
   16d4a:	4611      	mov	r1, r2
   16d4c:	f00a f855 	bl	20dfa <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16d50:	9b01      	ldr	r3, [sp, #4]
   16d52:	f3bf 8f5b 	dmb	ish
   16d56:	33c0      	adds	r3, #192	; 0xc0
   16d58:	e853 2f00 	ldrex	r2, [r3]
   16d5c:	e843 4100 	strex	r1, r4, [r3]
   16d60:	2900      	cmp	r1, #0
   16d62:	d1f9      	bne.n	16d58 <bt_att_accept+0x78>
   16d64:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16d68:	9b01      	ldr	r3, [sp, #4]
   16d6a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   16d6e:	6033      	str	r3, [r6, #0]
	return 0;
   16d70:	e7c3      	b.n	16cfa <bt_att_accept+0x1a>
   16d72:	bf00      	nop
   16d74:	20000920 	.word	0x20000920
   16d78:	2000093c 	.word	0x2000093c
   16d7c:	20000728 	.word	0x20000728

00016d80 <bt_att_connected>:
{
   16d80:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16d82:	2104      	movs	r1, #4
{
   16d84:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16d86:	6800      	ldr	r0, [r0, #0]
   16d88:	f007 fe34 	bl	1e9f4 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   16d8c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   16d90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16d92:	b91b      	cbnz	r3, 16d9c <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
   16d94:	f105 000c 	add.w	r0, r5, #12
   16d98:	f009 fed7 	bl	20b4a <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   16d9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   16d9e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
   16da2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16da4:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
   16da8:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16daa:	b902      	cbnz	r2, 16dae <bt_att_connected+0x2e>
	list->tail = node;
   16dac:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16dae:	f3bf 8f5b 	dmb	ish
   16db2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   16db6:	4908      	ldr	r1, [pc, #32]	; (16dd8 <bt_att_connected+0x58>)
   16db8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16dbc:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16dbe:	bf5e      	ittt	pl
   16dc0:	2317      	movpl	r3, #23
   16dc2:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16dc6:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   16dca:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
   16dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   16dd2:	f00a b892 	b.w	20efa <k_delayed_work_init>
   16dd6:	bf00      	nop
   16dd8:	0001f2a7 	.word	0x0001f2a7

00016ddc <chan_send>:
{
   16ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16de0:	688b      	ldr	r3, [r1, #8]
   16de2:	781b      	ldrb	r3, [r3, #0]
   16de4:	2bd2      	cmp	r3, #210	; 0xd2
{
   16de6:	4605      	mov	r5, r0
   16de8:	460c      	mov	r4, r1
   16dea:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16dec:	d10c      	bne.n	16e08 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   16dee:	6803      	ldr	r3, [r0, #0]
   16df0:	6818      	ldr	r0, [r3, #0]
   16df2:	f009 fac4 	bl	2037e <bt_smp_sign>
		if (err) {
   16df6:	4606      	mov	r6, r0
   16df8:	b130      	cbz	r0, 16e08 <chan_send+0x2c>
		net_buf_unref(buf);
   16dfa:	4620      	mov	r0, r4
   16dfc:	f002 fb22 	bl	19444 <net_buf_unref>
}
   16e00:	4630      	mov	r0, r6
   16e02:	b003      	add	sp, #12
   16e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   16e08:	f104 0008 	add.w	r0, r4, #8
   16e0c:	f009 fbe1 	bl	205d2 <net_buf_simple_headroom>
	state->len = buf->len;
   16e10:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16e14:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   16e16:	f1b9 0f00 	cmp.w	r9, #0
   16e1a:	d10a      	bne.n	16e32 <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
   16e1c:	68a3      	ldr	r3, [r4, #8]
   16e1e:	7818      	ldrb	r0, [r3, #0]
   16e20:	f007 fe69 	bl	1eaf6 <att_op_get_type>
   16e24:	1e43      	subs	r3, r0, #1
   16e26:	b2db      	uxtb	r3, r3
   16e28:	2b04      	cmp	r3, #4
   16e2a:	bf9c      	itt	ls
   16e2c:	4a16      	ldrls	r2, [pc, #88]	; (16e88 <chan_send+0xac>)
   16e2e:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16e32:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   16e34:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16e38:	4620      	mov	r0, r4
   16e3a:	681e      	ldr	r6, [r3, #0]
   16e3c:	f009 fb6c 	bl	20518 <net_buf_ref>
   16e40:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
   16e44:	4b11      	ldr	r3, [pc, #68]	; (16e8c <chan_send+0xb0>)
   16e46:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16e48:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   16e4a:	d019      	beq.n	16e80 <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
   16e4c:	4b10      	ldr	r3, [pc, #64]	; (16e90 <chan_send+0xb4>)
   16e4e:	4299      	cmp	r1, r3
   16e50:	d018      	beq.n	16e84 <chan_send+0xa8>
		return att_sent;
   16e52:	f8df c050 	ldr.w	ip, [pc, #80]	; 16ea4 <chan_send+0xc8>
   16e56:	4b0f      	ldr	r3, [pc, #60]	; (16e94 <chan_send+0xb8>)
   16e58:	480f      	ldr	r0, [pc, #60]	; (16e98 <chan_send+0xbc>)
   16e5a:	4561      	cmp	r1, ip
   16e5c:	bf18      	it	ne
   16e5e:	4603      	movne	r3, r0
				&chan->chan.chan);
   16e60:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16e62:	4630      	mov	r0, r6
   16e64:	9500      	str	r5, [sp, #0]
   16e66:	2104      	movs	r1, #4
   16e68:	f007 fd7e 	bl	1e968 <bt_l2cap_send_cb>
	if (!err) {
   16e6c:	4606      	mov	r6, r0
   16e6e:	2800      	cmp	r0, #0
   16e70:	d0c3      	beq.n	16dfa <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
   16e72:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16e74:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16e78:	fa10 f787 	uxtah	r7, r0, r7
   16e7c:	60a7      	str	r7, [r4, #8]
}
   16e7e:	e7bf      	b.n	16e00 <chan_send+0x24>
		return att_rsp_sent;
   16e80:	4b06      	ldr	r3, [pc, #24]	; (16e9c <chan_send+0xc0>)
   16e82:	e7ed      	b.n	16e60 <chan_send+0x84>
		return att_cfm_sent;
   16e84:	4b06      	ldr	r3, [pc, #24]	; (16ea0 <chan_send+0xc4>)
   16e86:	e7eb      	b.n	16e60 <chan_send+0x84>
   16e88:	00021b28 	.word	0x00021b28
   16e8c:	0001ee61 	.word	0x0001ee61
   16e90:	0001ee7d 	.word	0x0001ee7d
   16e94:	00016b49 	.word	0x00016b49
   16e98:	0001eac7 	.word	0x0001eac7
   16e9c:	00016b39 	.word	0x00016b39
   16ea0:	00016b29 	.word	0x00016b29
   16ea4:	00016cc5 	.word	0x00016cc5

00016ea8 <att_write_cmd>:
{
   16ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eaa:	4604      	mov	r4, r0
   16eac:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   16eae:	f101 0008 	add.w	r0, r1, #8
{
   16eb2:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   16eb4:	f009 fb85 	bl	205c2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16eb8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   16eba:	68af      	ldr	r7, [r5, #8]
   16ebc:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   16ebe:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16ec0:	2100      	movs	r1, #0
   16ec2:	6818      	ldr	r0, [r3, #0]
   16ec4:	f008 fdd9 	bl	1fa7a <bt_gatt_change_aware>
   16ec8:	b328      	cbz	r0, 16f16 <att_write_cmd+0x6e>
	if (!handle) {
   16eca:	b336      	cbz	r6, 16f1a <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   16ecc:	2218      	movs	r2, #24
   16ece:	2100      	movs	r1, #0
   16ed0:	4668      	mov	r0, sp
   16ed2:	f006 fe78 	bl	1dbc6 <memset>
	data.conn = chan->att->conn;
   16ed6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16ed8:	4a11      	ldr	r2, [pc, #68]	; (16f20 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   16eda:	681b      	ldr	r3, [r3, #0]
   16edc:	9300      	str	r3, [sp, #0]
	data.req = req;
   16ede:	2300      	movs	r3, #0
   16ee0:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   16ee4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16ee8:	2301      	movs	r3, #1
   16eea:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16eee:	4631      	mov	r1, r6
   16ef0:	466b      	mov	r3, sp
   16ef2:	4630      	mov	r0, r6
	data.value = value;
   16ef4:	9703      	str	r7, [sp, #12]
	data.len = len;
   16ef6:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16efa:	f007 fe29 	bl	1eb50 <bt_gatt_foreach_attr>
	if (data.err) {
   16efe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16f02:	b92b      	cbnz	r3, 16f10 <att_write_cmd+0x68>
	if (data.buf) {
   16f04:	9901      	ldr	r1, [sp, #4]
   16f06:	b119      	cbz	r1, 16f10 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16f08:	4a06      	ldr	r2, [pc, #24]	; (16f24 <att_write_cmd+0x7c>)
   16f0a:	4620      	mov	r0, r4
   16f0c:	f008 f8ac 	bl	1f068 <bt_att_chan_send_rsp>
   16f10:	2000      	movs	r0, #0
}
   16f12:	b007      	add	sp, #28
   16f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16f16:	2012      	movs	r0, #18
   16f18:	e7fb      	b.n	16f12 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   16f1a:	2001      	movs	r0, #1
   16f1c:	e7f9      	b.n	16f12 <att_write_cmd+0x6a>
   16f1e:	bf00      	nop
   16f20:	0001eec5 	.word	0x0001eec5
   16f24:	0001ee61 	.word	0x0001ee61

00016f28 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f2c:	4688      	mov	r8, r1
   16f2e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16f30:	2101      	movs	r1, #1
   16f32:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16f34:	4605      	mov	r5, r0
   16f36:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16f38:	f008 f8ff 	bl	1f13a <bt_att_chan_create_pdu>
	if (!buf) {
   16f3c:	4604      	mov	r4, r0
   16f3e:	b178      	cbz	r0, 16f60 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
   16f40:	2104      	movs	r1, #4
   16f42:	3008      	adds	r0, #8
   16f44:	f009 fb0e 	bl	20564 <net_buf_simple_add>
	rsp->request = req;
   16f48:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   16f4c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   16f4e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16f52:	4621      	mov	r1, r4
   16f54:	4628      	mov	r0, r5
   16f56:	4a03      	ldr	r2, [pc, #12]	; (16f64 <send_err_rsp.part.0+0x3c>)
}
   16f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16f5c:	f008 b884 	b.w	1f068 <bt_att_chan_send_rsp>
}
   16f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f64:	0001ee61 	.word	0x0001ee61

00016f68 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16f68:	898b      	ldrh	r3, [r1, #12]
{
   16f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f6e:	4604      	mov	r4, r0
   16f70:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16f72:	2b00      	cmp	r3, #0
   16f74:	d05a      	beq.n	1702c <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16f76:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16f78:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16f7c:	f105 0008 	add.w	r0, r5, #8
   16f80:	f009 fb17 	bl	205b2 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
   16f84:	4a2d      	ldr	r2, [pc, #180]	; (1703c <bt_att_recv+0xd4>)
   16f86:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16f88:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16f8a:	2300      	movs	r3, #0
   16f8c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   16f8e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   16f92:	4288      	cmp	r0, r1
   16f94:	d11a      	bne.n	16fcc <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   16f96:	00d9      	lsls	r1, r3, #3
   16f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16f9c:	f893 8002 	ldrb.w	r8, [r3, #2]
   16fa0:	f1b8 0f01 	cmp.w	r8, #1
   16fa4:	d020      	beq.n	16fe8 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
   16fa6:	f1b8 0f05 	cmp.w	r8, #5
   16faa:	d12d      	bne.n	17008 <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16fac:	f3bf 8f5b 	dmb	ish
   16fb0:	34b8      	adds	r4, #184	; 0xb8
   16fb2:	e854 2f00 	ldrex	r2, [r4]
   16fb6:	f042 0302 	orr.w	r3, r2, #2
   16fba:	e844 3000 	strex	r0, r3, [r4]
   16fbe:	2800      	cmp	r0, #0
   16fc0:	d1f7      	bne.n	16fb2 <bt_att_recv+0x4a>
   16fc2:	f3bf 8f5b 	dmb	ish
   16fc6:	f012 0f02 	tst.w	r2, #2
   16fca:	e01c      	b.n	17006 <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16fcc:	3301      	adds	r3, #1
   16fce:	2b0d      	cmp	r3, #13
   16fd0:	d1dd      	bne.n	16f8e <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   16fd2:	4608      	mov	r0, r1
   16fd4:	f007 fd8f 	bl	1eaf6 <att_op_get_type>
   16fd8:	b340      	cbz	r0, 1702c <bt_att_recv+0xc4>
	if (!req) {
   16fda:	b339      	cbz	r1, 1702c <bt_att_recv+0xc4>
   16fdc:	2306      	movs	r3, #6
   16fde:	2200      	movs	r2, #0
   16fe0:	4630      	mov	r0, r6
   16fe2:	f7ff ffa1 	bl	16f28 <send_err_rsp.part.0>
   16fe6:	e021      	b.n	1702c <bt_att_recv+0xc4>
   16fe8:	34b8      	adds	r4, #184	; 0xb8
   16fea:	f3bf 8f5b 	dmb	ish
   16fee:	e854 3f00 	ldrex	r3, [r4]
   16ff2:	f043 0201 	orr.w	r2, r3, #1
   16ff6:	e844 2000 	strex	r0, r2, [r4]
   16ffa:	2800      	cmp	r0, #0
   16ffc:	d1f7      	bne.n	16fee <bt_att_recv+0x86>
   16ffe:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   17002:	f013 0f01 	tst.w	r3, #1
   17006:	d111      	bne.n	1702c <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
   17008:	eb0c 0301 	add.w	r3, ip, r1
   1700c:	89a9      	ldrh	r1, [r5, #12]
   1700e:	785a      	ldrb	r2, [r3, #1]
   17010:	4291      	cmp	r1, r2
   17012:	d30e      	bcc.n	17032 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   17014:	685b      	ldr	r3, [r3, #4]
   17016:	4629      	mov	r1, r5
   17018:	4630      	mov	r0, r6
   1701a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1701c:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   17020:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   17022:	d103      	bne.n	1702c <bt_att_recv+0xc4>
   17024:	b110      	cbz	r0, 1702c <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
   17026:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   17028:	2900      	cmp	r1, #0
   1702a:	d1d8      	bne.n	16fde <bt_att_recv+0x76>
}
   1702c:	2000      	movs	r0, #0
   1702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   17032:	f1b8 0f01 	cmp.w	r8, #1
   17036:	d1f9      	bne.n	1702c <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
   17038:	2304      	movs	r3, #4
   1703a:	e7f4      	b.n	17026 <bt_att_recv+0xbe>
   1703c:	00021b3c 	.word	0x00021b3c

00017040 <att_write_req>:
{
   17040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17044:	4604      	mov	r4, r0
   17046:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   17048:	f101 0008 	add.w	r0, r1, #8
{
   1704c:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   1704e:	f009 fab8 	bl	205c2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17052:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   17054:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   17058:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   1705a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1705c:	2101      	movs	r1, #1
   1705e:	6818      	ldr	r0, [r3, #0]
   17060:	f008 fd0b 	bl	1fa7a <bt_gatt_change_aware>
   17064:	2800      	cmp	r0, #0
   17066:	d040      	beq.n	170ea <att_write_req+0xaa>
	if (!handle) {
   17068:	2e00      	cmp	r6, #0
   1706a:	d040      	beq.n	170ee <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1706c:	2218      	movs	r2, #24
   1706e:	2100      	movs	r1, #0
   17070:	4668      	mov	r0, sp
   17072:	f006 fda8 	bl	1dbc6 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   17076:	2200      	movs	r2, #0
   17078:	2113      	movs	r1, #19
   1707a:	4620      	mov	r0, r4
   1707c:	f008 f85d 	bl	1f13a <bt_att_chan_create_pdu>
   17080:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   17082:	b380      	cbz	r0, 170e6 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   17084:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17086:	4a1b      	ldr	r2, [pc, #108]	; (170f4 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   17088:	681b      	ldr	r3, [r3, #0]
   1708a:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1708c:	2301      	movs	r3, #1
   1708e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   17092:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   17096:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17098:	466b      	mov	r3, sp
   1709a:	4631      	mov	r1, r6
   1709c:	4630      	mov	r0, r6
	data.len = len;
   1709e:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   170a2:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   170a6:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   170aa:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   170ae:	f007 fd4f 	bl	1eb50 <bt_gatt_foreach_attr>
	if (data.err) {
   170b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
   170b6:	b175      	cbz	r5, 170d6 <att_write_req+0x96>
			net_buf_unref(data.buf);
   170b8:	9801      	ldr	r0, [sp, #4]
   170ba:	f002 f9c3 	bl	19444 <net_buf_unref>
	if (!req) {
   170be:	f89d 3014 	ldrb.w	r3, [sp, #20]
   170c2:	4632      	mov	r2, r6
   170c4:	4641      	mov	r1, r8
   170c6:	4620      	mov	r0, r4
   170c8:	f7ff ff2e 	bl	16f28 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   170cc:	463d      	mov	r5, r7
}
   170ce:	4628      	mov	r0, r5
   170d0:	b007      	add	sp, #28
   170d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   170d6:	9901      	ldr	r1, [sp, #4]
   170d8:	2900      	cmp	r1, #0
   170da:	d0f8      	beq.n	170ce <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   170dc:	4a06      	ldr	r2, [pc, #24]	; (170f8 <att_write_req+0xb8>)
   170de:	4620      	mov	r0, r4
   170e0:	f007 ffc2 	bl	1f068 <bt_att_chan_send_rsp>
   170e4:	e7f3      	b.n	170ce <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   170e6:	250e      	movs	r5, #14
   170e8:	e7f1      	b.n	170ce <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   170ea:	2512      	movs	r5, #18
   170ec:	e7ef      	b.n	170ce <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   170ee:	2501      	movs	r5, #1
   170f0:	e7ed      	b.n	170ce <att_write_req+0x8e>
   170f2:	bf00      	nop
   170f4:	0001eec5 	.word	0x0001eec5
   170f8:	0001ee61 	.word	0x0001ee61

000170fc <att_read_group_req>:
{
   170fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17100:	7b0c      	ldrb	r4, [r1, #12]
   17102:	3c04      	subs	r4, #4
   17104:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   17106:	2c02      	cmp	r4, #2
{
   17108:	4605      	mov	r5, r0
   1710a:	b08c      	sub	sp, #48	; 0x30
   1710c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1710e:	d001      	beq.n	17114 <att_read_group_req+0x18>
   17110:	2c10      	cmp	r4, #16
   17112:	d16f      	bne.n	171f4 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
   17114:	2104      	movs	r1, #4
   17116:	3008      	adds	r0, #8
   17118:	f009 fa4b 	bl	205b2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1711c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   17120:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17122:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17124:	1d01      	adds	r1, r0, #4
   17126:	4622      	mov	r2, r4
   17128:	4640      	mov	r0, r8
   1712a:	f006 fe05 	bl	1dd38 <bt_uuid_create>
   1712e:	2800      	cmp	r0, #0
   17130:	d062      	beq.n	171f8 <att_read_group_req+0xfc>
	if (!start || !end) {
   17132:	2e00      	cmp	r6, #0
   17134:	d03a      	beq.n	171ac <att_read_group_req+0xb0>
   17136:	2400      	movs	r4, #0
   17138:	2f00      	cmp	r7, #0
   1713a:	d036      	beq.n	171aa <att_read_group_req+0xae>
	if (start > end) {
   1713c:	42be      	cmp	r6, r7
   1713e:	d835      	bhi.n	171ac <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17140:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17144:	a901      	add	r1, sp, #4
   17146:	4640      	mov	r0, r8
   17148:	f88d 4004 	strb.w	r4, [sp, #4]
   1714c:	f8ad 3006 	strh.w	r3, [sp, #6]
   17150:	f006 fdc8 	bl	1dce4 <bt_uuid_cmp>
   17154:	2800      	cmp	r0, #0
   17156:	d134      	bne.n	171c2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   17158:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1715a:	2214      	movs	r2, #20
   1715c:	2100      	movs	r1, #0
   1715e:	a807      	add	r0, sp, #28
   17160:	f006 fd31 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17164:	2201      	movs	r2, #1
   17166:	2111      	movs	r1, #17
   17168:	4620      	mov	r0, r4
   1716a:	f008 f80b 	bl	1f184 <bt_att_create_pdu>
   1716e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   17170:	2800      	cmp	r0, #0
   17172:	d041      	beq.n	171f8 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17174:	2101      	movs	r1, #1
   17176:	3008      	adds	r0, #8
	data.uuid = uuid;
   17178:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1717c:	f009 f9f2 	bl	20564 <net_buf_simple_add>
	data.rsp->len = 0U;
   17180:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17184:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17186:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   17188:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1718c:	4a1b      	ldr	r2, [pc, #108]	; (171fc <att_read_group_req+0x100>)
	data.group = NULL;
   1718e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17192:	4639      	mov	r1, r7
   17194:	4630      	mov	r0, r6
   17196:	f007 fcdb 	bl	1eb50 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1719a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1719c:	781c      	ldrb	r4, [r3, #0]
   1719e:	bb1c      	cbnz	r4, 171e8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   171a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   171a2:	f002 f94f 	bl	19444 <net_buf_unref>
	if (!req) {
   171a6:	230a      	movs	r3, #10
   171a8:	e018      	b.n	171dc <att_read_group_req+0xe0>
			*err = 0U;
   171aa:	463e      	mov	r6, r7
	if (!req) {
   171ac:	2301      	movs	r3, #1
   171ae:	4632      	mov	r2, r6
   171b0:	2110      	movs	r1, #16
   171b2:	4628      	mov	r0, r5
   171b4:	f7ff feb8 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   171b8:	2400      	movs	r4, #0
}
   171ba:	4620      	mov	r0, r4
   171bc:	b00c      	add	sp, #48	; 0x30
   171be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   171c2:	f642 0301 	movw	r3, #10241	; 0x2801
   171c6:	a907      	add	r1, sp, #28
   171c8:	4640      	mov	r0, r8
   171ca:	f88d 401c 	strb.w	r4, [sp, #28]
   171ce:	f8ad 301e 	strh.w	r3, [sp, #30]
   171d2:	f006 fd87 	bl	1dce4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   171d6:	2800      	cmp	r0, #0
   171d8:	d0be      	beq.n	17158 <att_read_group_req+0x5c>
	if (!req) {
   171da:	2310      	movs	r3, #16
   171dc:	4632      	mov	r2, r6
   171de:	2110      	movs	r1, #16
   171e0:	4628      	mov	r0, r5
   171e2:	f7ff fea1 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   171e6:	e7e8      	b.n	171ba <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   171e8:	4a05      	ldr	r2, [pc, #20]	; (17200 <att_read_group_req+0x104>)
   171ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   171ec:	4628      	mov	r0, r5
   171ee:	f007 ff3b 	bl	1f068 <bt_att_chan_send_rsp>
	return 0;
   171f2:	e7e1      	b.n	171b8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   171f4:	2404      	movs	r4, #4
   171f6:	e7e0      	b.n	171ba <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   171f8:	240e      	movs	r4, #14
   171fa:	e7de      	b.n	171ba <att_read_group_req+0xbe>
   171fc:	00016b71 	.word	0x00016b71
   17200:	0001ee61 	.word	0x0001ee61

00017204 <att_read_mult_req>:
{
   17204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17208:	6886      	ldr	r6, [r0, #8]
{
   1720a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   1720c:	2210      	movs	r2, #16
{
   1720e:	4604      	mov	r4, r0
   17210:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   17212:	4668      	mov	r0, sp
   17214:	2100      	movs	r1, #0
   17216:	f006 fcd6 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1721a:	2200      	movs	r2, #0
   1721c:	210f      	movs	r1, #15
   1721e:	4630      	mov	r0, r6
   17220:	f007 ffb0 	bl	1f184 <bt_att_create_pdu>
   17224:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17226:	b360      	cbz	r0, 17282 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17228:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1728c <att_read_mult_req+0x88>
	data.chan = chan;
   1722c:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
   1722e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17232:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17236:	89ab      	ldrh	r3, [r5, #12]
   17238:	2b01      	cmp	r3, #1
   1723a:	d805      	bhi.n	17248 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1723c:	4a12      	ldr	r2, [pc, #72]	; (17288 <att_read_mult_req+0x84>)
   1723e:	9902      	ldr	r1, [sp, #8]
   17240:	4620      	mov	r0, r4
   17242:	f007 ff11 	bl	1f068 <bt_att_chan_send_rsp>
   17246:	e018      	b.n	1727a <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
   17248:	4638      	mov	r0, r7
   1724a:	f009 f9ba 	bl	205c2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1724e:	466b      	mov	r3, sp
   17250:	464a      	mov	r2, r9
   17252:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
   17254:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17256:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1725a:	f007 fc79 	bl	1eb50 <bt_gatt_foreach_attr>
		if (data.err) {
   1725e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17262:	2b00      	cmp	r3, #0
   17264:	d0e7      	beq.n	17236 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   17266:	9802      	ldr	r0, [sp, #8]
   17268:	f002 f8ec 	bl	19444 <net_buf_unref>
	if (!req) {
   1726c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17270:	4632      	mov	r2, r6
   17272:	210e      	movs	r1, #14
   17274:	4620      	mov	r0, r4
   17276:	f7ff fe57 	bl	16f28 <send_err_rsp.part.0>
	return 0;
   1727a:	2000      	movs	r0, #0
}
   1727c:	b005      	add	sp, #20
   1727e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   17282:	200e      	movs	r0, #14
   17284:	e7fa      	b.n	1727c <att_read_mult_req+0x78>
   17286:	bf00      	nop
   17288:	0001ee61 	.word	0x0001ee61
   1728c:	0001ef21 	.word	0x0001ef21

00017290 <att_read_rsp>:
{
   17290:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17294:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   17298:	4605      	mov	r5, r0
   1729a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1729c:	4640      	mov	r0, r8
   1729e:	2101      	movs	r1, #1
{
   172a0:	4614      	mov	r4, r2
   172a2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   172a4:	f008 fbe9 	bl	1fa7a <bt_gatt_change_aware>
   172a8:	b390      	cbz	r0, 17310 <att_read_rsp+0x80>
	if (!handle) {
   172aa:	b39e      	cbz	r6, 17314 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   172ac:	2210      	movs	r2, #16
   172ae:	2100      	movs	r1, #0
   172b0:	4668      	mov	r0, sp
   172b2:	f006 fc88 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   172b6:	2200      	movs	r2, #0
   172b8:	4621      	mov	r1, r4
   172ba:	4640      	mov	r0, r8
   172bc:	f007 ff62 	bl	1f184 <bt_att_create_pdu>
   172c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   172c2:	b348      	cbz	r0, 17318 <att_read_rsp+0x88>
	data.offset = offset;
   172c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   172c8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   172cc:	2301      	movs	r3, #1
   172ce:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   172d2:	4a12      	ldr	r2, [pc, #72]	; (1731c <att_read_rsp+0x8c>)
	data.chan = chan;
   172d4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   172d6:	466b      	mov	r3, sp
   172d8:	4631      	mov	r1, r6
   172da:	4630      	mov	r0, r6
   172dc:	f007 fc38 	bl	1eb50 <bt_gatt_foreach_attr>
	if (data.err) {
   172e0:	f89d 400c 	ldrb.w	r4, [sp, #12]
   172e4:	b174      	cbz	r4, 17304 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   172e6:	9802      	ldr	r0, [sp, #8]
   172e8:	f002 f8ac 	bl	19444 <net_buf_unref>
	if (!req) {
   172ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   172f0:	4632      	mov	r2, r6
   172f2:	4639      	mov	r1, r7
   172f4:	4628      	mov	r0, r5
   172f6:	f7ff fe17 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   172fa:	2400      	movs	r4, #0
}
   172fc:	4620      	mov	r0, r4
   172fe:	b004      	add	sp, #16
   17300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17304:	4a06      	ldr	r2, [pc, #24]	; (17320 <att_read_rsp+0x90>)
   17306:	9902      	ldr	r1, [sp, #8]
   17308:	4628      	mov	r0, r5
   1730a:	f007 fead 	bl	1f068 <bt_att_chan_send_rsp>
	return 0;
   1730e:	e7f5      	b.n	172fc <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17310:	2412      	movs	r4, #18
   17312:	e7f3      	b.n	172fc <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   17314:	2401      	movs	r4, #1
   17316:	e7f1      	b.n	172fc <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   17318:	240e      	movs	r4, #14
   1731a:	e7ef      	b.n	172fc <att_read_rsp+0x6c>
   1731c:	0001ef21 	.word	0x0001ef21
   17320:	0001ee61 	.word	0x0001ee61

00017324 <att_read_type_req>:
{
   17324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17328:	7b0c      	ldrb	r4, [r1, #12]
   1732a:	3c04      	subs	r4, #4
   1732c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1732e:	2c02      	cmp	r4, #2
{
   17330:	4605      	mov	r5, r0
   17332:	b08c      	sub	sp, #48	; 0x30
   17334:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17336:	d001      	beq.n	1733c <att_read_type_req+0x18>
   17338:	2c10      	cmp	r4, #16
   1733a:	d150      	bne.n	173de <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
   1733c:	2104      	movs	r1, #4
   1733e:	3008      	adds	r0, #8
   17340:	f009 f937 	bl	205b2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17344:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17348:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1734a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1734c:	1d01      	adds	r1, r0, #4
   1734e:	4622      	mov	r2, r4
   17350:	4640      	mov	r0, r8
   17352:	f006 fcf1 	bl	1dd38 <bt_uuid_create>
   17356:	b188      	cbz	r0, 1737c <att_read_type_req+0x58>
	if (!start || !end) {
   17358:	b19e      	cbz	r6, 17382 <att_read_type_req+0x5e>
   1735a:	b18f      	cbz	r7, 17380 <att_read_type_req+0x5c>
	if (start > end) {
   1735c:	42b7      	cmp	r7, r6
   1735e:	d310      	bcc.n	17382 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   17360:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   17362:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   17364:	2100      	movs	r1, #0
   17366:	eb0d 0002 	add.w	r0, sp, r2
   1736a:	f006 fc2c 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1736e:	2201      	movs	r2, #1
   17370:	2109      	movs	r1, #9
   17372:	4620      	mov	r0, r4
   17374:	f007 ff06 	bl	1f184 <bt_att_create_pdu>
   17378:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1737a:	b968      	cbnz	r0, 17398 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1737c:	240e      	movs	r4, #14
   1737e:	e007      	b.n	17390 <att_read_type_req+0x6c>
			*err = 0U;
   17380:	463e      	mov	r6, r7
	if (!req) {
   17382:	2301      	movs	r3, #1
   17384:	4632      	mov	r2, r6
   17386:	2108      	movs	r1, #8
   17388:	4628      	mov	r0, r5
   1738a:	f7ff fdcd 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   1738e:	2400      	movs	r4, #0
}
   17390:	4620      	mov	r0, r4
   17392:	b00c      	add	sp, #48	; 0x30
   17394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17398:	2101      	movs	r1, #1
   1739a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1739c:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   173a0:	f009 f8e0 	bl	20564 <net_buf_simple_add>
	data.rsp->len = 0U;
   173a4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   173a8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   173aa:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   173ac:	4a0d      	ldr	r2, [pc, #52]	; (173e4 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   173ae:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   173b2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   173b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   173b8:	4630      	mov	r0, r6
   173ba:	ab06      	add	r3, sp, #24
   173bc:	f007 fbc8 	bl	1eb50 <bt_gatt_foreach_attr>
	if (data.err) {
   173c0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   173c4:	b12c      	cbz	r4, 173d2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   173c6:	9808      	ldr	r0, [sp, #32]
   173c8:	f002 f83c 	bl	19444 <net_buf_unref>
	if (!req) {
   173cc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   173d0:	e7d8      	b.n	17384 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   173d2:	4a05      	ldr	r2, [pc, #20]	; (173e8 <att_read_type_req+0xc4>)
   173d4:	9908      	ldr	r1, [sp, #32]
   173d6:	4628      	mov	r0, r5
   173d8:	f007 fe46 	bl	1f068 <bt_att_chan_send_rsp>
	return 0;
   173dc:	e7d8      	b.n	17390 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   173de:	2404      	movs	r4, #4
   173e0:	e7d6      	b.n	17390 <att_read_type_req+0x6c>
   173e2:	bf00      	nop
   173e4:	00016c1d 	.word	0x00016c1d
   173e8:	0001ee61 	.word	0x0001ee61

000173ec <att_find_type_req>:
{
   173ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173f0:	4688      	mov	r8, r1
   173f2:	b086      	sub	sp, #24
   173f4:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
   173f6:	2106      	movs	r1, #6
   173f8:	f108 0008 	add.w	r0, r8, #8
   173fc:	f009 f8d9 	bl	205b2 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   17400:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   17402:	b317      	cbz	r7, 1744a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   17404:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   17408:	f1b9 0f00 	cmp.w	r9, #0
   1740c:	d01c      	beq.n	17448 <att_find_type_req+0x5c>
	if (start > end) {
   1740e:	454f      	cmp	r7, r9
   17410:	d81b      	bhi.n	1744a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   17412:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17414:	f8ad 3002 	strh.w	r3, [sp, #2]
   17418:	2400      	movs	r4, #0
   1741a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1741e:	a901      	add	r1, sp, #4
   17420:	4668      	mov	r0, sp
	value = buf->data;
   17422:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17426:	f88d 4000 	strb.w	r4, [sp]
   1742a:	f88d 4004 	strb.w	r4, [sp, #4]
   1742e:	f8ad 3006 	strh.w	r3, [sp, #6]
   17432:	f006 fc57 	bl	1dce4 <bt_uuid_cmp>
   17436:	4606      	mov	r6, r0
   17438:	b190      	cbz	r0, 17460 <att_find_type_req+0x74>
	if (!req) {
   1743a:	230a      	movs	r3, #10
   1743c:	463a      	mov	r2, r7
   1743e:	2106      	movs	r1, #6
   17440:	4628      	mov	r0, r5
   17442:	f7ff fd71 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   17446:	e007      	b.n	17458 <att_find_type_req+0x6c>
			*err = 0U;
   17448:	464f      	mov	r7, r9
	if (!req) {
   1744a:	2301      	movs	r3, #1
   1744c:	463a      	mov	r2, r7
   1744e:	2106      	movs	r1, #6
   17450:	4628      	mov	r0, r5
   17452:	f7ff fd69 	bl	16f28 <send_err_rsp.part.0>
		return 0;
   17456:	2400      	movs	r4, #0
}
   17458:	4620      	mov	r0, r4
   1745a:	b006      	add	sp, #24
   1745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17460:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   17464:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   17468:	4601      	mov	r1, r0
   1746a:	2214      	movs	r2, #20
   1746c:	a801      	add	r0, sp, #4
   1746e:	f006 fbaa 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17472:	4632      	mov	r2, r6
   17474:	2107      	movs	r1, #7
   17476:	4640      	mov	r0, r8
   17478:	f007 fe84 	bl	1f184 <bt_att_create_pdu>
   1747c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1747e:	b1e0      	cbz	r0, 174ba <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17480:	230a      	movs	r3, #10
   17482:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17486:	4a0e      	ldr	r2, [pc, #56]	; (174c0 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   17488:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1748c:	ab01      	add	r3, sp, #4
   1748e:	4649      	mov	r1, r9
   17490:	4638      	mov	r0, r7
	data.value = value;
   17492:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   17496:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17498:	f007 fb5a 	bl	1eb50 <bt_gatt_foreach_attr>
	if (data.err) {
   1749c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   174a0:	b12c      	cbz	r4, 174ae <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   174a2:	9802      	ldr	r0, [sp, #8]
   174a4:	f001 ffce 	bl	19444 <net_buf_unref>
	if (!req) {
   174a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   174ac:	e7ce      	b.n	1744c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   174ae:	4a05      	ldr	r2, [pc, #20]	; (174c4 <att_find_type_req+0xd8>)
   174b0:	9902      	ldr	r1, [sp, #8]
   174b2:	4628      	mov	r0, r5
   174b4:	f007 fdd8 	bl	1f068 <bt_att_chan_send_rsp>
	return 0;
   174b8:	e7ce      	b.n	17458 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   174ba:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   174bc:	e7cc      	b.n	17458 <att_find_type_req+0x6c>
   174be:	bf00      	nop
   174c0:	0001ec7d 	.word	0x0001ec7d
   174c4:	0001ee61 	.word	0x0001ee61

000174c8 <att_find_info_req>:
{
   174c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   174ca:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   174cc:	881e      	ldrh	r6, [r3, #0]
{
   174ce:	b085      	sub	sp, #20
   174d0:	4605      	mov	r5, r0
	if (!start || !end) {
   174d2:	b19e      	cbz	r6, 174fc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   174d4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   174d6:	b184      	cbz	r4, 174fa <att_find_info_req+0x32>
	if (start > end) {
   174d8:	42b4      	cmp	r4, r6
   174da:	d30f      	bcc.n	174fc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   174dc:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   174de:	2210      	movs	r2, #16
   174e0:	2100      	movs	r1, #0
   174e2:	4668      	mov	r0, sp
   174e4:	f006 fb6f 	bl	1dbc6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   174e8:	2200      	movs	r2, #0
   174ea:	2105      	movs	r1, #5
   174ec:	4638      	mov	r0, r7
   174ee:	f007 fe49 	bl	1f184 <bt_att_create_pdu>
   174f2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   174f4:	b958      	cbnz	r0, 1750e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   174f6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   174f8:	e007      	b.n	1750a <att_find_info_req+0x42>
			*err = 0U;
   174fa:	4626      	mov	r6, r4
	if (!req) {
   174fc:	2301      	movs	r3, #1
   174fe:	4632      	mov	r2, r6
   17500:	2104      	movs	r1, #4
   17502:	4628      	mov	r0, r5
   17504:	f7ff fd10 	bl	16f28 <send_err_rsp.part.0>
	return 0;
   17508:	2000      	movs	r0, #0
}
   1750a:	b005      	add	sp, #20
   1750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1750e:	4621      	mov	r1, r4
   17510:	4a09      	ldr	r2, [pc, #36]	; (17538 <att_find_info_req+0x70>)
	data.chan = chan;
   17512:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17514:	466b      	mov	r3, sp
   17516:	4630      	mov	r0, r6
   17518:	f007 fb1a 	bl	1eb50 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1751c:	9c02      	ldr	r4, [sp, #8]
   1751e:	b924      	cbnz	r4, 1752a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   17520:	9801      	ldr	r0, [sp, #4]
   17522:	f001 ff8f 	bl	19444 <net_buf_unref>
	if (!req) {
   17526:	230a      	movs	r3, #10
   17528:	e7e9      	b.n	174fe <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1752a:	4a04      	ldr	r2, [pc, #16]	; (1753c <att_find_info_req+0x74>)
   1752c:	9901      	ldr	r1, [sp, #4]
   1752e:	4628      	mov	r0, r5
   17530:	f007 fd9a 	bl	1f068 <bt_att_chan_send_rsp>
   17534:	e7e8      	b.n	17508 <att_find_info_req+0x40>
   17536:	bf00      	nop
   17538:	0001eda5 	.word	0x0001eda5
   1753c:	0001ee61 	.word	0x0001ee61

00017540 <att_mtu_req>:
{
   17540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   17542:	6803      	ldr	r3, [r0, #0]
{
   17544:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   17546:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17548:	f3bf 8f5b 	dmb	ish
   1754c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   17550:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17554:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   17558:	071b      	lsls	r3, r3, #28
   1755a:	d41e      	bmi.n	1759a <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1755c:	688b      	ldr	r3, [r1, #8]
   1755e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   17560:	2e16      	cmp	r6, #22
   17562:	d91c      	bls.n	1759e <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17564:	2202      	movs	r2, #2
   17566:	2103      	movs	r1, #3
   17568:	f007 fe0c 	bl	1f184 <bt_att_create_pdu>
	if (!pdu) {
   1756c:	4607      	mov	r7, r0
   1756e:	b1c0      	cbz	r0, 175a2 <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
   17570:	2102      	movs	r1, #2
   17572:	3008      	adds	r0, #8
   17574:	f008 fff6 	bl	20564 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17578:	2341      	movs	r3, #65	; 0x41
   1757a:	7003      	strb	r3, [r0, #0]
   1757c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1757e:	4a0a      	ldr	r2, [pc, #40]	; (175a8 <att_mtu_req+0x68>)
   17580:	4628      	mov	r0, r5
   17582:	4639      	mov	r1, r7
   17584:	f007 fd70 	bl	1f068 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17588:	2e41      	cmp	r6, #65	; 0x41
   1758a:	bf28      	it	cs
   1758c:	2641      	movcs	r6, #65	; 0x41
   1758e:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17592:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   17596:	4620      	mov	r0, r4
}
   17598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1759a:	2006      	movs	r0, #6
   1759c:	e7fc      	b.n	17598 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   1759e:	2004      	movs	r0, #4
   175a0:	e7fa      	b.n	17598 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   175a2:	200e      	movs	r0, #14
   175a4:	e7f8      	b.n	17598 <att_mtu_req+0x58>
   175a6:	bf00      	nop
   175a8:	0001ee61 	.word	0x0001ee61

000175ac <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   175ac:	b513      	push	{r0, r1, r4, lr}
   175ae:	4602      	mov	r2, r0
   175b0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   175b2:	4808      	ldr	r0, [pc, #32]	; (175d4 <bt_att_req_alloc+0x28>)
   175b4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   175b6:	2400      	movs	r4, #0
   175b8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   175ba:	f003 fcb9 	bl	1af30 <k_mem_slab_alloc>
   175be:	4601      	mov	r1, r0
   175c0:	b930      	cbnz	r0, 175d0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   175c2:	9801      	ldr	r0, [sp, #4]
   175c4:	221c      	movs	r2, #28
   175c6:	f006 fafe 	bl	1dbc6 <memset>

	return req;
   175ca:	9801      	ldr	r0, [sp, #4]
}
   175cc:	b002      	add	sp, #8
   175ce:	bd10      	pop	{r4, pc}
		return NULL;
   175d0:	4620      	mov	r0, r4
   175d2:	e7fb      	b.n	175cc <bt_att_req_alloc+0x20>
   175d4:	20000958 	.word	0x20000958

000175d8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   175d8:	b507      	push	{r0, r1, r2, lr}
   175da:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   175dc:	a901      	add	r1, sp, #4
   175de:	4803      	ldr	r0, [pc, #12]	; (175ec <bt_att_req_free+0x14>)
   175e0:	f003 fcd8 	bl	1af94 <k_mem_slab_free>
}
   175e4:	b003      	add	sp, #12
   175e6:	f85d fb04 	ldr.w	pc, [sp], #4
   175ea:	bf00      	nop
   175ec:	20000958 	.word	0x20000958

000175f0 <att_handle_rsp>:
{
   175f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175f4:	4604      	mov	r4, r0
   175f6:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   175f8:	30e0      	adds	r0, #224	; 0xe0
{
   175fa:	4689      	mov	r9, r1
   175fc:	4692      	mov	sl, r2
   175fe:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   17600:	f009 fc83 	bl	20f0a <k_delayed_work_cancel>
	if (!chan->req) {
   17604:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   17608:	2600      	movs	r6, #0
   1760a:	b12d      	cbz	r5, 17618 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
   1760c:	4b2b      	ldr	r3, [pc, #172]	; (176bc <att_handle_rsp+0xcc>)
   1760e:	429d      	cmp	r5, r3
   17610:	d123      	bne.n	1765a <att_handle_rsp+0x6a>
		chan->req = NULL;
   17612:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
   17616:	4635      	mov	r5, r6
	att_process(chan->att);
   17618:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
   1761c:	f10b 0004 	add.w	r0, fp, #4
   17620:	f007 fa24 	bl	1ea6c <sys_slist_get>
	if (!node) {
   17624:	4607      	mov	r7, r0
   17626:	b380      	cbz	r0, 1768a <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17628:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   1762c:	b152      	cbz	r2, 17644 <att_handle_rsp+0x54>
   1762e:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
   17632:	d007      	beq.n	17644 <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17634:	6816      	ldr	r6, [r2, #0]
   17636:	b10e      	cbz	r6, 1763c <att_handle_rsp+0x4c>
   17638:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1763c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   17640:	b1f2      	cbz	r2, 17680 <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17642:	bb7e      	cbnz	r6, 176a4 <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   17644:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   17648:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   1764a:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   1764e:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   17652:	b9d2      	cbnz	r2, 1768a <att_handle_rsp+0x9a>
	list->tail = node;
   17654:	f8cb 7008 	str.w	r7, [fp, #8]
}
   17658:	e017      	b.n	1768a <att_handle_rsp+0x9a>
	if (chan->req->buf) {
   1765a:	6928      	ldr	r0, [r5, #16]
   1765c:	b120      	cbz	r0, 17668 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
   1765e:	f001 fef1 	bl	19444 <net_buf_unref>
		chan->req->buf = NULL;
   17662:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   17666:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
   17668:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
   1766c:	2600      	movs	r6, #0
	func = chan->req->func;
   1766e:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
   17670:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
   17672:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   17674:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   17676:	f007 fdc7 	bl	1f208 <att_req_destroy>
	chan->req = NULL;
   1767a:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
   1767e:	e7cb      	b.n	17618 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17680:	4639      	mov	r1, r7
   17682:	f007 fc9d 	bl	1efc0 <bt_att_chan_req_send>
   17686:	2800      	cmp	r0, #0
   17688:	dbdb      	blt.n	17642 <att_handle_rsp+0x52>
	if (func) {
   1768a:	b13d      	cbz	r5, 1769c <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
   1768c:	9b03      	ldr	r3, [sp, #12]
   1768e:	6820      	ldr	r0, [r4, #0]
   17690:	9300      	str	r3, [sp, #0]
   17692:	6800      	ldr	r0, [r0, #0]
   17694:	4653      	mov	r3, sl
   17696:	464a      	mov	r2, r9
   17698:	4641      	mov	r1, r8
   1769a:	47a8      	blx	r5
}
   1769c:	2000      	movs	r0, #0
   1769e:	b005      	add	sp, #20
   176a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   176a4:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
   176a8:	d004      	beq.n	176b4 <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   176aa:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   176ae:	b10a      	cbz	r2, 176b4 <att_handle_rsp+0xc4>
   176b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
   176b4:	4630      	mov	r0, r6
   176b6:	4616      	mov	r6, r2
   176b8:	e7c0      	b.n	1763c <att_handle_rsp+0x4c>
   176ba:	bf00      	nop
   176bc:	2000293c 	.word	0x2000293c

000176c0 <bt_att_encrypt_change>:
{
   176c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176c4:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   176c6:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
   176ca:	460d      	mov	r5, r1
   176cc:	b161      	cbz	r1, 176e8 <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
   176ce:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   176d2:	b34b      	cbz	r3, 17728 <bt_att_encrypt_change+0x68>
   176d4:	7d1b      	ldrb	r3, [r3, #20]
   176d6:	b33b      	cbz	r3, 17728 <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
   176d8:	2200      	movs	r2, #0
   176da:	4630      	mov	r0, r6
   176dc:	2305      	movs	r3, #5
}
   176de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   176e2:	4611      	mov	r1, r2
   176e4:	f7ff bf84 	b.w	175f0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   176e8:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   176ea:	4638      	mov	r0, r7
   176ec:	f000 fcd0 	bl	18090 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   176f0:	7a7b      	ldrb	r3, [r7, #9]
   176f2:	2b01      	cmp	r3, #1
   176f4:	d018      	beq.n	17728 <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
   176f6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   176fa:	b1ab      	cbz	r3, 17728 <bt_att_encrypt_change+0x68>
   176fc:	7d1a      	ldrb	r2, [r3, #20]
   176fe:	b19a      	cbz	r2, 17728 <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   17700:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
   17702:	688b      	ldr	r3, [r1, #8]
   17704:	7818      	ldrb	r0, [r3, #0]
   17706:	f007 f9f6 	bl	1eaf6 <att_op_get_type>
   1770a:	3801      	subs	r0, #1
   1770c:	b2c0      	uxtb	r0, r0
   1770e:	2804      	cmp	r0, #4
   17710:	bf96      	itet	ls
   17712:	4b06      	ldrls	r3, [pc, #24]	; (1772c <bt_att_encrypt_change+0x6c>)
   17714:	462a      	movhi	r2, r5
   17716:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1771a:	4630      	mov	r0, r6
   1771c:	f007 fca4 	bl	1f068 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   17720:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   17724:	2200      	movs	r2, #0
   17726:	611a      	str	r2, [r3, #16]
}
   17728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1772c:	00021b28 	.word	0x00021b28

00017730 <att_reset>:
{
   17730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   17732:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   17734:	9803      	ldr	r0, [sp, #12]
   17736:	2200      	movs	r2, #0
   17738:	2300      	movs	r3, #0
   1773a:	300c      	adds	r0, #12
   1773c:	f008 fec1 	bl	204c2 <net_buf_get>
   17740:	b948      	cbnz	r0, 17756 <att_reset+0x26>
	att->conn = NULL;
   17742:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17744:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   17746:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17748:	b945      	cbnz	r5, 1775c <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   1774a:	4811      	ldr	r0, [pc, #68]	; (17790 <att_reset+0x60>)
   1774c:	a903      	add	r1, sp, #12
   1774e:	f003 fc21 	bl	1af94 <k_mem_slab_free>
}
   17752:	b004      	add	sp, #16
   17754:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   17756:	f001 fe75 	bl	19444 <net_buf_unref>
   1775a:	e7eb      	b.n	17734 <att_reset+0x4>
	return node->next;
   1775c:	682c      	ldr	r4, [r5, #0]
   1775e:	2c00      	cmp	r4, #0
   17760:	bf38      	it	cc
   17762:	2400      	movcc	r4, #0
		if (req->func) {
   17764:	686e      	ldr	r6, [r5, #4]
   17766:	b136      	cbz	r6, 17776 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17768:	69ab      	ldr	r3, [r5, #24]
   1776a:	9300      	str	r3, [sp, #0]
   1776c:	2300      	movs	r3, #0
   1776e:	461a      	mov	r2, r3
   17770:	210e      	movs	r1, #14
   17772:	4618      	mov	r0, r3
   17774:	47b0      	blx	r6
		att_req_destroy(req);
   17776:	4628      	mov	r0, r5
   17778:	f007 fd46 	bl	1f208 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1777c:	2c00      	cmp	r4, #0
   1777e:	d0e4      	beq.n	1774a <att_reset+0x1a>
   17780:	6823      	ldr	r3, [r4, #0]
   17782:	2b00      	cmp	r3, #0
   17784:	bf38      	it	cc
   17786:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17788:	4625      	mov	r5, r4
   1778a:	461c      	mov	r4, r3
   1778c:	e7ea      	b.n	17764 <att_reset+0x34>
   1778e:	bf00      	nop
   17790:	20000920 	.word	0x20000920

00017794 <find_sc_cfg>:
#endif
static struct gatt_sc_cfg sc_cfg[SC_CFG_MAX];
BUILD_ASSERT(sizeof(struct sc_data) == sizeof(sc_cfg[0].data));

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   17794:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   17796:	4c0e      	ldr	r4, [pc, #56]	; (177d0 <find_sc_cfg+0x3c>)
   17798:	7823      	ldrb	r3, [r4, #0]
   1779a:	4283      	cmp	r3, r0
{
   1779c:	4605      	mov	r5, r0
   1779e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   177a0:	d00a      	beq.n	177b8 <find_sc_cfg+0x24>
   177a2:	7b23      	ldrb	r3, [r4, #12]
   177a4:	42ab      	cmp	r3, r5
   177a6:	d111      	bne.n	177cc <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   177a8:	480a      	ldr	r0, [pc, #40]	; (177d4 <find_sc_cfg+0x40>)
   177aa:	2207      	movs	r2, #7
   177ac:	4631      	mov	r1, r6
   177ae:	f006 f9cf 	bl	1db50 <memcmp>
   177b2:	b958      	cbnz	r0, 177cc <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   177b4:	2001      	movs	r0, #1
   177b6:	e005      	b.n	177c4 <find_sc_cfg+0x30>
   177b8:	2207      	movs	r2, #7
   177ba:	1c60      	adds	r0, r4, #1
   177bc:	f006 f9c8 	bl	1db50 <memcmp>
		if (id == sc_cfg[i].id &&
   177c0:	2800      	cmp	r0, #0
   177c2:	d1ee      	bne.n	177a2 <find_sc_cfg+0xe>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
   177c4:	230c      	movs	r3, #12
   177c6:	fb03 4000 	mla	r0, r3, r0, r4
   177ca:	e000      	b.n	177ce <find_sc_cfg+0x3a>
		}
	}

	return NULL;
   177cc:	2000      	movs	r0, #0
}
   177ce:	bd70      	pop	{r4, r5, r6, pc}
   177d0:	20002a86 	.word	0x20002a86
   177d4:	20002a93 	.word	0x20002a93

000177d8 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   177d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   177da:	4c16      	ldr	r4, [pc, #88]	; (17834 <find_cf_cfg+0x5c>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   177dc:	4605      	mov	r5, r0
   177de:	b140      	cbz	r0, 177f2 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   177e0:	4622      	mov	r2, r4
   177e2:	f812 1b01 	ldrb.w	r1, [r2], #1
   177e6:	f006 ffa1 	bl	1e72c <bt_conn_is_peer_addr_le>
   177ea:	b1c0      	cbz	r0, 1781e <find_cf_cfg+0x46>
			return cfg;
		}
	}

	return NULL;
}
   177ec:	4620      	mov	r0, r4
   177ee:	b003      	add	sp, #12
   177f0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   177f2:	9000      	str	r0, [sp, #0]
   177f4:	2207      	movs	r2, #7
   177f6:	f8cd 0003 	str.w	r0, [sp, #3]
   177fa:	4669      	mov	r1, sp
   177fc:	1c60      	adds	r0, r4, #1
   177fe:	f006 f9a7 	bl	1db50 <memcmp>
   17802:	2800      	cmp	r0, #0
   17804:	d0f2      	beq.n	177ec <find_cf_cfg+0x14>
   17806:	2207      	movs	r2, #7
   17808:	4669      	mov	r1, sp
   1780a:	f104 0011 	add.w	r0, r4, #17
   1780e:	9500      	str	r5, [sp, #0]
   17810:	f8cd 5003 	str.w	r5, [sp, #3]
   17814:	f006 f99c 	bl	1db50 <memcmp>
   17818:	b948      	cbnz	r0, 1782e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1781a:	3410      	adds	r4, #16
   1781c:	e7e6      	b.n	177ec <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1781e:	7c21      	ldrb	r1, [r4, #16]
   17820:	f104 0211 	add.w	r2, r4, #17
   17824:	4628      	mov	r0, r5
   17826:	f006 ff81 	bl	1e72c <bt_conn_is_peer_addr_le>
   1782a:	2800      	cmp	r0, #0
   1782c:	d1f5      	bne.n	1781a <find_cf_cfg+0x42>
	return NULL;
   1782e:	2400      	movs	r4, #0
   17830:	e7dc      	b.n	177ec <find_cf_cfg+0x14>
   17832:	bf00      	nop
   17834:	20002958 	.word	0x20002958

00017838 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   17838:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1783a:	4915      	ldr	r1, [pc, #84]	; (17890 <sc_indicate_rsp+0x58>)
   1783c:	f3bf 8f5b 	dmb	ish
   17840:	4604      	mov	r4, r0
   17842:	f101 0350 	add.w	r3, r1, #80	; 0x50
   17846:	e853 2f00 	ldrex	r2, [r3]
   1784a:	f022 0202 	bic.w	r2, r2, #2
   1784e:	e843 2000 	strex	r0, r2, [r3]
   17852:	2800      	cmp	r0, #0
   17854:	d1f7      	bne.n	17846 <sc_indicate_rsp+0xe>
   17856:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1785a:	f3bf 8f5b 	dmb	ish
   1785e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   17860:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17864:	07da      	lsls	r2, r3, #31
   17866:	d505      	bpl.n	17874 <sc_indicate_rsp+0x3c>
   17868:	480a      	ldr	r0, [pc, #40]	; (17894 <sc_indicate_rsp+0x5c>)
   1786a:	2200      	movs	r2, #0
   1786c:	2300      	movs	r3, #0
   1786e:	3120      	adds	r1, #32
   17870:	f004 f898 	bl	1b9a4 <k_delayed_work_submit_to_queue>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   17874:	4620      	mov	r0, r4
   17876:	f7ff ffaf 	bl	177d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1787a:	b140      	cbz	r0, 1788e <sc_indicate_rsp+0x56>
   1787c:	7a03      	ldrb	r3, [r0, #8]
   1787e:	07db      	lsls	r3, r3, #31
   17880:	d505      	bpl.n	1788e <sc_indicate_rsp+0x56>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   17882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17886:	2100      	movs	r1, #0
   17888:	300c      	adds	r0, #12
   1788a:	f007 be18 	b.w	1f4be <atomic_set_bit>
}
   1788e:	bd10      	pop	{r4, pc}
   17890:	200022c8 	.word	0x200022c8
   17894:	20002718 	.word	0x20002718

00017898 <read_ppcp>:
{
   17898:	b513      	push	{r0, r1, r4, lr}
   1789a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1789e:	4c0b      	ldr	r4, [pc, #44]	; (178cc <read_ppcp+0x34>)
{
   178a0:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   178a2:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   178a4:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   178a8:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   178ac:	d80b      	bhi.n	178c6 <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   178ae:	f1c1 0408 	rsb	r4, r1, #8
   178b2:	429c      	cmp	r4, r3
   178b4:	bfa8      	it	ge
   178b6:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   178b8:	4622      	mov	r2, r4
   178ba:	4469      	add	r1, sp
   178bc:	f006 f958 	bl	1db70 <memcpy>
}
   178c0:	4620      	mov	r0, r4
   178c2:	b002      	add	sp, #8
   178c4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   178c6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   178ca:	e7f9      	b.n	178c0 <read_ppcp+0x28>
   178cc:	00280018 	.word	0x00280018

000178d0 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
   178d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   178d4:	4615      	mov	r5, r2
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
   178d6:	8a92      	ldrh	r2, [r2, #20]
{
   178d8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   178da:	3202      	adds	r2, #2
   178dc:	211d      	movs	r1, #29
{
   178de:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   178e0:	f007 fc50 	bl	1f184 <bt_att_create_pdu>
	if (!buf) {
   178e4:	4606      	mov	r6, r0
   178e6:	b308      	cbz	r0, 1792c <gatt_indicate+0x5c>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	ind = net_buf_add(buf, sizeof(*ind));
   178e8:	f100 0808 	add.w	r8, r0, #8
   178ec:	2102      	movs	r1, #2
   178ee:	4640      	mov	r0, r8
   178f0:	f008 fe38 	bl	20564 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   178f4:	4604      	mov	r4, r0

	net_buf_add(buf, params->len);
   178f6:	8aa9      	ldrh	r1, [r5, #20]
	ind->handle = sys_cpu_to_le16(handle);
   178f8:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, params->len);
   178fc:	4640      	mov	r0, r8
   178fe:	f008 fe31 	bl	20564 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17902:	8aaa      	ldrh	r2, [r5, #20]
   17904:	6929      	ldr	r1, [r5, #16]
   17906:	4620      	mov	r0, r4
   17908:	f006 f932 	bl	1db70 <memcpy>

	if (!params->func) {
   1790c:	68ab      	ldr	r3, [r5, #8]
   1790e:	b933      	cbnz	r3, 1791e <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
   17910:	4631      	mov	r1, r6
   17912:	4638      	mov	r0, r7
   17914:	461a      	mov	r2, r3
		return gatt_send(conn, buf, NULL, NULL, NULL);
	}

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
   17916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
   1791a:	f007 bcd6 	b.w	1f2ca <bt_att_send>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1791e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17922:	2100      	movs	r1, #0
   17924:	f7ff fe42 	bl	175ac <bt_att_req_alloc>
		if (!req) {
   17928:	4604      	mov	r4, r0
   1792a:	b910      	cbnz	r0, 17932 <gatt_indicate+0x62>
		return -ENOMEM;
   1792c:	f06f 050b 	mvn.w	r5, #11
   17930:	e00e      	b.n	17950 <gatt_indicate+0x80>
		req->func = func;
   17932:	4b09      	ldr	r3, [pc, #36]	; (17958 <gatt_indicate+0x88>)
   17934:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
   17936:	2300      	movs	r3, #0
		req->user_data = params;
   17938:	6185      	str	r5, [r0, #24]
		req->buf = buf;
   1793a:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
   1793c:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1793e:	4601      	mov	r1, r0
   17940:	4638      	mov	r0, r7
   17942:	f007 fd0c 	bl	1f35e <bt_att_req_send>
		if (err) {
   17946:	4605      	mov	r5, r0
   17948:	b110      	cbz	r0, 17950 <gatt_indicate+0x80>
			bt_att_req_free(req);
   1794a:	4620      	mov	r0, r4
   1794c:	f7ff fe44 	bl	175d8 <bt_att_req_free>
}
   17950:	4628      	mov	r0, r5
   17952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17956:	bf00      	nop
   17958:	0001f3e7 	.word	0x0001f3e7

0001795c <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
   1795c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17960:	4b38      	ldr	r3, [pc, #224]	; (17a44 <notify_cb+0xe8>)
{
   17962:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17964:	6882      	ldr	r2, [r0, #8]
   17966:	429a      	cmp	r2, r3
{
   17968:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1796a:	d003      	beq.n	17974 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1796c:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
   1796e:	b003      	add	sp, #12
   17970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   17974:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17978:	4b33      	ldr	r3, [pc, #204]	; (17a48 <notify_cb+0xec>)
   1797a:	4599      	cmp	r9, r3
   1797c:	d01a      	beq.n	179b4 <notify_cb+0x58>
   1797e:	f109 0701 	add.w	r7, r9, #1
   17982:	f109 0a15 	add.w	sl, r9, #21
   17986:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   1798a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   1798e:	89a3      	ldrh	r3, [r4, #12]
   17990:	429a      	cmp	r2, r3
   17992:	d10b      	bne.n	179ac <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17994:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   17998:	4639      	mov	r1, r7
   1799a:	f7fe fdc3 	bl	16524 <bt_conn_lookup_addr_le>
		if (!conn) {
   1799e:	4605      	mov	r5, r0
   179a0:	b120      	cbz	r0, 179ac <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   179a2:	7b43      	ldrb	r3, [r0, #13]
   179a4:	2b07      	cmp	r3, #7
   179a6:	d029      	beq.n	179fc <notify_cb+0xa0>
			bt_conn_unref(conn);
   179a8:	f006 fee0 	bl	1e76c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   179ac:	370a      	adds	r7, #10
   179ae:	4557      	cmp	r7, sl
   179b0:	d0dc      	beq.n	1796c <notify_cb+0x10>
   179b2:	e7ea      	b.n	1798a <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   179b4:	2600      	movs	r6, #0
   179b6:	4d25      	ldr	r5, [pc, #148]	; (17a4c <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   179b8:	4637      	mov	r7, r6
   179ba:	2207      	movs	r2, #7
   179bc:	4669      	mov	r1, sp
   179be:	4628      	mov	r0, r5
   179c0:	9700      	str	r7, [sp, #0]
   179c2:	f8cd 7003 	str.w	r7, [sp, #3]
   179c6:	f006 f8c3 	bl	1db50 <memcmp>
   179ca:	b178      	cbz	r0, 179ec <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   179cc:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   179d0:	2207      	movs	r2, #7
   179d2:	4629      	mov	r1, r5
   179d4:	f7fe fdc2 	bl	1655c <bt_conn_lookup_state_le>
			if (!conn) {
   179d8:	b968      	cbnz	r0, 179f6 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   179da:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   179dc:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   179e0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   179e2:	4629      	mov	r1, r5
   179e4:	8853      	ldrh	r3, [r2, #2]
   179e6:	8812      	ldrh	r2, [r2, #0]
   179e8:	f007 fee5 	bl	1f7b6 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   179ec:	350c      	adds	r5, #12
   179ee:	2e00      	cmp	r6, #0
   179f0:	d1c5      	bne.n	1797e <notify_cb+0x22>
   179f2:	2601      	movs	r6, #1
   179f4:	e7e1      	b.n	179ba <notify_cb+0x5e>
			bt_conn_unref(conn);
   179f6:	f006 feb9 	bl	1e76c <bt_conn_unref>
   179fa:	e7f7      	b.n	179ec <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   179fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
   17a00:	b123      	cbz	r3, 17a0c <notify_cb+0xb0>
   17a02:	4641      	mov	r1, r8
   17a04:	4798      	blx	r3
   17a06:	b908      	cbnz	r0, 17a0c <notify_cb+0xb0>
			bt_conn_unref(conn);
   17a08:	4628      	mov	r0, r5
   17a0a:	e7cd      	b.n	179a8 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17a0c:	89a3      	ldrh	r3, [r4, #12]
   17a0e:	88a1      	ldrh	r1, [r4, #4]
   17a10:	6922      	ldr	r2, [r4, #16]
   17a12:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17a14:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17a16:	d10f      	bne.n	17a38 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   17a18:	f7ff ff5a 	bl	178d0 <gatt_indicate>
			if (err == 0) {
   17a1c:	4606      	mov	r6, r0
   17a1e:	b918      	cbnz	r0, 17a28 <notify_cb+0xcc>
				data->ind_params->_ref++;
   17a20:	6922      	ldr	r2, [r4, #16]
   17a22:	7d93      	ldrb	r3, [r2, #22]
   17a24:	3301      	adds	r3, #1
   17a26:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17a28:	4628      	mov	r0, r5
   17a2a:	f006 fe9f 	bl	1e76c <bt_conn_unref>
		if (err < 0) {
   17a2e:	2e00      	cmp	r6, #0
   17a30:	db06      	blt.n	17a40 <notify_cb+0xe4>
		data->err = 0;
   17a32:	f8c4 b008 	str.w	fp, [r4, #8]
   17a36:	e7b9      	b.n	179ac <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17a38:	f007 fd4f 	bl	1f4da <gatt_notify>
   17a3c:	4606      	mov	r6, r0
   17a3e:	e7f3      	b.n	17a28 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   17a40:	2000      	movs	r0, #0
   17a42:	e794      	b.n	1796e <notify_cb+0x12>
   17a44:	0001f84d 	.word	0x0001f84d
   17a48:	20000778 	.word	0x20000778
   17a4c:	20002a87 	.word	0x20002a87

00017a50 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17a54:	4b2c      	ldr	r3, [pc, #176]	; (17b08 <disconnected_cb+0xb8>)
{
   17a56:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17a58:	6882      	ldr	r2, [r0, #8]
   17a5a:	429a      	cmp	r2, r3
{
   17a5c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17a5e:	d12f      	bne.n	17ac0 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   17a60:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   17a62:	8aab      	ldrh	r3, [r5, #20]
   17a64:	b363      	cbz	r3, 17ac0 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   17a66:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 17b0c <disconnected_cb+0xbc>
   17a6a:	1c6c      	adds	r4, r5, #1
   17a6c:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   17a70:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17a74:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   17a78:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17a7c:	b19b      	cbz	r3, 17aa6 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17a7e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17a82:	4622      	mov	r2, r4
   17a84:	4630      	mov	r0, r6
   17a86:	f006 fe51 	bl	1e72c <bt_conn_is_peer_addr_le>
   17a8a:	b9e8      	cbnz	r0, 17ac8 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17a8c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17a90:	4621      	mov	r1, r4
   17a92:	f7fe fd47 	bl	16524 <bt_conn_lookup_addr_le>
			if (tmp) {
   17a96:	b130      	cbz	r0, 17aa6 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   17a98:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   17a9a:	2b07      	cmp	r3, #7
   17a9c:	bf08      	it	eq
   17a9e:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   17aa2:	f006 fe63 	bl	1e76c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17aa6:	340a      	adds	r4, #10
   17aa8:	4554      	cmp	r4, sl
   17aaa:	d1e5      	bne.n	17a78 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   17aac:	f1b8 0f00 	cmp.w	r8, #0
   17ab0:	d106      	bne.n	17ac0 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   17ab2:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   17ab4:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   17ab8:	b113      	cbz	r3, 17ac0 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   17aba:	4641      	mov	r1, r8
   17abc:	4638      	mov	r0, r7
   17abe:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   17ac0:	2001      	movs	r0, #1
   17ac2:	b003      	add	sp, #12
   17ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17ac8:	7a30      	ldrb	r0, [r6, #8]
   17aca:	4649      	mov	r1, r9
   17acc:	f006 fce4 	bl	1e498 <bt_addr_le_is_bonded>
   17ad0:	b998      	cbnz	r0, 17afa <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
   17ad2:	455d      	cmp	r5, fp
   17ad4:	d102      	bne.n	17adc <disconnected_cb+0x8c>
					sc_clear(conn);
   17ad6:	4630      	mov	r0, r6
   17ad8:	f007 fe95 	bl	1f806 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17adc:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   17ade:	2207      	movs	r2, #7
   17ae0:	4669      	mov	r1, sp
   17ae2:	4620      	mov	r0, r4
   17ae4:	9300      	str	r3, [sp, #0]
   17ae6:	f8cd 3003 	str.w	r3, [sp, #3]
   17aea:	f006 f841 	bl	1db70 <memcpy>
	cfg->id = 0U;
   17aee:	2300      	movs	r3, #0
   17af0:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   17af4:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   17af8:	e7d5      	b.n	17aa6 <disconnected_cb+0x56>
   17afa:	2207      	movs	r2, #7
   17afc:	4649      	mov	r1, r9
   17afe:	4620      	mov	r0, r4
   17b00:	f006 f836 	bl	1db70 <memcpy>
}
   17b04:	e7cf      	b.n	17aa6 <disconnected_cb+0x56>
   17b06:	bf00      	nop
   17b08:	0001f84d 	.word	0x0001f84d
   17b0c:	20000778 	.word	0x20000778

00017b10 <bt_gatt_init>:
{
   17b10:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17b12:	4b1f      	ldr	r3, [pc, #124]	; (17b90 <bt_gatt_init+0x80>)
   17b14:	f3bf 8f5b 	dmb	ish
   17b18:	2201      	movs	r2, #1
   17b1a:	e853 1f00 	ldrex	r1, [r3]
   17b1e:	2900      	cmp	r1, #0
   17b20:	d103      	bne.n	17b2a <bt_gatt_init+0x1a>
   17b22:	e843 2000 	strex	r0, r2, [r3]
   17b26:	2800      	cmp	r0, #0
   17b28:	d1f7      	bne.n	17b1a <bt_gatt_init+0xa>
   17b2a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   17b2e:	d12d      	bne.n	17b8c <bt_gatt_init+0x7c>
   17b30:	f3bf 8f5b 	dmb	ish
   17b34:	4b17      	ldr	r3, [pc, #92]	; (17b94 <bt_gatt_init+0x84>)
   17b36:	e853 1f00 	ldrex	r1, [r3]
   17b3a:	2900      	cmp	r1, #0
   17b3c:	d103      	bne.n	17b46 <bt_gatt_init+0x36>
   17b3e:	e843 2000 	strex	r0, r2, [r3]
   17b42:	2800      	cmp	r0, #0
   17b44:	d1f7      	bne.n	17b36 <bt_gatt_init+0x26>
   17b46:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   17b4a:	d108      	bne.n	17b5e <bt_gatt_init+0x4e>
   17b4c:	4a12      	ldr	r2, [pc, #72]	; (17b98 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17b4e:	4913      	ldr	r1, [pc, #76]	; (17b9c <bt_gatt_init+0x8c>)
   17b50:	8813      	ldrh	r3, [r2, #0]
   17b52:	4c13      	ldr	r4, [pc, #76]	; (17ba0 <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
   17b54:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17b56:	42a1      	cmp	r1, r4
   17b58:	d312      	bcc.n	17b80 <bt_gatt_init+0x70>
   17b5a:	b100      	cbz	r0, 17b5e <bt_gatt_init+0x4e>
   17b5c:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
   17b5e:	4911      	ldr	r1, [pc, #68]	; (17ba4 <bt_gatt_init+0x94>)
   17b60:	4811      	ldr	r0, [pc, #68]	; (17ba8 <bt_gatt_init+0x98>)
   17b62:	f009 f9ca 	bl	20efa <k_delayed_work_init>
   17b66:	4910      	ldr	r1, [pc, #64]	; (17ba8 <bt_gatt_init+0x98>)
   17b68:	4810      	ldr	r0, [pc, #64]	; (17bac <bt_gatt_init+0x9c>)
   17b6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17b6e:	2300      	movs	r3, #0
   17b70:	f003 ff18 	bl	1b9a4 <k_delayed_work_submit_to_queue>
}
   17b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
   17b78:	490d      	ldr	r1, [pc, #52]	; (17bb0 <bt_gatt_init+0xa0>)
   17b7a:	480e      	ldr	r0, [pc, #56]	; (17bb4 <bt_gatt_init+0xa4>)
   17b7c:	f009 b9bd 	b.w	20efa <k_delayed_work_init>
		last_static_handle += svc->attr_count;
   17b80:	6848      	ldr	r0, [r1, #4]
   17b82:	4403      	add	r3, r0
   17b84:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17b86:	3108      	adds	r1, #8
   17b88:	2001      	movs	r0, #1
   17b8a:	e7e4      	b.n	17b56 <bt_gatt_init+0x46>
}
   17b8c:	bd10      	pop	{r4, pc}
   17b8e:	bf00      	nop
   17b90:	20002978 	.word	0x20002978
   17b94:	20002994 	.word	0x20002994
   17b98:	20002a84 	.word	0x20002a84
   17b9c:	00021520 	.word	0x00021520
   17ba0:	00021548 	.word	0x00021548
   17ba4:	0001f9e3 	.word	0x0001f9e3
   17ba8:	20002298 	.word	0x20002298
   17bac:	20002718 	.word	0x20002718
   17bb0:	00017f05 	.word	0x00017f05
   17bb4:	200022e8 	.word	0x200022e8

00017bb8 <bt_gatt_attr_get_handle>:
{
   17bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17bbc:	4603      	mov	r3, r0
   17bbe:	b148      	cbz	r0, 17bd4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   17bc0:	8a00      	ldrh	r0, [r0, #16]
   17bc2:	b938      	cbnz	r0, 17bd4 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17bc4:	4912      	ldr	r1, [pc, #72]	; (17c10 <bt_gatt_attr_get_handle+0x58>)
   17bc6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 17c14 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   17bca:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17bcc:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17bd0:	4571      	cmp	r1, lr
   17bd2:	d301      	bcc.n	17bd8 <bt_gatt_attr_get_handle+0x20>
}
   17bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   17bd8:	e9d1 7600 	ldrd	r7, r6, [r1]
   17bdc:	42bb      	cmp	r3, r7
   17bde:	d304      	bcc.n	17bea <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17be0:	fb0c 7206 	mla	r2, ip, r6, r7
   17be4:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17be6:	4293      	cmp	r3, r2
   17be8:	d90e      	bls.n	17c08 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   17bea:	19a2      	adds	r2, r4, r6
   17bec:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17bee:	3108      	adds	r1, #8
   17bf0:	4614      	mov	r4, r2
   17bf2:	e7ed      	b.n	17bd0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17bf4:	fb0c 7805 	mla	r8, ip, r5, r7
   17bf8:	4543      	cmp	r3, r8
   17bfa:	d007      	beq.n	17c0c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   17bfc:	3501      	adds	r5, #1
   17bfe:	1962      	adds	r2, r4, r5
   17c00:	42b5      	cmp	r5, r6
   17c02:	b292      	uxth	r2, r2
   17c04:	d1f6      	bne.n	17bf4 <bt_gatt_attr_get_handle+0x3c>
   17c06:	e7f2      	b.n	17bee <bt_gatt_attr_get_handle+0x36>
   17c08:	2500      	movs	r5, #0
   17c0a:	e7f8      	b.n	17bfe <bt_gatt_attr_get_handle+0x46>
   17c0c:	4610      	mov	r0, r2
   17c0e:	e7e1      	b.n	17bd4 <bt_gatt_attr_get_handle+0x1c>
   17c10:	00021520 	.word	0x00021520
   17c14:	00021548 	.word	0x00021548

00017c18 <bt_gatt_foreach_attr_type>:
{
   17c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c1c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   17c20:	9100      	str	r1, [sp, #0]
   17c22:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17c28:	2d00      	cmp	r5, #0
   17c2a:	bf08      	it	eq
   17c2c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   17c2e:	4b24      	ldr	r3, [pc, #144]	; (17cc0 <bt_gatt_foreach_attr_type+0xa8>)
   17c30:	881b      	ldrh	r3, [r3, #0]
   17c32:	4283      	cmp	r3, r0
{
   17c34:	4607      	mov	r7, r0
   17c36:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17c38:	d23c      	bcs.n	17cb4 <bt_gatt_foreach_attr_type+0x9c>
}
   17c3a:	b003      	add	sp, #12
   17c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   17c40:	6873      	ldr	r3, [r6, #4]
   17c42:	4423      	add	r3, r4
   17c44:	42bb      	cmp	r3, r7
   17c46:	d232      	bcs.n	17cae <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   17c48:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17c4a:	3608      	adds	r6, #8
   17c4c:	4b1d      	ldr	r3, [pc, #116]	; (17cc4 <bt_gatt_foreach_attr_type+0xac>)
   17c4e:	429e      	cmp	r6, r3
   17c50:	d3f6      	bcc.n	17c40 <bt_gatt_foreach_attr_type+0x28>
   17c52:	e7f2      	b.n	17c3a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17c54:	5889      	ldr	r1, [r1, r2]
   17c56:	9301      	str	r3, [sp, #4]
   17c58:	4640      	mov	r0, r8
   17c5a:	f006 f843 	bl	1dce4 <bt_uuid_cmp>
   17c5e:	9b01      	ldr	r3, [sp, #4]
   17c60:	b190      	cbz	r0, 17c88 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17c62:	3401      	adds	r4, #1
   17c64:	f10a 0a01 	add.w	sl, sl, #1
   17c68:	b2a4      	uxth	r4, r4
   17c6a:	6873      	ldr	r3, [r6, #4]
   17c6c:	4553      	cmp	r3, sl
   17c6e:	d9ec      	bls.n	17c4a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   17c70:	9b00      	ldr	r3, [sp, #0]
   17c72:	429c      	cmp	r4, r3
   17c74:	d8e1      	bhi.n	17c3a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17c76:	42bc      	cmp	r4, r7
   17c78:	d3f3      	bcc.n	17c62 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17c7a:	6831      	ldr	r1, [r6, #0]
   17c7c:	fb0b f20a 	mul.w	r2, fp, sl
   17c80:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17c82:	f1b8 0f00 	cmp.w	r8, #0
   17c86:	d1e5      	bne.n	17c54 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   17c88:	f1b9 0f00 	cmp.w	r9, #0
   17c8c:	d10b      	bne.n	17ca6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   17c8e:	3d01      	subs	r5, #1
   17c90:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17c92:	4618      	mov	r0, r3
   17c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17c98:	4621      	mov	r1, r4
   17c9a:	4798      	blx	r3
	if (!*num_matches) {
   17c9c:	2d00      	cmp	r5, #0
   17c9e:	d0cc      	beq.n	17c3a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17ca0:	2800      	cmp	r0, #0
   17ca2:	d1de      	bne.n	17c62 <bt_gatt_foreach_attr_type+0x4a>
   17ca4:	e7c9      	b.n	17c3a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17ca6:	68da      	ldr	r2, [r3, #12]
   17ca8:	4591      	cmp	r9, r2
   17caa:	d1da      	bne.n	17c62 <bt_gatt_foreach_attr_type+0x4a>
   17cac:	e7ef      	b.n	17c8e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17cae:	f04f 0a00 	mov.w	sl, #0
   17cb2:	e7da      	b.n	17c6a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17cb4:	4e04      	ldr	r6, [pc, #16]	; (17cc8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   17cb6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17cb8:	f04f 0b14 	mov.w	fp, #20
   17cbc:	e7c6      	b.n	17c4c <bt_gatt_foreach_attr_type+0x34>
   17cbe:	bf00      	nop
   17cc0:	20002a84 	.word	0x20002a84
   17cc4:	00021548 	.word	0x00021548
   17cc8:	00021520 	.word	0x00021520

00017ccc <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   17ccc:	b510      	push	{r4, lr}
   17cce:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   17cd0:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17cd2:	aa1c      	add	r2, sp, #112	; 0x70
   17cd4:	4669      	mov	r1, sp
   17cd6:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   17cd8:	e9cd 3300 	strd	r3, r3, [sp]
   17cdc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ce0:	f005 fe3c 	bl	1d95c <tc_cmac_setup>
   17ce4:	b1b8      	cbz	r0, 17d16 <db_hash_gen.isra.0+0x4a>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17cea:	2001      	movs	r0, #1
   17cec:	4a0b      	ldr	r2, [pc, #44]	; (17d1c <db_hash_gen.isra.0+0x50>)
   17cee:	ab04      	add	r3, sp, #16
   17cf0:	f007 fe6c 	bl	1f9cc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   17cf4:	480a      	ldr	r0, [pc, #40]	; (17d20 <db_hash_gen.isra.0+0x54>)
   17cf6:	a904      	add	r1, sp, #16
   17cf8:	f005 fec7 	bl	1da8a <tc_cmac_final>
   17cfc:	b158      	cbz	r0, 17d16 <db_hash_gen.isra.0+0x4a>
   17cfe:	4b08      	ldr	r3, [pc, #32]	; (17d20 <db_hash_gen.isra.0+0x54>)
   17d00:	2208      	movs	r2, #8
   17d02:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17d06:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17d08:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   17d0c:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   17d10:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17d12:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   17d14:	d1f7      	bne.n	17d06 <db_hash_gen.isra.0+0x3a>
}
   17d16:	b048      	add	sp, #288	; 0x120
   17d18:	bd10      	pop	{r4, pc}
   17d1a:	bf00      	nop
   17d1c:	0001f413 	.word	0x0001f413
   17d20:	20002f53 	.word	0x20002f53

00017d24 <bt_gatt_notify_cb>:
{
   17d24:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d26:	4b37      	ldr	r3, [pc, #220]	; (17e04 <bt_gatt_notify_cb+0xe0>)
   17d28:	f3bf 8f5b 	dmb	ish
   17d2c:	681b      	ldr	r3, [r3, #0]
   17d2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17d32:	079a      	lsls	r2, r3, #30
{
   17d34:	b08b      	sub	sp, #44	; 0x2c
   17d36:	4604      	mov	r4, r0
   17d38:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17d3a:	d55d      	bpl.n	17df8 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   17d3c:	6848      	ldr	r0, [r1, #4]
   17d3e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17d40:	b114      	cbz	r4, 17d48 <bt_gatt_notify_cb+0x24>
   17d42:	7b63      	ldrb	r3, [r4, #13]
   17d44:	2b07      	cmp	r3, #7
   17d46:	d15a      	bne.n	17dfe <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17d48:	f7ff ff36 	bl	17bb8 <bt_gatt_attr_get_handle>
   17d4c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   17d50:	b918      	cbnz	r0, 17d5a <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   17d52:	f06f 0001 	mvn.w	r0, #1
}
   17d56:	b00b      	add	sp, #44	; 0x2c
   17d58:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17d5a:	682a      	ldr	r2, [r5, #0]
   17d5c:	b9aa      	cbnz	r2, 17d8a <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17d5e:	9b05      	ldr	r3, [sp, #20]
   17d60:	6818      	ldr	r0, [r3, #0]
   17d62:	2300      	movs	r3, #0
   17d64:	f88d 3010 	strb.w	r3, [sp, #16]
   17d68:	a904      	add	r1, sp, #16
   17d6a:	f642 0303 	movw	r3, #10243	; 0x2803
   17d6e:	f8ad 3012 	strh.w	r3, [sp, #18]
   17d72:	f005 ffb7 	bl	1dce4 <bt_uuid_cmp>
   17d76:	b1c0      	cbz	r0, 17daa <bt_gatt_notify_cb+0x86>
	if (conn) {
   17d78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17d7c:	b314      	cbz	r4, 17dc4 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   17d7e:	4601      	mov	r1, r0
   17d80:	462a      	mov	r2, r5
   17d82:	4620      	mov	r0, r4
   17d84:	f007 fba9 	bl	1f4da <gatt_notify>
   17d88:	e7e5      	b.n	17d56 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d8a:	a905      	add	r1, sp, #20
   17d8c:	9102      	str	r1, [sp, #8]
   17d8e:	491e      	ldr	r1, [pc, #120]	; (17e08 <bt_gatt_notify_cb+0xe4>)
   17d90:	9101      	str	r1, [sp, #4]
   17d92:	2101      	movs	r1, #1
	found->attr = NULL;
   17d94:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d96:	9100      	str	r1, [sp, #0]
   17d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17d9c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d9e:	f7ff ff3b 	bl	17c18 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17da2:	9b05      	ldr	r3, [sp, #20]
   17da4:	2b00      	cmp	r3, #0
   17da6:	d1da      	bne.n	17d5e <bt_gatt_notify_cb+0x3a>
   17da8:	e7d3      	b.n	17d52 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17daa:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17dac:	68c3      	ldr	r3, [r0, #12]
   17dae:	799b      	ldrb	r3, [r3, #6]
   17db0:	06db      	lsls	r3, r3, #27
   17db2:	d402      	bmi.n	17dba <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   17db4:	f06f 0015 	mvn.w	r0, #21
   17db8:	e7cd      	b.n	17d56 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17dba:	f007 fdb9 	bl	1f930 <bt_gatt_attr_value_handle>
   17dbe:	f8ad 0018 	strh.w	r0, [sp, #24]
   17dc2:	e7d9      	b.n	17d78 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dc4:	f642 1202 	movw	r2, #10498	; 0x2902
   17dc8:	f8ad 2012 	strh.w	r2, [sp, #18]
   17dcc:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   17dce:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dd2:	9202      	str	r2, [sp, #8]
   17dd4:	4a0d      	ldr	r2, [pc, #52]	; (17e0c <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   17dd6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17dd8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dda:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   17dde:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17de2:	aa04      	add	r2, sp, #16
   17de4:	4623      	mov	r3, r4
   17de6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   17dea:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dec:	f88d 4010 	strb.w	r4, [sp, #16]
   17df0:	f7ff ff12 	bl	17c18 <bt_gatt_foreach_attr_type>
	return data.err;
   17df4:	9807      	ldr	r0, [sp, #28]
   17df6:	e7ae      	b.n	17d56 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   17df8:	f06f 000a 	mvn.w	r0, #10
   17dfc:	e7ab      	b.n	17d56 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   17dfe:	f06f 0038 	mvn.w	r0, #56	; 0x38
   17e02:	e7a8      	b.n	17d56 <bt_gatt_notify_cb+0x32>
   17e04:	20000460 	.word	0x20000460
   17e08:	0001f40b 	.word	0x0001f40b
   17e0c:	0001795d 	.word	0x0001795d

00017e10 <bt_gatt_indicate>:
{
   17e10:	b530      	push	{r4, r5, lr}
   17e12:	4b39      	ldr	r3, [pc, #228]	; (17ef8 <bt_gatt_indicate+0xe8>)
   17e14:	f3bf 8f5b 	dmb	ish
   17e18:	681b      	ldr	r3, [r3, #0]
   17e1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17e1e:	079a      	lsls	r2, r3, #30
{
   17e20:	b08b      	sub	sp, #44	; 0x2c
   17e22:	4604      	mov	r4, r0
   17e24:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17e26:	d561      	bpl.n	17eec <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   17e28:	6848      	ldr	r0, [r1, #4]
   17e2a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17e2c:	b114      	cbz	r4, 17e34 <bt_gatt_indicate+0x24>
   17e2e:	7b63      	ldrb	r3, [r4, #13]
   17e30:	2b07      	cmp	r3, #7
   17e32:	d15e      	bne.n	17ef2 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17e34:	f7ff fec0 	bl	17bb8 <bt_gatt_attr_get_handle>
   17e38:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   17e3c:	b918      	cbnz	r0, 17e46 <bt_gatt_indicate+0x36>
		return -ENOENT;
   17e3e:	f06f 0001 	mvn.w	r0, #1
}
   17e42:	b00b      	add	sp, #44	; 0x2c
   17e44:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17e46:	682a      	ldr	r2, [r5, #0]
   17e48:	b9ba      	cbnz	r2, 17e7a <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17e4a:	9b05      	ldr	r3, [sp, #20]
   17e4c:	6818      	ldr	r0, [r3, #0]
   17e4e:	2300      	movs	r3, #0
   17e50:	f88d 3010 	strb.w	r3, [sp, #16]
   17e54:	a904      	add	r1, sp, #16
   17e56:	f642 0303 	movw	r3, #10243	; 0x2803
   17e5a:	f8ad 3012 	strh.w	r3, [sp, #18]
   17e5e:	f005 ff41 	bl	1dce4 <bt_uuid_cmp>
   17e62:	b1d0      	cbz	r0, 17e9a <bt_gatt_indicate+0x8a>
	if (conn) {
   17e64:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17e68:	b324      	cbz	r4, 17eb4 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   17e6a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17e6c:	4601      	mov	r1, r0
		params->_ref = 1;
   17e6e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   17e70:	462a      	mov	r2, r5
   17e72:	4620      	mov	r0, r4
   17e74:	f7ff fd2c 	bl	178d0 <gatt_indicate>
   17e78:	e7e3      	b.n	17e42 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e7a:	a905      	add	r1, sp, #20
   17e7c:	9102      	str	r1, [sp, #8]
   17e7e:	491f      	ldr	r1, [pc, #124]	; (17efc <bt_gatt_indicate+0xec>)
   17e80:	9101      	str	r1, [sp, #4]
   17e82:	2101      	movs	r1, #1
	found->attr = NULL;
   17e84:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e86:	9100      	str	r1, [sp, #0]
   17e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17e8c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e8e:	f7ff fec3 	bl	17c18 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17e92:	9b05      	ldr	r3, [sp, #20]
   17e94:	2b00      	cmp	r3, #0
   17e96:	d1d8      	bne.n	17e4a <bt_gatt_indicate+0x3a>
   17e98:	e7d1      	b.n	17e3e <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17e9a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17e9c:	68c3      	ldr	r3, [r0, #12]
   17e9e:	799b      	ldrb	r3, [r3, #6]
   17ea0:	069b      	lsls	r3, r3, #26
   17ea2:	d402      	bmi.n	17eaa <bt_gatt_indicate+0x9a>
			return -EINVAL;
   17ea4:	f06f 0015 	mvn.w	r0, #21
   17ea8:	e7cb      	b.n	17e42 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17eaa:	f007 fd41 	bl	1f930 <bt_gatt_attr_value_handle>
   17eae:	f8ad 0018 	strh.w	r0, [sp, #24]
   17eb2:	e7d7      	b.n	17e64 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   17eb4:	f06f 0338 	mvn.w	r3, #56	; 0x38
   17eb8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17eba:	2302      	movs	r3, #2
   17ebc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17ec0:	f642 1302 	movw	r3, #10498	; 0x2902
   17ec4:	f8ad 3012 	strh.w	r3, [sp, #18]
   17ec8:	ab05      	add	r3, sp, #20
   17eca:	9302      	str	r3, [sp, #8]
   17ecc:	4b0c      	ldr	r3, [pc, #48]	; (17f00 <bt_gatt_indicate+0xf0>)
   17ece:	9301      	str	r3, [sp, #4]
   17ed0:	2301      	movs	r3, #1
   17ed2:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   17ed4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17ed6:	4623      	mov	r3, r4
   17ed8:	aa04      	add	r2, sp, #16
   17eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   17ede:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17ee0:	f88d 4010 	strb.w	r4, [sp, #16]
   17ee4:	f7ff fe98 	bl	17c18 <bt_gatt_foreach_attr_type>
	return data.err;
   17ee8:	9807      	ldr	r0, [sp, #28]
   17eea:	e7aa      	b.n	17e42 <bt_gatt_indicate+0x32>
		return -EAGAIN;
   17eec:	f06f 000a 	mvn.w	r0, #10
   17ef0:	e7a7      	b.n	17e42 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   17ef2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   17ef6:	e7a4      	b.n	17e42 <bt_gatt_indicate+0x32>
   17ef8:	20000460 	.word	0x20000460
   17efc:	0001f40b 	.word	0x0001f40b
   17f00:	0001795d 	.word	0x0001795d

00017f04 <sc_process>:
{
   17f04:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17f06:	f850 2c08 	ldr.w	r2, [r0, #-8]
   17f0a:	9201      	str	r2, [sp, #4]
{
   17f0c:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17f0e:	f1a0 0120 	sub.w	r1, r0, #32
   17f12:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f16:	f3bf 8f5b 	dmb	ish
   17f1a:	e854 2f00 	ldrex	r2, [r4]
   17f1e:	f022 0201 	bic.w	r2, r2, #1
   17f22:	e844 2000 	strex	r0, r2, [r4]
   17f26:	2800      	cmp	r0, #0
   17f28:	d1f7      	bne.n	17f1a <sc_process+0x16>
   17f2a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17f2e:	4a0d      	ldr	r2, [pc, #52]	; (17f64 <sc_process+0x60>)
   17f30:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17f34:	4a0c      	ldr	r2, [pc, #48]	; (17f68 <sc_process+0x64>)
   17f36:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17f3a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   17f3c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   17f3e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17f42:	2204      	movs	r2, #4
	sc->start = 0U;
   17f44:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17f48:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   17f4c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17f50:	f7ff ff5e 	bl	17e10 <bt_gatt_indicate>
   17f54:	b918      	cbnz	r0, 17f5e <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17f56:	2101      	movs	r1, #1
   17f58:	4620      	mov	r0, r4
   17f5a:	f007 fab0 	bl	1f4be <atomic_set_bit>
}
   17f5e:	b002      	add	sp, #8
   17f60:	bd10      	pop	{r4, pc}
   17f62:	bf00      	nop
   17f64:	00021bcc 	.word	0x00021bcc
   17f68:	00017839 	.word	0x00017839

00017f6c <update_ccc>:
{
   17f6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f70:	4b35      	ldr	r3, [pc, #212]	; (18048 <update_ccc+0xdc>)
{
   17f72:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f74:	6882      	ldr	r2, [r0, #8]
   17f76:	429a      	cmp	r2, r3
{
   17f78:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f7a:	d160      	bne.n	1803e <update_ccc+0xd2>
	ccc = attr->user_data;
   17f7c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   17f80:	683c      	ldr	r4, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17f82:	f108 0501 	add.w	r5, r8, #1
   17f86:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   17f8a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   17f8e:	b1f3      	cbz	r3, 17fce <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17f90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   17f94:	462a      	mov	r2, r5
   17f96:	4620      	mov	r0, r4
   17f98:	f006 fbc8 	bl	1e72c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17f9c:	b1b8      	cbz	r0, 17fce <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17f9e:	222a      	movs	r2, #42	; 0x2a
   17fa0:	4631      	mov	r1, r6
   17fa2:	4620      	mov	r0, r4
   17fa4:	f007 fd3e 	bl	1fa24 <bt_gatt_check_perm>
		if (err) {
   17fa8:	b1a8      	cbz	r0, 17fd6 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17faa:	2803      	cmp	r0, #3
   17fac:	d00f      	beq.n	17fce <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   17fae:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17fb0:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   17fb2:	bf14      	ite	ne
   17fb4:	f04f 0a02 	movne.w	sl, #2
   17fb8:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
   17fbc:	f006 fb43 	bl	1e646 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17fc0:	4582      	cmp	sl, r0
   17fc2:	d908      	bls.n	17fd6 <update_ccc+0x6a>
				if (data->sec < sec) {
   17fc4:	793b      	ldrb	r3, [r7, #4]
   17fc6:	4553      	cmp	r3, sl
   17fc8:	d201      	bcs.n	17fce <update_ccc+0x62>
					data->sec = sec;
   17fca:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17fce:	350a      	adds	r5, #10
   17fd0:	454d      	cmp	r5, r9
   17fd2:	d034      	beq.n	1803e <update_ccc+0xd2>
   17fd4:	e7d9      	b.n	17f8a <update_ccc+0x1e>
		gatt_ccc_changed(attr, ccc);
   17fd6:	4641      	mov	r1, r8
   17fd8:	4630      	mov	r0, r6
   17fda:	f007 f9f6 	bl	1f3ca <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17fde:	4b1b      	ldr	r3, [pc, #108]	; (1804c <update_ccc+0xe0>)
   17fe0:	4598      	cmp	r8, r3
   17fe2:	d12c      	bne.n	1803e <update_ccc+0xd2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17fe4:	7a20      	ldrb	r0, [r4, #8]
   17fe6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   17fea:	f7ff fbd3 	bl	17794 <find_sc_cfg>
	if (!cfg) {
   17fee:	4605      	mov	r5, r0
   17ff0:	b328      	cbz	r0, 1803e <update_ccc+0xd2>
	if (!(cfg->data.start || cfg->data.end)) {
   17ff2:	8902      	ldrh	r2, [r0, #8]
   17ff4:	8943      	ldrh	r3, [r0, #10]
   17ff6:	ea52 0103 	orrs.w	r1, r2, r3
   17ffa:	d020      	beq.n	1803e <update_ccc+0xd2>
	index = bt_conn_index(conn);
   17ffc:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17ffe:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18002:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   18006:	f7fe fccb 	bl	169a0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1800a:	4911      	ldr	r1, [pc, #68]	; (18050 <update_ccc+0xe4>)
   1800c:	4a11      	ldr	r2, [pc, #68]	; (18054 <update_ccc+0xe8>)
   1800e:	2318      	movs	r3, #24
   18010:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   18014:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18016:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18018:	4a0f      	ldr	r2, [pc, #60]	; (18058 <update_ccc+0xec>)
   1801a:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1801c:	aa01      	add	r2, sp, #4
   1801e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18020:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18022:	b203      	sxth	r3, r0
   18024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1802c:	4620      	mov	r0, r4
   1802e:	f7ff feef 	bl	17e10 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   18032:	4632      	mov	r2, r6
   18034:	2100      	movs	r1, #0
   18036:	f105 0008 	add.w	r0, r5, #8
   1803a:	f005 fdc4 	bl	1dbc6 <memset>
}
   1803e:	2001      	movs	r0, #1
   18040:	b002      	add	sp, #8
   18042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18046:	bf00      	nop
   18048:	0001f84d 	.word	0x0001f84d
   1804c:	20000778 	.word	0x20000778
   18050:	2000297c 	.word	0x2000297c
   18054:	00021bcc 	.word	0x00021bcc
   18058:	0001f60d 	.word	0x0001f60d

0001805c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1805c:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1805e:	4a0b      	ldr	r2, [pc, #44]	; (1808c <bt_gatt_connected+0x30>)
	data.conn = conn;
   18060:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18062:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   18066:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18068:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1806a:	2001      	movs	r0, #1
   1806c:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18070:	f007 fcac 	bl	1f9cc <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
   18074:	4620      	mov	r0, r4
   18076:	f006 fae6 	bl	1e646 <bt_conn_get_security>
   1807a:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1807e:	4288      	cmp	r0, r1
   18080:	d202      	bcs.n	18088 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
   18082:	4620      	mov	r0, r4
   18084:	f006 faac 	bl	1e5e0 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   18088:	b002      	add	sp, #8
   1808a:	bd10      	pop	{r4, pc}
   1808c:	00017f6d 	.word	0x00017f6d

00018090 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   18090:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18092:	4a06      	ldr	r2, [pc, #24]	; (180ac <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   18094:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18096:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   18098:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1809a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1809e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180a2:	f007 fc93 	bl	1f9cc <bt_gatt_foreach_attr>
}
   180a6:	b003      	add	sp, #12
   180a8:	f85d fb04 	ldr.w	pc, [sp], #4
   180ac:	00017f6d 	.word	0x00017f6d

000180b0 <db_hash_read>:
{
   180b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180b2:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   180b4:	480f      	ldr	r0, [pc, #60]	; (180f4 <db_hash_read+0x44>)
{
   180b6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   180ba:	4615      	mov	r5, r2
   180bc:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   180be:	f008 ff24 	bl	20f0a <k_delayed_work_cancel>
	if (!err) {
   180c2:	b908      	cbnz	r0, 180c8 <db_hash_read+0x18>
		db_hash_gen(true);
   180c4:	f7ff fe02 	bl	17ccc <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   180c8:	2101      	movs	r1, #1
   180ca:	4620      	mov	r0, r4
   180cc:	f007 fcd5 	bl	1fa7a <bt_gatt_change_aware>
	if (offset > value_len) {
   180d0:	2e10      	cmp	r6, #16
   180d2:	d80c      	bhi.n	180ee <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
   180d4:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   180d8:	4907      	ldr	r1, [pc, #28]	; (180f8 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
   180da:	42bc      	cmp	r4, r7
   180dc:	bfa8      	it	ge
   180de:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   180e0:	4622      	mov	r2, r4
   180e2:	4431      	add	r1, r6
   180e4:	4628      	mov	r0, r5
   180e6:	f005 fd43 	bl	1db70 <memcpy>
}
   180ea:	4620      	mov	r0, r4
   180ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   180ee:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   180f2:	e7fa      	b.n	180ea <db_hash_read+0x3a>
   180f4:	20002298 	.word	0x20002298
   180f8:	20002f53 	.word	0x20002f53

000180fc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   180fc:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   180fe:	4603      	mov	r3, r0
   18100:	4a15      	ldr	r2, [pc, #84]	; (18158 <bt_gatt_disconnected+0x5c>)
{
   18102:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18104:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18108:	2001      	movs	r0, #1
   1810a:	f007 fc5f 	bl	1f9cc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1810e:	4628      	mov	r0, r5
   18110:	f7ff fb62 	bl	177d8 <find_cf_cfg>
	if (!cfg) {
   18114:	4604      	mov	r4, r0
   18116:	b1e8      	cbz	r0, 18154 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18118:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1811c:	7a28      	ldrb	r0, [r5, #8]
   1811e:	4631      	mov	r1, r6
   18120:	f006 f9ba 	bl	1e498 <bt_addr_le_is_bonded>
   18124:	b920      	cbnz	r0, 18130 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   18126:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   18128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1812c:	f007 b9ff 	b.w	1f52e <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   18130:	1c60      	adds	r0, r4, #1
   18132:	2207      	movs	r2, #7
   18134:	4631      	mov	r1, r6
   18136:	340c      	adds	r4, #12
   18138:	f005 fd1a 	bl	1db70 <memcpy>
   1813c:	f3bf 8f5b 	dmb	ish
   18140:	e854 3f00 	ldrex	r3, [r4]
   18144:	f023 0302 	bic.w	r3, r3, #2
   18148:	e844 3200 	strex	r2, r3, [r4]
   1814c:	2a00      	cmp	r2, #0
   1814e:	d1f7      	bne.n	18140 <bt_gatt_disconnected+0x44>
   18150:	f3bf 8f5b 	dmb	ish
}
   18154:	bd70      	pop	{r4, r5, r6, pc}
   18156:	bf00      	nop
   18158:	00017a51 	.word	0x00017a51

0001815c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1815c:	4b10      	ldr	r3, [pc, #64]	; (181a0 <get_io_capa+0x44>)
   1815e:	681b      	ldr	r3, [r3, #0]
   18160:	b1bb      	cbz	r3, 18192 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   18162:	681a      	ldr	r2, [r3, #0]
   18164:	b142      	cbz	r2, 18178 <get_io_capa+0x1c>
   18166:	6859      	ldr	r1, [r3, #4]
   18168:	b131      	cbz	r1, 18178 <get_io_capa+0x1c>
   1816a:	6899      	ldr	r1, [r3, #8]
   1816c:	b911      	cbnz	r1, 18174 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1816e:	490d      	ldr	r1, [pc, #52]	; (181a4 <get_io_capa+0x48>)
   18170:	7809      	ldrb	r1, [r1, #0]
   18172:	b939      	cbnz	r1, 18184 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18174:	2004      	movs	r0, #4
   18176:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   18178:	490a      	ldr	r1, [pc, #40]	; (181a4 <get_io_capa+0x48>)
   1817a:	7809      	ldrb	r1, [r1, #0]
   1817c:	b111      	cbz	r1, 18184 <get_io_capa+0x28>
   1817e:	b10a      	cbz	r2, 18184 <get_io_capa+0x28>
   18180:	6899      	ldr	r1, [r3, #8]
   18182:	b941      	cbnz	r1, 18196 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   18184:	685b      	ldr	r3, [r3, #4]
   18186:	b943      	cbnz	r3, 1819a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   18188:	2a00      	cmp	r2, #0
   1818a:	bf0c      	ite	eq
   1818c:	2003      	moveq	r0, #3
   1818e:	2000      	movne	r0, #0
   18190:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   18192:	2003      	movs	r0, #3
   18194:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   18196:	2001      	movs	r0, #1
   18198:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1819a:	2002      	movs	r0, #2
	}
}
   1819c:	4770      	bx	lr
   1819e:	bf00      	nop
   181a0:	20002904 	.word	0x20002904
   181a4:	20002f64 	.word	0x20002f64

000181a8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   181a8:	4b04      	ldr	r3, [pc, #16]	; (181bc <bt_smp_accept+0x14>)
   181aa:	6818      	ldr	r0, [r3, #0]
   181ac:	b918      	cbnz	r0, 181b6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
   181ae:	4a04      	ldr	r2, [pc, #16]	; (181c0 <bt_smp_accept+0x18>)
   181b0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
   181b2:	600b      	str	r3, [r1, #0]

		return 0;
   181b4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   181b6:	f06f 000b 	mvn.w	r0, #11
}
   181ba:	4770      	bx	lr
   181bc:	20002320 	.word	0x20002320
   181c0:	00021d40 	.word	0x00021d40

000181c4 <get_auth.isra.0>:
	if (sc_supported) {
   181c4:	4b0c      	ldr	r3, [pc, #48]	; (181f8 <get_auth.isra.0+0x34>)
   181c6:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   181c8:	b510      	push	{r4, lr}
	if (sc_supported) {
   181ca:	b17b      	cbz	r3, 181ec <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   181cc:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   181d0:	f7ff ffc4 	bl	1815c <get_io_capa>
	if (bondable) {
   181d4:	4b09      	ldr	r3, [pc, #36]	; (181fc <get_auth.isra.0+0x38>)
   181d6:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   181d8:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   181da:	bf0c      	ite	eq
   181dc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   181e0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   181e4:	b12b      	cbz	r3, 181f2 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   181e6:	f044 0001 	orr.w	r0, r4, #1
}
   181ea:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   181ec:	f000 0407 	and.w	r4, r0, #7
   181f0:	e7ee      	b.n	181d0 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   181f2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   181f6:	e7f8      	b.n	181ea <get_auth.isra.0+0x26>
   181f8:	20002f64 	.word	0x20002f64
   181fc:	200008b8 	.word	0x200008b8

00018200 <smp_init>:
{
   18200:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   18202:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
   18206:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   18208:	22f0      	movs	r2, #240	; 0xf0
   1820a:	2100      	movs	r1, #0
   1820c:	4628      	mov	r0, r5
   1820e:	f005 fcda 	bl	1dbc6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18212:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   18216:	2110      	movs	r1, #16
   18218:	f002 faba 	bl	1a790 <bt_rand>
   1821c:	4604      	mov	r4, r0
   1821e:	b948      	cbnz	r0, 18234 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18220:	2105      	movs	r1, #5
   18222:	4628      	mov	r0, r5
   18224:	f007 fc6f 	bl	1fb06 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18228:	f7fd ff20 	bl	1606c <bt_pub_key_get>
   1822c:	4b02      	ldr	r3, [pc, #8]	; (18238 <smp_init+0x38>)
   1822e:	6018      	str	r0, [r3, #0]
}
   18230:	4620      	mov	r0, r4
   18232:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18234:	2408      	movs	r4, #8
   18236:	e7fb      	b.n	18230 <smp_init+0x30>
   18238:	20002998 	.word	0x20002998

0001823c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1823c:	b513      	push	{r0, r1, r4, lr}
   1823e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   18240:	2200      	movs	r2, #0
   18242:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   18244:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   18246:	460a      	mov	r2, r1
   18248:	6800      	ldr	r0, [r0, #0]
   1824a:	2106      	movs	r1, #6
   1824c:	f006 fb8c 	bl	1e968 <bt_l2cap_send_cb>
   18250:	4805      	ldr	r0, [pc, #20]	; (18268 <smp_send.isra.0+0x2c>)
   18252:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18256:	2300      	movs	r3, #0
   18258:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
   1825c:	b002      	add	sp, #8
   1825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18262:	f003 bb9f 	b.w	1b9a4 <k_delayed_work_submit_to_queue>
   18266:	bf00      	nop
   18268:	20002718 	.word	0x20002718

0001826c <compute_and_check_and_send_slave_dhcheck>:
{
   1826c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   18270:	2210      	movs	r2, #16
{
   18272:	b0a3      	sub	sp, #140	; 0x8c
   18274:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   18276:	2100      	movs	r1, #0
   18278:	eb0d 0002 	add.w	r0, sp, r2
   1827c:	f005 fca3 	bl	1dbc6 <memset>
	switch (smp->method) {
   18280:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   18284:	2b05      	cmp	r3, #5
   18286:	d87e      	bhi.n	18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
   18288:	e8df f003 	tbb	[pc, r3]
   1828c:	09030309 	.word	0x09030309
   18290:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   18292:	2204      	movs	r2, #4
   18294:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   18298:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1829a:	f005 fc69 	bl	1db70 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1829e:	4b63      	ldr	r3, [pc, #396]	; (1842c <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   182a0:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
   182a4:	aa14      	add	r2, sp, #80	; 0x50
   182a6:	f103 0630 	add.w	r6, r3, #48	; 0x30
   182aa:	6818      	ldr	r0, [r3, #0]
   182ac:	6859      	ldr	r1, [r3, #4]
   182ae:	4615      	mov	r5, r2
   182b0:	c503      	stmia	r5!, {r0, r1}
   182b2:	3308      	adds	r3, #8
   182b4:	42b3      	cmp	r3, r6
   182b6:	462a      	mov	r2, r5
   182b8:	d1f7      	bne.n	182aa <compute_and_check_and_send_slave_dhcheck+0x3e>
   182ba:	6818      	ldr	r0, [r3, #0]
   182bc:	791b      	ldrb	r3, [r3, #4]
   182be:	6028      	str	r0, [r5, #0]
   182c0:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   182c2:	ad0c      	add	r5, sp, #48	; 0x30
   182c4:	2220      	movs	r2, #32
   182c6:	f204 114f 	addw	r1, r4, #335	; 0x14f
   182ca:	4628      	mov	r0, r5
   182cc:	f007 fc07 	bl	1fade <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   182d0:	4857      	ldr	r0, [pc, #348]	; (18430 <compute_and_check_and_send_slave_dhcheck+0x1c4>)
   182d2:	ab08      	add	r3, sp, #32
   182d4:	2220      	movs	r2, #32
   182d6:	4629      	mov	r1, r5
   182d8:	f007 fc32 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   182dc:	2800      	cmp	r0, #0
   182de:	d152      	bne.n	18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   182e0:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
   182e4:	2210      	movs	r2, #16
   182e6:	4639      	mov	r1, r7
   182e8:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   182ec:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
   182f0:	f007 fbf5 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   182f4:	2210      	movs	r2, #16
   182f6:	4641      	mov	r1, r8
   182f8:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   182fc:	f007 fbef 	bl	1fade <sys_memcpy_swap>
	m[37] = a1->type;
   18300:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   18304:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18308:	2206      	movs	r2, #6
   1830a:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1830e:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   18312:	f007 fbe4 	bl	1fade <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   18316:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
   1831a:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   1831e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18322:	2206      	movs	r2, #6
   18324:	f109 0197 	add.w	r1, r9, #151	; 0x97
   18328:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1832c:	f007 fbd7 	bl	1fade <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   18330:	4633      	mov	r3, r6
   18332:	2235      	movs	r2, #53	; 0x35
   18334:	a914      	add	r1, sp, #80	; 0x50
   18336:	a808      	add	r0, sp, #32
   18338:	f007 fc02 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   1833c:	bb18      	cbnz	r0, 18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   1833e:	4630      	mov	r0, r6
   18340:	f007 fc36 	bl	1fbb0 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   18344:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
   18348:	2301      	movs	r3, #1
   1834a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1834e:	2235      	movs	r2, #53	; 0x35
   18350:	464b      	mov	r3, r9
   18352:	a914      	add	r1, sp, #80	; 0x50
   18354:	a808      	add	r0, sp, #32
   18356:	f007 fbf3 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   1835a:	b9a0      	cbnz	r0, 18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   1835c:	4648      	mov	r0, r9
   1835e:	f007 fc27 	bl	1fbb0 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   18362:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18364:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
   18366:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1836a:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1836c:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   18370:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18372:	e9cd 2300 	strd	r2, r3, [sp]
   18376:	9102      	str	r1, [sp, #8]
   18378:	ab04      	add	r3, sp, #16
   1837a:	463a      	mov	r2, r7
   1837c:	4641      	mov	r1, r8
   1837e:	4630      	mov	r0, r6
   18380:	f007 fc24 	bl	1fbcc <smp_f6>
   18384:	b148      	cbz	r0, 1839a <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   18386:	2008      	movs	r0, #8
   18388:	e048      	b.n	1841c <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
   1838a:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   1838e:	2900      	cmp	r1, #0
   18390:	d085      	beq.n	1829e <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18392:	2210      	movs	r2, #16
   18394:	eb0d 0002 	add.w	r0, sp, r2
   18398:	e77f      	b.n	1829a <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
   1839a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1839e:	2b05      	cmp	r3, #5
   183a0:	d108      	bne.n	183b4 <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
   183a2:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
   183a6:	2210      	movs	r2, #16
   183a8:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   183ac:	2900      	cmp	r1, #0
   183ae:	d038      	beq.n	18422 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   183b0:	f005 fbde 	bl	1db70 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   183b4:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   183b6:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
   183b8:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   183bc:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   183be:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   183c2:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   183c4:	e9cd 2300 	strd	r2, r3, [sp]
   183c8:	9102      	str	r1, [sp, #8]
   183ca:	ab04      	add	r3, sp, #16
   183cc:	4642      	mov	r2, r8
   183ce:	4639      	mov	r1, r7
   183d0:	f007 fbfc 	bl	1fbcc <smp_f6>
   183d4:	2800      	cmp	r0, #0
   183d6:	d1d6      	bne.n	18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   183d8:	4629      	mov	r1, r5
   183da:	2210      	movs	r2, #16
   183dc:	f204 106f 	addw	r0, r4, #367	; 0x16f
   183e0:	f005 fbb6 	bl	1db50 <memcmp>
   183e4:	4605      	mov	r5, r0
   183e6:	b9f8      	cbnz	r0, 18428 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   183e8:	210d      	movs	r1, #13
   183ea:	4620      	mov	r0, r4
   183ec:	f007 fc6a 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!buf) {
   183f0:	4606      	mov	r6, r0
   183f2:	2800      	cmp	r0, #0
   183f4:	d0c7      	beq.n	18386 <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
   183f6:	2110      	movs	r1, #16
   183f8:	3008      	adds	r0, #8
   183fa:	f008 f8b3 	bl	20564 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   183fe:	2210      	movs	r2, #16
   18400:	a914      	add	r1, sp, #80	; 0x50
   18402:	f005 fbb5 	bl	1db70 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   18406:	462a      	mov	r2, r5
   18408:	4631      	mov	r1, r6
   1840a:	4620      	mov	r0, r4
   1840c:	f7ff ff16 	bl	1823c <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18410:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   18414:	2101      	movs	r1, #1
   18416:	f007 fb76 	bl	1fb06 <atomic_set_bit>
	return 0;
   1841a:	4628      	mov	r0, r5
}
   1841c:	b023      	add	sp, #140	; 0x8c
   1841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   18422:	f005 fbd0 	bl	1dbc6 <memset>
   18426:	e7c5      	b.n	183b4 <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   18428:	200b      	movs	r0, #11
   1842a:	e7f7      	b.n	1841c <compute_and_check_and_send_slave_dhcheck+0x1b0>
   1842c:	000215a5 	.word	0x000215a5
   18430:	0002231d 	.word	0x0002231d

00018434 <sc_send_public_key>:
{
   18434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18436:	210c      	movs	r1, #12
{
   18438:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1843a:	f007 fc43 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1843e:	4604      	mov	r4, r0
   18440:	b1b0      	cbz	r0, 18470 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
   18442:	2140      	movs	r1, #64	; 0x40
   18444:	3008      	adds	r0, #8
   18446:	f008 f88d 	bl	20564 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1844a:	4f0a      	ldr	r7, [pc, #40]	; (18474 <sc_send_public_key+0x40>)
   1844c:	2220      	movs	r2, #32
   1844e:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
   18450:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18452:	f005 fb8d 	bl	1db70 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   18456:	6839      	ldr	r1, [r7, #0]
   18458:	2220      	movs	r2, #32
   1845a:	4411      	add	r1, r2
   1845c:	18b0      	adds	r0, r6, r2
   1845e:	f005 fb87 	bl	1db70 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   18462:	4628      	mov	r0, r5
   18464:	2200      	movs	r2, #0
   18466:	4621      	mov	r1, r4
   18468:	f7ff fee8 	bl	1823c <smp_send.isra.0>
	return 0;
   1846c:	2000      	movs	r0, #0
}
   1846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18470:	2008      	movs	r0, #8
   18472:	e7fc      	b.n	1846e <sc_send_public_key+0x3a>
   18474:	20002998 	.word	0x20002998

00018478 <smp_send_pairing_confirm>:
{
   18478:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1847a:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
   1847e:	2c02      	cmp	r4, #2
{
   18480:	4605      	mov	r5, r0
	switch (smp->method) {
   18482:	d824      	bhi.n	184ce <smp_send_pairing_confirm+0x56>
   18484:	b14c      	cbz	r4, 1849a <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18486:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   1848a:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
   1848e:	40dc      	lsrs	r4, r3
   18490:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18494:	f064 047f 	orn	r4, r4, #127	; 0x7f
   18498:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1849a:	2103      	movs	r1, #3
   1849c:	4628      	mov	r0, r5
   1849e:	f007 fc11 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!buf) {
   184a2:	4606      	mov	r6, r0
   184a4:	b1a8      	cbz	r0, 184d2 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
   184a6:	2110      	movs	r1, #16
   184a8:	3008      	adds	r0, #8
   184aa:	f008 f85b 	bl	20564 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   184ae:	9000      	str	r0, [sp, #0]
   184b0:	4810      	ldr	r0, [pc, #64]	; (184f4 <smp_send_pairing_confirm+0x7c>)
   184b2:	4623      	mov	r3, r4
   184b4:	6800      	ldr	r0, [r0, #0]
   184b6:	f105 02df 	add.w	r2, r5, #223	; 0xdf
   184ba:	f205 110f 	addw	r1, r5, #271	; 0x10f
   184be:	f007 fbd1 	bl	1fc64 <smp_f4>
   184c2:	4604      	mov	r4, r0
   184c4:	b148      	cbz	r0, 184da <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
   184c6:	4630      	mov	r0, r6
   184c8:	f000 ffbc 	bl	19444 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   184cc:	e001      	b.n	184d2 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
   184ce:	2c03      	cmp	r4, #3
   184d0:	d001      	beq.n	184d6 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
   184d2:	2008      	movs	r0, #8
   184d4:	e00c      	b.n	184f0 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   184d6:	2400      	movs	r4, #0
   184d8:	e7df      	b.n	1849a <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   184da:	4602      	mov	r2, r0
   184dc:	4631      	mov	r1, r6
   184de:	4628      	mov	r0, r5
   184e0:	f7ff feac 	bl	1823c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   184e4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   184e8:	4621      	mov	r1, r4
   184ea:	f007 fb1a 	bl	1fb22 <atomic_clear_bit>
	return 0;
   184ee:	4620      	mov	r0, r4
}
   184f0:	b002      	add	sp, #8
   184f2:	bd70      	pop	{r4, r5, r6, pc}
   184f4:	20002998 	.word	0x20002998

000184f8 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
   184f8:	b538      	push	{r3, r4, r5, lr}
   184fa:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   184fe:	4604      	mov	r4, r0
   18500:	2b05      	cmp	r3, #5
   18502:	d814      	bhi.n	1852e <smp_public_key_slave.part.0+0x36>
   18504:	e8df f003 	tbb	[pc, r3]
   18508:	030d3603 	.word	0x030d3603
   1850c:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1850e:	30b8      	adds	r0, #184	; 0xb8
   18510:	2104      	movs	r1, #4
   18512:	f007 faf8 	bl	1fb06 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18516:	4620      	mov	r0, r4
   18518:	f7ff ffae 	bl	18478 <smp_send_pairing_confirm>
		if (err) {
   1851c:	2800      	cmp	r0, #0
   1851e:	d037      	beq.n	18590 <smp_public_key_slave.part.0+0x98>
}
   18520:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18522:	2104      	movs	r1, #4
   18524:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   18528:	f002 f932 	bl	1a790 <bt_rand>
   1852c:	b108      	cbz	r0, 18532 <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
   1852e:	2008      	movs	r0, #8
   18530:	e7f6      	b.n	18520 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
   18532:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   18536:	4a1f      	ldr	r2, [pc, #124]	; (185b4 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
   18538:	4d1f      	ldr	r5, [pc, #124]	; (185b8 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
   1853a:	fbb1 f3f2 	udiv	r3, r1, r2
   1853e:	fb02 1313 	mls	r3, r2, r3, r1
   18542:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
   18546:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   18548:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
   1854c:	b163      	cbz	r3, 18568 <smp_public_key_slave.part.0+0x70>
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	b153      	cbz	r3, 18568 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18552:	210a      	movs	r1, #10
   18554:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   18558:	f007 fad5 	bl	1fb06 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1855c:	682b      	ldr	r3, [r5, #0]
   1855e:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
   18562:	681b      	ldr	r3, [r3, #0]
   18564:	6820      	ldr	r0, [r4, #0]
   18566:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18568:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1856a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1856e:	f007 faca 	bl	1fb06 <atomic_set_bit>
		break;
   18572:	e00d      	b.n	18590 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18574:	2103      	movs	r1, #3
   18576:	30b8      	adds	r0, #184	; 0xb8
   18578:	f007 fac5 	bl	1fb06 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1857c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   18580:	2109      	movs	r1, #9
   18582:	f007 fac0 	bl	1fb06 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   18586:	4b0c      	ldr	r3, [pc, #48]	; (185b8 <smp_public_key_slave.part.0+0xc0>)
   18588:	6820      	ldr	r0, [r4, #0]
   1858a:	681b      	ldr	r3, [r3, #0]
   1858c:	685b      	ldr	r3, [r3, #4]
   1858e:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
   18590:	490a      	ldr	r1, [pc, #40]	; (185bc <smp_public_key_slave.part.0+0xc4>)
   18592:	f204 100f 	addw	r0, r4, #271	; 0x10f
   18596:	f7fd fd77 	bl	16088 <bt_dh_key_gen>
   1859a:	4605      	mov	r5, r0
   1859c:	2800      	cmp	r0, #0
   1859e:	d1c6      	bne.n	1852e <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   185a0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   185a4:	2107      	movs	r1, #7
   185a6:	f007 faae 	bl	1fb06 <atomic_set_bit>
	return 0;
   185aa:	4628      	mov	r0, r5
   185ac:	e7b8      	b.n	18520 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   185ae:	2104      	movs	r1, #4
   185b0:	e7db      	b.n	1856a <smp_public_key_slave.part.0+0x72>
   185b2:	bf00      	nop
   185b4:	000f4240 	.word	0x000f4240
   185b8:	20002904 	.word	0x20002904
   185bc:	00018aa9 	.word	0x00018aa9

000185c0 <smp_public_key>:
{
   185c0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   185c2:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   185c4:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
   185c8:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
   185ca:	2220      	movs	r2, #32
   185cc:	4631      	mov	r1, r6
   185ce:	4620      	mov	r0, r4
   185d0:	f005 face 	bl	1db70 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   185d4:	2220      	movs	r2, #32
   185d6:	18b1      	adds	r1, r6, r2
   185d8:	f205 102f 	addw	r0, r5, #303	; 0x12f
   185dc:	f005 fac8 	bl	1db70 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   185e0:	491b      	ldr	r1, [pc, #108]	; (18650 <smp_public_key+0x90>)
   185e2:	2240      	movs	r2, #64	; 0x40
   185e4:	4620      	mov	r0, r4
   185e6:	f005 fab3 	bl	1db50 <memcmp>
   185ea:	b148      	cbz	r0, 18600 <smp_public_key+0x40>
	if (!sc_public_key) {
   185ec:	4b19      	ldr	r3, [pc, #100]	; (18654 <smp_public_key+0x94>)
   185ee:	681c      	ldr	r4, [r3, #0]
   185f0:	bb24      	cbnz	r4, 1863c <smp_public_key+0x7c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   185f2:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   185f6:	2106      	movs	r1, #6
   185f8:	f007 fa85 	bl	1fb06 <atomic_set_bit>
		return 0;
   185fc:	4620      	mov	r0, r4
}
   185fe:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18600:	210d      	movs	r1, #13
   18602:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   18606:	f007 fa7e 	bl	1fb06 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1860a:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
   1860c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   18610:	b933      	cbnz	r3, 18620 <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18612:	7a20      	ldrb	r0, [r4, #8]
   18614:	f104 0188 	add.w	r1, r4, #136	; 0x88
   18618:	f000 fdc2 	bl	191a0 <bt_keys_get_addr>
   1861c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   18620:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   18624:	2b00      	cmp	r3, #0
   18626:	d0e1      	beq.n	185ec <smp_public_key+0x2c>
   18628:	89da      	ldrh	r2, [r3, #14]
   1862a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1862e:	2a00      	cmp	r2, #0
   18630:	d0dc      	beq.n	185ec <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18632:	7b5b      	ldrb	r3, [r3, #13]
   18634:	079b      	lsls	r3, r3, #30
   18636:	d5d9      	bpl.n	185ec <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18638:	2003      	movs	r0, #3
   1863a:	e7e0      	b.n	185fe <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
   1863c:	4628      	mov	r0, r5
   1863e:	f7ff fef9 	bl	18434 <sc_send_public_key>
	if (err) {
   18642:	2800      	cmp	r0, #0
   18644:	d1db      	bne.n	185fe <smp_public_key+0x3e>
   18646:	4628      	mov	r0, r5
}
   18648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1864c:	f7ff bf54 	b.w	184f8 <smp_public_key_slave.part.0>
   18650:	0002232d 	.word	0x0002232d
   18654:	20002998 	.word	0x20002998

00018658 <smp_pairing_req>:
{
   18658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1865c:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1865e:	78fb      	ldrb	r3, [r7, #3]
   18660:	3b07      	subs	r3, #7
   18662:	2b09      	cmp	r3, #9
{
   18664:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18666:	d904      	bls.n	18672 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18668:	2706      	movs	r7, #6
}
   1866a:	4638      	mov	r0, r7
   1866c:	b002      	add	sp, #8
   1866e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   18672:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
   18674:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   18678:	b163      	cbz	r3, 18694 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1867a:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   1867e:	210e      	movs	r1, #14
   18680:	4628      	mov	r0, r5
   18682:	f007 fb16 	bl	1fcb2 <atomic_test_bit>
   18686:	b980      	cbnz	r0, 186aa <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   18688:	4620      	mov	r0, r4
   1868a:	f7ff fdb9 	bl	18200 <smp_init>
		if (ret) {
   1868e:	b160      	cbz	r0, 186aa <smp_pairing_req+0x52>
			return ret;
   18690:	b2c7      	uxtb	r7, r0
   18692:	e7ea      	b.n	1866a <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18694:	7a30      	ldrb	r0, [r6, #8]
   18696:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1869a:	f000 fd81 	bl	191a0 <bt_keys_get_addr>
   1869e:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
   186a2:	2800      	cmp	r0, #0
   186a4:	d1e9      	bne.n	1867a <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   186a6:	2708      	movs	r7, #8
   186a8:	e7df      	b.n	1866a <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   186aa:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   186ac:	2206      	movs	r2, #6
   186ae:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   186b0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
   186b4:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
   186b8:	f005 fa5a 	bl	1db70 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   186bc:	2302      	movs	r3, #2
   186be:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
   186c2:	78b8      	ldrb	r0, [r7, #2]
   186c4:	f7ff fd7e 	bl	181c4 <get_auth.isra.0>
   186c8:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
   186cc:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   186ce:	f7ff fd45 	bl	1815c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   186d2:	4bb1      	ldr	r3, [pc, #708]	; (18998 <smp_pairing_req+0x340>)
	rsp->io_capability = get_io_capa();
   186d4:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   186d8:	781b      	ldrb	r3, [r3, #0]
   186da:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   186de:	2310      	movs	r3, #16
   186e0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   186e4:	793b      	ldrb	r3, [r7, #4]
   186e6:	f003 0303 	and.w	r3, r3, #3
   186ea:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   186ee:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   186f0:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   186f4:	f003 0301 	and.w	r3, r3, #1
   186f8:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   186fc:	d00f      	beq.n	1871e <smp_pairing_req+0xc6>
   186fe:	78bb      	ldrb	r3, [r7, #2]
   18700:	071b      	lsls	r3, r3, #28
   18702:	d50c      	bpl.n	1871e <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18704:	2105      	movs	r1, #5
   18706:	4628      	mov	r0, r5
   18708:	f007 f9fd 	bl	1fb06 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1870c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   18710:	f003 0302 	and.w	r3, r3, #2
   18714:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18718:	2300      	movs	r3, #0
   1871a:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1871e:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   18722:	0698      	lsls	r0, r3, #26
   18724:	d506      	bpl.n	18734 <smp_pairing_req+0xdc>
   18726:	78bb      	ldrb	r3, [r7, #2]
   18728:	0699      	lsls	r1, r3, #26
   1872a:	d503      	bpl.n	18734 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1872c:	2113      	movs	r1, #19
   1872e:	4628      	mov	r0, r5
   18730:	f007 f9e9 	bl	1fb06 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   18734:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
   18738:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
   1873c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   18740:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   18744:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   18748:	07da      	lsls	r2, r3, #31
   1874a:	d506      	bpl.n	1875a <smp_pairing_req+0x102>
   1874c:	78bb      	ldrb	r3, [r7, #2]
   1874e:	07db      	lsls	r3, r3, #31
   18750:	d503      	bpl.n	1875a <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18752:	210c      	movs	r1, #12
   18754:	4628      	mov	r0, r5
   18756:	f007 f9d6 	bl	1fb06 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1875a:	2103      	movs	r1, #3
   1875c:	4628      	mov	r0, r5
   1875e:	f007 f9d2 	bl	1fb06 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18762:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   18764:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18766:	f007 faa4 	bl	1fcb2 <atomic_test_bit>
   1876a:	f8d4 8000 	ldr.w	r8, [r4]
   1876e:	2800      	cmp	r0, #0
   18770:	d151      	bne.n	18816 <smp_pairing_req+0x1be>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18772:	2f04      	cmp	r7, #4
   18774:	d81d      	bhi.n	187b2 <smp_pairing_req+0x15a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18776:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1877a:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
   1877e:	4013      	ands	r3, r2
   18780:	07d8      	lsls	r0, r3, #31
   18782:	d465      	bmi.n	18850 <smp_pairing_req+0x1f8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18784:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
   18788:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   1878c:	4318      	orrs	r0, r3
   1878e:	f010 0004 	ands.w	r0, r0, #4
   18792:	d00e      	beq.n	187b2 <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa()];
   18794:	f7ff fce2 	bl	1815c <get_io_capa>
   18798:	4b80      	ldr	r3, [pc, #512]	; (1899c <smp_pairing_req+0x344>)
   1879a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1879e:	441f      	add	r7, r3
   187a0:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
   187a2:	2804      	cmp	r0, #4
   187a4:	d105      	bne.n	187b2 <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   187a6:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
   187aa:	2b00      	cmp	r3, #0
   187ac:	bf0c      	ite	eq
   187ae:	2002      	moveq	r0, #2
   187b0:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   187b2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   187b6:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   187ba:	b93b      	cbnz	r3, 187cc <smp_pairing_req+0x174>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   187bc:	f898 0008 	ldrb.w	r0, [r8, #8]
   187c0:	f108 0188 	add.w	r1, r8, #136	; 0x88
   187c4:	f000 fcec 	bl	191a0 <bt_keys_get_addr>
   187c8:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
   187cc:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
   187d0:	2a00      	cmp	r2, #0
   187d2:	d143      	bne.n	1885c <smp_pairing_req+0x204>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   187d4:	2105      	movs	r1, #5
   187d6:	4628      	mov	r0, r5
   187d8:	f007 fa6b 	bl	1fcb2 <atomic_test_bit>
   187dc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   187e0:	2800      	cmp	r0, #0
   187e2:	f040 80e3 	bne.w	189ac <smp_pairing_req+0x354>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   187e6:	461f      	mov	r7, r3
   187e8:	2b00      	cmp	r3, #0
   187ea:	d155      	bne.n	18898 <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   187ec:	210e      	movs	r1, #14
   187ee:	4628      	mov	r0, r5
   187f0:	f007 fa5f 	bl	1fcb2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   187f4:	2800      	cmp	r0, #0
   187f6:	d14f      	bne.n	18898 <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   187f8:	4e69      	ldr	r6, [pc, #420]	; (189a0 <smp_pairing_req+0x348>)
   187fa:	6833      	ldr	r3, [r6, #0]
   187fc:	2b00      	cmp	r3, #0
   187fe:	d04b      	beq.n	18898 <smp_pairing_req+0x240>
	    bt_auth && bt_auth->pairing_confirm) {
   18800:	695b      	ldr	r3, [r3, #20]
   18802:	2b00      	cmp	r3, #0
   18804:	d048      	beq.n	18898 <smp_pairing_req+0x240>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18806:	4628      	mov	r0, r5
   18808:	2109      	movs	r1, #9
   1880a:	f007 f97c 	bl	1fb06 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1880e:	6833      	ldr	r3, [r6, #0]
   18810:	6820      	ldr	r0, [r4, #0]
   18812:	695b      	ldr	r3, [r3, #20]
   18814:	e0bc      	b.n	18990 <smp_pairing_req+0x338>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   18816:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
   1881a:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
   1881e:	ea00 0302 	and.w	r3, r0, r2
   18822:	0719      	lsls	r1, r3, #28
   18824:	d506      	bpl.n	18834 <smp_pairing_req+0x1dc>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18826:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1882a:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
   1882e:	430b      	orrs	r3, r1
   18830:	07db      	lsls	r3, r3, #31
   18832:	d40f      	bmi.n	18854 <smp_pairing_req+0x1fc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18834:	2f04      	cmp	r7, #4
   18836:	d80f      	bhi.n	18858 <smp_pairing_req+0x200>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18838:	4310      	orrs	r0, r2
   1883a:	f010 0004 	ands.w	r0, r0, #4
   1883e:	d0b8      	beq.n	187b2 <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
   18840:	f7ff fc8c 	bl	1815c <get_io_capa>
   18844:	4b57      	ldr	r3, [pc, #348]	; (189a4 <smp_pairing_req+0x34c>)
   18846:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1884a:	441f      	add	r7, r3
   1884c:	5c38      	ldrb	r0, [r7, r0]
   1884e:	e7b0      	b.n	187b2 <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   18850:	2006      	movs	r0, #6
   18852:	e7ae      	b.n	187b2 <smp_pairing_req+0x15a>
			return LE_SC_OOB;
   18854:	2005      	movs	r0, #5
   18856:	e7ac      	b.n	187b2 <smp_pairing_req+0x15a>
		return JUST_WORKS;
   18858:	2000      	movs	r0, #0
   1885a:	e7aa      	b.n	187b2 <smp_pairing_req+0x15a>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1885c:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   1885e:	f011 0f24 	tst.w	r1, #36	; 0x24
   18862:	d0b7      	beq.n	187d4 <smp_pairing_req+0x17c>
	return MIN(req->max_key_size, rsp->max_key_size);
   18864:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   18868:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   1886c:	7b12      	ldrb	r2, [r2, #12]
   1886e:	4283      	cmp	r3, r0
   18870:	bf28      	it	cs
   18872:	4603      	movcs	r3, r0
   18874:	429a      	cmp	r2, r3
   18876:	d901      	bls.n	1887c <smp_pairing_req+0x224>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18878:	2703      	movs	r7, #3
   1887a:	e6f6      	b.n	1866a <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   1887c:	0689      	lsls	r1, r1, #26
   1887e:	d404      	bmi.n	1888a <smp_pairing_req+0x232>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   18880:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   18884:	2b00      	cmp	r3, #0
   18886:	d1a5      	bne.n	187d4 <smp_pairing_req+0x17c>
   18888:	e7f6      	b.n	18878 <smp_pairing_req+0x220>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1888a:	2105      	movs	r1, #5
   1888c:	4628      	mov	r0, r5
   1888e:	f007 fa10 	bl	1fcb2 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   18892:	2800      	cmp	r0, #0
   18894:	d1f4      	bne.n	18880 <smp_pairing_req+0x228>
   18896:	e7ef      	b.n	18878 <smp_pairing_req+0x220>
	ret = send_pairing_rsp(smp);
   18898:	4620      	mov	r0, r4
   1889a:	f007 fa4c 	bl	1fd36 <send_pairing_rsp>
	if (ret) {
   1889e:	4607      	mov	r7, r0
   188a0:	2800      	cmp	r0, #0
   188a2:	f47f aee2 	bne.w	1866a <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   188a6:	2103      	movs	r1, #3
   188a8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   188ac:	f007 f92b 	bl	1fb06 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   188b0:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   188b2:	7a30      	ldrb	r0, [r6, #8]
   188b4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   188b8:	f000 fcf8 	bl	192ac <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   188bc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   188c0:	b128      	cbz	r0, 188ce <smp_pairing_req+0x276>
   188c2:	7b42      	ldrb	r2, [r0, #13]
   188c4:	07d2      	lsls	r2, r2, #31
   188c6:	d502      	bpl.n	188ce <smp_pairing_req+0x276>
   188c8:	2b00      	cmp	r3, #0
   188ca:	f43f aeec 	beq.w	186a6 <smp_pairing_req+0x4e>
	switch (smp->method) {
   188ce:	2b06      	cmp	r3, #6
   188d0:	f63f aee9 	bhi.w	186a6 <smp_pairing_req+0x4e>
   188d4:	a201      	add	r2, pc, #4	; (adr r2, 188dc <smp_pairing_req+0x284>)
   188d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   188da:	bf00      	nop
   188dc:	000188f9 	.word	0x000188f9
   188e0:	00018981 	.word	0x00018981
   188e4:	00018925 	.word	0x00018925
   188e8:	000186a7 	.word	0x000186a7
   188ec:	000186a7 	.word	0x000186a7
   188f0:	000186a7 	.word	0x000186a7
   188f4:	000188fd 	.word	0x000188fd
   188f8:	461f      	mov	r7, r3
   188fa:	e6b6      	b.n	1866a <smp_pairing_req+0x12>
		if (bt_auth && bt_auth->oob_data_request) {
   188fc:	4e28      	ldr	r6, [pc, #160]	; (189a0 <smp_pairing_req+0x348>)
   188fe:	6833      	ldr	r3, [r6, #0]
   18900:	2b00      	cmp	r3, #0
   18902:	d047      	beq.n	18994 <smp_pairing_req+0x33c>
   18904:	68db      	ldr	r3, [r3, #12]
   18906:	2b00      	cmp	r3, #0
   18908:	d044      	beq.n	18994 <smp_pairing_req+0x33c>
			struct bt_conn_oob_info info = {
   1890a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1890c:	4628      	mov	r0, r5
   1890e:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
   18910:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18914:	f007 f8f7 	bl	1fb06 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   18918:	6833      	ldr	r3, [r6, #0]
   1891a:	6820      	ldr	r0, [r4, #0]
   1891c:	68db      	ldr	r3, [r3, #12]
   1891e:	a901      	add	r1, sp, #4
   18920:	4798      	blx	r3
		break;
   18922:	e6a2      	b.n	1866a <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   18924:	2104      	movs	r1, #4
   18926:	eb0d 0001 	add.w	r0, sp, r1
   1892a:	f001 ff31 	bl	1a790 <bt_rand>
   1892e:	2800      	cmp	r0, #0
   18930:	f47f aeb9 	bne.w	186a6 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   18934:	9901      	ldr	r1, [sp, #4]
   18936:	4a1c      	ldr	r2, [pc, #112]	; (189a8 <smp_pairing_req+0x350>)
		if (bt_auth && bt_auth->passkey_display) {
   18938:	f8df 8064 	ldr.w	r8, [pc, #100]	; 189a0 <smp_pairing_req+0x348>
			passkey %= 1000000;
   1893c:	fbb1 f3f2 	udiv	r3, r1, r2
   18940:	fb02 1313 	mls	r3, r2, r3, r1
   18944:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   18946:	f8d8 3000 	ldr.w	r3, [r8]
   1894a:	b15b      	cbz	r3, 18964 <smp_pairing_req+0x30c>
   1894c:	681b      	ldr	r3, [r3, #0]
   1894e:	b14b      	cbz	r3, 18964 <smp_pairing_req+0x30c>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18950:	210a      	movs	r1, #10
   18952:	4628      	mov	r0, r5
   18954:	f007 f8d7 	bl	1fb06 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   18958:	f8d8 3000 	ldr.w	r3, [r8]
   1895c:	9901      	ldr	r1, [sp, #4]
   1895e:	681b      	ldr	r3, [r3, #0]
   18960:	4630      	mov	r0, r6
   18962:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   18964:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   18966:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
   1896a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1896e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   18970:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
   18974:	0a1b      	lsrs	r3, r3, #8
   18976:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
   1897a:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
   1897e:	e674      	b.n	1866a <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18980:	4628      	mov	r0, r5
   18982:	2109      	movs	r1, #9
   18984:	f007 f8bf 	bl	1fb06 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   18988:	4b05      	ldr	r3, [pc, #20]	; (189a0 <smp_pairing_req+0x348>)
   1898a:	681b      	ldr	r3, [r3, #0]
   1898c:	685b      	ldr	r3, [r3, #4]
   1898e:	4630      	mov	r0, r6
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   18990:	4798      	blx	r3
		return 0;
   18992:	e66a      	b.n	1866a <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18994:	2702      	movs	r7, #2
	return legacy_request_tk(smp);
   18996:	e668      	b.n	1866a <smp_pairing_req+0x12>
   18998:	20002f63 	.word	0x20002f63
   1899c:	000222eb 	.word	0x000222eb
   189a0:	20002904 	.word	0x20002904
   189a4:	00022304 	.word	0x00022304
   189a8:	000f4240 	.word	0x000f4240
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
   189ac:	7ab2      	ldrb	r2, [r6, #10]
   189ae:	2a04      	cmp	r2, #4
   189b0:	461f      	mov	r7, r3
   189b2:	d116      	bne.n	189e2 <smp_pairing_req+0x38a>
	     conn->required_sec_level == BT_SECURITY_L4) &&
   189b4:	2b00      	cmp	r3, #0
   189b6:	f43f af5f 	beq.w	18878 <smp_pairing_req+0x220>
	return MIN(req->max_key_size, rsp->max_key_size);
   189ba:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
   189be:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
   189c2:	4293      	cmp	r3, r2
   189c4:	bf28      	it	cs
   189c6:	4613      	movcs	r3, r2
   189c8:	2b10      	cmp	r3, #16
   189ca:	f47f ae4d 	bne.w	18668 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   189ce:	210c      	movs	r1, #12
   189d0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   189d4:	f007 f897 	bl	1fb06 <atomic_set_bit>
	return send_pairing_rsp(smp);
   189d8:	4620      	mov	r0, r4
   189da:	f007 f9ac 	bl	1fd36 <send_pairing_rsp>
   189de:	4607      	mov	r7, r0
   189e0:	e643      	b.n	1866a <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   189e2:	2b00      	cmp	r3, #0
   189e4:	d1f3      	bne.n	189ce <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   189e6:	210e      	movs	r1, #14
   189e8:	4628      	mov	r0, r5
   189ea:	f007 f962 	bl	1fcb2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   189ee:	2800      	cmp	r0, #0
   189f0:	d1ed      	bne.n	189ce <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   189f2:	4e04      	ldr	r6, [pc, #16]	; (18a04 <smp_pairing_req+0x3ac>)
   189f4:	6833      	ldr	r3, [r6, #0]
   189f6:	2b00      	cmp	r3, #0
   189f8:	d0e9      	beq.n	189ce <smp_pairing_req+0x376>
	    bt_auth && bt_auth->pairing_confirm) {
   189fa:	695b      	ldr	r3, [r3, #20]
   189fc:	2b00      	cmp	r3, #0
   189fe:	d0e6      	beq.n	189ce <smp_pairing_req+0x376>
   18a00:	e701      	b.n	18806 <smp_pairing_req+0x1ae>
   18a02:	bf00      	nop
   18a04:	20002904 	.word	0x20002904

00018a08 <smp_pairing_complete>:
{
   18a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a0c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 18aa4 <smp_pairing_complete+0x9c>
   18a10:	4604      	mov	r4, r0
   18a12:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
   18a16:	460d      	mov	r5, r1
   18a18:	b981      	cbnz	r1, 18a3c <smp_pairing_complete+0x34>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18a1a:	210c      	movs	r1, #12
   18a1c:	4638      	mov	r0, r7
   18a1e:	f007 f948 	bl	1fcb2 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   18a22:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18a26:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   18a28:	b11b      	cbz	r3, 18a32 <smp_pairing_complete+0x2a>
   18a2a:	699b      	ldr	r3, [r3, #24]
   18a2c:	b10b      	cbz	r3, 18a32 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   18a2e:	6820      	ldr	r0, [r4, #0]
   18a30:	4798      	blx	r3
	smp_reset(smp);
   18a32:	4620      	mov	r0, r4
}
   18a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   18a38:	f007 ba15 	b.w	1fe66 <smp_reset>
	switch (smp_err) {
   18a3c:	1e4b      	subs	r3, r1, #1
   18a3e:	b2db      	uxtb	r3, r3
   18a40:	2b0d      	cmp	r3, #13
   18a42:	bf9c      	itt	ls
   18a44:	4a16      	ldrls	r2, [pc, #88]	; (18aa0 <smp_pairing_complete+0x98>)
   18a46:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   18a48:	6803      	ldr	r3, [r0, #0]
   18a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
   18a4e:	bf88      	it	hi
   18a50:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
   18a52:	b153      	cbz	r3, 18a6a <smp_pairing_complete+0x62>
   18a54:	7b1b      	ldrb	r3, [r3, #12]
   18a56:	b9db      	cbnz	r3, 18a90 <smp_pairing_complete+0x88>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   18a58:	6823      	ldr	r3, [r4, #0]
   18a5a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   18a5e:	f007 fd1c 	bl	2049a <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   18a62:	6823      	ldr	r3, [r4, #0]
   18a64:	2200      	movs	r2, #0
   18a66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18a6a:	2102      	movs	r1, #2
   18a6c:	4638      	mov	r0, r7
   18a6e:	f007 f920 	bl	1fcb2 <atomic_test_bit>
   18a72:	b920      	cbnz	r0, 18a7e <smp_pairing_complete+0x76>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   18a74:	6820      	ldr	r0, [r4, #0]
   18a76:	4632      	mov	r2, r6
   18a78:	4629      	mov	r1, r5
   18a7a:	f7fd fc5b 	bl	16334 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   18a7e:	f8d8 3000 	ldr.w	r3, [r8]
   18a82:	2b00      	cmp	r3, #0
   18a84:	d0d5      	beq.n	18a32 <smp_pairing_complete+0x2a>
   18a86:	69db      	ldr	r3, [r3, #28]
   18a88:	2b00      	cmp	r3, #0
   18a8a:	d0d2      	beq.n	18a32 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   18a8c:	4631      	mov	r1, r6
   18a8e:	e7ce      	b.n	18a2e <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   18a90:	2102      	movs	r1, #2
   18a92:	4638      	mov	r0, r7
   18a94:	f007 f90d 	bl	1fcb2 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   18a98:	2800      	cmp	r0, #0
   18a9a:	d1dd      	bne.n	18a58 <smp_pairing_complete+0x50>
   18a9c:	e7e5      	b.n	18a6a <smp_pairing_complete+0x62>
   18a9e:	bf00      	nop
   18aa0:	000222dd 	.word	0x000222dd
   18aa4:	20002904 	.word	0x20002904

00018aa8 <bt_smp_dhkey_ready>:
{
   18aa8:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   18aaa:	2107      	movs	r1, #7
{
   18aac:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   18aae:	4816      	ldr	r0, [pc, #88]	; (18b08 <bt_smp_dhkey_ready+0x60>)
   18ab0:	f007 f9c1 	bl	1fe36 <atomic_test_and_clear_bit>
   18ab4:	b338      	cbz	r0, 18b06 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
   18ab6:	b92c      	cbnz	r4, 18ac4 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
   18ab8:	210b      	movs	r1, #11
}
   18aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   18abe:	4813      	ldr	r0, [pc, #76]	; (18b0c <bt_smp_dhkey_ready+0x64>)
   18ac0:	f007 b9fc 	b.w	1febc <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
   18ac4:	4621      	mov	r1, r4
   18ac6:	4812      	ldr	r0, [pc, #72]	; (18b10 <bt_smp_dhkey_ready+0x68>)
   18ac8:	2220      	movs	r2, #32
   18aca:	f005 f851 	bl	1db70 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   18ace:	480e      	ldr	r0, [pc, #56]	; (18b08 <bt_smp_dhkey_ready+0x60>)
   18ad0:	2109      	movs	r1, #9
   18ad2:	f007 f8ee 	bl	1fcb2 <atomic_test_bit>
   18ad6:	b128      	cbz	r0, 18ae4 <bt_smp_dhkey_ready+0x3c>
}
   18ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   18adc:	480a      	ldr	r0, [pc, #40]	; (18b08 <bt_smp_dhkey_ready+0x60>)
   18ade:	2108      	movs	r1, #8
   18ae0:	f007 b811 	b.w	1fb06 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   18ae4:	4808      	ldr	r0, [pc, #32]	; (18b08 <bt_smp_dhkey_ready+0x60>)
   18ae6:	210f      	movs	r1, #15
   18ae8:	f007 f8e3 	bl	1fcb2 <atomic_test_bit>
   18aec:	2800      	cmp	r0, #0
   18aee:	d1f3      	bne.n	18ad8 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   18af0:	4805      	ldr	r0, [pc, #20]	; (18b08 <bt_smp_dhkey_ready+0x60>)
   18af2:	2108      	movs	r1, #8
   18af4:	f007 f8dd 	bl	1fcb2 <atomic_test_bit>
   18af8:	b128      	cbz	r0, 18b06 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   18afa:	4804      	ldr	r0, [pc, #16]	; (18b0c <bt_smp_dhkey_ready+0x64>)
   18afc:	f7ff fbb6 	bl	1826c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   18b00:	4601      	mov	r1, r0
   18b02:	2800      	cmp	r0, #0
   18b04:	d1d9      	bne.n	18aba <bt_smp_dhkey_ready+0x12>
}
   18b06:	bd10      	pop	{r4, pc}
   18b08:	200023dc 	.word	0x200023dc
   18b0c:	20002320 	.word	0x20002320
   18b10:	2000246f 	.word	0x2000246f

00018b14 <bt_smp_recv>:
{
   18b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   18b16:	898b      	ldrh	r3, [r1, #12]
{
   18b18:	4604      	mov	r4, r0
   18b1a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18b1c:	b38b      	cbz	r3, 18b82 <bt_smp_recv+0x6e>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   18b1e:	2101      	movs	r1, #1
   18b20:	f105 0008 	add.w	r0, r5, #8
   18b24:	f007 fd45 	bl	205b2 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18b28:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   18b2a:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18b2c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   18b30:	f007 f8bf 	bl	1fcb2 <atomic_test_bit>
   18b34:	bb28      	cbnz	r0, 18b82 <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
   18b36:	7831      	ldrb	r1, [r6, #0]
   18b38:	290d      	cmp	r1, #13
   18b3a:	d803      	bhi.n	18b44 <bt_smp_recv+0x30>
   18b3c:	4f12      	ldr	r7, [pc, #72]	; (18b88 <bt_smp_recv+0x74>)
   18b3e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   18b42:	b923      	cbnz	r3, 18b4e <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   18b44:	2107      	movs	r1, #7
		smp_error(smp, err);
   18b46:	4620      	mov	r0, r4
   18b48:	f007 f9b8 	bl	1febc <smp_error>
   18b4c:	e019      	b.n	18b82 <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   18b4e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18b52:	f007 f970 	bl	1fe36 <atomic_test_and_clear_bit>
   18b56:	7833      	ldrb	r3, [r6, #0]
   18b58:	b918      	cbnz	r0, 18b62 <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   18b5a:	2b05      	cmp	r3, #5
   18b5c:	d011      	beq.n	18b82 <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18b5e:	2108      	movs	r1, #8
   18b60:	e7f1      	b.n	18b46 <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
   18b62:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   18b66:	89a9      	ldrh	r1, [r5, #12]
   18b68:	7912      	ldrb	r2, [r2, #4]
   18b6a:	4291      	cmp	r1, r2
   18b6c:	d001      	beq.n	18b72 <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   18b6e:	210a      	movs	r1, #10
   18b70:	e7e9      	b.n	18b46 <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
   18b72:	4629      	mov	r1, r5
   18b74:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   18b78:	4620      	mov	r0, r4
   18b7a:	4798      	blx	r3
	if (err) {
   18b7c:	4601      	mov	r1, r0
   18b7e:	2800      	cmp	r0, #0
   18b80:	d1e1      	bne.n	18b46 <bt_smp_recv+0x32>
}
   18b82:	2000      	movs	r0, #0
   18b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b86:	bf00      	nop
   18b88:	00021cd0 	.word	0x00021cd0

00018b8c <smp_pairing_failed>:
{
   18b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   18b8e:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   18b90:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   18b92:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   18b96:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18b98:	2109      	movs	r1, #9
   18b9a:	4628      	mov	r0, r5
   18b9c:	f007 f94b 	bl	1fe36 <atomic_test_and_clear_bit>
   18ba0:	b140      	cbz	r0, 18bb4 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   18ba2:	4b0b      	ldr	r3, [pc, #44]	; (18bd0 <smp_pairing_failed+0x44>)
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	b963      	cbnz	r3, 18bc2 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   18ba8:	4620      	mov	r0, r4
   18baa:	7831      	ldrb	r1, [r6, #0]
   18bac:	f7ff ff2c 	bl	18a08 <smp_pairing_complete>
}
   18bb0:	2000      	movs	r0, #0
   18bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   18bb4:	210a      	movs	r1, #10
   18bb6:	4628      	mov	r0, r5
   18bb8:	f007 f93d 	bl	1fe36 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18bbc:	2800      	cmp	r0, #0
   18bbe:	d1f0      	bne.n	18ba2 <smp_pairing_failed+0x16>
   18bc0:	e7f2      	b.n	18ba8 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   18bc2:	691b      	ldr	r3, [r3, #16]
   18bc4:	2b00      	cmp	r3, #0
   18bc6:	d0ef      	beq.n	18ba8 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   18bc8:	4638      	mov	r0, r7
   18bca:	4798      	blx	r3
   18bcc:	e7ec      	b.n	18ba8 <smp_pairing_failed+0x1c>
   18bce:	bf00      	nop
   18bd0:	20002904 	.word	0x20002904

00018bd4 <bt_smp_encrypt_change>:
{
   18bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
   18bd8:	4605      	mov	r5, r0
{
   18bda:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   18bdc:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   18be0:	b089      	sub	sp, #36	; 0x24
   18be2:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18be4:	2101      	movs	r1, #1
   18be6:	4628      	mov	r0, r5
   18be8:	f006 ff9b 	bl	1fb22 <atomic_clear_bit>
	if (hci_status) {
   18bec:	b946      	cbnz	r6, 18c00 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
   18bee:	7afb      	ldrb	r3, [r7, #11]
   18bf0:	b133      	cbz	r3, 18c00 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18bf2:	2103      	movs	r1, #3
   18bf4:	f007 f85d 	bl	1fcb2 <atomic_test_bit>
   18bf8:	b928      	cbnz	r0, 18c06 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
   18bfa:	4620      	mov	r0, r4
   18bfc:	f007 f933 	bl	1fe66 <smp_reset>
}
   18c00:	b009      	add	sp, #36	; 0x24
   18c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c06:	2105      	movs	r1, #5
   18c08:	4628      	mov	r0, r5
   18c0a:	f007 f852 	bl	1fcb2 <atomic_test_bit>
   18c0e:	b198      	cbz	r0, 18c38 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   18c10:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   18c14:	071f      	lsls	r7, r3, #28
   18c16:	d507      	bpl.n	18c28 <bt_smp_encrypt_change+0x54>
   18c18:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   18c1c:	071e      	lsls	r6, r3, #28
   18c1e:	d503      	bpl.n	18c28 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   18c20:	2110      	movs	r1, #16
   18c22:	4628      	mov	r0, r5
   18c24:	f006 ff6f 	bl	1fb06 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   18c28:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
   18c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   18c30:	f023 0308 	bic.w	r3, r3, #8
   18c34:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   18c38:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   18c3c:	07d8      	lsls	r0, r3, #31
   18c3e:	d57a      	bpl.n	18d36 <bt_smp_encrypt_change+0x162>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   18c40:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18c42:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18c46:	f006 ff5e 	bl	1fb06 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   18c4a:	2102      	movs	r1, #2
   18c4c:	4628      	mov	r0, r5
   18c4e:	f006 ff5a 	bl	1fb06 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   18c52:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   18c54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   18c58:	2b00      	cmp	r3, #0
   18c5a:	d0d1      	beq.n	18c00 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c5c:	2105      	movs	r1, #5
   18c5e:	f007 f828 	bl	1fcb2 <atomic_test_bit>
   18c62:	4680      	mov	r8, r0
   18c64:	2800      	cmp	r0, #0
   18c66:	d15d      	bne.n	18d24 <bt_smp_encrypt_change+0x150>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   18c68:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   18c6c:	07db      	lsls	r3, r3, #31
   18c6e:	d559      	bpl.n	18d24 <bt_smp_encrypt_change+0x150>
	struct bt_keys *keys = conn->le.keys;
   18c70:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
   18c72:	211a      	movs	r1, #26
   18c74:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   18c76:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
   18c7a:	f001 fd89 	bl	1a790 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   18c7e:	2106      	movs	r1, #6
   18c80:	4620      	mov	r0, r4
   18c82:	f007 f81f 	bl	1fcc4 <smp_create_pdu.isra.0>
		if (!buf) {
   18c86:	4607      	mov	r7, r0
   18c88:	2800      	cmp	r0, #0
   18c8a:	d04b      	beq.n	18d24 <bt_smp_encrypt_change+0x150>
		info = net_buf_add(buf, sizeof(*info));
   18c8c:	2110      	movs	r1, #16
   18c8e:	3008      	adds	r0, #8
   18c90:	f007 fc68 	bl	20564 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   18c94:	7b32      	ldrb	r2, [r6, #12]
   18c96:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
   18c98:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   18c9a:	f004 ff69 	bl	1db70 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   18c9e:	7b30      	ldrb	r0, [r6, #12]
   18ca0:	280f      	cmp	r0, #15
   18ca2:	d805      	bhi.n	18cb0 <bt_smp_encrypt_change+0xdc>
			(void)memset(info->ltk + keys->enc_size, 0,
   18ca4:	f1c0 0210 	rsb	r2, r0, #16
   18ca8:	4641      	mov	r1, r8
   18caa:	4448      	add	r0, r9
   18cac:	f004 ff8b 	bl	1dbc6 <memset>
		smp_send(smp, buf, NULL, NULL);
   18cb0:	4639      	mov	r1, r7
   18cb2:	2200      	movs	r2, #0
   18cb4:	4620      	mov	r0, r4
   18cb6:	f7ff fac1 	bl	1823c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   18cba:	2107      	movs	r1, #7
   18cbc:	4620      	mov	r0, r4
   18cbe:	f007 f801 	bl	1fcc4 <smp_create_pdu.isra.0>
		if (!buf) {
   18cc2:	4607      	mov	r7, r0
   18cc4:	b370      	cbz	r0, 18d24 <bt_smp_encrypt_change+0x150>
		ident = net_buf_add(buf, sizeof(*ident));
   18cc6:	210a      	movs	r1, #10
   18cc8:	3008      	adds	r0, #8
   18cca:	f007 fc4b 	bl	20564 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   18cce:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
   18cd0:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   18cd2:	a905      	add	r1, sp, #20
   18cd4:	3002      	adds	r0, #2
   18cd6:	f004 ff4b 	bl	1db70 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   18cda:	2202      	movs	r2, #2
   18cdc:	a907      	add	r1, sp, #28
   18cde:	4640      	mov	r0, r8
   18ce0:	f004 ff46 	bl	1db70 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   18ce4:	4639      	mov	r1, r7
   18ce6:	4620      	mov	r0, r4
   18ce8:	4a17      	ldr	r2, [pc, #92]	; (18d48 <bt_smp_encrypt_change+0x174>)
   18cea:	f7ff faa7 	bl	1823c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18cee:	210c      	movs	r1, #12
   18cf0:	4628      	mov	r0, r5
   18cf2:	f006 ffde 	bl	1fcb2 <atomic_test_bit>
   18cf6:	b1a8      	cbz	r0, 18d24 <bt_smp_encrypt_change+0x150>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   18cf8:	2101      	movs	r1, #1
   18cfa:	4630      	mov	r0, r6
   18cfc:	f007 fbc9 	bl	20492 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   18d00:	2210      	movs	r2, #16
   18d02:	a901      	add	r1, sp, #4
   18d04:	f106 004a 	add.w	r0, r6, #74	; 0x4a
   18d08:	f004 ff32 	bl	1db70 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   18d0c:	2208      	movs	r2, #8
   18d0e:	a905      	add	r1, sp, #20
   18d10:	f106 0040 	add.w	r0, r6, #64	; 0x40
   18d14:	f004 ff2c 	bl	1db70 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   18d18:	2202      	movs	r2, #2
   18d1a:	a907      	add	r1, sp, #28
   18d1c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   18d20:	f004 ff26 	bl	1db70 <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
   18d24:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   18d28:	2900      	cmp	r1, #0
   18d2a:	f47f af69 	bne.w	18c00 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
   18d2e:	4620      	mov	r0, r4
   18d30:	f7ff fe6a 	bl	18a08 <smp_pairing_complete>
   18d34:	e764      	b.n	18c00 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   18d36:	0799      	lsls	r1, r3, #30
   18d38:	d501      	bpl.n	18d3e <bt_smp_encrypt_change+0x16a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18d3a:	2108      	movs	r1, #8
   18d3c:	e781      	b.n	18c42 <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18d3e:	075a      	lsls	r2, r3, #29
   18d40:	d583      	bpl.n	18c4a <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18d42:	210a      	movs	r1, #10
   18d44:	e77d      	b.n	18c42 <bt_smp_encrypt_change+0x6e>
   18d46:	bf00      	nop
   18d48:	0001ff8b 	.word	0x0001ff8b

00018d4c <bt_smp_connected>:
{
   18d4c:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
   18d4e:	4905      	ldr	r1, [pc, #20]	; (18d64 <bt_smp_connected+0x18>)
{
   18d50:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
   18d52:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   18d56:	f008 f8d0 	bl	20efa <k_delayed_work_init>
	smp_reset(smp);
   18d5a:	4620      	mov	r0, r4
}
   18d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   18d60:	f007 b881 	b.w	1fe66 <smp_reset>
   18d64:	0001fef9 	.word	0x0001fef9

00018d68 <smp_pairing_random>:
{
   18d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d6c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18d6e:	f100 07ef 	add.w	r7, r0, #239	; 0xef
   18d72:	6889      	ldr	r1, [r1, #8]
{
   18d74:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18d76:	2210      	movs	r2, #16
   18d78:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18d7a:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18d7e:	f004 fef7 	bl	1db70 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18d82:	2105      	movs	r1, #5
   18d84:	4630      	mov	r0, r6
   18d86:	f006 ff94 	bl	1fcb2 <atomic_test_bit>
   18d8a:	2800      	cmp	r0, #0
   18d8c:	d13d      	bne.n	18e0a <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
   18d8e:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d90:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
   18d92:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d96:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18d98:	f103 0296 	add.w	r2, r3, #150	; 0x96
   18d9c:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d9e:	9201      	str	r2, [sp, #4]
   18da0:	9300      	str	r3, [sp, #0]
   18da2:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
   18da6:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
   18daa:	4639      	mov	r1, r7
   18dac:	4640      	mov	r0, r8
   18dae:	f007 f901 	bl	1ffb4 <smp_c1>
	if (err) {
   18db2:	b108      	cbz	r0, 18db8 <smp_pairing_random+0x50>
	switch (smp->method) {
   18db4:	2508      	movs	r5, #8
   18db6:	e096      	b.n	18ee6 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   18db8:	2210      	movs	r2, #16
   18dba:	4629      	mov	r1, r5
   18dbc:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   18dc0:	f004 fec6 	bl	1db50 <memcmp>
   18dc4:	2800      	cmp	r0, #0
   18dc6:	f040 808d 	bne.w	18ee4 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   18dca:	2208      	movs	r2, #8
   18dcc:	4639      	mov	r1, r7
   18dce:	4628      	mov	r0, r5
   18dd0:	f004 fece 	bl	1db70 <memcpy>
	memcpy(out + 8, r1, 8);
   18dd4:	2208      	movs	r2, #8
   18dd6:	f104 01df 	add.w	r1, r4, #223	; 0xdf
   18dda:	a80c      	add	r0, sp, #48	; 0x30
   18ddc:	f004 fec8 	bl	1db70 <memcpy>
	return bt_encrypt_le(k, out, out);
   18de0:	462a      	mov	r2, r5
   18de2:	4629      	mov	r1, r5
   18de4:	4640      	mov	r0, r8
   18de6:	f007 fd2b 	bl	20840 <bt_encrypt_le>
		if (err) {
   18dea:	2800      	cmp	r0, #0
   18dec:	d1e2      	bne.n	18db4 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   18dee:	4629      	mov	r1, r5
   18df0:	2210      	movs	r2, #16
   18df2:	4640      	mov	r0, r8
   18df4:	f004 febc 	bl	1db70 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18df8:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18dfa:	4630      	mov	r0, r6
   18dfc:	f006 fe83 	bl	1fb06 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   18e00:	4620      	mov	r0, r4
   18e02:	f006 ff7f 	bl	1fd04 <smp_send_pairing_random>
   18e06:	4605      	mov	r5, r0
   18e08:	e06d      	b.n	18ee6 <smp_pairing_random+0x17e>
	switch (smp->method) {
   18e0a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   18e0e:	2b05      	cmp	r3, #5
   18e10:	d8d0      	bhi.n	18db4 <smp_pairing_random+0x4c>
   18e12:	a201      	add	r2, pc, #4	; (adr r2, 18e18 <smp_pairing_random+0xb0>)
   18e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18e18:	00018e9f 	.word	0x00018e9f
   18e1c:	00018ead 	.word	0x00018ead
   18e20:	00018ead 	.word	0x00018ead
   18e24:	00018e31 	.word	0x00018e31
   18e28:	00018db5 	.word	0x00018db5
   18e2c:	00018f39 	.word	0x00018f39
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   18e30:	4b5a      	ldr	r3, [pc, #360]	; (18f9c <smp_pairing_random+0x234>)
   18e32:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   18e34:	2220      	movs	r2, #32
   18e36:	f204 110f 	addw	r1, r4, #271	; 0x10f
   18e3a:	a80a      	add	r0, sp, #40	; 0x28
   18e3c:	f006 fe4f 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18e40:	2220      	movs	r2, #32
   18e42:	4629      	mov	r1, r5
   18e44:	a812      	add	r0, sp, #72	; 0x48
   18e46:	f006 fe4a 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18e4a:	2210      	movs	r2, #16
   18e4c:	f104 01df 	add.w	r1, r4, #223	; 0xdf
   18e50:	a81a      	add	r0, sp, #104	; 0x68
   18e52:	f006 fe44 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   18e56:	2210      	movs	r2, #16
   18e58:	4639      	mov	r1, r7
   18e5a:	a806      	add	r0, sp, #24
   18e5c:	f006 fe3f 	bl	1fade <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   18e60:	ab06      	add	r3, sp, #24
   18e62:	2250      	movs	r2, #80	; 0x50
   18e64:	a90a      	add	r1, sp, #40	; 0x28
   18e66:	4618      	mov	r0, r3
   18e68:	f006 fe6a 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   18e6c:	2800      	cmp	r0, #0
   18e6e:	d1a1      	bne.n	18db4 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
   18e70:	2204      	movs	r2, #4
   18e72:	a909      	add	r1, sp, #36	; 0x24
   18e74:	a805      	add	r0, sp, #20
   18e76:	f004 fe7b 	bl	1db70 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18e7a:	9b05      	ldr	r3, [sp, #20]
   18e7c:	4948      	ldr	r1, [pc, #288]	; (18fa0 <smp_pairing_random+0x238>)
   18e7e:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e80:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18e82:	fbb3 f2f1 	udiv	r2, r3, r1
   18e86:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e8a:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18e8c:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e8e:	f006 fe3a 	bl	1fb06 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   18e92:	4b44      	ldr	r3, [pc, #272]	; (18fa4 <smp_pairing_random+0x23c>)
   18e94:	9905      	ldr	r1, [sp, #20]
   18e96:	681b      	ldr	r3, [r3, #0]
   18e98:	6820      	ldr	r0, [r4, #0]
   18e9a:	689b      	ldr	r3, [r3, #8]
   18e9c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18e9e:	210d      	movs	r1, #13
   18ea0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   18ea4:	f006 fe2f 	bl	1fb06 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18ea8:	210f      	movs	r1, #15
   18eaa:	e7a6      	b.n	18dfa <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18eac:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   18eb0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18eb4:	4939      	ldr	r1, [pc, #228]	; (18f9c <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18eb6:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18eb8:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18eba:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18ebe:	9500      	str	r5, [sp, #0]
   18ec0:	6809      	ldr	r1, [r1, #0]
   18ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18ec6:	463a      	mov	r2, r7
   18ec8:	f204 100f 	addw	r0, r4, #271	; 0x10f
   18ecc:	f006 feca 	bl	1fc64 <smp_f4>
   18ed0:	2800      	cmp	r0, #0
   18ed2:	f47f af6f 	bne.w	18db4 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   18ed6:	2210      	movs	r2, #16
   18ed8:	4629      	mov	r1, r5
   18eda:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   18ede:	f004 fe37 	bl	1db50 <memcmp>
   18ee2:	b120      	cbz	r0, 18eee <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   18ee4:	2504      	movs	r5, #4
}
   18ee6:	4628      	mov	r0, r5
   18ee8:	b01e      	add	sp, #120	; 0x78
   18eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
   18eee:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   18ef2:	2103      	movs	r1, #3
   18ef4:	4638      	mov	r0, r7
   18ef6:	f006 fe06 	bl	1fb06 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   18efa:	4620      	mov	r0, r4
   18efc:	f006 ff02 	bl	1fd04 <smp_send_pairing_random>
		if (err) {
   18f00:	4605      	mov	r5, r0
   18f02:	2800      	cmp	r0, #0
   18f04:	d1ef      	bne.n	18ee6 <smp_pairing_random+0x17e>
		smp->passkey_round++;
   18f06:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   18f0a:	3301      	adds	r3, #1
   18f0c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   18f0e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   18f10:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
   18f14:	d108      	bne.n	18f28 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18f16:	4638      	mov	r0, r7
   18f18:	210d      	movs	r1, #13
   18f1a:	f006 fdf4 	bl	1fb06 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18f1e:	210f      	movs	r1, #15
   18f20:	4630      	mov	r0, r6
   18f22:	f006 fdf0 	bl	1fb06 <atomic_set_bit>
			return 0;
   18f26:	e7de      	b.n	18ee6 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   18f28:	2110      	movs	r1, #16
   18f2a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   18f2e:	f001 fc2f 	bl	1a790 <bt_rand>
   18f32:	2800      	cmp	r0, #0
   18f34:	d0d7      	beq.n	18ee6 <smp_pairing_random+0x17e>
   18f36:	e73d      	b.n	18db4 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
   18f38:	2110      	movs	r1, #16
   18f3a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
   18f3e:	f001 fc27 	bl	1a790 <bt_rand>
   18f42:	2800      	cmp	r0, #0
   18f44:	f47f af36 	bne.w	18db4 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
   18f48:	4f16      	ldr	r7, [pc, #88]	; (18fa4 <smp_pairing_random+0x23c>)
   18f4a:	683b      	ldr	r3, [r7, #0]
   18f4c:	b193      	cbz	r3, 18f74 <smp_pairing_random+0x20c>
   18f4e:	68db      	ldr	r3, [r3, #12]
   18f50:	b183      	cbz	r3, 18f74 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
   18f52:	4b15      	ldr	r3, [pc, #84]	; (18fa8 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18f54:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
   18f58:	881b      	ldrh	r3, [r3, #0]
   18f5a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18f5e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18f62:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18f64:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18f68:	d406      	bmi.n	18f78 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
   18f6a:	2b00      	cmp	r3, #0
   18f6c:	bf0c      	ite	eq
   18f6e:	2003      	moveq	r0, #3
   18f70:	2001      	movne	r0, #1
   18f72:	e004      	b.n	18f7e <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18f74:	2502      	movs	r5, #2
   18f76:	e7b6      	b.n	18ee6 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   18f78:	2b00      	cmp	r3, #0
   18f7a:	bf18      	it	ne
   18f7c:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   18f7e:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   18f80:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   18f84:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18f88:	4630      	mov	r0, r6
   18f8a:	210b      	movs	r1, #11
   18f8c:	f006 fdbb 	bl	1fb06 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   18f90:	683b      	ldr	r3, [r7, #0]
   18f92:	6820      	ldr	r0, [r4, #0]
   18f94:	68db      	ldr	r3, [r3, #12]
   18f96:	a90a      	add	r1, sp, #40	; 0x28
   18f98:	4798      	blx	r3
			return 0;
   18f9a:	e7a4      	b.n	18ee6 <smp_pairing_random+0x17e>
   18f9c:	20002998 	.word	0x20002998
   18fa0:	000f4240 	.word	0x000f4240
   18fa4:	20002904 	.word	0x20002904
   18fa8:	000215da 	.word	0x000215da

00018fac <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   18fac:	4b0f      	ldr	r3, [pc, #60]	; (18fec <bt_smp_pkey_ready+0x40>)
{
   18fae:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   18fb0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   18fb2:	b1d0      	cbz	r0, 18fea <bt_smp_pkey_ready+0x3e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18fb4:	4c0e      	ldr	r4, [pc, #56]	; (18ff0 <bt_smp_pkey_ready+0x44>)
	z_impl_k_sem_give(sem);
   18fb6:	480f      	ldr	r0, [pc, #60]	; (18ff4 <bt_smp_pkey_ready+0x48>)
   18fb8:	f002 fb96 	bl	1b6e8 <z_impl_k_sem_give>
   18fbc:	f3bf 8f5b 	dmb	ish
   18fc0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   18fc4:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   18fc8:	065b      	lsls	r3, r3, #25
   18fca:	d50e      	bpl.n	18fea <bt_smp_pkey_ready+0x3e>
	err = sc_send_public_key(smp);
   18fcc:	4620      	mov	r0, r4
   18fce:	f7ff fa31 	bl	18434 <sc_send_public_key>
	if (err) {
   18fd2:	4601      	mov	r1, r0
   18fd4:	b920      	cbnz	r0, 18fe0 <bt_smp_pkey_ready+0x34>
   18fd6:	4620      	mov	r0, r4
   18fd8:	f7ff fa8e 	bl	184f8 <smp_public_key_slave.part.0>
		if (err) {
   18fdc:	4601      	mov	r1, r0
   18fde:	b120      	cbz	r0, 18fea <bt_smp_pkey_ready+0x3e>
}
   18fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   18fe4:	4802      	ldr	r0, [pc, #8]	; (18ff0 <bt_smp_pkey_ready+0x44>)
   18fe6:	f006 bf69 	b.w	1febc <smp_error>
}
   18fea:	bd10      	pop	{r4, pc}
   18fec:	20002998 	.word	0x20002998
   18ff0:	20002320 	.word	0x20002320
   18ff4:	200009a4 	.word	0x200009a4

00018ff8 <bt_smp_start_security>:
{
   18ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   18ffc:	78c4      	ldrb	r4, [r0, #3]
   18ffe:	2c01      	cmp	r4, #1
{
   19000:	4605      	mov	r5, r0
	switch (conn->role) {
   19002:	d005      	beq.n	19010 <bt_smp_start_security+0x18>
		return -EINVAL;
   19004:	f06f 0415 	mvn.w	r4, #21
}
   19008:	4620      	mov	r0, r4
   1900a:	b003      	add	sp, #12
   1900c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   19010:	f006 fd71 	bl	1faf6 <smp_chan_get>
	if (!smp) {
   19014:	4606      	mov	r6, r0
   19016:	2800      	cmp	r0, #0
   19018:	f000 80a1 	beq.w	1915e <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1901c:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
   19020:	2104      	movs	r1, #4
   19022:	4638      	mov	r0, r7
   19024:	f006 fe45 	bl	1fcb2 <atomic_test_bit>
   19028:	2800      	cmp	r0, #0
   1902a:	f040 809b 	bne.w	19164 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1902e:	2103      	movs	r1, #3
   19030:	4638      	mov	r0, r7
   19032:	f006 fe3e 	bl	1fcb2 <atomic_test_bit>
   19036:	b110      	cbz	r0, 1903e <bt_smp_start_security+0x46>
		return -EBUSY;
   19038:	f06f 040f 	mvn.w	r4, #15
   1903c:	e7e4      	b.n	19008 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1903e:	4621      	mov	r1, r4
   19040:	4638      	mov	r0, r7
   19042:	f006 fe36 	bl	1fcb2 <atomic_test_bit>
   19046:	2800      	cmp	r0, #0
   19048:	d1f6      	bne.n	19038 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1904a:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1904c:	2b03      	cmp	r3, #3
   1904e:	d03d      	beq.n	190cc <bt_smp_start_security+0xd4>
   19050:	d82c      	bhi.n	190ac <bt_smp_start_security+0xb4>
   19052:	3b01      	subs	r3, #1
   19054:	2b01      	cmp	r3, #1
   19056:	d947      	bls.n	190e8 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   19058:	210b      	movs	r1, #11
   1905a:	1d28      	adds	r0, r5, #4
   1905c:	f006 fe29 	bl	1fcb2 <atomic_test_bit>
   19060:	2800      	cmp	r0, #0
   19062:	d1cf      	bne.n	19004 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   19064:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19068:	b983      	cbnz	r3, 1908c <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
   1906a:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1906e:	7a29      	ldrb	r1, [r5, #8]
   19070:	4622      	mov	r2, r4
   19072:	2020      	movs	r0, #32
   19074:	f000 f8ca 	bl	1920c <bt_keys_find>
   19078:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1907c:	b930      	cbnz	r0, 1908c <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1907e:	7a29      	ldrb	r1, [r5, #8]
   19080:	4622      	mov	r2, r4
   19082:	2004      	movs	r0, #4
   19084:	f000 f8c2 	bl	1920c <bt_keys_find>
   19088:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1908c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19090:	2b00      	cmp	r3, #0
   19092:	d0b7      	beq.n	19004 <bt_smp_start_security+0xc>
   19094:	89da      	ldrh	r2, [r3, #14]
   19096:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1909a:	2a00      	cmp	r2, #0
   1909c:	d0b2      	beq.n	19004 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1909e:	7aaa      	ldrb	r2, [r5, #10]
   190a0:	2a02      	cmp	r2, #2
   190a2:	d921      	bls.n	190e8 <bt_smp_start_security+0xf0>
   190a4:	7b5b      	ldrb	r3, [r3, #13]
   190a6:	07db      	lsls	r3, r3, #31
   190a8:	d5ac      	bpl.n	19004 <bt_smp_start_security+0xc>
   190aa:	e01d      	b.n	190e8 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
   190ac:	2b04      	cmp	r3, #4
   190ae:	d1d3      	bne.n	19058 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   190b0:	f7ff f854 	bl	1815c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   190b4:	2803      	cmp	r0, #3
   190b6:	d104      	bne.n	190c2 <bt_smp_start_security+0xca>
   190b8:	4b2c      	ldr	r3, [pc, #176]	; (1916c <bt_smp_start_security+0x174>)
   190ba:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   190bc:	b1fb      	cbz	r3, 190fe <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   190be:	68dc      	ldr	r4, [r3, #12]
   190c0:	b10c      	cbz	r4, 190c6 <bt_smp_start_security+0xce>
   190c2:	4b2b      	ldr	r3, [pc, #172]	; (19170 <bt_smp_start_security+0x178>)
   190c4:	781c      	ldrb	r4, [r3, #0]
   190c6:	f004 0401 	and.w	r4, r4, #1
   190ca:	e00b      	b.n	190e4 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   190cc:	f7ff f846 	bl	1815c <get_io_capa>
   190d0:	2803      	cmp	r0, #3
   190d2:	d107      	bne.n	190e4 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
   190d4:	4b25      	ldr	r3, [pc, #148]	; (1916c <bt_smp_start_security+0x174>)
   190d6:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   190d8:	2c00      	cmp	r4, #0
   190da:	d0bd      	beq.n	19058 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   190dc:	68e4      	ldr	r4, [r4, #12]
   190de:	3c00      	subs	r4, #0
   190e0:	bf18      	it	ne
   190e2:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   190e4:	2c00      	cmp	r4, #0
   190e6:	d0b7      	beq.n	19058 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   190e8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   190ec:	b14b      	cbz	r3, 19102 <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
   190ee:	4630      	mov	r0, r6
   190f0:	f7ff f886 	bl	18200 <smp_init>
   190f4:	4604      	mov	r4, r0
   190f6:	b180      	cbz	r0, 1911a <bt_smp_start_security+0x122>
		return -ENOBUFS;
   190f8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   190fc:	e784      	b.n	19008 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   190fe:	2400      	movs	r4, #0
   19100:	e7e1      	b.n	190c6 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19102:	7a28      	ldrb	r0, [r5, #8]
   19104:	f105 0188 	add.w	r1, r5, #136	; 0x88
   19108:	f000 f84a 	bl	191a0 <bt_keys_get_addr>
   1910c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   19110:	2800      	cmp	r0, #0
   19112:	d1ec      	bne.n	190ee <bt_smp_start_security+0xf6>
			return -ENOMEM;
   19114:	f06f 040b 	mvn.w	r4, #11
   19118:	e776      	b.n	19008 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1911a:	210b      	movs	r1, #11
   1911c:	4630      	mov	r0, r6
   1911e:	f006 fdd1 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!req_buf) {
   19122:	4680      	mov	r8, r0
   19124:	2800      	cmp	r0, #0
   19126:	d0e7      	beq.n	190f8 <bt_smp_start_security+0x100>
	req = net_buf_add(req_buf, sizeof(*req));
   19128:	2101      	movs	r1, #1
   1912a:	3008      	adds	r0, #8
   1912c:	f007 fa1a 	bl	20564 <net_buf_simple_add>
   19130:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   19132:	2009      	movs	r0, #9
   19134:	f7ff f846 	bl	181c4 <get_auth.isra.0>
   19138:	4623      	mov	r3, r4
   1913a:	f889 0000 	strb.w	r0, [r9]
   1913e:	4642      	mov	r2, r8
   19140:	9400      	str	r4, [sp, #0]
   19142:	2106      	movs	r1, #6
   19144:	4628      	mov	r0, r5
   19146:	f005 fc0f 	bl	1e968 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1914a:	4638      	mov	r0, r7
   1914c:	210e      	movs	r1, #14
   1914e:	f006 fcda 	bl	1fb06 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   19152:	2101      	movs	r1, #1
   19154:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   19158:	f006 fcd5 	bl	1fb06 <atomic_set_bit>
	return 0;
   1915c:	e754      	b.n	19008 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1915e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   19162:	e751      	b.n	19008 <bt_smp_start_security+0x10>
		return -EIO;
   19164:	f06f 0404 	mvn.w	r4, #4
   19168:	e74e      	b.n	19008 <bt_smp_start_security+0x10>
   1916a:	bf00      	nop
   1916c:	20002904 	.word	0x20002904
   19170:	20002f64 	.word	0x20002f64

00019174 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   19174:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19176:	4b07      	ldr	r3, [pc, #28]	; (19194 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   19178:	4807      	ldr	r0, [pc, #28]	; (19198 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1917a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1917e:	f003 0306 	and.w	r3, r3, #6
   19182:	1f9a      	subs	r2, r3, #6
   19184:	4253      	negs	r3, r2
   19186:	4153      	adcs	r3, r2
   19188:	4a04      	ldr	r2, [pc, #16]	; (1919c <bt_smp_init+0x28>)
   1918a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1918c:	f7fc ff3a 	bl	16004 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   19190:	2000      	movs	r0, #0
   19192:	bd08      	pop	{r3, pc}
   19194:	200003c8 	.word	0x200003c8
   19198:	2000079c 	.word	0x2000079c
   1919c:	20002f64 	.word	0x20002f64

000191a0 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   191a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   191a2:	4c11      	ldr	r4, [pc, #68]	; (191e8 <bt_keys_get_addr+0x48>)
   191a4:	7823      	ldrb	r3, [r4, #0]
   191a6:	4283      	cmp	r3, r0
{
   191a8:	4605      	mov	r5, r0
   191aa:	460e      	mov	r6, r1
   191ac:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   191ae:	d00b      	beq.n	191c8 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   191b0:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   191b2:	480e      	ldr	r0, [pc, #56]	; (191ec <bt_keys_get_addr+0x4c>)
   191b4:	9400      	str	r4, [sp, #0]
   191b6:	2207      	movs	r2, #7
   191b8:	4669      	mov	r1, sp
   191ba:	f8cd 4003 	str.w	r4, [sp, #3]
   191be:	f004 fcc7 	bl	1db50 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   191c2:	b140      	cbz	r0, 191d6 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   191c4:	4620      	mov	r0, r4
   191c6:	e00d      	b.n	191e4 <bt_keys_get_addr+0x44>
   191c8:	2207      	movs	r2, #7
   191ca:	1c60      	adds	r0, r4, #1
   191cc:	f004 fcc0 	bl	1db50 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   191d0:	2800      	cmp	r0, #0
   191d2:	d1ed      	bne.n	191b0 <bt_keys_get_addr+0x10>
   191d4:	e7f6      	b.n	191c4 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   191d6:	4805      	ldr	r0, [pc, #20]	; (191ec <bt_keys_get_addr+0x4c>)
		keys->id = id;
   191d8:	703d      	strb	r5, [r7, #0]
   191da:	2207      	movs	r2, #7
   191dc:	4631      	mov	r1, r6
   191de:	f004 fcc7 	bl	1db70 <memcpy>
		return keys;
   191e2:	4801      	ldr	r0, [pc, #4]	; (191e8 <bt_keys_get_addr+0x48>)
}
   191e4:	b003      	add	sp, #12
   191e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191e8:	2000299c 	.word	0x2000299c
   191ec:	2000299d 	.word	0x2000299d

000191f0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   191f0:	460b      	mov	r3, r1
   191f2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   191f4:	4a04      	ldr	r2, [pc, #16]	; (19208 <bt_keys_foreach+0x18>)
{
   191f6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   191f8:	89d4      	ldrh	r4, [r2, #14]
   191fa:	4204      	tst	r4, r0
   191fc:	d002      	beq.n	19204 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   191fe:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   19200:	4610      	mov	r0, r2
   19202:	4718      	bx	r3
}
   19204:	bc10      	pop	{r4}
   19206:	4770      	bx	lr
   19208:	2000299c 	.word	0x2000299c

0001920c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   1920c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1920e:	4c09      	ldr	r4, [pc, #36]	; (19234 <bt_keys_find+0x28>)
{
   19210:	460b      	mov	r3, r1
   19212:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19214:	89e2      	ldrh	r2, [r4, #14]
   19216:	4202      	tst	r2, r0
   19218:	d007      	beq.n	1922a <bt_keys_find+0x1e>
   1921a:	7822      	ldrb	r2, [r4, #0]
   1921c:	429a      	cmp	r2, r3
   1921e:	d104      	bne.n	1922a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   19220:	2207      	movs	r2, #7
   19222:	1c60      	adds	r0, r4, #1
   19224:	f004 fc94 	bl	1db50 <memcmp>
   19228:	b108      	cbz	r0, 1922e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1922a:	2000      	movs	r0, #0
}
   1922c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1922e:	4620      	mov	r0, r4
   19230:	e7fc      	b.n	1922c <bt_keys_find+0x20>
   19232:	bf00      	nop
   19234:	2000299c 	.word	0x2000299c

00019238 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   19238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1923a:	780b      	ldrb	r3, [r1, #0]
   1923c:	2b01      	cmp	r3, #1
   1923e:	4607      	mov	r7, r0
   19240:	460c      	mov	r4, r1
   19242:	d001      	beq.n	19248 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   19244:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   19246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   19248:	798b      	ldrb	r3, [r1, #6]
   1924a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1924e:	2b40      	cmp	r3, #64	; 0x40
   19250:	d1f8      	bne.n	19244 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19252:	4d13      	ldr	r5, [pc, #76]	; (192a0 <bt_keys_find_irk+0x68>)
   19254:	89eb      	ldrh	r3, [r5, #14]
   19256:	f013 0f02 	tst.w	r3, #2
   1925a:	462e      	mov	r6, r5
   1925c:	d0f2      	beq.n	19244 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1925e:	7833      	ldrb	r3, [r6, #0]
   19260:	42bb      	cmp	r3, r7
   19262:	d10b      	bne.n	1927c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   19264:	2206      	movs	r2, #6
   19266:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1926a:	1c60      	adds	r0, r4, #1
   1926c:	f004 fc70 	bl	1db50 <memcmp>
   19270:	b908      	cbnz	r0, 19276 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   19272:	4628      	mov	r0, r5
   19274:	e7e7      	b.n	19246 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19276:	89f3      	ldrh	r3, [r6, #14]
   19278:	079b      	lsls	r3, r3, #30
   1927a:	d5e3      	bpl.n	19244 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1927c:	7833      	ldrb	r3, [r6, #0]
   1927e:	42bb      	cmp	r3, r7
   19280:	d1e0      	bne.n	19244 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   19282:	3401      	adds	r4, #1
   19284:	4807      	ldr	r0, [pc, #28]	; (192a4 <bt_keys_find_irk+0x6c>)
   19286:	4621      	mov	r1, r4
   19288:	f004 fce4 	bl	1dc54 <bt_rpa_irk_matches>
   1928c:	2800      	cmp	r0, #0
   1928e:	d0d9      	beq.n	19244 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   19290:	4805      	ldr	r0, [pc, #20]	; (192a8 <bt_keys_find_irk+0x70>)
   19292:	2206      	movs	r2, #6
   19294:	4621      	mov	r1, r4
   19296:	f004 fc6b 	bl	1db70 <memcpy>
			return &key_pool[i];
   1929a:	4801      	ldr	r0, [pc, #4]	; (192a0 <bt_keys_find_irk+0x68>)
}
   1929c:	e7d3      	b.n	19246 <bt_keys_find_irk+0xe>
   1929e:	bf00      	nop
   192a0:	2000299c 	.word	0x2000299c
   192a4:	200029c6 	.word	0x200029c6
   192a8:	200029d6 	.word	0x200029d6

000192ac <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   192ac:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   192ae:	4c06      	ldr	r4, [pc, #24]	; (192c8 <bt_keys_find_addr+0x1c>)
   192b0:	7823      	ldrb	r3, [r4, #0]
   192b2:	4283      	cmp	r3, r0
   192b4:	d104      	bne.n	192c0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   192b6:	2207      	movs	r2, #7
   192b8:	1c60      	adds	r0, r4, #1
   192ba:	f004 fc49 	bl	1db50 <memcmp>
   192be:	b108      	cbz	r0, 192c4 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   192c0:	2000      	movs	r0, #0
}
   192c2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   192c4:	4620      	mov	r0, r4
   192c6:	e7fc      	b.n	192c2 <bt_keys_find_addr+0x16>
   192c8:	2000299c 	.word	0x2000299c

000192cc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   192cc:	4b02      	ldr	r3, [pc, #8]	; (192d8 <net_buf_pool_get+0xc>)
   192ce:	2228      	movs	r2, #40	; 0x28
   192d0:	fb02 3000 	mla	r0, r2, r0, r3
   192d4:	4770      	bx	lr
   192d6:	bf00      	nop
   192d8:	20000a04 	.word	0x20000a04

000192dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   192dc:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   192de:	4a05      	ldr	r2, [pc, #20]	; (192f4 <net_buf_id+0x18>)
   192e0:	2128      	movs	r1, #40	; 0x28
   192e2:	fb01 2303 	mla	r3, r1, r3, r2
   192e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   192e8:	1ac0      	subs	r0, r0, r3
}
   192ea:	4b03      	ldr	r3, [pc, #12]	; (192f8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   192ec:	10c0      	asrs	r0, r0, #3
}
   192ee:	4358      	muls	r0, r3
   192f0:	4770      	bx	lr
   192f2:	bf00      	nop
   192f4:	20000a04 	.word	0x20000a04
   192f8:	aaaaaaab 	.word	0xaaaaaaab

000192fc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   192fc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   192fe:	4a0a      	ldr	r2, [pc, #40]	; (19328 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19300:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19302:	2428      	movs	r4, #40	; 0x28
   19304:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   19308:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1930a:	6a1b      	ldr	r3, [r3, #32]
   1930c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1930e:	6823      	ldr	r3, [r4, #0]
   19310:	429a      	cmp	r2, r3
   19312:	bf94      	ite	ls
   19314:	600a      	strls	r2, [r1, #0]
   19316:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19318:	f7ff ffe0 	bl	192dc <net_buf_id>
   1931c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19320:	fb02 3000 	mla	r0, r2, r0, r3
   19324:	bd10      	pop	{r4, pc}
   19326:	bf00      	nop
   19328:	20000a04 	.word	0x20000a04

0001932c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1932c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19330:	4605      	mov	r5, r0
   19332:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   19334:	4610      	mov	r0, r2
   19336:	4619      	mov	r1, r3
{
   19338:	4616      	mov	r6, r2
   1933a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1933c:	f007 fe3e 	bl	20fbc <z_timeout_end_calc>
   19340:	4680      	mov	r8, r0
   19342:	4689      	mov	r9, r1
	__asm__ volatile(
   19344:	f04f 0340 	mov.w	r3, #64	; 0x40
   19348:	f3ef 8a11 	mrs	sl, BASEPRI
   1934c:	f383 8811 	msr	BASEPRI, r3
   19350:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19354:	8b6b      	ldrh	r3, [r5, #26]
   19356:	2b00      	cmp	r3, #0
   19358:	d054      	beq.n	19404 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1935a:	8b2a      	ldrh	r2, [r5, #24]
   1935c:	429a      	cmp	r2, r3
   1935e:	d93d      	bls.n	193dc <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   19360:	2200      	movs	r2, #0
   19362:	2300      	movs	r3, #0
   19364:	4628      	mov	r0, r5
   19366:	f001 fe3f 	bl	1afe8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1936a:	4604      	mov	r4, r0
   1936c:	2800      	cmp	r0, #0
   1936e:	d035      	beq.n	193dc <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   19370:	f38a 8811 	msr	BASEPRI, sl
   19374:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19378:	9b01      	ldr	r3, [sp, #4]
   1937a:	2b00      	cmp	r3, #0
   1937c:	d052      	beq.n	19424 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1937e:	ea56 0307 	orrs.w	r3, r6, r7
   19382:	d010      	beq.n	193a6 <net_buf_alloc_len+0x7a>
   19384:	1c7b      	adds	r3, r7, #1
   19386:	bf08      	it	eq
   19388:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1938c:	d00b      	beq.n	193a6 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1938e:	f002 fc8d 	bl	1bcac <z_tick_get>
   19392:	ebb8 0600 	subs.w	r6, r8, r0
   19396:	eb69 0701 	sbc.w	r7, r9, r1
   1939a:	2e00      	cmp	r6, #0
   1939c:	f177 0300 	sbcs.w	r3, r7, #0
   193a0:	bfbc      	itt	lt
   193a2:	2600      	movlt	r6, #0
   193a4:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   193a6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   193a8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1943c <net_buf_alloc_len+0x110>
   193ac:	2228      	movs	r2, #40	; 0x28
   193ae:	fb02 8303 	mla	r3, r2, r3, r8
   193b2:	a901      	add	r1, sp, #4
   193b4:	6a1b      	ldr	r3, [r3, #32]
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	4632      	mov	r2, r6
   193ba:	681d      	ldr	r5, [r3, #0]
   193bc:	4620      	mov	r0, r4
   193be:	463b      	mov	r3, r7
   193c0:	47a8      	blx	r5
   193c2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   193c4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   193c6:	bb70      	cbnz	r0, 19426 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   193c8:	79a0      	ldrb	r0, [r4, #6]
   193ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   193ce:	4621      	mov	r1, r4
   193d0:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   193d4:	f007 fbd0 	bl	20b78 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   193d8:	462c      	mov	r4, r5
}
   193da:	e01f      	b.n	1941c <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   193dc:	8b68      	ldrh	r0, [r5, #26]
   193de:	1e43      	subs	r3, r0, #1
   193e0:	836b      	strh	r3, [r5, #26]
   193e2:	f38a 8811 	msr	BASEPRI, sl
   193e6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   193ea:	8b2c      	ldrh	r4, [r5, #24]
   193ec:	1a24      	subs	r4, r4, r0
   193ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
   193f0:	2318      	movs	r3, #24
   193f2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   193f6:	4811      	ldr	r0, [pc, #68]	; (1943c <net_buf_alloc_len+0x110>)
   193f8:	4b11      	ldr	r3, [pc, #68]	; (19440 <net_buf_alloc_len+0x114>)
   193fa:	1a2d      	subs	r5, r5, r0
   193fc:	10ed      	asrs	r5, r5, #3
   193fe:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   19400:	71a5      	strb	r5, [r4, #6]
		goto success;
   19402:	e7b9      	b.n	19378 <net_buf_alloc_len+0x4c>
   19404:	f38a 8811 	msr	BASEPRI, sl
   19408:	f3bf 8f6f 	isb	sy
   1940c:	4632      	mov	r2, r6
   1940e:	463b      	mov	r3, r7
   19410:	4628      	mov	r0, r5
   19412:	f001 fde9 	bl	1afe8 <z_impl_k_queue_get>
	if (!buf) {
   19416:	4604      	mov	r4, r0
   19418:	2800      	cmp	r0, #0
   1941a:	d1ad      	bne.n	19378 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1941c:	4620      	mov	r0, r4
   1941e:	b002      	add	sp, #8
   19420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   19424:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19426:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19428:	2201      	movs	r2, #1
	buf->frags = NULL;
   1942a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1942c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1942e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   19430:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19432:	6923      	ldr	r3, [r4, #16]
   19434:	81e2      	strh	r2, [r4, #14]
   19436:	60a3      	str	r3, [r4, #8]
	return buf;
   19438:	e7f0      	b.n	1941c <net_buf_alloc_len+0xf0>
   1943a:	bf00      	nop
   1943c:	20000a04 	.word	0x20000a04
   19440:	cccccccd 	.word	0xcccccccd

00019444 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19448:	4d17      	ldr	r5, [pc, #92]	; (194a8 <net_buf_unref+0x64>)
   1944a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1944c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1944e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   19450:	b90c      	cbnz	r4, 19456 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19456:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   19458:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1945c:	3b01      	subs	r3, #1
   1945e:	b2db      	uxtb	r3, r3
   19460:	7123      	strb	r3, [r4, #4]
   19462:	2b00      	cmp	r3, #0
   19464:	d1f5      	bne.n	19452 <net_buf_unref+0xe>
		if (buf->__buf) {
   19466:	6921      	ldr	r1, [r4, #16]
   19468:	b159      	cbz	r1, 19482 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1946a:	7963      	ldrb	r3, [r4, #5]
   1946c:	079b      	lsls	r3, r3, #30
   1946e:	d407      	bmi.n	19480 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   19470:	79a3      	ldrb	r3, [r4, #6]
   19472:	fb07 5303 	mla	r3, r7, r3, r5
   19476:	4620      	mov	r0, r4
   19478:	6a1b      	ldr	r3, [r3, #32]
   1947a:	681b      	ldr	r3, [r3, #0]
   1947c:	689b      	ldr	r3, [r3, #8]
   1947e:	4798      	blx	r3
			buf->__buf = NULL;
   19480:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   19482:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19484:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   19486:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1948a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1948c:	69db      	ldr	r3, [r3, #28]
   1948e:	b11b      	cbz	r3, 19498 <net_buf_unref+0x54>
			pool->destroy(buf);
   19490:	4620      	mov	r0, r4
   19492:	4798      	blx	r3
{
   19494:	4644      	mov	r4, r8
   19496:	e7db      	b.n	19450 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19498:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1949c:	4621      	mov	r1, r4
   1949e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   194a2:	f007 fb69 	bl	20b78 <k_queue_prepend>
}
   194a6:	e7f5      	b.n	19494 <net_buf_unref+0x50>
   194a8:	20000a04 	.word	0x20000a04

000194ac <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   194ac:	4a05      	ldr	r2, [pc, #20]	; (194c4 <adc_context_start_sampling.isra.0+0x18>)
   194ae:	2301      	movs	r3, #1
   194b0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   194b4:	b108      	cbz	r0, 194ba <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194b6:	60d3      	str	r3, [r2, #12]
}
   194b8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194ba:	6013      	str	r3, [r2, #0]
   194bc:	4a02      	ldr	r2, [pc, #8]	; (194c8 <adc_context_start_sampling.isra.0+0x1c>)
   194be:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   194c0:	4770      	bx	lr
   194c2:	bf00      	nop
   194c4:	40007000 	.word	0x40007000
   194c8:	40007004 	.word	0x40007004

000194cc <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   194cc:	7908      	ldrb	r0, [r1, #4]
{
   194ce:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   194d0:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   194d4:	2c07      	cmp	r4, #7
   194d6:	d81f      	bhi.n	19518 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   194d8:	780b      	ldrb	r3, [r1, #0]
   194da:	2b09      	cmp	r3, #9
   194dc:	d81c      	bhi.n	19518 <adc_nrfx_channel_setup+0x4c>
   194de:	e8df f003 	tbb	[pc, r3]
   194e2:	0606      	.short	0x0606
   194e4:	1b060606 	.word	0x1b060606
   194e8:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   194ec:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   194ee:	784a      	ldrb	r2, [r1, #1]
   194f0:	2a03      	cmp	r2, #3
   194f2:	d018      	beq.n	19526 <adc_nrfx_channel_setup+0x5a>
   194f4:	2a04      	cmp	r2, #4
   194f6:	d10f      	bne.n	19518 <adc_nrfx_channel_setup+0x4c>
   194f8:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   194fa:	884a      	ldrh	r2, [r1, #2]
   194fc:	f244 060a 	movw	r6, #16394	; 0x400a
   19500:	42b2      	cmp	r2, r6
   19502:	d044      	beq.n	1958e <adc_nrfx_channel_setup+0xc2>
   19504:	d811      	bhi.n	1952a <adc_nrfx_channel_setup+0x5e>
   19506:	f244 0603 	movw	r6, #16387	; 0x4003
   1950a:	42b2      	cmp	r2, r6
   1950c:	d03b      	beq.n	19586 <adc_nrfx_channel_setup+0xba>
   1950e:	f244 0605 	movw	r6, #16389	; 0x4005
   19512:	42b2      	cmp	r2, r6
   19514:	d039      	beq.n	1958a <adc_nrfx_channel_setup+0xbe>
   19516:	b3d2      	cbz	r2, 1958e <adc_nrfx_channel_setup+0xc2>
   19518:	f06f 0015 	mvn.w	r0, #21
   1951c:	e032      	b.n	19584 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   1951e:	2306      	movs	r3, #6
		break;
   19520:	e7e5      	b.n	194ee <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   19522:	2307      	movs	r3, #7
		break;
   19524:	e7e3      	b.n	194ee <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   19526:	2501      	movs	r5, #1
   19528:	e7e7      	b.n	194fa <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   1952a:	f244 0614 	movw	r6, #16404	; 0x4014
   1952e:	42b2      	cmp	r2, r6
   19530:	d02f      	beq.n	19592 <adc_nrfx_channel_setup+0xc6>
   19532:	f244 0628 	movw	r6, #16424	; 0x4028
   19536:	42b2      	cmp	r2, r6
   19538:	d02d      	beq.n	19596 <adc_nrfx_channel_setup+0xca>
   1953a:	f244 060f 	movw	r6, #16399	; 0x400f
   1953e:	42b2      	cmp	r2, r6
   19540:	d1ea      	bne.n	19518 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   19542:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   19544:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   19548:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1954a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1954e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   19552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   19556:	0122      	lsls	r2, r4, #4
   19558:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1955c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   19560:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   19562:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   19566:	0123      	lsls	r3, r4, #4
   19568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1956c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   19570:	798a      	ldrb	r2, [r1, #6]
   19572:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   19576:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1957a:	4b08      	ldr	r3, [pc, #32]	; (1959c <adc_nrfx_channel_setup+0xd0>)
   1957c:	441c      	add	r4, r3
   1957e:	794b      	ldrb	r3, [r1, #5]
   19580:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
   19584:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   19586:	2200      	movs	r2, #0
   19588:	e7dc      	b.n	19544 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   1958a:	2201      	movs	r2, #1
   1958c:	e7da      	b.n	19544 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1958e:	2202      	movs	r2, #2
   19590:	e7d8      	b.n	19544 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   19592:	2204      	movs	r2, #4
   19594:	e7d6      	b.n	19544 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   19596:	2205      	movs	r2, #5
   19598:	e7d4      	b.n	19544 <adc_nrfx_channel_setup+0x78>
   1959a:	bf00      	nop
   1959c:	20000508 	.word	0x20000508

000195a0 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   195a0:	4b2f      	ldr	r3, [pc, #188]	; (19660 <saadc_irq_handler+0xc0>)
   195a2:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   195a4:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   195a6:	2a00      	cmp	r2, #0
   195a8:	d04b      	beq.n	19642 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195aa:	2200      	movs	r2, #0
   195ac:	601a      	str	r2, [r3, #0]
   195ae:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   195b0:	4c2c      	ldr	r4, [pc, #176]	; (19664 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   195b2:	4b2d      	ldr	r3, [pc, #180]	; (19668 <saadc_irq_handler+0xc8>)
   195b4:	2101      	movs	r1, #1
   195b6:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   195b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   195bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   195be:	b3db      	cbz	r3, 19638 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   195c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   195c4:	b143      	cbz	r3, 195d8 <saadc_irq_handler+0x38>
			action = callback(dev,
   195c6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   195ca:	f104 0174 	add.w	r1, r4, #116	; 0x74
   195ce:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   195d0:	2801      	cmp	r0, #1
   195d2:	d014      	beq.n	195fe <saadc_irq_handler+0x5e>
   195d4:	2802      	cmp	r0, #2
   195d6:	d029      	beq.n	1962c <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   195d8:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
   195dc:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
   195e0:	429a      	cmp	r2, r3
   195e2:	d923      	bls.n	1962c <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   195e4:	3301      	adds	r3, #1
   195e6:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   195ea:	4b20      	ldr	r3, [pc, #128]	; (1966c <saadc_irq_handler+0xcc>)
   195ec:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   195f0:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   195f4:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   195f6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   195fa:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   195fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19602:	b92b      	cbnz	r3, 19610 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   19604:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   19608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1960c:	f7ff bf4e 	b.w	194ac <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19610:	f3bf 8f5b 	dmb	ish
   19614:	e854 3f00 	ldrex	r3, [r4]
   19618:	1e5a      	subs	r2, r3, #1
   1961a:	e844 2100 	strex	r1, r2, [r4]
   1961e:	2900      	cmp	r1, #0
   19620:	d1f8      	bne.n	19614 <saadc_irq_handler+0x74>
   19622:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   19626:	2b01      	cmp	r3, #1
   19628:	dcec      	bgt.n	19604 <saadc_irq_handler+0x64>
   1962a:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1962c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19630:	b113      	cbz	r3, 19638 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   19632:	480f      	ldr	r0, [pc, #60]	; (19670 <saadc_irq_handler+0xd0>)
   19634:	f007 fceb 	bl	2100e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   19638:	480e      	ldr	r0, [pc, #56]	; (19674 <saadc_irq_handler+0xd4>)
   1963a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1963e:	f002 b853 	b.w	1b6e8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19642:	4b0d      	ldr	r3, [pc, #52]	; (19678 <saadc_irq_handler+0xd8>)
   19644:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   19646:	2900      	cmp	r1, #0
   19648:	d0ef      	beq.n	1962a <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1964a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1964c:	4a06      	ldr	r2, [pc, #24]	; (19668 <saadc_irq_handler+0xc8>)
   1964e:	681b      	ldr	r3, [r3, #0]
   19650:	2301      	movs	r3, #1
   19652:	6013      	str	r3, [r2, #0]
   19654:	f842 3c08 	str.w	r3, [r2, #-8]
   19658:	f842 3c04 	str.w	r3, [r2, #-4]
}
   1965c:	e7e5      	b.n	1962a <saadc_irq_handler+0x8a>
   1965e:	bf00      	nop
   19660:	40007104 	.word	0x40007104
   19664:	20000508 	.word	0x20000508
   19668:	40007008 	.word	0x40007008
   1966c:	40007000 	.word	0x40007000
   19670:	20000510 	.word	0x20000510
   19674:	20000560 	.word	0x20000560
   19678:	40007110 	.word	0x40007110

0001967c <adc_nrfx_read>:
{
   1967c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1967e:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   19680:	485d      	ldr	r0, [pc, #372]	; (197f8 <adc_nrfx_read+0x17c>)
   19682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1968a:	f002 f853 	bl	1b734 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1968e:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   19690:	b910      	cbnz	r0, 19698 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
   19692:	f06f 0415 	mvn.w	r4, #21
   19696:	e098      	b.n	197ca <adc_nrfx_read+0x14e>
	if (!selected_channels ||
   19698:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   1969c:	d1f9      	bne.n	19692 <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   1969e:	4c57      	ldr	r4, [pc, #348]	; (197fc <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   196a0:	4f57      	ldr	r7, [pc, #348]	; (19800 <adc_nrfx_read+0x184>)
	active_channels = 0U;
   196a2:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   196a4:	fa20 f302 	lsr.w	r3, r0, r2
   196a8:	f013 0301 	ands.w	r3, r3, #1
   196ac:	d032      	beq.n	19714 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   196ae:	18bb      	adds	r3, r7, r2
   196b0:	f893 c098 	ldrb.w	ip, [r3, #152]	; 0x98
   196b4:	f1bc 0f00 	cmp.w	ip, #0
   196b8:	d0eb      	beq.n	19692 <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   196ba:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   196be:	7c6e      	ldrb	r6, [r5, #17]
   196c0:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   196c4:	3e00      	subs	r6, #0
   196c6:	bf18      	it	ne
   196c8:	2601      	movne	r6, #1
   196ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   196ce:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   196d2:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   196d6:	f102 0351 	add.w	r3, r2, #81	; 0x51
   196da:	011b      	lsls	r3, r3, #4
			++active_channels;
   196dc:	3101      	adds	r1, #1
   196de:	f844 c003 	str.w	ip, [r4, r3]
   196e2:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   196e4:	3201      	adds	r2, #1
   196e6:	2a08      	cmp	r2, #8
   196e8:	d1dc      	bne.n	196a4 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   196ea:	7c2b      	ldrb	r3, [r5, #16]
   196ec:	3b08      	subs	r3, #8
   196ee:	2b06      	cmp	r3, #6
   196f0:	d8cf      	bhi.n	19692 <adc_nrfx_read+0x16>
   196f2:	a201      	add	r2, pc, #4	; (adr r2, 196f8 <adc_nrfx_read+0x7c>)
   196f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   196f8:	000197df 	.word	0x000197df
   196fc:	00019693 	.word	0x00019693
   19700:	0001971f 	.word	0x0001971f
   19704:	00019693 	.word	0x00019693
   19708:	000197d7 	.word	0x000197d7
   1970c:	00019693 	.word	0x00019693
   19710:	000197db 	.word	0x000197db
   19714:	f102 0651 	add.w	r6, r2, #81	; 0x51
   19718:	0136      	lsls	r6, r6, #4
   1971a:	51a3      	str	r3, [r4, r6]
}
   1971c:	e7e2      	b.n	196e4 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
   1971e:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   19720:	4b36      	ldr	r3, [pc, #216]	; (197fc <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   19722:	2901      	cmp	r1, #1
   19724:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   19728:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1972a:	d95a      	bls.n	197e2 <adc_nrfx_read+0x166>
   1972c:	2a00      	cmp	r2, #0
   1972e:	d1b0      	bne.n	19692 <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   19730:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   19734:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   19736:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   19738:	b112      	cbz	r2, 19740 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1973a:	8912      	ldrh	r2, [r2, #8]
   1973c:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   19740:	68ea      	ldr	r2, [r5, #12]
   19742:	429a      	cmp	r2, r3
   19744:	d355      	bcc.n	197f2 <adc_nrfx_read+0x176>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   19746:	4b2d      	ldr	r3, [pc, #180]	; (197fc <adc_nrfx_read+0x180>)
   19748:	68aa      	ldr	r2, [r5, #8]
   1974a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   1974e:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   19750:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   19754:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   19756:	4c2a      	ldr	r4, [pc, #168]	; (19800 <adc_nrfx_read+0x184>)
   19758:	f104 0674 	add.w	r6, r4, #116	; 0x74
   1975c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1975e:	683b      	ldr	r3, [r7, #0]
   19760:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   19762:	682a      	ldr	r2, [r5, #0]
	ctx->status = 0;
   19764:	2600      	movs	r6, #0
   19766:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   19768:	2a00      	cmp	r2, #0
   1976a:	d03d      	beq.n	197e8 <adc_nrfx_read+0x16c>
		ctx->options = *sequence->options;
   1976c:	ca07      	ldmia	r2, {r0, r1, r2}
   1976e:	f104 0388 	add.w	r3, r4, #136	; 0x88
   19772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ctx->sequence.options = &ctx->options;
   19776:	6763      	str	r3, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   19778:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
		if (ctx->options.interval_us != 0U) {
   1977c:	b3a0      	cbz	r0, 197e8 <adc_nrfx_read+0x16c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1977e:	f3bf 8f5b 	dmb	ish
   19782:	e854 3f00 	ldrex	r3, [r4]
   19786:	e844 6200 	strex	r2, r6, [r4]
   1978a:	2a00      	cmp	r2, #0
   1978c:	d1f9      	bne.n	19782 <adc_nrfx_read+0x106>
   1978e:	f3bf 8f5b 	dmb	ish
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   19792:	481c      	ldr	r0, [pc, #112]	; (19804 <adc_nrfx_read+0x188>)
   19794:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   19798:	4a1b      	ldr	r2, [pc, #108]	; (19808 <adc_nrfx_read+0x18c>)
   1979a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1979e:	2100      	movs	r1, #0
   197a0:	2300      	movs	r3, #0
   197a2:	fbe5 0106 	umlal	r0, r1, r5, r6
   197a6:	f7e6 ff1f 	bl	5e8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   197aa:	2200      	movs	r2, #0
   197ac:	e9cd 0100 	strd	r0, r1, [sp]
   197b0:	2300      	movs	r3, #0
   197b2:	f104 0008 	add.w	r0, r4, #8
   197b6:	f002 fab9 	bl	1bd2c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   197ba:	4814      	ldr	r0, [pc, #80]	; (1980c <adc_nrfx_read+0x190>)
   197bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   197c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   197c4:	f001 ffb6 	bl	1b734 <z_impl_k_sem_take>
	return ctx->status;
   197c8:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   197ca:	480b      	ldr	r0, [pc, #44]	; (197f8 <adc_nrfx_read+0x17c>)
   197cc:	f001 ff8c 	bl	1b6e8 <z_impl_k_sem_give>
}
   197d0:	4620      	mov	r0, r4
   197d2:	b003      	add	sp, #12
   197d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   197d6:	2202      	movs	r2, #2
		break;
   197d8:	e7a2      	b.n	19720 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   197da:	2203      	movs	r2, #3
		break;
   197dc:	e7a0      	b.n	19720 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   197de:	2200      	movs	r2, #0
   197e0:	e79e      	b.n	19720 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   197e2:	2a08      	cmp	r2, #8
   197e4:	d9a4      	bls.n	19730 <adc_nrfx_read+0xb4>
   197e6:	e754      	b.n	19692 <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   197e8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   197ec:	f7ff fe5e 	bl	194ac <adc_context_start_sampling.isra.0>
   197f0:	e7e3      	b.n	197ba <adc_nrfx_read+0x13e>
		return -ENOMEM;
   197f2:	f06f 040b 	mvn.w	r4, #11
   197f6:	e7e8      	b.n	197ca <adc_nrfx_read+0x14e>
   197f8:	20000548 	.word	0x20000548
   197fc:	40007000 	.word	0x40007000
   19800:	20000508 	.word	0x20000508
   19804:	000f423f 	.word	0x000f423f
   19808:	000f4240 	.word	0x000f4240
   1980c:	20000560 	.word	0x20000560

00019810 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19810:	4b0d      	ldr	r3, [pc, #52]	; (19848 <init_saadc+0x38>)

DEVICE_DECLARE(adc_0);

static int init_saadc(const struct device *dev)
{
   19812:	b510      	push	{r4, lr}
   19814:	2400      	movs	r4, #0
   19816:	601c      	str	r4, [r3, #0]
   19818:	681b      	ldr	r3, [r3, #0]
   1981a:	4b0c      	ldr	r3, [pc, #48]	; (1984c <init_saadc+0x3c>)
   1981c:	601c      	str	r4, [r3, #0]
   1981e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   19820:	4b0b      	ldr	r3, [pc, #44]	; (19850 <init_saadc+0x40>)
   19822:	2212      	movs	r2, #18
   19824:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   19828:	2007      	movs	r0, #7
   1982a:	f7fa fb2f 	bl	13e8c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1982e:	4622      	mov	r2, r4
   19830:	2101      	movs	r1, #1
   19832:	2007      	movs	r0, #7
   19834:	f7fa fb3a 	bl	13eac <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   19838:	4806      	ldr	r0, [pc, #24]	; (19854 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   1983a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1983c:	b913      	cbnz	r3, 19844 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   1983e:	3040      	adds	r0, #64	; 0x40
   19840:	f001 ff52 	bl	1b6e8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   19844:	2000      	movs	r0, #0
   19846:	bd10      	pop	{r4, pc}
   19848:	40007104 	.word	0x40007104
   1984c:	40007110 	.word	0x40007110
   19850:	40007000 	.word	0x40007000
   19854:	20000508 	.word	0x20000508

00019858 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19858:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1985a:	4b09      	ldr	r3, [pc, #36]	; (19880 <gpio_nrfx_init+0x28>)
   1985c:	781a      	ldrb	r2, [r3, #0]
   1985e:	b96a      	cbnz	r2, 1987c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   19860:	2101      	movs	r1, #1
   19862:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19864:	2006      	movs	r0, #6
   19866:	2105      	movs	r1, #5
   19868:	f7fa fb20 	bl	13eac <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1986c:	2006      	movs	r0, #6
   1986e:	f7fa fb0d 	bl	13e8c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19872:	4b04      	ldr	r3, [pc, #16]	; (19884 <gpio_nrfx_init+0x2c>)
   19874:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19878:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1987c:	2000      	movs	r0, #0
   1987e:	bd08      	pop	{r3, pc}
   19880:	20002f65 	.word	0x20002f65
   19884:	40006000 	.word	0x40006000

00019888 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19888:	4b2a      	ldr	r3, [pc, #168]	; (19934 <gpio_nrfx_config+0xac>)
{
   1988a:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1988c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1988e:	482a      	ldr	r0, [pc, #168]	; (19938 <gpio_nrfx_config+0xb0>)
   19890:	4013      	ands	r3, r2
   19892:	4283      	cmp	r3, r0
   19894:	d03e      	beq.n	19914 <gpio_nrfx_config+0x8c>
   19896:	d80d      	bhi.n	198b4 <gpio_nrfx_config+0x2c>
   19898:	2b06      	cmp	r3, #6
   1989a:	d015      	beq.n	198c8 <gpio_nrfx_config+0x40>
   1989c:	d805      	bhi.n	198aa <gpio_nrfx_config+0x22>
   1989e:	b19b      	cbz	r3, 198c8 <gpio_nrfx_config+0x40>
   198a0:	2b02      	cmp	r3, #2
   198a2:	d039      	beq.n	19918 <gpio_nrfx_config+0x90>
   198a4:	f06f 0015 	mvn.w	r0, #21
   198a8:	e033      	b.n	19912 <gpio_nrfx_config+0x8a>
   198aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   198ae:	d1f9      	bne.n	198a4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   198b0:	2301      	movs	r3, #1
   198b2:	e009      	b.n	198c8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   198b4:	4821      	ldr	r0, [pc, #132]	; (1993c <gpio_nrfx_config+0xb4>)
   198b6:	4283      	cmp	r3, r0
   198b8:	d030      	beq.n	1991c <gpio_nrfx_config+0x94>
   198ba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   198be:	d02f      	beq.n	19920 <gpio_nrfx_config+0x98>
   198c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   198c4:	d1ee      	bne.n	198a4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   198c6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   198c8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   198ca:	bf54      	ite	pl
   198cc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   198d0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   198d2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   198d6:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   198da:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   198de:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   198e2:	d007      	beq.n	198f4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   198e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   198e8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   198ea:	d01b      	beq.n	19924 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   198ec:	2201      	movs	r2, #1
   198ee:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   198f0:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   198f4:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   198f8:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   198fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19900:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   19904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   19908:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1990c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   19910:	2000      	movs	r0, #0
}
   19912:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   19914:	2307      	movs	r3, #7
   19916:	e7d7      	b.n	198c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   19918:	2304      	movs	r3, #4
   1991a:	e7d5      	b.n	198c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1991c:	2305      	movs	r3, #5
   1991e:	e7d3      	b.n	198c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   19920:	2303      	movs	r3, #3
   19922:	e7d1      	b.n	198c8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19924:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   19926:	bf42      	ittt	mi
   19928:	2201      	movmi	r2, #1
   1992a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1992c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   19930:	e7e0      	b.n	198f4 <gpio_nrfx_config+0x6c>
   19932:	bf00      	nop
   19934:	00f00006 	.word	0x00f00006
   19938:	00100006 	.word	0x00100006
   1993c:	00400002 	.word	0x00400002

00019940 <gpio_nrfx_pin_interrupt_configure>:
{
   19940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19942:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19944:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   19946:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19948:	7a08      	ldrb	r0, [r1, #8]
   1994a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1994e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   19952:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   19956:	d10c      	bne.n	19972 <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
   19958:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1995c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   19960:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   19964:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   19968:	07cf      	lsls	r7, r1, #31
   1996a:	d507      	bpl.n	1997c <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   1996c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19970:	e0bd      	b.n	19aee <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19972:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   19976:	68f1      	ldr	r1, [r6, #12]
   19978:	f000 80aa 	beq.w	19ad0 <gpio_nrfx_pin_interrupt_configure+0x190>
   1997c:	68f0      	ldr	r0, [r6, #12]
   1997e:	2101      	movs	r1, #1
   19980:	40a1      	lsls	r1, r4
   19982:	4301      	orrs	r1, r0
   19984:	6970      	ldr	r0, [r6, #20]
   19986:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19988:	2101      	movs	r1, #1
   1998a:	40a1      	lsls	r1, r4
   1998c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   19990:	69b2      	ldr	r2, [r6, #24]
   19992:	bf0c      	ite	eq
   19994:	4308      	orreq	r0, r1
   19996:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   19998:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1999c:	bf0c      	ite	eq
   1999e:	430a      	orreq	r2, r1
   199a0:	438a      	bicne	r2, r1
   199a2:	61b2      	str	r2, [r6, #24]
   199a4:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   199a6:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   199a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   199ac:	bf0c      	ite	eq
   199ae:	4311      	orreq	r1, r2
   199b0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   199b4:	4a54      	ldr	r2, [pc, #336]	; (19b08 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   199b6:	6131      	str	r1, [r6, #16]
   199b8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   199bc:	2300      	movs	r3, #0
   199be:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   199c0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   199c4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   199c8:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   199cc:	4285      	cmp	r5, r0
   199ce:	f040 8084 	bne.w	19ada <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
   199d2:	fa21 f003 	lsr.w	r0, r1, r3
   199d6:	07c0      	lsls	r0, r0, #31
   199d8:	d57f      	bpl.n	19ada <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
   199da:	2101      	movs	r1, #1
   199dc:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   199de:	484b      	ldr	r0, [pc, #300]	; (19b0c <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   199e0:	f3bf 8f5b 	dmb	ish
   199e4:	43cf      	mvns	r7, r1
   199e6:	e850 cf00 	ldrex	ip, [r0]
   199ea:	ea0c 0c07 	and.w	ip, ip, r7
   199ee:	e840 ce00 	strex	lr, ip, [r0]
   199f2:	f1be 0f00 	cmp.w	lr, #0
   199f6:	d1f6      	bne.n	199e6 <gpio_nrfx_pin_interrupt_configure+0xa6>
   199f8:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   199fc:	009b      	lsls	r3, r3, #2
   199fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19a02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19a06:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   19a0a:	f020 0001 	bic.w	r0, r0, #1
   19a0e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   19a12:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   19a16:	2100      	movs	r1, #0
   19a18:	4628      	mov	r0, r5
   19a1a:	f006 fdfd 	bl	20618 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   19a1e:	68f3      	ldr	r3, [r6, #12]
   19a20:	40e3      	lsrs	r3, r4
   19a22:	f013 0301 	ands.w	r3, r3, #1
   19a26:	d051      	beq.n	19acc <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
   19a28:	6973      	ldr	r3, [r6, #20]
   19a2a:	40e3      	lsrs	r3, r4
   19a2c:	f013 0201 	ands.w	r2, r3, #1
   19a30:	d05e      	beq.n	19af0 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
   19a32:	69b3      	ldr	r3, [r6, #24]
   19a34:	40e3      	lsrs	r3, r4
   19a36:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   19a38:	bf5f      	itttt	pl
   19a3a:	6931      	ldrpl	r1, [r6, #16]
   19a3c:	fa21 f404 	lsrpl.w	r4, r1, r4
   19a40:	f004 0401 	andpl.w	r4, r4, #1
   19a44:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a48:	4930      	ldr	r1, [pc, #192]	; (19b0c <gpio_nrfx_pin_interrupt_configure+0x1cc>)
   19a4a:	bf54      	ite	pl
   19a4c:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   19a4e:	2403      	movmi	r4, #3
   19a50:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   19a52:	2701      	movs	r7, #1
   19a54:	fa07 f602 	lsl.w	r6, r7, r2
   19a58:	f3bf 8f5b 	dmb	ish
   19a5c:	e851 0f00 	ldrex	r0, [r1]
   19a60:	ea40 0306 	orr.w	r3, r0, r6
   19a64:	e841 3c00 	strex	ip, r3, [r1]
   19a68:	f1bc 0f00 	cmp.w	ip, #0
   19a6c:	d1f6      	bne.n	19a5c <gpio_nrfx_pin_interrupt_configure+0x11c>
   19a6e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   19a72:	40d0      	lsrs	r0, r2
   19a74:	f010 0301 	ands.w	r3, r0, #1
   19a78:	d134      	bne.n	19ae4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19a7a:	0091      	lsls	r1, r2, #2
   19a7c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19a80:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   19a84:	3240      	adds	r2, #64	; 0x40
   19a86:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   19a8a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   19a8e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   19a92:	0092      	lsls	r2, r2, #2
   19a94:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a98:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   19a9a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a9c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   19aa0:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   19aa4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19aa8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19aac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   19ab0:	4305      	orrs	r5, r0
   19ab2:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19ab6:	6013      	str	r3, [r2, #0]
   19ab8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19aba:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   19abe:	f042 0201 	orr.w	r2, r2, #1
   19ac2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   19ac6:	4a10      	ldr	r2, [pc, #64]	; (19b08 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
   19ac8:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
   19acc:	4618      	mov	r0, r3
   19ace:	e00e      	b.n	19aee <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19ad0:	2001      	movs	r0, #1
   19ad2:	40a0      	lsls	r0, r4
   19ad4:	ea21 0100 	bic.w	r1, r1, r0
   19ad8:	e754      	b.n	19984 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19ada:	3301      	adds	r3, #1
   19adc:	2b08      	cmp	r3, #8
   19ade:	f47f af6f 	bne.w	199c0 <gpio_nrfx_pin_interrupt_configure+0x80>
   19ae2:	e798      	b.n	19a16 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   19ae4:	3201      	adds	r2, #1
   19ae6:	2a08      	cmp	r2, #8
   19ae8:	d1b4      	bne.n	19a54 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
   19aea:	f06f 0012 	mvn.w	r0, #18
}
   19aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19af0:	6931      	ldr	r1, [r6, #16]
   19af2:	40e1      	lsrs	r1, r4
   19af4:	f001 0101 	and.w	r1, r1, #1
   19af8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   19afc:	4628      	mov	r0, r5
   19afe:	b2c9      	uxtb	r1, r1
   19b00:	f006 fd8a 	bl	20618 <nrf_gpio_cfg_sense_set>
	int res = 0;
   19b04:	4610      	mov	r0, r2
   19b06:	e7f2      	b.n	19aee <gpio_nrfx_pin_interrupt_configure+0x1ae>
   19b08:	40006000 	.word	0x40006000
   19b0c:	20002a14 	.word	0x20002a14

00019b10 <gpiote_event_handler>:
{
   19b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b14:	4d3f      	ldr	r5, [pc, #252]	; (19c14 <gpiote_event_handler+0x104>)
   19b16:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   19b18:	2e00      	cmp	r6, #0
   19b1a:	d04e      	beq.n	19bba <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   19b1c:	4b3e      	ldr	r3, [pc, #248]	; (19c18 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   19b1e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   19b22:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   19b24:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   19b26:	4301      	orrs	r1, r0
   19b28:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   19b2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   19b30:	2701      	movs	r7, #1
   19b32:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   19b36:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   19b38:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   19b3c:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   19b40:	bb72      	cbnz	r2, 19ba0 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19b42:	602a      	str	r2, [r5, #0]
   19b44:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   19b46:	4835      	ldr	r0, [pc, #212]	; (19c1c <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19b48:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   19b4a:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19b4c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   19b4e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   19b52:	fa05 f103 	lsl.w	r1, r5, r3
   19b56:	4211      	tst	r1, r2
   19b58:	d011      	beq.n	19b7e <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b5a:	009a      	lsls	r2, r3, #2
   19b5c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19b60:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   19b64:	6811      	ldr	r1, [r2, #0]
   19b66:	b151      	cbz	r1, 19b7e <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19b68:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   19b6c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19b70:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19b72:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   19b76:	fa05 f101 	lsl.w	r1, r5, r1
   19b7a:	6812      	ldr	r2, [r2, #0]
   19b7c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19b7e:	3301      	adds	r3, #1
   19b80:	2b08      	cmp	r3, #8
   19b82:	d1e4      	bne.n	19b4e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   19b84:	b9dc      	cbnz	r4, 19bbe <gpiote_event_handler+0xae>
	if (port_event) {
   19b86:	b14e      	cbz	r6, 19b9c <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   19b88:	4c23      	ldr	r4, [pc, #140]	; (19c18 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   19b8a:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   19b8e:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   19b90:	4301      	orrs	r1, r0
   19b92:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   19b96:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   19b98:	2600      	movs	r6, #0
	while (level_pins) {
   19b9a:	bb42      	cbnz	r2, 19bee <gpiote_event_handler+0xde>
}
   19b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   19ba0:	423a      	tst	r2, r7
   19ba2:	d006      	beq.n	19bb2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   19ba4:	2100      	movs	r1, #0
   19ba6:	f008 001f 	and.w	r0, r8, #31
   19baa:	f006 fd35 	bl	20618 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   19bae:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   19bb2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   19bb6:	007f      	lsls	r7, r7, #1
   19bb8:	e7c2      	b.n	19b40 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19bba:	4634      	mov	r4, r6
   19bbc:	e7c3      	b.n	19b46 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19bbe:	4b16      	ldr	r3, [pc, #88]	; (19c18 <gpiote_event_handler+0x108>)
   19bc0:	6859      	ldr	r1, [r3, #4]
   19bc2:	2900      	cmp	r1, #0
   19bc4:	d0df      	beq.n	19b86 <gpiote_event_handler+0x76>
	return node->next;
   19bc6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   19bc8:	4f15      	ldr	r7, [pc, #84]	; (19c20 <gpiote_event_handler+0x110>)
   19bca:	2d00      	cmp	r5, #0
   19bcc:	bf38      	it	cc
   19bce:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   19bd0:	688a      	ldr	r2, [r1, #8]
   19bd2:	4022      	ands	r2, r4
   19bd4:	d002      	beq.n	19bdc <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   19bd6:	684b      	ldr	r3, [r1, #4]
   19bd8:	4638      	mov	r0, r7
   19bda:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19bdc:	2d00      	cmp	r5, #0
   19bde:	d0d2      	beq.n	19b86 <gpiote_event_handler+0x76>
   19be0:	682b      	ldr	r3, [r5, #0]
   19be2:	2b00      	cmp	r3, #0
   19be4:	bf38      	it	cc
   19be6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19be8:	4629      	mov	r1, r5
   19bea:	461d      	mov	r5, r3
   19bec:	e7f0      	b.n	19bd0 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   19bee:	4215      	tst	r5, r2
   19bf0:	d00c      	beq.n	19c0c <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19bf2:	6921      	ldr	r1, [r4, #16]
   19bf4:	40f1      	lsrs	r1, r6
   19bf6:	f001 0101 	and.w	r1, r1, #1
   19bfa:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   19bfe:	b2c9      	uxtb	r1, r1
   19c00:	f006 001f 	and.w	r0, r6, #31
   19c04:	f006 fd08 	bl	20618 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   19c08:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   19c0c:	3601      	adds	r6, #1
		bit <<= 1;
   19c0e:	006d      	lsls	r5, r5, #1
   19c10:	e7c3      	b.n	19b9a <gpiote_event_handler+0x8a>
   19c12:	bf00      	nop
   19c14:	4000617c 	.word	0x4000617c
   19c18:	200029f8 	.word	0x200029f8
   19c1c:	40006000 	.word	0x40006000
   19c20:	200008fc 	.word	0x200008fc

00019c24 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   19c24:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   19c26:	794b      	ldrb	r3, [r1, #5]
   19c28:	2b01      	cmp	r3, #1
   19c2a:	d123      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   19c2c:	798b      	ldrb	r3, [r1, #6]
   19c2e:	2b03      	cmp	r3, #3
   19c30:	d120      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   19c32:	79ca      	ldrb	r2, [r1, #7]
   19c34:	b122      	cbz	r2, 19c40 <uarte_nrfx_configure+0x1c>
   19c36:	2a01      	cmp	r2, #1
   19c38:	d11c      	bne.n	19c74 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   19c3a:	6843      	ldr	r3, [r0, #4]
   19c3c:	791b      	ldrb	r3, [r3, #4]
   19c3e:	b1cb      	cbz	r3, 19c74 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   19c40:	790c      	ldrb	r4, [r1, #4]
   19c42:	b114      	cbz	r4, 19c4a <uarte_nrfx_configure+0x26>
   19c44:	2c02      	cmp	r4, #2
   19c46:	d115      	bne.n	19c74 <uarte_nrfx_configure+0x50>
   19c48:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   19c4a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   19c4c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   19c4e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   19c52:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   19c54:	d062      	beq.n	19d1c <uarte_nrfx_configure+0xf8>
   19c56:	d82b      	bhi.n	19cb0 <uarte_nrfx_configure+0x8c>
   19c58:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   19c5c:	d061      	beq.n	19d22 <uarte_nrfx_configure+0xfe>
   19c5e:	d814      	bhi.n	19c8a <uarte_nrfx_configure+0x66>
   19c60:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   19c64:	d05f      	beq.n	19d26 <uarte_nrfx_configure+0x102>
   19c66:	d808      	bhi.n	19c7a <uarte_nrfx_configure+0x56>
   19c68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   19c6c:	d05e      	beq.n	19d2c <uarte_nrfx_configure+0x108>
   19c6e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   19c72:	d05e      	beq.n	19d32 <uarte_nrfx_configure+0x10e>
   19c74:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19c78:	e04f      	b.n	19d1a <uarte_nrfx_configure+0xf6>
   19c7a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   19c7e:	d05b      	beq.n	19d38 <uarte_nrfx_configure+0x114>
   19c80:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   19c84:	d1f6      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   19c86:	4b37      	ldr	r3, [pc, #220]	; (19d64 <uarte_nrfx_configure+0x140>)
   19c88:	e03c      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19c8a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   19c8e:	d056      	beq.n	19d3e <uarte_nrfx_configure+0x11a>
   19c90:	d807      	bhi.n	19ca2 <uarte_nrfx_configure+0x7e>
   19c92:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   19c96:	d054      	beq.n	19d42 <uarte_nrfx_configure+0x11e>
   19c98:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   19c9c:	d1ea      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   19c9e:	4b32      	ldr	r3, [pc, #200]	; (19d68 <uarte_nrfx_configure+0x144>)
   19ca0:	e030      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19ca2:	f647 2612 	movw	r6, #31250	; 0x7a12
   19ca6:	42b3      	cmp	r3, r6
   19ca8:	d1e4      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   19caa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   19cae:	e029      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19cb0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   19cb4:	d047      	beq.n	19d46 <uarte_nrfx_configure+0x122>
   19cb6:	d813      	bhi.n	19ce0 <uarte_nrfx_configure+0xbc>
   19cb8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   19cbc:	d046      	beq.n	19d4c <uarte_nrfx_configure+0x128>
   19cbe:	d809      	bhi.n	19cd4 <uarte_nrfx_configure+0xb0>
   19cc0:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   19cc4:	42b3      	cmp	r3, r6
   19cc6:	d043      	beq.n	19d50 <uarte_nrfx_configure+0x12c>
   19cc8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   19ccc:	d1d2      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   19cce:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   19cd2:	e017      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19cd4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   19cd8:	d1cc      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   19cda:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   19cde:	e011      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19ce0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   19ce4:	d037      	beq.n	19d56 <uarte_nrfx_configure+0x132>
   19ce6:	d808      	bhi.n	19cfa <uarte_nrfx_configure+0xd6>
   19ce8:	4e20      	ldr	r6, [pc, #128]	; (19d6c <uarte_nrfx_configure+0x148>)
   19cea:	42b3      	cmp	r3, r6
   19cec:	d036      	beq.n	19d5c <uarte_nrfx_configure+0x138>
   19cee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   19cf2:	d1bf      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   19cf4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   19cf8:	e004      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19cfa:	4e1d      	ldr	r6, [pc, #116]	; (19d70 <uarte_nrfx_configure+0x14c>)
   19cfc:	42b3      	cmp	r3, r6
   19cfe:	d1b9      	bne.n	19c74 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   19d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   19d04:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   19d08:	68c3      	ldr	r3, [r0, #12]
   19d0a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   19d0c:	4322      	orrs	r2, r4
   19d0e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   19d10:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   19d14:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   19d18:	2000      	movs	r0, #0
}
   19d1a:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   19d1c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   19d20:	e7f0      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   19d22:	4b14      	ldr	r3, [pc, #80]	; (19d74 <uarte_nrfx_configure+0x150>)
   19d24:	e7ee      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   19d26:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   19d2a:	e7eb      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
   19d2c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   19d30:	e7e8      	b.n	19d04 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   19d32:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   19d36:	e7e5      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   19d38:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   19d3c:	e7e2      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   19d3e:	4b0e      	ldr	r3, [pc, #56]	; (19d78 <uarte_nrfx_configure+0x154>)
   19d40:	e7e0      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   19d42:	4b0e      	ldr	r3, [pc, #56]	; (19d7c <uarte_nrfx_configure+0x158>)
   19d44:	e7de      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   19d46:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   19d4a:	e7db      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   19d4c:	4b0c      	ldr	r3, [pc, #48]	; (19d80 <uarte_nrfx_configure+0x15c>)
   19d4e:	e7d9      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   19d50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   19d54:	e7d6      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   19d56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19d5a:	e7d3      	b.n	19d04 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   19d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19d60:	e7d0      	b.n	19d04 <uarte_nrfx_configure+0xe0>
   19d62:	bf00      	nop
   19d64:	0013b000 	.word	0x0013b000
   19d68:	004ea000 	.word	0x004ea000
   19d6c:	0003d090 	.word	0x0003d090
   19d70:	000f4240 	.word	0x000f4240
   19d74:	00275000 	.word	0x00275000
   19d78:	0075c000 	.word	0x0075c000
   19d7c:	003af000 	.word	0x003af000
   19d80:	013a9000 	.word	0x013a9000

00019d84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   19d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   19d88:	68c7      	ldr	r7, [r0, #12]
{
   19d8a:	4606      	mov	r6, r0
   19d8c:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19d8e:	f007 f844 	bl	20e1a <k_is_in_isr>
   19d92:	b9b8      	cbnz	r0, 19dc4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   19d94:	4b28      	ldr	r3, [pc, #160]	; (19e38 <uarte_nrfx_poll_out+0xb4>)
   19d96:	781b      	ldrb	r3, [r3, #0]
   19d98:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   19d9c:	6872      	ldr	r2, [r6, #4]
   19d9e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   19da0:	b193      	cbz	r3, 19dc8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   19da2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19da6:	f3ef 8411 	mrs	r4, BASEPRI
   19daa:	f383 8811 	msr	BASEPRI, r3
   19dae:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   19db2:	4630      	mov	r0, r6
   19db4:	f006 fcbf 	bl	20736 <is_tx_ready>
   19db8:	bb38      	cbnz	r0, 19e0a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   19dba:	f384 8811 	msr	BASEPRI, r4
   19dbe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   19dc2:	e7ee      	b.n	19da2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19dc4:	2301      	movs	r3, #1
   19dc6:	e7e9      	b.n	19d9c <uarte_nrfx_poll_out+0x18>
   19dc8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   19dca:	4630      	mov	r0, r6
   19dcc:	f006 fcb3 	bl	20736 <is_tx_ready>
   19dd0:	b970      	cbnz	r0, 19df0 <uarte_nrfx_poll_out+0x6c>
   19dd2:	2001      	movs	r0, #1
   19dd4:	f006 fda4 	bl	20920 <nrfx_busy_wait>
   19dd8:	3c01      	subs	r4, #1
   19dda:	d1f6      	bne.n	19dca <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   19ddc:	2100      	movs	r1, #0
   19dde:	2021      	movs	r0, #33	; 0x21
   19de0:	f001 fc5c 	bl	1b69c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19de4:	e7f0      	b.n	19dc8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   19de6:	f384 8811 	msr	BASEPRI, r4
   19dea:	f3bf 8f6f 	isb	sy
}
   19dee:	e7f5      	b.n	19ddc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   19df0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19df4:	f3ef 8411 	mrs	r4, BASEPRI
   19df8:	f383 8811 	msr	BASEPRI, r3
   19dfc:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   19e00:	4630      	mov	r0, r6
   19e02:	f006 fc98 	bl	20736 <is_tx_ready>
   19e06:	2800      	cmp	r0, #0
   19e08:	d0ed      	beq.n	19de6 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   19e0a:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   19e0e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19e10:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19e12:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19e16:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19e1a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   19e1e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   19e22:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   19e26:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19e2a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   19e2c:	f384 8811 	msr	BASEPRI, r4
   19e30:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   19e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e38:	200033c3 	.word	0x200033c3

00019e3c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   19e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e3e:	2200      	movs	r2, #0
   19e40:	4605      	mov	r5, r0
   19e42:	2101      	movs	r1, #1
   19e44:	2002      	movs	r0, #2
   19e46:	f7fa f831 	bl	13eac <z_arm_irq_priority_set>
   19e4a:	2002      	movs	r0, #2
   19e4c:	f7fa f81e 	bl	13e8c <arch_irq_enable>
	return config->uarte_regs;
   19e50:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   19e52:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   19e54:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   19e56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19e5a:	2200      	movs	r2, #0
   19e5c:	2140      	movs	r1, #64	; 0x40
   19e5e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
   19e62:	2006      	movs	r0, #6
	data->dev = dev;
   19e64:	6035      	str	r5, [r6, #0]
   19e66:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19e6a:	2103      	movs	r1, #3
   19e6c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   19e70:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   19e74:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   19e78:	2008      	movs	r0, #8
   19e7a:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   19e7e:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   19e82:	2220      	movs	r2, #32
   19e84:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19e88:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   19e8c:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
   19e8e:	2305      	movs	r3, #5
   19e90:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   19e94:	2307      	movs	r3, #7
   19e96:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   19e9a:	3104      	adds	r1, #4
   19e9c:	4628      	mov	r0, r5
   19e9e:	f7ff fec1 	bl	19c24 <uarte_nrfx_configure>
	if (err) {
   19ea2:	4607      	mov	r7, r0
   19ea4:	2800      	cmp	r0, #0
   19ea6:	d13c      	bne.n	19f22 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   19ea8:	686b      	ldr	r3, [r5, #4]
   19eaa:	799b      	ldrb	r3, [r3, #6]
   19eac:	b1cb      	cbz	r3, 19ee2 <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   19eae:	f106 000e 	add.w	r0, r6, #14
   19eb2:	f000 fe63 	bl	1ab7c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   19eb6:	4b1d      	ldr	r3, [pc, #116]	; (19f2c <uarte_0_init+0xf0>)
   19eb8:	4298      	cmp	r0, r3
   19eba:	d134      	bne.n	19f26 <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   19ebc:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   19ebe:	00c3      	lsls	r3, r0, #3
   19ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19ec4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   19ec8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   19ecc:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19ed0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19ed4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   19ed8:	4a15      	ldr	r2, [pc, #84]	; (19f30 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   19eda:	2301      	movs	r3, #1
   19edc:	4083      	lsls	r3, r0
   19ede:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19ee2:	2308      	movs	r3, #8
   19ee4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ee8:	2300      	movs	r3, #0
   19eea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19eee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   19ef2:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19ef6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19efa:	2301      	movs	r3, #1
   19efc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19f00:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   19f02:	686b      	ldr	r3, [r5, #4]
   19f04:	799b      	ldrb	r3, [r3, #6]
   19f06:	b91b      	cbnz	r3, 19f10 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
   19f08:	f44f 7380 	mov.w	r3, #256	; 0x100
   19f0c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   19f10:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   19f12:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19f14:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19f18:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19f1c:	2301      	movs	r3, #1
   19f1e:	60a3      	str	r3, [r4, #8]
   19f20:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   19f22:	4638      	mov	r0, r7
   19f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   19f26:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   19f2a:	e7fa      	b.n	19f22 <uarte_0_init+0xe6>
   19f2c:	0bad0000 	.word	0x0bad0000
   19f30:	4001f000 	.word	0x4001f000

00019f34 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   19f34:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   19f36:	f7f5 f866 	bl	f006 <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   19f3a:	4802      	ldr	r0, [pc, #8]	; (19f44 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   19f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19f40:	f001 bbd2 	b.w	1b6e8 <z_impl_k_sem_give>
   19f44:	20002a18 	.word	0x20002a18

00019f48 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19f48:	4602      	mov	r2, r0
   19f4a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   19f4c:	4801      	ldr	r0, [pc, #4]	; (19f54 <multithreading_lock_acquire+0xc>)
   19f4e:	f001 bbf1 	b.w	1b734 <z_impl_k_sem_take>
   19f52:	bf00      	nop
   19f54:	2000098c 	.word	0x2000098c

00019f58 <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   19f58:	4801      	ldr	r0, [pc, #4]	; (19f60 <multithreading_lock_release+0x8>)
   19f5a:	f001 bbc5 	b.w	1b6e8 <z_impl_k_sem_give>
   19f5e:	bf00      	nop
   19f60:	2000098c 	.word	0x2000098c

00019f64 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19f64:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19f66:	4804      	ldr	r0, [pc, #16]	; (19f78 <hci_driver_init+0x14>)
   19f68:	f7fb fc1a 	bl	157a0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   19f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   19f70:	4802      	ldr	r0, [pc, #8]	; (19f7c <hci_driver_init+0x18>)
   19f72:	f7ea b845 	b.w	4000 <sdc_init>
   19f76:	bf00      	nop
   19f78:	00021dcc 	.word	0x00021dcc
   19f7c:	00020833 	.word	0x00020833

00019f80 <recv_thread>:
{
   19f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   19f82:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   19f84:	4f34      	ldr	r7, [pc, #208]	; (1a058 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   19f86:	4c35      	ldr	r4, [pc, #212]	; (1a05c <recv_thread+0xdc>)
	bool received_evt = false;
   19f88:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   19f8a:	b93e      	cbnz	r6, 19f9c <recv_thread+0x1c>
   19f8c:	b935      	cbnz	r5, 19f9c <recv_thread+0x1c>
   19f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f96:	4638      	mov	r0, r7
   19f98:	f001 fbcc 	bl	1b734 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fa4:	f7ff ffd0 	bl	19f48 <multithreading_lock_acquire>
	if (!errcode) {
   19fa8:	b158      	cbz	r0, 19fc2 <recv_thread+0x42>
		return false;
   19faa:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fb4:	f7ff ffc8 	bl	19f48 <multithreading_lock_acquire>
	if (!errcode) {
   19fb8:	b380      	cbz	r0, 1a01c <recv_thread+0x9c>
		return false;
   19fba:	2500      	movs	r5, #0
	z_impl_k_yield();
   19fbc:	f001 fb20 	bl	1b600 <z_impl_k_yield>
}
   19fc0:	e7e3      	b.n	19f8a <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   19fc2:	4826      	ldr	r0, [pc, #152]	; (1a05c <recv_thread+0xdc>)
   19fc4:	f000 fbd2 	bl	1a76c <hci_internal_evt_get>
   19fc8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   19fca:	f7ff ffc5 	bl	19f58 <multithreading_lock_release>
	if (errcode) {
   19fce:	2d00      	cmp	r5, #0
   19fd0:	d1eb      	bne.n	19faa <recv_thread+0x2a>
	switch (hdr->evt) {
   19fd2:	7820      	ldrb	r0, [r4, #0]
   19fd4:	283e      	cmp	r0, #62	; 0x3e
   19fd6:	d007      	beq.n	19fe8 <recv_thread+0x68>
   19fd8:	28ff      	cmp	r0, #255	; 0xff
   19fda:	d01c      	beq.n	1a016 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19fe4:	2100      	movs	r1, #0
   19fe6:	e007      	b.n	19ff8 <recv_thread+0x78>
		switch (me->subevent) {
   19fe8:	78a3      	ldrb	r3, [r4, #2]
   19fea:	2b02      	cmp	r3, #2
   19fec:	d001      	beq.n	19ff2 <recv_thread+0x72>
   19fee:	2b0d      	cmp	r3, #13
		switch (subevent) {
   19ff0:	d1f4      	bne.n	19fdc <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19ff2:	2200      	movs	r2, #0
   19ff4:	2300      	movs	r3, #0
   19ff6:	2101      	movs	r1, #1
   19ff8:	f7fb ffda 	bl	15fb0 <bt_buf_get_evt>
	if (!evt_buf) {
   19ffc:	4605      	mov	r5, r0
   19ffe:	b140      	cbz	r0, 1a012 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a000:	7862      	ldrb	r2, [r4, #1]
   1a002:	4621      	mov	r1, r4
   1a004:	3202      	adds	r2, #2
   1a006:	3008      	adds	r0, #8
   1a008:	f006 fab2 	bl	20570 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a00c:	4628      	mov	r0, r5
   1a00e:	f7fb fba5 	bl	1575c <bt_recv>
	return true;
   1a012:	2601      	movs	r6, #1
   1a014:	e7ca      	b.n	19fac <recv_thread+0x2c>
		switch (subevent) {
   1a016:	78a3      	ldrb	r3, [r4, #2]
   1a018:	2b80      	cmp	r3, #128	; 0x80
   1a01a:	e7e9      	b.n	19ff0 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1a01c:	480f      	ldr	r0, [pc, #60]	; (1a05c <recv_thread+0xdc>)
   1a01e:	f7f5 fb19 	bl	f654 <sdc_hci_data_get>
   1a022:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a024:	f7ff ff98 	bl	19f58 <multithreading_lock_release>
	if (errcode) {
   1a028:	2d00      	cmp	r5, #0
   1a02a:	d1c6      	bne.n	19fba <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a034:	2003      	movs	r0, #3
   1a036:	f7fb ff85 	bl	15f44 <bt_buf_get_rx>
	if (!data_buf) {
   1a03a:	4605      	mov	r5, r0
   1a03c:	b908      	cbnz	r0, 1a042 <recv_thread+0xc2>
	return true;
   1a03e:	2501      	movs	r5, #1
   1a040:	e7bc      	b.n	19fbc <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1a042:	8862      	ldrh	r2, [r4, #2]
   1a044:	4621      	mov	r1, r4
   1a046:	3204      	adds	r2, #4
   1a048:	3008      	adds	r0, #8
   1a04a:	f006 fa91 	bl	20570 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a04e:	4628      	mov	r0, r5
   1a050:	f7fb fb84 	bl	1575c <bt_recv>
   1a054:	e7f3      	b.n	1a03e <recv_thread+0xbe>
   1a056:	bf00      	nop
   1a058:	200009bc 	.word	0x200009bc
   1a05c:	20002f66 	.word	0x20002f66

0001a060 <hci_driver_open>:
{
   1a060:	b510      	push	{r4, lr}
   1a062:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a064:	2200      	movs	r2, #0
   1a066:	2300      	movs	r3, #0
   1a068:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a06c:	2400      	movs	r4, #0
   1a06e:	f06f 0309 	mvn.w	r3, #9
   1a072:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a076:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a07a:	4b33      	ldr	r3, [pc, #204]	; (1a148 <hci_driver_open+0xe8>)
   1a07c:	4933      	ldr	r1, [pc, #204]	; (1a14c <hci_driver_open+0xec>)
   1a07e:	9400      	str	r4, [sp, #0]
   1a080:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a084:	4832      	ldr	r0, [pc, #200]	; (1a150 <hci_driver_open+0xf0>)
   1a086:	f001 fbc9 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a08a:	4932      	ldr	r1, [pc, #200]	; (1a154 <hci_driver_open+0xf4>)
   1a08c:	4830      	ldr	r0, [pc, #192]	; (1a150 <hci_driver_open+0xf0>)
   1a08e:	f006 fece 	bl	20e2e <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1a092:	a809      	add	r0, sp, #36	; 0x24
   1a094:	f7e9 ff58 	bl	3f48 <sdc_build_revision_get>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a098:	aa08      	add	r2, sp, #32
   1a09a:	2101      	movs	r1, #1
   1a09c:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   1a09e:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0a2:	f7e9 ff5f 	bl	3f64 <sdc_cfg_set>
	if (required_memory < 0) {
   1a0a6:	2800      	cmp	r0, #0
   1a0a8:	db27      	blt.n	1a0fa <hci_driver_open+0x9a>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1a0aa:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0ac:	aa08      	add	r2, sp, #32
   1a0ae:	2102      	movs	r1, #2
   1a0b0:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1a0b2:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0b6:	f7e9 ff55 	bl	3f64 <sdc_cfg_set>
	if (required_memory < 0) {
   1a0ba:	2800      	cmp	r0, #0
   1a0bc:	db1d      	blt.n	1a0fa <hci_driver_open+0x9a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1a0be:	4b26      	ldr	r3, [pc, #152]	; (1a158 <hci_driver_open+0xf8>)
   1a0c0:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0c2:	aa08      	add	r2, sp, #32
   1a0c4:	2103      	movs	r1, #3
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	f7e9 ff4c 	bl	3f64 <sdc_cfg_set>
	if (required_memory < 0) {
   1a0cc:	2800      	cmp	r0, #0
   1a0ce:	db14      	blt.n	1a0fa <hci_driver_open+0x9a>
	cfg.event_length.event_length_us =
   1a0d0:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0d4:	aa08      	add	r2, sp, #32
   1a0d6:	2104      	movs	r1, #4
   1a0d8:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1a0da:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a0dc:	f7e9 ff42 	bl	3f64 <sdc_cfg_set>
	if (required_memory < 0) {
   1a0e0:	2800      	cmp	r0, #0
   1a0e2:	db0a      	blt.n	1a0fa <hci_driver_open+0x9a>
	if (required_memory > sizeof(sdc_mempool)) {
   1a0e4:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   1a0e8:	dd09      	ble.n	1a0fe <hci_driver_open+0x9e>
		k_panic();
   1a0ea:	4040      	eors	r0, r0
   1a0ec:	f380 8811 	msr	BASEPRI, r0
   1a0f0:	f04f 0004 	mov.w	r0, #4
   1a0f4:	df02      	svc	2
		return -ENOMEM;
   1a0f6:	f06f 000b 	mvn.w	r0, #11
}
   1a0fa:	b00e      	add	sp, #56	; 0x38
   1a0fc:	bd10      	pop	{r4, pc}
			err = sdc_support_adv();
   1a0fe:	f7f4 ff84 	bl	f00a <sdc_support_adv>
			if (err) {
   1a102:	b110      	cbz	r0, 1a10a <hci_driver_open+0xaa>
				return -ENOTSUP;
   1a104:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a108:	e7f7      	b.n	1a0fa <hci_driver_open+0x9a>
		err = sdc_support_slave();
   1a10a:	f7f4 ff8d 	bl	f028 <sdc_support_slave>
		if (err) {
   1a10e:	2800      	cmp	r0, #0
   1a110:	d1f8      	bne.n	1a104 <hci_driver_open+0xa4>
		err = sdc_support_dle();
   1a112:	f7f4 ff7f 	bl	f014 <sdc_support_dle>
		if (err) {
   1a116:	2800      	cmp	r0, #0
   1a118:	d1f4      	bne.n	1a104 <hci_driver_open+0xa4>
		err = sdc_support_le_2m_phy();
   1a11a:	f7f4 ff80 	bl	f01e <sdc_support_le_2m_phy>
		if (err) {
   1a11e:	2800      	cmp	r0, #0
   1a120:	d1f0      	bne.n	1a104 <hci_driver_open+0xa4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a12a:	f7ff ff0d 	bl	19f48 <multithreading_lock_acquire>
	if (!err) {
   1a12e:	4604      	mov	r4, r0
   1a130:	b930      	cbnz	r0, 1a140 <hci_driver_open+0xe0>
		err = sdc_enable(host_signal, sdc_mempool);
   1a132:	490a      	ldr	r1, [pc, #40]	; (1a15c <hci_driver_open+0xfc>)
   1a134:	480a      	ldr	r0, [pc, #40]	; (1a160 <hci_driver_open+0x100>)
   1a136:	f7e9 ff41 	bl	3fbc <sdc_enable>
   1a13a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a13c:	f7ff ff0c 	bl	19f58 <multithreading_lock_release>
	if (err < 0) {
   1a140:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1a144:	e7d9      	b.n	1a0fa <hci_driver_open+0x9a>
   1a146:	bf00      	nop
   1a148:	00019f81 	.word	0x00019f81
   1a14c:	200042a0 	.word	0x200042a0
   1a150:	200024f8 	.word	0x200024f8
   1a154:	00022378 	.word	0x00022378
   1a158:	03031b1b 	.word	0x03031b1b
   1a15c:	20002fb2 	.word	0x20002fb2
   1a160:	0001a165 	.word	0x0001a165

0001a164 <host_signal>:
	z_impl_k_sem_give(sem);
   1a164:	4801      	ldr	r0, [pc, #4]	; (1a16c <host_signal+0x8>)
   1a166:	f001 babf 	b.w	1b6e8 <z_impl_k_sem_give>
   1a16a:	bf00      	nop
   1a16c:	200009bc 	.word	0x200009bc

0001a170 <hci_driver_send>:
{
   1a170:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1a172:	8983      	ldrh	r3, [r0, #12]
{
   1a174:	4605      	mov	r5, r0
	if (!buf->len) {
   1a176:	b383      	cbz	r3, 1a1da <hci_driver_send+0x6a>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   1a178:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1a17a:	b1ab      	cbz	r3, 1a1a8 <hci_driver_send+0x38>
   1a17c:	2b02      	cmp	r3, #2
   1a17e:	d12c      	bne.n	1a1da <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a188:	f7ff fede 	bl	19f48 <multithreading_lock_acquire>
	if (!errcode) {
   1a18c:	4604      	mov	r4, r0
   1a18e:	b948      	cbnz	r0, 1a1a4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1a190:	68a8      	ldr	r0, [r5, #8]
   1a192:	f7f5 fa6c 	bl	f66e <sdc_hci_data_put>
   1a196:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a198:	f7ff fede 	bl	19f58 <multithreading_lock_release>
		if (errcode) {
   1a19c:	b1c4      	cbz	r4, 1a1d0 <hci_driver_send+0x60>
   1a19e:	4810      	ldr	r0, [pc, #64]	; (1a1e0 <hci_driver_send+0x70>)
   1a1a0:	f001 faa2 	bl	1b6e8 <z_impl_k_sem_give>
}
   1a1a4:	4620      	mov	r0, r4
   1a1a6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a1a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a1ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a1b0:	f7ff feca 	bl	19f48 <multithreading_lock_acquire>
	if (!errcode) {
   1a1b4:	4604      	mov	r4, r0
   1a1b6:	2800      	cmp	r0, #0
   1a1b8:	d1f4      	bne.n	1a1a4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1a1ba:	68a8      	ldr	r0, [r5, #8]
   1a1bc:	f000 f812 	bl	1a1e4 <hci_internal_cmd_put>
   1a1c0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a1c2:	f7ff fec9 	bl	19f58 <multithreading_lock_release>
	if (errcode) {
   1a1c6:	2c00      	cmp	r4, #0
   1a1c8:	d1ec      	bne.n	1a1a4 <hci_driver_send+0x34>
   1a1ca:	4805      	ldr	r0, [pc, #20]	; (1a1e0 <hci_driver_send+0x70>)
   1a1cc:	f001 fa8c 	bl	1b6e8 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1a1d0:	4628      	mov	r0, r5
   1a1d2:	f7ff f937 	bl	19444 <net_buf_unref>
   1a1d6:	2400      	movs	r4, #0
   1a1d8:	e7e4      	b.n	1a1a4 <hci_driver_send+0x34>
	switch (type) {
   1a1da:	f06f 0415 	mvn.w	r4, #21
   1a1de:	e7e1      	b.n	1a1a4 <hci_driver_send+0x34>
   1a1e0:	200009bc 	.word	0x200009bc

0001a1e4 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1a1e4:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a1e6:	4c8a      	ldr	r4, [pc, #552]	; (1a410 <hci_internal_cmd_put+0x22c>)
   1a1e8:	7823      	ldrb	r3, [r4, #0]
   1a1ea:	2b00      	cmp	r3, #0
   1a1ec:	f040 82b8 	bne.w	1a760 <hci_internal_cmd_put+0x57c>
	return ((uint16_t)src[1] << 8) | src[0];
   1a1f0:	7843      	ldrb	r3, [r0, #1]
   1a1f2:	7805      	ldrb	r5, [r0, #0]
   1a1f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1a1f8:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1a1fc:	b22e      	sxth	r6, r5
   1a1fe:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1a202:	d20d      	bcs.n	1a220 <hci_internal_cmd_put+0x3c>
   1a204:	b17b      	cbz	r3, 1a226 <hci_internal_cmd_put+0x42>
   1a206:	3b01      	subs	r3, #1
   1a208:	2b07      	cmp	r3, #7
   1a20a:	d80c      	bhi.n	1a226 <hci_internal_cmd_put+0x42>
   1a20c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a210:	000b000e 	.word	0x000b000e
   1a214:	0060002c 	.word	0x0060002c
   1a218:	000b000b 	.word	0x000b000b
   1a21c:	0104000b 	.word	0x0104000b
   1a220:	2b3f      	cmp	r3, #63	; 0x3f
   1a222:	f000 821d 	beq.w	1a660 <hci_internal_cmd_put+0x47c>
   1a226:	2304      	movs	r3, #4
   1a228:	2001      	movs	r0, #1
   1a22a:	e254      	b.n	1a6d6 <hci_internal_cmd_put+0x4f2>
	switch (opcode)	{
   1a22c:	f240 4306 	movw	r3, #1030	; 0x406
   1a230:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a232:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1a236:	d005      	beq.n	1a244 <hci_internal_cmd_put+0x60>
   1a238:	f240 431d 	movw	r3, #1053	; 0x41d
   1a23c:	429e      	cmp	r6, r3
   1a23e:	d010      	beq.n	1a262 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1a240:	2001      	movs	r0, #1
   1a242:	e001      	b.n	1a248 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1a244:	f7f5 fb26 	bl	f894 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a248:	230f      	movs	r3, #15
   1a24a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1a24c:	2304      	movs	r3, #4
   1a24e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1a250:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1a252:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1a254:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1a256:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a25a:	2301      	movs	r3, #1
   1a25c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1a25e:	2000      	movs	r0, #0
}
   1a260:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1a262:	f7f5 fb19 	bl	f898 <sdc_hci_cmd_lc_read_remote_version_information>
   1a266:	e7ef      	b.n	1a248 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1a268:	f640 4363 	movw	r3, #3171	; 0xc63
   1a26c:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a26e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1a272:	d025      	beq.n	1a2c0 <hci_internal_cmd_put+0xdc>
   1a274:	dc0f      	bgt.n	1a296 <hci_internal_cmd_put+0xb2>
   1a276:	f640 4303 	movw	r3, #3075	; 0xc03
   1a27a:	429e      	cmp	r6, r3
   1a27c:	d018      	beq.n	1a2b0 <hci_internal_cmd_put+0xcc>
   1a27e:	f640 432d 	movw	r3, #3117	; 0xc2d
   1a282:	429e      	cmp	r6, r3
   1a284:	d017      	beq.n	1a2b6 <hci_internal_cmd_put+0xd2>
   1a286:	f640 4301 	movw	r3, #3073	; 0xc01
   1a28a:	429e      	cmp	r6, r3
   1a28c:	d1d8      	bne.n	1a240 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1a28e:	f7f5 fa0a 	bl	f6a6 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out +=
   1a292:	2304      	movs	r3, #4
   1a294:	e0b8      	b.n	1a408 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1a296:	f640 437b 	movw	r3, #3195	; 0xc7b
   1a29a:	429e      	cmp	r6, r3
   1a29c:	d013      	beq.n	1a2c6 <hci_internal_cmd_put+0xe2>
   1a29e:	f640 437c 	movw	r3, #3196	; 0xc7c
   1a2a2:	429e      	cmp	r6, r3
   1a2a4:	d1cc      	bne.n	1a240 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a2a6:	495b      	ldr	r1, [pc, #364]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a2a8:	f7f5 fa07 	bl	f6ba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1a2ac:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a2ae:	e0ab      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1a2b0:	f7ea f842 	bl	4338 <sdc_hci_cmd_cb_reset>
   1a2b4:	e7ed      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a2b6:	4957      	ldr	r1, [pc, #348]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a2b8:	f7f5 f9f3 	bl	f6a2 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1a2bc:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a2be:	e0a3      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1a2c0:	f7f5 f9f6 	bl	f6b0 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1a2c4:	e7e5      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a2c6:	4953      	ldr	r1, [pc, #332]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a2c8:	f7f5 f9e9 	bl	f69e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1a2cc:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a2ce:	e09b      	b.n	1a408 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1a2d0:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1a2d4:	3e01      	subs	r6, #1
   1a2d6:	2e08      	cmp	r6, #8
   1a2d8:	d8b2      	bhi.n	1a240 <hci_internal_cmd_put+0x5c>
   1a2da:	a301      	add	r3, pc, #4	; (adr r3, 1a2e0 <hci_internal_cmd_put+0xfc>)
   1a2dc:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1a2e0:	0001a305 	.word	0x0001a305
   1a2e4:	0001a30f 	.word	0x0001a30f
   1a2e8:	0001a3f9 	.word	0x0001a3f9
   1a2ec:	0001a241 	.word	0x0001a241
   1a2f0:	0001a241 	.word	0x0001a241
   1a2f4:	0001a241 	.word	0x0001a241
   1a2f8:	0001a241 	.word	0x0001a241
   1a2fc:	0001a241 	.word	0x0001a241
   1a300:	0001a401 	.word	0x0001a401
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a304:	4843      	ldr	r0, [pc, #268]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a306:	f7f5 fa78 	bl	f7fa <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1a30a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a30c:	e07c      	b.n	1a408 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1a30e:	4841      	ldr	r0, [pc, #260]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a310:	222e      	movs	r2, #46	; 0x2e
   1a312:	2100      	movs	r1, #0
   1a314:	f003 fc57 	bl	1dbc6 <memset>
	cmds->hci_disconnect = 1;
   1a318:	79e3      	ldrb	r3, [r4, #7]
   1a31a:	f043 0320 	orr.w	r3, r3, #32
   1a31e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1a320:	7a63      	ldrb	r3, [r4, #9]
   1a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a326:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1a328:	7b23      	ldrb	r3, [r4, #12]
   1a32a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a32e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1a330:	7c63      	ldrb	r3, [r4, #17]
   1a332:	f043 0304 	orr.w	r3, r3, #4
   1a336:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1a338:	7d63      	ldrb	r3, [r4, #21]
   1a33a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a33e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1a342:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1a344:	7da3      	ldrb	r3, [r4, #22]
   1a346:	f043 0302 	orr.w	r3, r3, #2
   1a34a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1a34c:	7f63      	ldrb	r3, [r4, #29]
   1a34e:	f043 0304 	orr.w	r3, r3, #4
   1a352:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1a354:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a358:	f063 0308 	orn	r3, r3, #8
   1a35c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1a360:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1a364:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1a368:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1a36c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1a370:	f063 030c 	orn	r3, r3, #12
   1a374:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1a378:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1a37c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1a380:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1a384:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1a388:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1a38c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1a390:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1a394:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1a398:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a39c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a3a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1a3a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1a3a8:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1a3ac:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1a3b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1a3b4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1a3b8:	f063 0301 	orn	r3, r3, #1
   1a3bc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1a3c0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1a3c4:	f043 0301 	orr.w	r3, r3, #1
   1a3c8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1a3cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1a3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a3d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1a3d8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a3dc:	f043 0304 	orr.w	r3, r3, #4
   1a3e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a3e4:	2344      	movs	r3, #68	; 0x44
		return 0;
   1a3e6:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a3e8:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1a3ea:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1a3ec:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a3ee:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1a3f0:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1a3f2:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1a3f4:	71a0      	strb	r0, [r4, #6]
}
   1a3f6:	e730      	b.n	1a25a <hci_internal_cmd_put+0x76>
		return sdc_hci_cmd_ip_read_local_supported_features((void *)event_out_params);
   1a3f8:	4806      	ldr	r0, [pc, #24]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a3fa:	f7f5 f9fc 	bl	f7f6 <sdc_hci_cmd_ip_read_local_supported_features>
   1a3fe:	e784      	b.n	1a30a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a400:	4804      	ldr	r0, [pc, #16]	; (1a414 <hci_internal_cmd_put+0x230>)
   1a402:	f7f5 f9f6 	bl	f7f2 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a406:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1a408:	2801      	cmp	r0, #1
   1a40a:	d1ed      	bne.n	1a3e8 <hci_internal_cmd_put+0x204>
   1a40c:	e71c      	b.n	1a248 <hci_internal_cmd_put+0x64>
   1a40e:	bf00      	nop
   1a410:	20003376 	.word	0x20003376
   1a414:	2000337d 	.word	0x2000337d
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a418:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1a41c:	3e01      	subs	r6, #1
   1a41e:	3003      	adds	r0, #3
	switch (opcode)	{
   1a420:	2e4d      	cmp	r6, #77	; 0x4d
   1a422:	f63f af0d 	bhi.w	1a240 <hci_internal_cmd_put+0x5c>
   1a426:	a301      	add	r3, pc, #4	; (adr r3, 1a42c <hci_internal_cmd_put+0x248>)
   1a428:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1a42c:	0001a565 	.word	0x0001a565
   1a430:	0001a56b 	.word	0x0001a56b
   1a434:	0001a573 	.word	0x0001a573
   1a438:	0001a241 	.word	0x0001a241
   1a43c:	0001a57b 	.word	0x0001a57b
   1a440:	0001a581 	.word	0x0001a581
   1a444:	0001a587 	.word	0x0001a587
   1a448:	0001a591 	.word	0x0001a591
   1a44c:	0001a597 	.word	0x0001a597
   1a450:	0001a59d 	.word	0x0001a59d
   1a454:	0001a241 	.word	0x0001a241
   1a458:	0001a241 	.word	0x0001a241
   1a45c:	0001a241 	.word	0x0001a241
   1a460:	0001a241 	.word	0x0001a241
   1a464:	0001a5a3 	.word	0x0001a5a3
   1a468:	0001a5ab 	.word	0x0001a5ab
   1a46c:	0001a5b1 	.word	0x0001a5b1
   1a470:	0001a5b7 	.word	0x0001a5b7
   1a474:	0001a241 	.word	0x0001a241
   1a478:	0001a241 	.word	0x0001a241
   1a47c:	0001a5bd 	.word	0x0001a5bd
   1a480:	0001a5c7 	.word	0x0001a5c7
   1a484:	0001a5cd 	.word	0x0001a5cd
   1a488:	0001a5d7 	.word	0x0001a5d7
   1a48c:	0001a241 	.word	0x0001a241
   1a490:	0001a5df 	.word	0x0001a5df
   1a494:	0001a5e7 	.word	0x0001a5e7
   1a498:	0001a5ef 	.word	0x0001a5ef
   1a49c:	0001a241 	.word	0x0001a241
   1a4a0:	0001a241 	.word	0x0001a241
   1a4a4:	0001a241 	.word	0x0001a241
   1a4a8:	0001a241 	.word	0x0001a241
   1a4ac:	0001a241 	.word	0x0001a241
   1a4b0:	0001a5fb 	.word	0x0001a5fb
   1a4b4:	0001a603 	.word	0x0001a603
   1a4b8:	0001a60b 	.word	0x0001a60b
   1a4bc:	0001a241 	.word	0x0001a241
   1a4c0:	0001a241 	.word	0x0001a241
   1a4c4:	0001a611 	.word	0x0001a611
   1a4c8:	0001a617 	.word	0x0001a617
   1a4cc:	0001a61d 	.word	0x0001a61d
   1a4d0:	0001a623 	.word	0x0001a623
   1a4d4:	0001a241 	.word	0x0001a241
   1a4d8:	0001a241 	.word	0x0001a241
   1a4dc:	0001a62b 	.word	0x0001a62b
   1a4e0:	0001a631 	.word	0x0001a631
   1a4e4:	0001a637 	.word	0x0001a637
   1a4e8:	0001a63f 	.word	0x0001a63f
   1a4ec:	0001a647 	.word	0x0001a647
   1a4f0:	0001a64d 	.word	0x0001a64d
   1a4f4:	0001a241 	.word	0x0001a241
   1a4f8:	0001a241 	.word	0x0001a241
   1a4fc:	0001a241 	.word	0x0001a241
   1a500:	0001a241 	.word	0x0001a241
   1a504:	0001a241 	.word	0x0001a241
   1a508:	0001a241 	.word	0x0001a241
   1a50c:	0001a241 	.word	0x0001a241
   1a510:	0001a241 	.word	0x0001a241
   1a514:	0001a241 	.word	0x0001a241
   1a518:	0001a241 	.word	0x0001a241
   1a51c:	0001a241 	.word	0x0001a241
   1a520:	0001a241 	.word	0x0001a241
   1a524:	0001a241 	.word	0x0001a241
   1a528:	0001a241 	.word	0x0001a241
   1a52c:	0001a241 	.word	0x0001a241
   1a530:	0001a241 	.word	0x0001a241
   1a534:	0001a241 	.word	0x0001a241
   1a538:	0001a241 	.word	0x0001a241
   1a53c:	0001a241 	.word	0x0001a241
   1a540:	0001a241 	.word	0x0001a241
   1a544:	0001a241 	.word	0x0001a241
   1a548:	0001a241 	.word	0x0001a241
   1a54c:	0001a241 	.word	0x0001a241
   1a550:	0001a241 	.word	0x0001a241
   1a554:	0001a653 	.word	0x0001a653
   1a558:	0001a241 	.word	0x0001a241
   1a55c:	0001a241 	.word	0x0001a241
   1a560:	0001a65b 	.word	0x0001a65b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1a564:	f7f5 f985 	bl	f872 <sdc_hci_cmd_le_set_event_mask>
   1a568:	e693      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a56a:	487f      	ldr	r0, [pc, #508]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a56c:	f7f5 f95d 	bl	f82a <sdc_hci_cmd_le_read_buffer_size>
   1a570:	e6a4      	b.n	1a2bc <hci_internal_cmd_put+0xd8>
		return sdc_hci_cmd_le_read_local_supported_features((void *)event_out_params);
   1a572:	487d      	ldr	r0, [pc, #500]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a574:	f7f5 f95d 	bl	f832 <sdc_hci_cmd_le_read_local_supported_features>
   1a578:	e6c7      	b.n	1a30a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1a57a:	f7f5 f983 	bl	f884 <sdc_hci_cmd_le_set_random_address>
   1a57e:	e688      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1a580:	f7f5 f971 	bl	f866 <sdc_hci_cmd_le_set_adv_params>
   1a584:	e685      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1a586:	4878      	ldr	r0, [pc, #480]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a588:	f7f5 f94d 	bl	f826 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1a58c:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1a58e:	e73b      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1a590:	f7f5 f965 	bl	f85e <sdc_hci_cmd_le_set_adv_data>
   1a594:	e67d      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1a596:	f7f5 f979 	bl	f88c <sdc_hci_cmd_le_set_scan_response_data>
   1a59a:	e67a      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1a59c:	f7f5 f961 	bl	f862 <sdc_hci_cmd_le_set_adv_enable>
   1a5a0:	e677      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1a5a2:	4871      	ldr	r0, [pc, #452]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5a4:	f7f5 f953 	bl	f84e <sdc_hci_cmd_le_read_white_list_size>
   1a5a8:	e7f0      	b.n	1a58c <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_clear_white_list();
   1a5aa:	f7f5 f92e 	bl	f80a <sdc_hci_cmd_le_clear_white_list>
   1a5ae:	e670      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1a5b0:	f7f5 f927 	bl	f802 <sdc_hci_cmd_le_add_device_to_white_list>
   1a5b4:	e66d      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1a5b6:	f7f5 f94e 	bl	f856 <sdc_hci_cmd_le_remove_device_from_white_list>
   1a5ba:	e66a      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a5bc:	496a      	ldr	r1, [pc, #424]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5be:	f7f5 f936 	bl	f82e <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1a5c2:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a5c4:	e720      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1a5c6:	f7f5 f93a 	bl	f83e <sdc_hci_cmd_le_read_remote_features>
   1a5ca:	e63d      	b.n	1a248 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a5cc:	4966      	ldr	r1, [pc, #408]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5ce:	f7f5 f91e 	bl	f80e <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1a5d2:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a5d4:	e718      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1a5d6:	4864      	ldr	r0, [pc, #400]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5d8:	f7f5 f923 	bl	f822 <sdc_hci_cmd_le_rand>
   1a5dc:	e695      	b.n	1a30a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1a5de:	4962      	ldr	r1, [pc, #392]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5e0:	f7f5 f91b 	bl	f81a <sdc_hci_cmd_le_long_term_key_request_reply>
   1a5e4:	e662      	b.n	1a2ac <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1a5e6:	4960      	ldr	r1, [pc, #384]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5e8:	f7f5 f913 	bl	f812 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1a5ec:	e65e      	b.n	1a2ac <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1a5ee:	238f      	movs	r3, #143	; 0x8f
   1a5f0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1a5f2:	23c0      	movs	r3, #192	; 0xc0
   1a5f4:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1a5f6:	230c      	movs	r3, #12
   1a5f8:	e6f5      	b.n	1a3e6 <hci_internal_cmd_put+0x202>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1a5fa:	495b      	ldr	r1, [pc, #364]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a5fc:	f7f5 f935 	bl	f86a <sdc_hci_cmd_le_set_data_length>
   1a600:	e654      	b.n	1a2ac <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1a602:	4859      	ldr	r0, [pc, #356]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a604:	f7f5 f91f 	bl	f846 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1a608:	e660      	b.n	1a2cc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1a60a:	f7f5 f941 	bl	f890 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1a60e:	e640      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1a610:	f7f5 f8f5 	bl	f7fe <sdc_hci_cmd_le_add_device_to_resolving_list>
   1a614:	e63d      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1a616:	f7f5 f91c 	bl	f852 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1a61a:	e63a      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1a61c:	f7f5 f8f3 	bl	f806 <sdc_hci_cmd_le_clear_resolving_list>
   1a620:	e637      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1a622:	4851      	ldr	r0, [pc, #324]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a624:	f7f5 f90d 	bl	f842 <sdc_hci_cmd_le_read_resolving_list_size>
   1a628:	e7b0      	b.n	1a58c <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1a62a:	f7f5 f916 	bl	f85a <sdc_hci_cmd_le_set_address_resolution_enable>
   1a62e:	e630      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1a630:	f7f5 f92a 	bl	f888 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1a634:	e62d      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a636:	484c      	ldr	r0, [pc, #304]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a638:	f7f5 f8fd 	bl	f836 <sdc_hci_cmd_le_read_max_data_length>
   1a63c:	e665      	b.n	1a30a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a63e:	494a      	ldr	r1, [pc, #296]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a640:	f7f5 f8fb 	bl	f83a <sdc_hci_cmd_le_read_phy>
   1a644:	e642      	b.n	1a2cc <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1a646:	f7f5 f912 	bl	f86e <sdc_hci_cmd_le_set_default_phy>
   1a64a:	e622      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1a64c:	f7f5 f916 	bl	f87c <sdc_hci_cmd_le_set_phy>
   1a650:	e5fa      	b.n	1a248 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a652:	4845      	ldr	r0, [pc, #276]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a654:	f7f5 f8f9 	bl	f84a <sdc_hci_cmd_le_read_transmit_power>
   1a658:	e628      	b.n	1a2ac <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1a65a:	f7f5 f911 	bl	f880 <sdc_hci_cmd_le_set_privacy_mode>
   1a65e:	e618      	b.n	1a292 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1a660:	f64f 4309 	movw	r3, #64521	; 0xfc09
   1a664:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a666:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1a66a:	d81f      	bhi.n	1a6ac <hci_internal_cmd_put+0x4c8>
   1a66c:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1a670:	f43f ade6 	beq.w	1a240 <hci_internal_cmd_put+0x5c>
   1a674:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1a678:	3b01      	subs	r3, #1
   1a67a:	2b08      	cmp	r3, #8
   1a67c:	f63f ade0 	bhi.w	1a240 <hci_internal_cmd_put+0x5c>
   1a680:	a201      	add	r2, pc, #4	; (adr r2, 1a688 <hci_internal_cmd_put+0x4a4>)
   1a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a686:	bf00      	nop
   1a688:	0001a6cf 	.word	0x0001a6cf
   1a68c:	0001a6fd 	.word	0x0001a6fd
   1a690:	0001a241 	.word	0x0001a241
   1a694:	0001a241 	.word	0x0001a241
   1a698:	0001a241 	.word	0x0001a241
   1a69c:	0001a711 	.word	0x0001a711
   1a6a0:	0001a241 	.word	0x0001a241
   1a6a4:	0001a241 	.word	0x0001a241
   1a6a8:	0001a707 	.word	0x0001a707
   1a6ac:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   1a6b0:	b29b      	uxth	r3, r3
   1a6b2:	2b04      	cmp	r3, #4
   1a6b4:	f63f adc4 	bhi.w	1a240 <hci_internal_cmd_put+0x5c>
   1a6b8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1a6bc:	3b01      	subs	r3, #1
   1a6be:	2b04      	cmp	r3, #4
   1a6c0:	f63f adbe 	bhi.w	1a240 <hci_internal_cmd_put+0x5c>
   1a6c4:	e8df f003 	tbb	[pc, r3]
   1a6c8:	312e2b28 	.word	0x312e2b28
   1a6cc:	34          	.byte	0x34
   1a6cd:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1a6ce:	4826      	ldr	r0, [pc, #152]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a6d0:	f7e9 fe4a 	bl	4368 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1a6d4:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1a6d6:	f242 0219 	movw	r2, #8217	; 0x2019
   1a6da:	4296      	cmp	r6, r2
   1a6dc:	dc38      	bgt.n	1a750 <hci_internal_cmd_put+0x56c>
   1a6de:	f242 020c 	movw	r2, #8204	; 0x200c
   1a6e2:	4296      	cmp	r6, r2
   1a6e4:	dc27      	bgt.n	1a736 <hci_internal_cmd_put+0x552>
   1a6e6:	f240 4206 	movw	r2, #1030	; 0x406
   1a6ea:	4296      	cmp	r6, r2
   1a6ec:	f43f adac 	beq.w	1a248 <hci_internal_cmd_put+0x64>
   1a6f0:	f240 421d 	movw	r2, #1053	; 0x41d
   1a6f4:	4296      	cmp	r6, r2
   1a6f6:	f43f ada7 	beq.w	1a248 <hci_internal_cmd_put+0x64>
   1a6fa:	e685      	b.n	1a408 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   1a6fc:	481a      	ldr	r0, [pc, #104]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a6fe:	f7f5 f866 	bl	f7ce <sdc_hci_cmd_vs_zephyr_read_supported_commands>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a702:	2344      	movs	r3, #68	; 0x44
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   1a704:	e7e7      	b.n	1a6d6 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a706:	4818      	ldr	r0, [pc, #96]	; (1a768 <hci_internal_cmd_put+0x584>)
   1a708:	f7f5 f81a 	bl	f740 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1a70c:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a70e:	e7e2      	b.n	1a6d6 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1a710:	f7f5 f86d 	bl	f7ee <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1a714:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1a716:	e7de      	b.n	1a6d6 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1a718:	f7f5 f805 	bl	f726 <sdc_hci_cmd_vs_llpm_mode_set>
   1a71c:	e5b9      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1a71e:	f7f4 ffd6 	bl	f6ce <sdc_hci_cmd_vs_conn_update>
   1a722:	e5b6      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1a724:	f7f4 ffcb 	bl	f6be <sdc_hci_cmd_vs_conn_event_extend>
   1a728:	e5b3      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1a72a:	f7f5 f804 	bl	f736 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1a72e:	e5b0      	b.n	1a292 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1a730:	f7f4 fff7 	bl	f722 <sdc_hci_cmd_vs_event_length_set>
   1a734:	e5ad      	b.n	1a292 <hci_internal_cmd_put+0xae>
   1a736:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1a73a:	3a0d      	subs	r2, #13
   1a73c:	2101      	movs	r1, #1
   1a73e:	b292      	uxth	r2, r2
   1a740:	fa01 f202 	lsl.w	r2, r1, r2
   1a744:	f241 2141 	movw	r1, #4673	; 0x1241
   1a748:	420a      	tst	r2, r1
   1a74a:	f43f ae5d 	beq.w	1a408 <hci_internal_cmd_put+0x224>
   1a74e:	e57b      	b.n	1a248 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1a750:	f242 0232 	movw	r2, #8242	; 0x2032
   1a754:	4296      	cmp	r6, r2
   1a756:	f43f ad77 	beq.w	1a248 <hci_internal_cmd_put+0x64>
   1a75a:	f242 0243 	movw	r2, #8259	; 0x2043
   1a75e:	e7c9      	b.n	1a6f4 <hci_internal_cmd_put+0x510>
		return -NRF_EPERM;
   1a760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a764:	e57c      	b.n	1a260 <hci_internal_cmd_put+0x7c>
   1a766:	bf00      	nop
   1a768:	2000337d 	.word	0x2000337d

0001a76c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1a76c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1a76e:	4c07      	ldr	r4, [pc, #28]	; (1a78c <hci_internal_evt_get+0x20>)
   1a770:	7823      	ldrb	r3, [r4, #0]
   1a772:	b13b      	cbz	r3, 1a784 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1a774:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1a776:	1c61      	adds	r1, r4, #1
   1a778:	3202      	adds	r2, #2
   1a77a:	f003 f9f9 	bl	1db70 <memcpy>
		cmd_complete_or_status.occurred = false;
   1a77e:	2000      	movs	r0, #0
   1a780:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1a782:	bd10      	pop	{r4, pc}
   1a784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1a788:	f7f4 bf7c 	b.w	f684 <sdc_hci_evt_get>
   1a78c:	20003376 	.word	0x20003376

0001a790 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1a794:	4c0b      	ldr	r4, [pc, #44]	; (1a7c4 <bt_rand+0x34>)
   1a796:	6823      	ldr	r3, [r4, #0]
{
   1a798:	4605      	mov	r5, r0
   1a79a:	460e      	mov	r6, r1
   1a79c:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1a79e:	b13b      	cbz	r3, 1a7b0 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1a7a0:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a7a2:	6883      	ldr	r3, [r0, #8]
   1a7a4:	b2b2      	uxth	r2, r6
   1a7a6:	4629      	mov	r1, r5
   1a7a8:	681b      	ldr	r3, [r3, #0]
}
   1a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a7ae:	4718      	bx	r3
   1a7b0:	4805      	ldr	r0, [pc, #20]	; (1a7c8 <bt_rand+0x38>)
   1a7b2:	f000 fa5b 	bl	1ac6c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a7b6:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1a7b8:	2800      	cmp	r0, #0
   1a7ba:	d1f1      	bne.n	1a7a0 <bt_rand+0x10>
}
   1a7bc:	f06f 0012 	mvn.w	r0, #18
   1a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7c4:	20002a30 	.word	0x20002a30
   1a7c8:	00022374 	.word	0x00022374

0001a7cc <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1a7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1a7ce:	2314      	movs	r3, #20
   1a7d0:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a7d4:	4a0f      	ldr	r2, [pc, #60]	; (1a814 <mpsl_lib_init+0x48>)
	clock_cfg.rc_temp_ctiv = 0;
   1a7d6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1a7d8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a7da:	2119      	movs	r1, #25
   1a7dc:	4668      	mov	r0, sp
	clock_cfg.source = m_config_clock_source_get();
   1a7de:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1a7e2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a7e6:	f7e9 f999 	bl	3b1c <mpsl_init>
	if (err) {
   1a7ea:	4604      	mov	r4, r0
   1a7ec:	b970      	cbnz	r0, 1a80c <mpsl_lib_init+0x40>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a7ee:	4601      	mov	r1, r0
   1a7f0:	462a      	mov	r2, r5
   1a7f2:	2008      	movs	r0, #8
   1a7f4:	f7f9 fb5a 	bl	13eac <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a7f8:	462a      	mov	r2, r5
   1a7fa:	4621      	mov	r1, r4
   1a7fc:	200b      	movs	r0, #11
   1a7fe:	f7f9 fb55 	bl	13eac <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a802:	462a      	mov	r2, r5
   1a804:	4621      	mov	r1, r4
   1a806:	4628      	mov	r0, r5
   1a808:	f7f9 fb50 	bl	13eac <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1a80c:	4620      	mov	r0, r4
   1a80e:	b003      	add	sp, #12
   1a810:	bd30      	pop	{r4, r5, pc}
   1a812:	bf00      	nop
   1a814:	000208ab 	.word	0x000208ab

0001a818 <mpsl_low_prio_irq_handler>:
   1a818:	4801      	ldr	r0, [pc, #4]	; (1a820 <mpsl_low_prio_irq_handler+0x8>)
   1a81a:	f000 bf65 	b.w	1b6e8 <z_impl_k_sem_give>
   1a81e:	bf00      	nop
   1a820:	200009d4 	.word	0x200009d4

0001a824 <signal_thread>:
{
   1a824:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1a826:	4c09      	ldr	r4, [pc, #36]	; (1a84c <signal_thread+0x28>)
   1a828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a830:	4620      	mov	r0, r4
   1a832:	f000 ff7f 	bl	1b734 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a83e:	f7ff fb83 	bl	19f48 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1a842:	f7f4 fafb 	bl	ee3c <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1a846:	f7ff fb87 	bl	19f58 <multithreading_lock_release>
	while (true) {
   1a84a:	e7ed      	b.n	1a828 <signal_thread+0x4>
   1a84c:	200009d4 	.word	0x200009d4

0001a850 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1a850:	b530      	push	{r4, r5, lr}
   1a852:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a854:	4d0f      	ldr	r5, [pc, #60]	; (1a894 <mpsl_signal_thread_init+0x44>)
   1a856:	4910      	ldr	r1, [pc, #64]	; (1a898 <mpsl_signal_thread_init+0x48>)
   1a858:	2200      	movs	r2, #0
   1a85a:	2300      	movs	r3, #0
   1a85c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a860:	2400      	movs	r4, #0
   1a862:	f06f 0309 	mvn.w	r3, #9
   1a866:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a86a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a86e:	4b0b      	ldr	r3, [pc, #44]	; (1a89c <mpsl_signal_thread_init+0x4c>)
   1a870:	9400      	str	r4, [sp, #0]
   1a872:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a876:	4628      	mov	r0, r5
   1a878:	f000 ffd0 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a87c:	4908      	ldr	r1, [pc, #32]	; (1a8a0 <mpsl_signal_thread_init+0x50>)
   1a87e:	4628      	mov	r0, r5
   1a880:	f006 fad5 	bl	20e2e <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1a884:	4622      	mov	r2, r4
   1a886:	2104      	movs	r1, #4
   1a888:	2019      	movs	r0, #25
   1a88a:	f7f9 fb0f 	bl	13eac <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1a88e:	4620      	mov	r0, r4
   1a890:	b009      	add	sp, #36	; 0x24
   1a892:	bd30      	pop	{r4, r5, pc}
   1a894:	20002580 	.word	0x20002580
   1a898:	200046c0 	.word	0x200046c0
   1a89c:	0001a825 	.word	0x0001a825
   1a8a0:	00022395 	.word	0x00022395

0001a8a4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a8a4:	4b01      	ldr	r3, [pc, #4]	; (1a8ac <mpsl_hfclk_callback+0x8>)
   1a8a6:	2000      	movs	r0, #0
   1a8a8:	681b      	ldr	r3, [r3, #0]
   1a8aa:	4718      	bx	r3
   1a8ac:	20002a34 	.word	0x20002a34

0001a8b0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1a8b0:	b120      	cbz	r0, 1a8bc <nrfx_clock_start+0xc>
   1a8b2:	2801      	cmp	r0, #1
   1a8b4:	d106      	bne.n	1a8c4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1a8b6:	4804      	ldr	r0, [pc, #16]	; (1a8c8 <nrfx_clock_start+0x18>)
   1a8b8:	f7e8 bfb2 	b.w	3820 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a8bc:	4b03      	ldr	r3, [pc, #12]	; (1a8cc <nrfx_clock_start+0x1c>)
   1a8be:	2001      	movs	r0, #1
   1a8c0:	681b      	ldr	r3, [r3, #0]
   1a8c2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1a8c4:	4770      	bx	lr
   1a8c6:	bf00      	nop
   1a8c8:	0001a8a5 	.word	0x0001a8a5
   1a8cc:	20002a34 	.word	0x20002a34

0001a8d0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1a8d0:	4b01      	ldr	r3, [pc, #4]	; (1a8d8 <nrfx_clock_init+0x8>)
   1a8d2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1a8d4:	4801      	ldr	r0, [pc, #4]	; (1a8dc <nrfx_clock_init+0xc>)
   1a8d6:	4770      	bx	lr
   1a8d8:	20002a34 	.word	0x20002a34
   1a8dc:	0bad0000 	.word	0x0bad0000

0001a8e0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a8e0:	4b04      	ldr	r3, [pc, #16]	; (1a8f4 <nrf52_errata_108+0x14>)
   1a8e2:	6818      	ldr	r0, [r3, #0]
   1a8e4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a8e6:	bf04      	itt	eq
   1a8e8:	4b03      	ldreq	r3, [pc, #12]	; (1a8f8 <nrf52_errata_108+0x18>)
   1a8ea:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1a8ec:	1f83      	subs	r3, r0, #6
   1a8ee:	4258      	negs	r0, r3
   1a8f0:	4158      	adcs	r0, r3
   1a8f2:	4770      	bx	lr
   1a8f4:	10000130 	.word	0x10000130
   1a8f8:	f0000fe0 	.word	0xf0000fe0

0001a8fc <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a8fc:	4b07      	ldr	r3, [pc, #28]	; (1a91c <nrf52_errata_16+0x20>)
   1a8fe:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1a900:	2b06      	cmp	r3, #6
   1a902:	d109      	bne.n	1a918 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a904:	4b06      	ldr	r3, [pc, #24]	; (1a920 <nrf52_errata_16+0x24>)
   1a906:	681b      	ldr	r3, [r3, #0]
   1a908:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1a90c:	3b03      	subs	r3, #3
   1a90e:	2b03      	cmp	r3, #3
   1a910:	d802      	bhi.n	1a918 <nrf52_errata_16+0x1c>
   1a912:	4a04      	ldr	r2, [pc, #16]	; (1a924 <nrf52_errata_16+0x28>)
   1a914:	5cd0      	ldrb	r0, [r2, r3]
   1a916:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a918:	2000      	movs	r0, #0
    #endif
}
   1a91a:	4770      	bx	lr
   1a91c:	f0000fe0 	.word	0xf0000fe0
   1a920:	f0000fe8 	.word	0xf0000fe8
   1a924:	000223a9 	.word	0x000223a9

0001a928 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a928:	4a02      	ldr	r2, [pc, #8]	; (1a934 <nvmc_wait+0xc>)
   1a92a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1a92e:	2b00      	cmp	r3, #0
   1a930:	d0fb      	beq.n	1a92a <nvmc_wait+0x2>
}
   1a932:	4770      	bx	lr
   1a934:	4001e000 	.word	0x4001e000

0001a938 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1a938:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1a93a:	f7ff ffd1 	bl	1a8e0 <nrf52_errata_108>
   1a93e:	b128      	cbz	r0, 1a94c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1a940:	4b77      	ldr	r3, [pc, #476]	; (1ab20 <SystemInit+0x1e8>)
   1a942:	4a78      	ldr	r2, [pc, #480]	; (1ab24 <SystemInit+0x1ec>)
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1a94a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1a94c:	f7ff ffd6 	bl	1a8fc <nrf52_errata_16>
   1a950:	b110      	cbz	r0, 1a958 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1a952:	4b75      	ldr	r3, [pc, #468]	; (1ab28 <SystemInit+0x1f0>)
   1a954:	4a75      	ldr	r2, [pc, #468]	; (1ab2c <SystemInit+0x1f4>)
   1a956:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1a958:	f7ff ffc2 	bl	1a8e0 <nrf52_errata_108>
   1a95c:	b128      	cbz	r0, 1a96a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1a95e:	4b74      	ldr	r3, [pc, #464]	; (1ab30 <SystemInit+0x1f8>)
   1a960:	4a74      	ldr	r2, [pc, #464]	; (1ab34 <SystemInit+0x1fc>)
   1a962:	681b      	ldr	r3, [r3, #0]
   1a964:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1a968:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1a96a:	f7ff ffc7 	bl	1a8fc <nrf52_errata_16>
   1a96e:	b120      	cbz	r0, 1a97a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1a970:	4a71      	ldr	r2, [pc, #452]	; (1ab38 <SystemInit+0x200>)
   1a972:	68d3      	ldr	r3, [r2, #12]
   1a974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a978:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1a97a:	f7ff ffb1 	bl	1a8e0 <nrf52_errata_108>
   1a97e:	b140      	cbz	r0, 1a992 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1a980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a984:	2200      	movs	r2, #0
   1a986:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a98a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a98e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1a992:	f7ff ffb3 	bl	1a8fc <nrf52_errata_16>
   1a996:	b110      	cbz	r0, 1a99e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1a998:	4b68      	ldr	r3, [pc, #416]	; (1ab3c <SystemInit+0x204>)
   1a99a:	2203      	movs	r2, #3
   1a99c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1a99e:	f7ff ffad 	bl	1a8fc <nrf52_errata_16>
   1a9a2:	b140      	cbz	r0, 1a9b6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1a9a4:	4b66      	ldr	r3, [pc, #408]	; (1ab40 <SystemInit+0x208>)
   1a9a6:	2205      	movs	r2, #5
   1a9a8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1a9aa:	2201      	movs	r2, #1
   1a9ac:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1a9ae:	2200      	movs	r2, #0
   1a9b0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1a9b2:	223f      	movs	r2, #63	; 0x3f
   1a9b4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a9b6:	4b63      	ldr	r3, [pc, #396]	; (1ab44 <SystemInit+0x20c>)
   1a9b8:	681a      	ldr	r2, [r3, #0]
   1a9ba:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a9bc:	bf0b      	itete	eq
   1a9be:	4b62      	ldreq	r3, [pc, #392]	; (1ab48 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1a9c0:	4b62      	ldrne	r3, [pc, #392]	; (1ab4c <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a9c2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1a9c4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1a9c6:	bf02      	ittt	eq
   1a9c8:	3308      	addeq	r3, #8
   1a9ca:	681b      	ldreq	r3, [r3, #0]
   1a9cc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1a9d0:	2a06      	cmp	r2, #6
   1a9d2:	d14d      	bne.n	1aa70 <SystemInit+0x138>
            {
                switch(var2)
   1a9d4:	3b03      	subs	r3, #3
   1a9d6:	2b03      	cmp	r3, #3
   1a9d8:	d803      	bhi.n	1a9e2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1a9da:	4a5d      	ldr	r2, [pc, #372]	; (1ab50 <SystemInit+0x218>)
   1a9dc:	5cd3      	ldrb	r3, [r2, r3]
   1a9de:	2b00      	cmp	r3, #0
   1a9e0:	d046      	beq.n	1aa70 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a9e6:	4b5b      	ldr	r3, [pc, #364]	; (1ab54 <SystemInit+0x21c>)
   1a9e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a9ec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a9f0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a9f4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a9f8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a9fc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1aa00:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1aa04:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1aa08:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1aa0c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1aa10:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1aa14:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1aa18:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1aa1c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1aa20:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1aa24:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1aa28:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1aa2c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1aa30:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1aa34:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1aa38:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1aa3c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1aa40:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1aa44:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1aa48:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1aa4c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1aa50:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1aa54:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1aa58:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1aa5c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1aa60:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1aa64:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1aa68:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1aa6c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1aa70:	f7ff ff36 	bl	1a8e0 <nrf52_errata_108>
   1aa74:	b128      	cbz	r0, 1aa82 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1aa76:	4b38      	ldr	r3, [pc, #224]	; (1ab58 <SystemInit+0x220>)
   1aa78:	4a38      	ldr	r2, [pc, #224]	; (1ab5c <SystemInit+0x224>)
   1aa7a:	681b      	ldr	r3, [r3, #0]
   1aa7c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1aa80:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1aa82:	f7ff ff2d 	bl	1a8e0 <nrf52_errata_108>
   1aa86:	b148      	cbz	r0, 1aa9c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1aa88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1aa8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1aa90:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1aa92:	bf44      	itt	mi
   1aa94:	f06f 0201 	mvnmi.w	r2, #1
   1aa98:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1aa9c:	4b29      	ldr	r3, [pc, #164]	; (1ab44 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1aa9e:	681b      	ldr	r3, [r3, #0]
   1aaa0:	2b06      	cmp	r3, #6
   1aaa2:	d10c      	bne.n	1aabe <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1aaa4:	4b29      	ldr	r3, [pc, #164]	; (1ab4c <SystemInit+0x214>)
   1aaa6:	681b      	ldr	r3, [r3, #0]
   1aaa8:	3b03      	subs	r3, #3
   1aaaa:	2b03      	cmp	r3, #3
   1aaac:	d802      	bhi.n	1aab4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1aaae:	4a2c      	ldr	r2, [pc, #176]	; (1ab60 <SystemInit+0x228>)
   1aab0:	5cd3      	ldrb	r3, [r2, r3]
   1aab2:	b123      	cbz	r3, 1aabe <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1aab4:	4a2b      	ldr	r2, [pc, #172]	; (1ab64 <SystemInit+0x22c>)
   1aab6:	6813      	ldr	r3, [r2, #0]
   1aab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1aabc:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1aabe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1aac2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1aac6:	2a00      	cmp	r2, #0
   1aac8:	db03      	blt.n	1aad2 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1aaca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1aace:	2b00      	cmp	r3, #0
   1aad0:	da22      	bge.n	1ab18 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1aad2:	4925      	ldr	r1, [pc, #148]	; (1ab68 <SystemInit+0x230>)
   1aad4:	2301      	movs	r3, #1
   1aad6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1aada:	f7ff ff25 	bl	1a928 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1aade:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1aae2:	2415      	movs	r4, #21
   1aae4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1aae8:	f7ff ff1e 	bl	1a928 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1aaec:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1aaf0:	f7ff ff1a 	bl	1a928 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1aaf4:	2300      	movs	r3, #0
   1aaf6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1aafa:	f7ff ff15 	bl	1a928 <nvmc_wait>
   1aafe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ab02:	491a      	ldr	r1, [pc, #104]	; (1ab6c <SystemInit+0x234>)
   1ab04:	4b1a      	ldr	r3, [pc, #104]	; (1ab70 <SystemInit+0x238>)
   1ab06:	68ca      	ldr	r2, [r1, #12]
   1ab08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ab0c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ab0e:	60cb      	str	r3, [r1, #12]
   1ab10:	f3bf 8f4f 	dsb	sy
    __NOP();
   1ab14:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ab16:	e7fd      	b.n	1ab14 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ab18:	4b16      	ldr	r3, [pc, #88]	; (1ab74 <SystemInit+0x23c>)
   1ab1a:	4a17      	ldr	r2, [pc, #92]	; (1ab78 <SystemInit+0x240>)
   1ab1c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ab1e:	bd10      	pop	{r4, pc}
   1ab20:	10000324 	.word	0x10000324
   1ab24:	40013540 	.word	0x40013540
   1ab28:	4007c074 	.word	0x4007c074
   1ab2c:	baadf00d 	.word	0xbaadf00d
   1ab30:	10000244 	.word	0x10000244
   1ab34:	4000053c 	.word	0x4000053c
   1ab38:	e000edf0 	.word	0xe000edf0
   1ab3c:	400005a0 	.word	0x400005a0
   1ab40:	40005610 	.word	0x40005610
   1ab44:	10000130 	.word	0x10000130
   1ab48:	f0000fe0 	.word	0xf0000fe0
   1ab4c:	10000134 	.word	0x10000134
   1ab50:	000223a1 	.word	0x000223a1
   1ab54:	4000c000 	.word	0x4000c000
   1ab58:	10000258 	.word	0x10000258
   1ab5c:	40000ee4 	.word	0x40000ee4
   1ab60:	000223a5 	.word	0x000223a5
   1ab64:	4000173c 	.word	0x4000173c
   1ab68:	4001e000 	.word	0x4001e000
   1ab6c:	e000ed00 	.word	0xe000ed00
   1ab70:	05fa0004 	.word	0x05fa0004
   1ab74:	200007b4 	.word	0x200007b4
   1ab78:	03d09000 	.word	0x03d09000

0001ab7c <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ab7c:	4b18      	ldr	r3, [pc, #96]	; (1abe0 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1ab7e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1abec <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ab82:	681b      	ldr	r3, [r3, #0]
{
   1ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ab88:	43db      	mvns	r3, r3
{
   1ab8a:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1ab8c:	4f15      	ldr	r7, [pc, #84]	; (1abe4 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1ab8e:	4816      	ldr	r0, [pc, #88]	; (1abe8 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ab90:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ab94:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1ab96:	f04f 0e01 	mov.w	lr, #1
   1ab9a:	b2e6      	uxtb	r6, r4
   1ab9c:	b90b      	cbnz	r3, 1aba2 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ab9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1aba2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1aba6:	f3ef 8811 	mrs	r8, BASEPRI
   1abaa:	f382 8811 	msr	BASEPRI, r2
   1abae:	f3bf 8f6f 	isb	sy
   1abb2:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1abb6:	4213      	tst	r3, r2
   1abb8:	d006      	beq.n	1abc8 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1abba:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1abbc:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1abbe:	bf01      	itttt	eq
   1abc0:	4311      	orreq	r1, r2
   1abc2:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1abc4:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1abc6:	4660      	moveq	r0, ip
	__asm__ volatile(
   1abc8:	f388 8811 	msr	BASEPRI, r8
   1abcc:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1abd0:	4560      	cmp	r0, ip
   1abd2:	f104 0401 	add.w	r4, r4, #1
   1abd6:	d0e2      	beq.n	1ab9e <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1abd8:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1abdc:	e7dd      	b.n	1ab9a <nrfx_ppi_channel_alloc+0x1e>
   1abde:	bf00      	nop
   1abe0:	00021de0 	.word	0x00021de0
   1abe4:	20002a38 	.word	0x20002a38
   1abe8:	0bad0002 	.word	0x0bad0002
   1abec:	0bad0000 	.word	0x0bad0000

0001abf0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1abf2:	4b10      	ldr	r3, [pc, #64]	; (1ac34 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1abf4:	4f10      	ldr	r7, [pc, #64]	; (1ac38 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1abf6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1abfa:	3001      	adds	r0, #1
   1abfc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ac00:	42ae      	cmp	r6, r5
   1ac02:	d800      	bhi.n	1ac06 <z_sys_init_run_level+0x16>
		}
	}
}
   1ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1ac06:	e9d5 3400 	ldrd	r3, r4, [r5]
   1ac0a:	4620      	mov	r0, r4
   1ac0c:	4798      	blx	r3
   1ac0e:	b170      	cbz	r0, 1ac2e <z_sys_init_run_level+0x3e>
   1ac10:	b16c      	cbz	r4, 1ac2e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1ac12:	1be4      	subs	r4, r4, r7
   1ac14:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1ac16:	0961      	lsrs	r1, r4, #5
   1ac18:	4a08      	ldr	r2, [pc, #32]	; (1ac3c <z_sys_init_run_level+0x4c>)
   1ac1a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1ac1e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1ac22:	2301      	movs	r3, #1
   1ac24:	fa03 f404 	lsl.w	r4, r3, r4
   1ac28:	4304      	orrs	r4, r0
   1ac2a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ac2e:	3508      	adds	r5, #8
   1ac30:	e7e6      	b.n	1ac00 <z_sys_init_run_level+0x10>
   1ac32:	bf00      	nop
   1ac34:	00021de4 	.word	0x00021de4
   1ac38:	200008bc 	.word	0x200008bc
   1ac3c:	2000091c 	.word	0x2000091c

0001ac40 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1ac40:	4b08      	ldr	r3, [pc, #32]	; (1ac64 <z_device_ready+0x24>)
   1ac42:	1ac0      	subs	r0, r0, r3
   1ac44:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1ac46:	4b08      	ldr	r3, [pc, #32]	; (1ac68 <z_device_ready+0x28>)
   1ac48:	0942      	lsrs	r2, r0, #5
   1ac4a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1ac4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1ac52:	2301      	movs	r3, #1
   1ac54:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1ac58:	4210      	tst	r0, r2
}
   1ac5a:	bf0c      	ite	eq
   1ac5c:	4618      	moveq	r0, r3
   1ac5e:	2000      	movne	r0, #0
   1ac60:	4770      	bx	lr
   1ac62:	bf00      	nop
   1ac64:	200008bc 	.word	0x200008bc
   1ac68:	2000091c 	.word	0x2000091c

0001ac6c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac6c:	4911      	ldr	r1, [pc, #68]	; (1acb4 <z_impl_device_get_binding+0x48>)
{
   1ac6e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac70:	4c11      	ldr	r4, [pc, #68]	; (1acb8 <z_impl_device_get_binding+0x4c>)
{
   1ac72:	4605      	mov	r5, r0
   1ac74:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac76:	428c      	cmp	r4, r1
   1ac78:	d104      	bne.n	1ac84 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac7a:	4c0f      	ldr	r4, [pc, #60]	; (1acb8 <z_impl_device_get_binding+0x4c>)
   1ac7c:	42b4      	cmp	r4, r6
   1ac7e:	d10a      	bne.n	1ac96 <z_impl_device_get_binding+0x2a>
	return NULL;
   1ac80:	2400      	movs	r4, #0
   1ac82:	e014      	b.n	1acae <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ac84:	4620      	mov	r0, r4
   1ac86:	f7ff ffdb 	bl	1ac40 <z_device_ready>
   1ac8a:	b110      	cbz	r0, 1ac92 <z_impl_device_get_binding+0x26>
   1ac8c:	6823      	ldr	r3, [r4, #0]
   1ac8e:	42ab      	cmp	r3, r5
   1ac90:	d00d      	beq.n	1acae <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac92:	3410      	adds	r4, #16
   1ac94:	e7ef      	b.n	1ac76 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ac96:	4620      	mov	r0, r4
   1ac98:	f7ff ffd2 	bl	1ac40 <z_device_ready>
   1ac9c:	b908      	cbnz	r0, 1aca2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1ac9e:	3410      	adds	r4, #16
   1aca0:	e7ec      	b.n	1ac7c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1aca2:	6821      	ldr	r1, [r4, #0]
   1aca4:	4628      	mov	r0, r5
   1aca6:	f002 ff47 	bl	1db38 <strcmp>
   1acaa:	2800      	cmp	r0, #0
   1acac:	d1f7      	bne.n	1ac9e <z_impl_device_get_binding+0x32>
}
   1acae:	4620      	mov	r0, r4
   1acb0:	bd70      	pop	{r4, r5, r6, pc}
   1acb2:	bf00      	nop
   1acb4:	2000091c 	.word	0x2000091c
   1acb8:	200008bc 	.word	0x200008bc

0001acbc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1acbe:	4e1c      	ldr	r6, [pc, #112]	; (1ad30 <idle+0x74>)
{
   1acc0:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1acc2:	2700      	movs	r7, #0
	__asm__ volatile(
   1acc4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1acc8:	f3ef 8311 	mrs	r3, BASEPRI
   1accc:	f382 8811 	msr	BASEPRI, r2
   1acd0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1acd4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1acd6:	b188      	cbz	r0, 1acfc <idle+0x40>
			cpu->pending_abort = NULL;
   1acd8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1acda:	f383 8811 	msr	BASEPRI, r3
   1acde:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1ace2:	f000 fb7d 	bl	1b3e0 <z_thread_single_abort>
	__asm__ volatile(
   1ace6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1acea:	f3ef 8011 	mrs	r0, BASEPRI
   1acee:	f383 8811 	msr	BASEPRI, r3
   1acf2:	f3bf 8f6f 	isb	sy
   1acf6:	f005 ffae 	bl	20c56 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1acfa:	e7e3      	b.n	1acc4 <idle+0x8>
	__asm__ volatile(
   1acfc:	f383 8811 	msr	BASEPRI, r3
   1ad00:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ad04:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ad08:	f3ef 8311 	mrs	r3, BASEPRI
   1ad0c:	f382 8811 	msr	BASEPRI, r2
   1ad10:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1ad14:	f006 f924 	bl	20f60 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ad18:	2101      	movs	r1, #1
   1ad1a:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1ad1c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ad1e:	bfd8      	it	le
   1ad20:	4608      	movle	r0, r1
   1ad22:	f006 f92d 	bl	20f80 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ad26:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1ad28:	f7f9 f99a 	bl	14060 <arch_cpu_idle>
}
   1ad2c:	e7ca      	b.n	1acc4 <idle+0x8>
   1ad2e:	bf00      	nop
   1ad30:	20002a3c 	.word	0x20002a3c

0001ad34 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ad34:	4802      	ldr	r0, [pc, #8]	; (1ad40 <z_bss_zero+0xc>)
   1ad36:	4a03      	ldr	r2, [pc, #12]	; (1ad44 <z_bss_zero+0x10>)
   1ad38:	2100      	movs	r1, #0
   1ad3a:	1a12      	subs	r2, r2, r0
   1ad3c:	f002 bf43 	b.w	1dbc6 <memset>
   1ad40:	20000af8 	.word	0x20000af8
   1ad44:	200033c4 	.word	0x200033c4

0001ad48 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ad48:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ad4a:	4806      	ldr	r0, [pc, #24]	; (1ad64 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ad4c:	4a06      	ldr	r2, [pc, #24]	; (1ad68 <z_data_copy+0x20>)
   1ad4e:	4907      	ldr	r1, [pc, #28]	; (1ad6c <z_data_copy+0x24>)
   1ad50:	1a12      	subs	r2, r2, r0
   1ad52:	f002 ff0d 	bl	1db70 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ad56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ad5a:	4a05      	ldr	r2, [pc, #20]	; (1ad70 <z_data_copy+0x28>)
   1ad5c:	4905      	ldr	r1, [pc, #20]	; (1ad74 <z_data_copy+0x2c>)
   1ad5e:	4806      	ldr	r0, [pc, #24]	; (1ad78 <z_data_copy+0x30>)
   1ad60:	f002 bf06 	b.w	1db70 <memcpy>
   1ad64:	20000000 	.word	0x20000000
   1ad68:	20000af4 	.word	0x20000af4
   1ad6c:	0002240c 	.word	0x0002240c
   1ad70:	00000000 	.word	0x00000000
   1ad74:	0002240c 	.word	0x0002240c
   1ad78:	20000000 	.word	0x20000000

0001ad7c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ad7c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1ad7e:	4b0c      	ldr	r3, [pc, #48]	; (1adb0 <bg_thread_main+0x34>)
   1ad80:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ad82:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ad84:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ad86:	f7ff ff33 	bl	1abf0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1ad8a:	4a0a      	ldr	r2, [pc, #40]	; (1adb4 <bg_thread_main+0x38>)
   1ad8c:	490a      	ldr	r1, [pc, #40]	; (1adb8 <bg_thread_main+0x3c>)
   1ad8e:	480b      	ldr	r0, [pc, #44]	; (1adbc <bg_thread_main+0x40>)
   1ad90:	f001 f9b1 	bl	1c0f6 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ad94:	2003      	movs	r0, #3
   1ad96:	f7ff ff2b 	bl	1abf0 <z_sys_init_run_level>

	z_init_static_threads();
   1ad9a:	f000 fd6b 	bl	1b874 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ad9e:	f7f7 fde7 	bl	12970 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ada2:	4a07      	ldr	r2, [pc, #28]	; (1adc0 <bg_thread_main+0x44>)
   1ada4:	7b13      	ldrb	r3, [r2, #12]
   1ada6:	f023 0301 	bic.w	r3, r3, #1
   1adaa:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1adac:	bd08      	pop	{r3, pc}
   1adae:	bf00      	nop
   1adb0:	200033c3 	.word	0x200033c3
   1adb4:	00021ee5 	.word	0x00021ee5
   1adb8:	000223ad 	.word	0x000223ad
   1adbc:	000223cc 	.word	0x000223cc
   1adc0:	20002690 	.word	0x20002690

0001adc4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1adc4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1adc8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1aec0 <z_cstart+0xfc>
   1adcc:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1adce:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1add2:	4d33      	ldr	r5, [pc, #204]	; (1aea0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1add4:	4e33      	ldr	r6, [pc, #204]	; (1aea4 <z_cstart+0xe0>)
   1add6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1add8:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1aec4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1addc:	4f32      	ldr	r7, [pc, #200]	; (1aea8 <z_cstart+0xe4>)
   1adde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ade2:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ade4:	23e0      	movs	r3, #224	; 0xe0
   1ade6:	2400      	movs	r4, #0
   1ade8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1adec:	2320      	movs	r3, #32
   1adee:	77eb      	strb	r3, [r5, #31]
   1adf0:	762c      	strb	r4, [r5, #24]
   1adf2:	766c      	strb	r4, [r5, #25]
   1adf4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1adf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1adf8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1adfc:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1adfe:	f7f9 fa73 	bl	142e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ae02:	f7f9 f927 	bl	14054 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ae06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ae0a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ae0c:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1ae0e:	4d27      	ldr	r5, [pc, #156]	; (1aeac <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ae10:	f240 1301 	movw	r3, #257	; 0x101
   1ae14:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ae18:	ab06      	add	r3, sp, #24
   1ae1a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ae1c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1ae1e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1ae22:	f7ff fee5 	bl	1abf0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ae26:	2001      	movs	r0, #1
   1ae28:	f7ff fee2 	bl	1abf0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ae2c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1ae30:	f000 fbda 	bl	1b5e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ae34:	4b1e      	ldr	r3, [pc, #120]	; (1aeb0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1ae36:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ae38:	491e      	ldr	r1, [pc, #120]	; (1aeb4 <z_cstart+0xf0>)
   1ae3a:	9305      	str	r3, [sp, #20]
   1ae3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ae40:	4653      	mov	r3, sl
   1ae42:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1ae46:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ae4a:	9400      	str	r4, [sp, #0]
   1ae4c:	4630      	mov	r0, r6
   1ae4e:	f000 fcb3 	bl	1b7b8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ae52:	7b73      	ldrb	r3, [r6, #13]
   1ae54:	4680      	mov	r8, r0
   1ae56:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1ae5a:	4630      	mov	r0, r6
   1ae5c:	7373      	strb	r3, [r6, #13]
   1ae5e:	f005 ff3c 	bl	20cda <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1ae62:	230f      	movs	r3, #15
   1ae64:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ae68:	4913      	ldr	r1, [pc, #76]	; (1aeb8 <z_cstart+0xf4>)
   1ae6a:	4b14      	ldr	r3, [pc, #80]	; (1aebc <z_cstart+0xf8>)
   1ae6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ae70:	e9cd b404 	strd	fp, r4, [sp, #16]
   1ae74:	e9cd 5400 	strd	r5, r4, [sp]
   1ae78:	4638      	mov	r0, r7
   1ae7a:	f000 fc9d 	bl	1b7b8 <z_setup_new_thread>
   1ae7e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ae80:	60ef      	str	r7, [r5, #12]
   1ae82:	f023 0304 	bic.w	r3, r3, #4
   1ae86:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ae88:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1ae8c:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1ae90:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1ae92:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ae96:	4652      	mov	r2, sl
   1ae98:	4641      	mov	r1, r8
   1ae9a:	4630      	mov	r0, r6
   1ae9c:	f7f9 f864 	bl	13f68 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1aea0:	e000ed00 	.word	0xe000ed00
   1aea4:	20002690 	.word	0x20002690
   1aea8:	20002608 	.word	0x20002608
   1aeac:	20002a3c 	.word	0x20002a3c
   1aeb0:	000223f3 	.word	0x000223f3
   1aeb4:	20004ae0 	.word	0x20004ae0
   1aeb8:	20005b00 	.word	0x20005b00
   1aebc:	0001acbd 	.word	0x0001acbd
   1aec0:	20006480 	.word	0x20006480
   1aec4:	0001ad7d 	.word	0x0001ad7d

0001aec8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1aec8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1aeca:	4c06      	ldr	r4, [pc, #24]	; (1aee4 <statics_init+0x1c>)
   1aecc:	4d06      	ldr	r5, [pc, #24]	; (1aee8 <statics_init+0x20>)
   1aece:	42ac      	cmp	r4, r5
   1aed0:	d301      	bcc.n	1aed6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1aed2:	2000      	movs	r0, #0
   1aed4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1aed6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1aeda:	4620      	mov	r0, r4
   1aedc:	f005 fd3f 	bl	2095e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1aee0:	3414      	adds	r4, #20
   1aee2:	e7f4      	b.n	1aece <statics_init+0x6>
   1aee4:	20000974 	.word	0x20000974
   1aee8:	20000974 	.word	0x20000974

0001aeec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1aeec:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1aeee:	4b0e      	ldr	r3, [pc, #56]	; (1af28 <init_mem_slab_module+0x3c>)
   1aef0:	4c0e      	ldr	r4, [pc, #56]	; (1af2c <init_mem_slab_module+0x40>)
   1aef2:	42a3      	cmp	r3, r4
   1aef4:	d301      	bcc.n	1aefa <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1aef6:	2000      	movs	r0, #0
	return rc;
}
   1aef8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1aefa:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1aefe:	ea41 0200 	orr.w	r2, r1, r0
   1af02:	f012 0203 	ands.w	r2, r2, #3
   1af06:	d10b      	bne.n	1af20 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1af08:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1af0a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1af0c:	42aa      	cmp	r2, r5
   1af0e:	d101      	bne.n	1af14 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1af10:	331c      	adds	r3, #28
   1af12:	e7ee      	b.n	1aef2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1af14:	695e      	ldr	r6, [r3, #20]
   1af16:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1af18:	3201      	adds	r2, #1
		slab->free_list = p;
   1af1a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1af1c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1af1e:	e7f5      	b.n	1af0c <init_mem_slab_module+0x20>
		return -EINVAL;
   1af20:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1af24:	e7e8      	b.n	1aef8 <init_mem_slab_module+0xc>
   1af26:	bf00      	nop
   1af28:	20000920 	.word	0x20000920
   1af2c:	20000974 	.word	0x20000974

0001af30 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1af30:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1af32:	460c      	mov	r4, r1
   1af34:	4616      	mov	r6, r2
   1af36:	461f      	mov	r7, r3
   1af38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af3c:	f3ef 8111 	mrs	r1, BASEPRI
   1af40:	f383 8811 	msr	BASEPRI, r3
   1af44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1af48:	6943      	ldr	r3, [r0, #20]
   1af4a:	b15b      	cbz	r3, 1af64 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1af4c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1af4e:	681b      	ldr	r3, [r3, #0]
   1af50:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1af52:	6983      	ldr	r3, [r0, #24]
   1af54:	3301      	adds	r3, #1
   1af56:	6183      	str	r3, [r0, #24]
		result = 0;
   1af58:	2000      	movs	r0, #0
	__asm__ volatile(
   1af5a:	f381 8811 	msr	BASEPRI, r1
   1af5e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1af62:	e011      	b.n	1af88 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1af64:	ea56 0207 	orrs.w	r2, r6, r7
   1af68:	d103      	bne.n	1af72 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1af6a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1af6c:	f06f 000b 	mvn.w	r0, #11
   1af70:	e7f3      	b.n	1af5a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1af72:	4602      	mov	r2, r0
   1af74:	e9cd 6700 	strd	r6, r7, [sp]
   1af78:	4804      	ldr	r0, [pc, #16]	; (1af8c <k_mem_slab_alloc+0x5c>)
   1af7a:	f000 faf3 	bl	1b564 <z_pend_curr>
		if (result == 0) {
   1af7e:	b918      	cbnz	r0, 1af88 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1af80:	4b03      	ldr	r3, [pc, #12]	; (1af90 <k_mem_slab_alloc+0x60>)
   1af82:	689b      	ldr	r3, [r3, #8]
   1af84:	695b      	ldr	r3, [r3, #20]
   1af86:	6023      	str	r3, [r4, #0]
}
   1af88:	b002      	add	sp, #8
   1af8a:	bdd0      	pop	{r4, r6, r7, pc}
   1af8c:	200033c4 	.word	0x200033c4
   1af90:	20002a3c 	.word	0x20002a3c

0001af94 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1af94:	b570      	push	{r4, r5, r6, lr}
   1af96:	4604      	mov	r4, r0
   1af98:	460d      	mov	r5, r1
	__asm__ volatile(
   1af9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af9e:	f3ef 8611 	mrs	r6, BASEPRI
   1afa2:	f383 8811 	msr	BASEPRI, r3
   1afa6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1afaa:	f005 fef1 	bl	20d90 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1afae:	b160      	cbz	r0, 1afca <k_mem_slab_free+0x36>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1afb0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1afb2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1afb4:	2100      	movs	r1, #0
   1afb6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		z_ready_thread(pending_thread);
   1afba:	f005 fe8e 	bl	20cda <z_ready_thread>
		z_reschedule(&lock, key);
   1afbe:	4631      	mov	r1, r6
   1afc0:	4808      	ldr	r0, [pc, #32]	; (1afe4 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1afc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1afc6:	f000 b885 	b.w	1b0d4 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1afca:	682b      	ldr	r3, [r5, #0]
   1afcc:	6962      	ldr	r2, [r4, #20]
   1afce:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1afd0:	682b      	ldr	r3, [r5, #0]
   1afd2:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1afd4:	69a3      	ldr	r3, [r4, #24]
   1afd6:	3b01      	subs	r3, #1
   1afd8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1afda:	f386 8811 	msr	BASEPRI, r6
   1afde:	f3bf 8f6f 	isb	sy
}
   1afe2:	bd70      	pop	{r4, r5, r6, pc}
   1afe4:	200033c4 	.word	0x200033c4

0001afe8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1afe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1afea:	4616      	mov	r6, r2
   1afec:	461f      	mov	r7, r3
	__asm__ volatile(
   1afee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aff2:	f3ef 8511 	mrs	r5, BASEPRI
   1aff6:	f383 8811 	msr	BASEPRI, r3
   1affa:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1affe:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b000:	b19c      	cbz	r4, 1b02a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b002:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b004:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b006:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b00a:	4294      	cmp	r4, r2
	list->head = node;
   1b00c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b00e:	bf08      	it	eq
   1b010:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b012:	2101      	movs	r1, #1
   1b014:	4620      	mov	r0, r4
   1b016:	f005 fd8c 	bl	20b32 <z_queue_node_peek>
   1b01a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b01c:	f385 8811 	msr	BASEPRI, r5
   1b020:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b024:	4620      	mov	r0, r4
   1b026:	b003      	add	sp, #12
   1b028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b02a:	ea56 0307 	orrs.w	r3, r6, r7
   1b02e:	d0f5      	beq.n	1b01c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b030:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b034:	e9cd 6700 	strd	r6, r7, [sp]
   1b038:	4629      	mov	r1, r5
   1b03a:	4610      	mov	r0, r2
   1b03c:	f000 fa92 	bl	1b564 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b040:	2800      	cmp	r0, #0
   1b042:	d1ef      	bne.n	1b024 <z_impl_k_queue_get+0x3c>
   1b044:	4b01      	ldr	r3, [pc, #4]	; (1b04c <z_impl_k_queue_get+0x64>)
   1b046:	689b      	ldr	r3, [r3, #8]
   1b048:	695c      	ldr	r4, [r3, #20]
   1b04a:	e7eb      	b.n	1b024 <z_impl_k_queue_get+0x3c>
   1b04c:	20002a3c 	.word	0x20002a3c

0001b050 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b050:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b052:	4c08      	ldr	r4, [pc, #32]	; (1b074 <z_reset_time_slice+0x24>)
   1b054:	6823      	ldr	r3, [r4, #0]
   1b056:	b15b      	cbz	r3, 1b070 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b058:	f7f8 fd20 	bl	13a9c <z_clock_elapsed>
   1b05c:	4603      	mov	r3, r0
   1b05e:	6820      	ldr	r0, [r4, #0]
   1b060:	4a05      	ldr	r2, [pc, #20]	; (1b078 <z_reset_time_slice+0x28>)
   1b062:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b068:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1b06a:	2100      	movs	r1, #0
   1b06c:	f005 bf88 	b.w	20f80 <z_set_timeout_expiry>
}
   1b070:	bd10      	pop	{r4, pc}
   1b072:	bf00      	nop
   1b074:	20002a78 	.word	0x20002a78
   1b078:	20002a3c 	.word	0x20002a3c

0001b07c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b07e:	4605      	mov	r5, r0
   1b080:	460c      	mov	r4, r1
	__asm__ volatile(
   1b082:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b086:	f3ef 8611 	mrs	r6, BASEPRI
   1b08a:	f383 8811 	msr	BASEPRI, r3
   1b08e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b092:	4b0d      	ldr	r3, [pc, #52]	; (1b0c8 <k_sched_time_slice_set+0x4c>)
   1b094:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b096:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b09a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b09e:	2100      	movs	r1, #0
   1b0a0:	615a      	str	r2, [r3, #20]
   1b0a2:	fbe7 0105 	umlal	r0, r1, r7, r5
   1b0a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	f7e5 fa9c 	bl	5e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b0b0:	4b06      	ldr	r3, [pc, #24]	; (1b0cc <k_sched_time_slice_set+0x50>)
   1b0b2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b0b4:	4b06      	ldr	r3, [pc, #24]	; (1b0d0 <k_sched_time_slice_set+0x54>)
   1b0b6:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1b0b8:	f7ff ffca 	bl	1b050 <z_reset_time_slice>
	__asm__ volatile(
   1b0bc:	f386 8811 	msr	BASEPRI, r6
   1b0c0:	f3bf 8f6f 	isb	sy
	}
}
   1b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b0c6:	bf00      	nop
   1b0c8:	20002a3c 	.word	0x20002a3c
   1b0cc:	20002a78 	.word	0x20002a78
   1b0d0:	20002a74 	.word	0x20002a74

0001b0d4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b0d4:	b949      	cbnz	r1, 1b0ea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b0d6:	f3ef 8005 	mrs	r0, IPSR
   1b0da:	b930      	cbnz	r0, 1b0ea <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1b0dc:	4b05      	ldr	r3, [pc, #20]	; (1b0f4 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b0de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b0e0:	689b      	ldr	r3, [r3, #8]
   1b0e2:	429a      	cmp	r2, r3
   1b0e4:	d001      	beq.n	1b0ea <z_reschedule+0x16>
	ret = arch_swap(key);
   1b0e6:	f7f8 beb5 	b.w	13e54 <arch_swap>
   1b0ea:	f381 8811 	msr	BASEPRI, r1
   1b0ee:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b0f2:	4770      	bx	lr
   1b0f4:	20002a3c 	.word	0x20002a3c

0001b0f8 <k_sched_lock>:
	__asm__ volatile(
   1b0f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0fc:	f3ef 8111 	mrs	r1, BASEPRI
   1b100:	f383 8811 	msr	BASEPRI, r3
   1b104:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b108:	4b04      	ldr	r3, [pc, #16]	; (1b11c <k_sched_lock+0x24>)
   1b10a:	689a      	ldr	r2, [r3, #8]
   1b10c:	7bd3      	ldrb	r3, [r2, #15]
   1b10e:	3b01      	subs	r3, #1
   1b110:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b112:	f381 8811 	msr	BASEPRI, r1
   1b116:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b11a:	4770      	bx	lr
   1b11c:	20002a3c 	.word	0x20002a3c

0001b120 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b120:	4b09      	ldr	r3, [pc, #36]	; (1b148 <z_priq_dumb_remove+0x28>)
   1b122:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1b126:	4282      	cmp	r2, r0
   1b128:	d105      	bne.n	1b136 <z_priq_dumb_remove+0x16>
   1b12a:	689b      	ldr	r3, [r3, #8]
   1b12c:	428b      	cmp	r3, r1
   1b12e:	d102      	bne.n	1b136 <z_priq_dumb_remove+0x16>
   1b130:	7b4b      	ldrb	r3, [r1, #13]
   1b132:	06db      	lsls	r3, r3, #27
   1b134:	d106      	bne.n	1b144 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b136:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b13a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b13c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b13e:	2300      	movs	r3, #0
	node->prev = NULL;
   1b140:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b144:	4770      	bx	lr
   1b146:	bf00      	nop
   1b148:	20002a3c 	.word	0x20002a3c

0001b14c <update_cache>:
{
   1b14c:	b538      	push	{r3, r4, r5, lr}
   1b14e:	4c12      	ldr	r4, [pc, #72]	; (1b198 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1b150:	6923      	ldr	r3, [r4, #16]
   1b152:	68a2      	ldr	r2, [r4, #8]
{
   1b154:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1b156:	b10b      	cbz	r3, 1b15c <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1b158:	68e5      	ldr	r5, [r4, #12]
   1b15a:	e00c      	b.n	1b176 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b15c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b160:	f005 fdb1 	bl	20cc6 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b164:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b166:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b168:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1b16a:	bf44      	itt	mi
   1b16c:	f043 0308 	orrmi.w	r3, r3, #8
   1b170:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1b172:	2d00      	cmp	r5, #0
   1b174:	d0f0      	beq.n	1b158 <update_cache+0xc>
	if (preempt_ok != 0) {
   1b176:	b949      	cbnz	r1, 1b18c <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1b178:	7b53      	ldrb	r3, [r2, #13]
   1b17a:	06db      	lsls	r3, r3, #27
   1b17c:	d106      	bne.n	1b18c <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b17e:	69ab      	ldr	r3, [r5, #24]
   1b180:	b923      	cbnz	r3, 1b18c <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b182:	89d3      	ldrh	r3, [r2, #14]
   1b184:	2b7f      	cmp	r3, #127	; 0x7f
   1b186:	d901      	bls.n	1b18c <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1b188:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1b18a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b18c:	4295      	cmp	r5, r2
   1b18e:	d001      	beq.n	1b194 <update_cache+0x48>
			z_reset_time_slice();
   1b190:	f7ff ff5e 	bl	1b050 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b194:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1b196:	e7f8      	b.n	1b18a <update_cache+0x3e>
   1b198:	20002a3c 	.word	0x20002a3c

0001b19c <k_sched_unlock>:
{
   1b19c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b19e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b1a2:	f3ef 8411 	mrs	r4, BASEPRI
   1b1a6:	f383 8811 	msr	BASEPRI, r3
   1b1aa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b1ae:	4b08      	ldr	r3, [pc, #32]	; (1b1d0 <k_sched_unlock+0x34>)
   1b1b0:	689a      	ldr	r2, [r3, #8]
   1b1b2:	7bd3      	ldrb	r3, [r2, #15]
   1b1b4:	3301      	adds	r3, #1
   1b1b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b1b8:	2000      	movs	r0, #0
   1b1ba:	f7ff ffc7 	bl	1b14c <update_cache>
	__asm__ volatile(
   1b1be:	f384 8811 	msr	BASEPRI, r4
   1b1c2:	f3bf 8f6f 	isb	sy
}
   1b1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b1ca:	f005 bd50 	b.w	20c6e <z_reschedule_unlocked>
   1b1ce:	bf00      	nop
   1b1d0:	20002a3c 	.word	0x20002a3c

0001b1d4 <ready_thread>:
{
   1b1d4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b1d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b1da:	7b43      	ldrb	r3, [r0, #13]
   1b1dc:	2a00      	cmp	r2, #0
   1b1de:	db2c      	blt.n	1b23a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b1e0:	06db      	lsls	r3, r3, #27
   1b1e2:	d12a      	bne.n	1b23a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1b1e4:	6983      	ldr	r3, [r0, #24]
   1b1e6:	bb43      	cbnz	r3, 1b23a <ready_thread+0x66>
	return list->head == list;
   1b1e8:	4a15      	ldr	r2, [pc, #84]	; (1b240 <ready_thread+0x6c>)
   1b1ea:	4611      	mov	r1, r2
   1b1ec:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b1f0:	428c      	cmp	r4, r1
   1b1f2:	bf18      	it	ne
   1b1f4:	4623      	movne	r3, r4
   1b1f6:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b1f8:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1b1fa:	bf38      	it	cc
   1b1fc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b1fe:	b1b3      	cbz	r3, 1b22e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b200:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b204:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b208:	42ae      	cmp	r6, r5
   1b20a:	db03      	blt.n	1b214 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1b20c:	42a3      	cmp	r3, r4
   1b20e:	d00e      	beq.n	1b22e <ready_thread+0x5a>
   1b210:	681b      	ldr	r3, [r3, #0]
   1b212:	e7f4      	b.n	1b1fe <ready_thread+0x2a>
	node->prev = successor->prev;
   1b214:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b216:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b21a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b21c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b21e:	7b43      	ldrb	r3, [r0, #13]
   1b220:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b224:	7343      	strb	r3, [r0, #13]
}
   1b226:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b228:	2000      	movs	r0, #0
   1b22a:	f7ff bf8f 	b.w	1b14c <update_cache>
	node->prev = list->tail;
   1b22e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1b232:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b234:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b236:	6310      	str	r0, [r2, #48]	; 0x30
}
   1b238:	e7f1      	b.n	1b21e <ready_thread+0x4a>
}
   1b23a:	bc70      	pop	{r4, r5, r6}
   1b23c:	4770      	bx	lr
   1b23e:	bf00      	nop
   1b240:	20002a3c 	.word	0x20002a3c

0001b244 <z_sched_start>:
{
   1b244:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b246:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b24a:	f3ef 8411 	mrs	r4, BASEPRI
   1b24e:	f382 8811 	msr	BASEPRI, r2
   1b252:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b256:	7b42      	ldrb	r2, [r0, #13]
   1b258:	0751      	lsls	r1, r2, #29
   1b25a:	d404      	bmi.n	1b266 <z_sched_start+0x22>
	__asm__ volatile(
   1b25c:	f384 8811 	msr	BASEPRI, r4
   1b260:	f3bf 8f6f 	isb	sy
}
   1b264:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b266:	f022 0204 	bic.w	r2, r2, #4
   1b26a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b26c:	f7ff ffb2 	bl	1b1d4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b270:	4621      	mov	r1, r4
   1b272:	4802      	ldr	r0, [pc, #8]	; (1b27c <z_sched_start+0x38>)
}
   1b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b278:	f7ff bf2c 	b.w	1b0d4 <z_reschedule>
   1b27c:	200033c4 	.word	0x200033c4

0001b280 <move_thread_to_end_of_prio_q>:
{
   1b280:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b282:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b286:	2b00      	cmp	r3, #0
{
   1b288:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b28a:	da02      	bge.n	1b292 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b28c:	4817      	ldr	r0, [pc, #92]	; (1b2ec <move_thread_to_end_of_prio_q+0x6c>)
   1b28e:	f7ff ff47 	bl	1b120 <z_priq_dumb_remove>
	return list->head == list;
   1b292:	4a17      	ldr	r2, [pc, #92]	; (1b2f0 <move_thread_to_end_of_prio_q+0x70>)
   1b294:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b296:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1b298:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b29c:	4283      	cmp	r3, r0
   1b29e:	bf08      	it	eq
   1b2a0:	2300      	moveq	r3, #0
   1b2a2:	2b00      	cmp	r3, #0
   1b2a4:	bf38      	it	cc
   1b2a6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2a8:	b1d3      	cbz	r3, 1b2e0 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b2aa:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1b2ae:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b2b2:	42ae      	cmp	r6, r5
   1b2b4:	db03      	blt.n	1b2be <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1b2b6:	42a3      	cmp	r3, r4
   1b2b8:	d012      	beq.n	1b2e0 <move_thread_to_end_of_prio_q+0x60>
   1b2ba:	681b      	ldr	r3, [r3, #0]
   1b2bc:	e7f4      	b.n	1b2a8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1b2be:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1b2c0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1b2c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b2c6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1b2c8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1b2ca:	6890      	ldr	r0, [r2, #8]
   1b2cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b2d0:	734b      	strb	r3, [r1, #13]
   1b2d2:	1a43      	subs	r3, r0, r1
   1b2d4:	4258      	negs	r0, r3
}
   1b2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b2da:	4158      	adcs	r0, r3
   1b2dc:	f7ff bf36 	b.w	1b14c <update_cache>
	node->prev = list->tail;
   1b2e0:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1b2e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b2e6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1b2e8:	6311      	str	r1, [r2, #48]	; 0x30
}
   1b2ea:	e7ed      	b.n	1b2c8 <move_thread_to_end_of_prio_q+0x48>
   1b2ec:	20002a68 	.word	0x20002a68
   1b2f0:	20002a3c 	.word	0x20002a3c

0001b2f4 <z_time_slice>:
{
   1b2f4:	b570      	push	{r4, r5, r6, lr}
   1b2f6:	4601      	mov	r1, r0
	__asm__ volatile(
   1b2f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b2fc:	f3ef 8411 	mrs	r4, BASEPRI
   1b300:	f383 8811 	msr	BASEPRI, r3
   1b304:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b308:	4b16      	ldr	r3, [pc, #88]	; (1b364 <z_time_slice+0x70>)
   1b30a:	4a17      	ldr	r2, [pc, #92]	; (1b368 <z_time_slice+0x74>)
   1b30c:	6898      	ldr	r0, [r3, #8]
   1b30e:	6815      	ldr	r5, [r2, #0]
   1b310:	42a8      	cmp	r0, r5
   1b312:	461d      	mov	r5, r3
   1b314:	d106      	bne.n	1b324 <z_time_slice+0x30>
			z_reset_time_slice();
   1b316:	f7ff fe9b 	bl	1b050 <z_reset_time_slice>
	__asm__ volatile(
   1b31a:	f384 8811 	msr	BASEPRI, r4
   1b31e:	f3bf 8f6f 	isb	sy
}
   1b322:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1b324:	2600      	movs	r6, #0
   1b326:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b328:	4a10      	ldr	r2, [pc, #64]	; (1b36c <z_time_slice+0x78>)
   1b32a:	6812      	ldr	r2, [r2, #0]
   1b32c:	b1ba      	cbz	r2, 1b35e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b32e:	89c2      	ldrh	r2, [r0, #14]
   1b330:	2a7f      	cmp	r2, #127	; 0x7f
   1b332:	d814      	bhi.n	1b35e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1b334:	7b42      	ldrb	r2, [r0, #13]
   1b336:	06d2      	lsls	r2, r2, #27
   1b338:	d111      	bne.n	1b35e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b33a:	4a0d      	ldr	r2, [pc, #52]	; (1b370 <z_time_slice+0x7c>)
   1b33c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b340:	6812      	ldr	r2, [r2, #0]
   1b342:	4296      	cmp	r6, r2
   1b344:	db0b      	blt.n	1b35e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b346:	4a0b      	ldr	r2, [pc, #44]	; (1b374 <z_time_slice+0x80>)
   1b348:	4290      	cmp	r0, r2
   1b34a:	d008      	beq.n	1b35e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1b34c:	695a      	ldr	r2, [r3, #20]
   1b34e:	428a      	cmp	r2, r1
   1b350:	dc02      	bgt.n	1b358 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1b352:	f7ff ff95 	bl	1b280 <move_thread_to_end_of_prio_q>
   1b356:	e7de      	b.n	1b316 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1b358:	1a52      	subs	r2, r2, r1
   1b35a:	615a      	str	r2, [r3, #20]
   1b35c:	e7dd      	b.n	1b31a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1b35e:	2300      	movs	r3, #0
   1b360:	616b      	str	r3, [r5, #20]
   1b362:	e7da      	b.n	1b31a <z_time_slice+0x26>
   1b364:	20002a3c 	.word	0x20002a3c
   1b368:	20002a70 	.word	0x20002a70
   1b36c:	20002a78 	.word	0x20002a78
   1b370:	20002a74 	.word	0x20002a74
   1b374:	20002608 	.word	0x20002608

0001b378 <z_impl_k_thread_suspend>:
{
   1b378:	b570      	push	{r4, r5, r6, lr}
   1b37a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b37c:	3018      	adds	r0, #24
   1b37e:	f005 fdd9 	bl	20f34 <z_abort_timeout>
	__asm__ volatile(
   1b382:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b386:	f3ef 8611 	mrs	r6, BASEPRI
   1b38a:	f383 8811 	msr	BASEPRI, r3
   1b38e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b392:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b396:	2b00      	cmp	r3, #0
   1b398:	da07      	bge.n	1b3aa <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b39a:	480f      	ldr	r0, [pc, #60]	; (1b3d8 <z_impl_k_thread_suspend+0x60>)
   1b39c:	4621      	mov	r1, r4
   1b39e:	f7ff febf 	bl	1b120 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b3a2:	7b63      	ldrb	r3, [r4, #13]
   1b3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b3a8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b3aa:	4d0c      	ldr	r5, [pc, #48]	; (1b3dc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b3ac:	7b63      	ldrb	r3, [r4, #13]
   1b3ae:	68a8      	ldr	r0, [r5, #8]
   1b3b0:	f043 0310 	orr.w	r3, r3, #16
   1b3b4:	7363      	strb	r3, [r4, #13]
   1b3b6:	1b03      	subs	r3, r0, r4
   1b3b8:	4258      	negs	r0, r3
   1b3ba:	4158      	adcs	r0, r3
   1b3bc:	f7ff fec6 	bl	1b14c <update_cache>
	__asm__ volatile(
   1b3c0:	f386 8811 	msr	BASEPRI, r6
   1b3c4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b3c8:	68ab      	ldr	r3, [r5, #8]
   1b3ca:	42a3      	cmp	r3, r4
   1b3cc:	d103      	bne.n	1b3d6 <z_impl_k_thread_suspend+0x5e>
}
   1b3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b3d2:	f005 bc4c 	b.w	20c6e <z_reschedule_unlocked>
}
   1b3d6:	bd70      	pop	{r4, r5, r6, pc}
   1b3d8:	20002a68 	.word	0x20002a68
   1b3dc:	20002a3c 	.word	0x20002a3c

0001b3e0 <z_thread_single_abort>:
{
   1b3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3e4:	4604      	mov	r4, r0
	__asm__ volatile(
   1b3e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3ea:	f3ef 8211 	mrs	r2, BASEPRI
   1b3ee:	f383 8811 	msr	BASEPRI, r3
   1b3f2:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1b3f6:	7b43      	ldrb	r3, [r0, #13]
   1b3f8:	f013 0f28 	tst.w	r3, #40	; 0x28
   1b3fc:	d005      	beq.n	1b40a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1b3fe:	f382 8811 	msr	BASEPRI, r2
   1b402:	f3bf 8f6f 	isb	sy
}
   1b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1b40a:	f043 0320 	orr.w	r3, r3, #32
   1b40e:	7343      	strb	r3, [r0, #13]
   1b410:	f382 8811 	msr	BASEPRI, r2
   1b414:	f3bf 8f6f 	isb	sy
   1b418:	3018      	adds	r0, #24
   1b41a:	f005 fd8b 	bl	20f34 <z_abort_timeout>
	__asm__ volatile(
   1b41e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b422:	f3ef 8611 	mrs	r6, BASEPRI
   1b426:	f383 8811 	msr	BASEPRI, r3
   1b42a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b42e:	7b63      	ldrb	r3, [r4, #13]
   1b430:	06d8      	lsls	r0, r3, #27
   1b432:	d116      	bne.n	1b462 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1b434:	69a2      	ldr	r2, [r4, #24]
   1b436:	b9a2      	cbnz	r2, 1b462 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1b438:	0619      	lsls	r1, r3, #24
   1b43a:	d507      	bpl.n	1b44c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1b43c:	4826      	ldr	r0, [pc, #152]	; (1b4d8 <z_thread_single_abort+0xf8>)
   1b43e:	4621      	mov	r1, r4
   1b440:	f7ff fe6e 	bl	1b120 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b444:	7b63      	ldrb	r3, [r4, #13]
   1b446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b44a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1b44c:	4b23      	ldr	r3, [pc, #140]	; (1b4dc <z_thread_single_abort+0xfc>)
   1b44e:	6898      	ldr	r0, [r3, #8]
   1b450:	1b02      	subs	r2, r0, r4
   1b452:	4250      	negs	r0, r2
   1b454:	4150      	adcs	r0, r2
   1b456:	f7ff fe79 	bl	1b14c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b45a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1b45e:	2700      	movs	r7, #0
   1b460:	e01e      	b.n	1b4a0 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1b462:	079b      	lsls	r3, r3, #30
   1b464:	d5f9      	bpl.n	1b45a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1b466:	68a0      	ldr	r0, [r4, #8]
   1b468:	4621      	mov	r1, r4
   1b46a:	f7ff fe59 	bl	1b120 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b46e:	7b63      	ldrb	r3, [r4, #13]
   1b470:	f023 0302 	bic.w	r3, r3, #2
   1b474:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1b476:	2300      	movs	r3, #0
   1b478:	60a3      	str	r3, [r4, #8]
   1b47a:	e7ee      	b.n	1b45a <z_thread_single_abort+0x7a>
   1b47c:	f105 0018 	add.w	r0, r5, #24
   1b480:	f005 fd58 	bl	20f34 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1b484:	68a8      	ldr	r0, [r5, #8]
   1b486:	4629      	mov	r1, r5
   1b488:	f7ff fe4a 	bl	1b120 <z_priq_dumb_remove>
   1b48c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1b48e:	60af      	str	r7, [r5, #8]
   1b490:	f023 0302 	bic.w	r3, r3, #2
   1b494:	736b      	strb	r3, [r5, #13]
   1b496:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1b49a:	4628      	mov	r0, r5
   1b49c:	f7ff fe9a 	bl	1b1d4 <ready_thread>
	return list->head == list;
   1b4a0:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b4a2:	4545      	cmp	r5, r8
   1b4a4:	d001      	beq.n	1b4aa <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1b4a6:	2d00      	cmp	r5, #0
   1b4a8:	d1e8      	bne.n	1b47c <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1b4aa:	4b0c      	ldr	r3, [pc, #48]	; (1b4dc <z_thread_single_abort+0xfc>)
   1b4ac:	689a      	ldr	r2, [r3, #8]
   1b4ae:	4b0c      	ldr	r3, [pc, #48]	; (1b4e0 <z_thread_single_abort+0x100>)
   1b4b0:	429a      	cmp	r2, r3
   1b4b2:	d102      	bne.n	1b4ba <z_thread_single_abort+0xda>
			update_cache(1);
   1b4b4:	2001      	movs	r0, #1
   1b4b6:	f7ff fe49 	bl	1b14c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1b4ba:	7b63      	ldrb	r3, [r4, #13]
   1b4bc:	f043 0308 	orr.w	r3, r3, #8
   1b4c0:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1b4c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1b4c4:	f386 8811 	msr	BASEPRI, r6
   1b4c8:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1b4cc:	2b00      	cmp	r3, #0
   1b4ce:	d09a      	beq.n	1b406 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1b4d0:	4620      	mov	r0, r4
}
   1b4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1b4d6:	4718      	bx	r3
   1b4d8:	20002a68 	.word	0x20002a68
   1b4dc:	20002a3c 	.word	0x20002a3c
   1b4e0:	20002608 	.word	0x20002608

0001b4e4 <unready_thread>:
{
   1b4e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b4e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b4ea:	2b00      	cmp	r3, #0
{
   1b4ec:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b4ee:	da06      	bge.n	1b4fe <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b4f0:	4807      	ldr	r0, [pc, #28]	; (1b510 <unready_thread+0x2c>)
   1b4f2:	f7ff fe15 	bl	1b120 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b4f6:	7b4b      	ldrb	r3, [r1, #13]
   1b4f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b4fc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1b4fe:	4b05      	ldr	r3, [pc, #20]	; (1b514 <unready_thread+0x30>)
   1b500:	6898      	ldr	r0, [r3, #8]
   1b502:	1a43      	subs	r3, r0, r1
   1b504:	4258      	negs	r0, r3
   1b506:	4158      	adcs	r0, r3
}
   1b508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b50c:	f7ff be1e 	b.w	1b14c <update_cache>
   1b510:	20002a68 	.word	0x20002a68
   1b514:	20002a3c 	.word	0x20002a3c

0001b518 <pend>:
{
   1b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b51c:	4606      	mov	r6, r0
   1b51e:	4614      	mov	r4, r2
   1b520:	461d      	mov	r5, r3
	__asm__ volatile(
   1b522:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b526:	f3ef 8711 	mrs	r7, BASEPRI
   1b52a:	f383 8811 	msr	BASEPRI, r3
   1b52e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b532:	f005 fc02 	bl	20d3a <add_to_waitq_locked>
	__asm__ volatile(
   1b536:	f387 8811 	msr	BASEPRI, r7
   1b53a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b53e:	1c6b      	adds	r3, r5, #1
   1b540:	bf08      	it	eq
   1b542:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1b546:	d008      	beq.n	1b55a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b548:	4622      	mov	r2, r4
   1b54a:	462b      	mov	r3, r5
   1b54c:	f106 0018 	add.w	r0, r6, #24
   1b550:	4903      	ldr	r1, [pc, #12]	; (1b560 <pend+0x48>)
}
   1b552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b556:	f000 bab5 	b.w	1bac4 <z_add_timeout>
   1b55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b55e:	bf00      	nop
   1b560:	00020cfb 	.word	0x00020cfb

0001b564 <z_pend_curr>:
{
   1b564:	b510      	push	{r4, lr}
	pending_current = _current;
   1b566:	4b07      	ldr	r3, [pc, #28]	; (1b584 <z_pend_curr+0x20>)
   1b568:	6898      	ldr	r0, [r3, #8]
   1b56a:	4b07      	ldr	r3, [pc, #28]	; (1b588 <z_pend_curr+0x24>)
{
   1b56c:	460c      	mov	r4, r1
	pending_current = _current;
   1b56e:	6018      	str	r0, [r3, #0]
{
   1b570:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b576:	f7ff ffcf 	bl	1b518 <pend>
   1b57a:	4620      	mov	r0, r4
}
   1b57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b580:	f7f8 bc68 	b.w	13e54 <arch_swap>
   1b584:	20002a3c 	.word	0x20002a3c
   1b588:	20002a70 	.word	0x20002a70

0001b58c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b58e:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1b590:	f005 fd10 	bl	20fb4 <z_tick_get_32>
   1b594:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1b596:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b59a:	f3ef 8711 	mrs	r7, BASEPRI
   1b59e:	f383 8811 	msr	BASEPRI, r3
   1b5a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b5a6:	4e0d      	ldr	r6, [pc, #52]	; (1b5dc <z_tick_sleep.part.0+0x50>)
   1b5a8:	4b0d      	ldr	r3, [pc, #52]	; (1b5e0 <z_tick_sleep.part.0+0x54>)
   1b5aa:	68b0      	ldr	r0, [r6, #8]
   1b5ac:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1b5ae:	f7ff ff99 	bl	1b4e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b5b2:	68b0      	ldr	r0, [r6, #8]
   1b5b4:	490b      	ldr	r1, [pc, #44]	; (1b5e4 <z_tick_sleep.part.0+0x58>)
   1b5b6:	462a      	mov	r2, r5
   1b5b8:	17eb      	asrs	r3, r5, #31
   1b5ba:	3018      	adds	r0, #24
   1b5bc:	f000 fa82 	bl	1bac4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b5c0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b5c2:	7b53      	ldrb	r3, [r2, #13]
   1b5c4:	f043 0310 	orr.w	r3, r3, #16
   1b5c8:	7353      	strb	r3, [r2, #13]
   1b5ca:	4638      	mov	r0, r7
   1b5cc:	f7f8 fc42 	bl	13e54 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b5d0:	f005 fcf0 	bl	20fb4 <z_tick_get_32>
   1b5d4:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b5d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5dc:	20002a3c 	.word	0x20002a3c
   1b5e0:	20002a70 	.word	0x20002a70
   1b5e4:	00020cfb 	.word	0x00020cfb

0001b5e8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b5e8:	4b04      	ldr	r3, [pc, #16]	; (1b5fc <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b5ea:	2100      	movs	r1, #0
   1b5ec:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1b5f0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1b5f4:	4608      	mov	r0, r1
   1b5f6:	f7ff bd41 	b.w	1b07c <k_sched_time_slice_set>
   1b5fa:	bf00      	nop
   1b5fc:	20002a3c 	.word	0x20002a3c

0001b600 <z_impl_k_yield>:
{
   1b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b602:	4c24      	ldr	r4, [pc, #144]	; (1b694 <z_impl_k_yield+0x94>)
   1b604:	4b24      	ldr	r3, [pc, #144]	; (1b698 <z_impl_k_yield+0x98>)
   1b606:	68a2      	ldr	r2, [r4, #8]
   1b608:	429a      	cmp	r2, r3
   1b60a:	d030      	beq.n	1b66e <z_impl_k_yield+0x6e>
   1b60c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b610:	f3ef 8511 	mrs	r5, BASEPRI
   1b614:	f383 8811 	msr	BASEPRI, r3
   1b618:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b61c:	68a1      	ldr	r1, [r4, #8]
   1b61e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b622:	f7ff fd7d 	bl	1b120 <z_priq_dumb_remove>
	return list->head == list;
   1b626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b628:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b62a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b62c:	4283      	cmp	r3, r0
   1b62e:	bf08      	it	eq
   1b630:	2300      	moveq	r3, #0
   1b632:	2b00      	cmp	r3, #0
   1b634:	bf38      	it	cc
   1b636:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b638:	b32b      	cbz	r3, 1b686 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b63a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b63e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b642:	42b7      	cmp	r7, r6
   1b644:	db03      	blt.n	1b64e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1b646:	428b      	cmp	r3, r1
   1b648:	d01d      	beq.n	1b686 <z_impl_k_yield+0x86>
   1b64a:	681b      	ldr	r3, [r3, #0]
   1b64c:	e7f4      	b.n	1b638 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1b64e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b650:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1b654:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1b656:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1b658:	7b53      	ldrb	r3, [r2, #13]
   1b65a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b65e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1b660:	2001      	movs	r0, #1
   1b662:	f7ff fd73 	bl	1b14c <update_cache>
	__asm__ volatile(
   1b666:	f385 8811 	msr	BASEPRI, r5
   1b66a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b66e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b672:	f3ef 8011 	mrs	r0, BASEPRI
   1b676:	f383 8811 	msr	BASEPRI, r3
   1b67a:	f3bf 8f6f 	isb	sy
}
   1b67e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b682:	f7f8 bbe7 	b.w	13e54 <arch_swap>
	node->prev = list->tail;
   1b686:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1b68a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b68c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b68e:	6322      	str	r2, [r4, #48]	; 0x30
}
   1b690:	e7e2      	b.n	1b658 <z_impl_k_yield+0x58>
   1b692:	bf00      	nop
   1b694:	20002a3c 	.word	0x20002a3c
   1b698:	20002608 	.word	0x20002608

0001b69c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b69c:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b69e:	3301      	adds	r3, #1
   1b6a0:	bf08      	it	eq
   1b6a2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1b6a6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b6a8:	d106      	bne.n	1b6b8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b6aa:	4b0b      	ldr	r3, [pc, #44]	; (1b6d8 <z_impl_k_sleep+0x3c>)
   1b6ac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b6ae:	f7ff fe63 	bl	1b378 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1b6b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1b6b6:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1b6b8:	4604      	mov	r4, r0
	if (ticks == 0) {
   1b6ba:	b948      	cbnz	r0, 1b6d0 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1b6bc:	f7ff ffa0 	bl	1b600 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1b6c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b6c4:	fb84 3400 	smull	r3, r4, r4, r0
   1b6c8:	0bd8      	lsrs	r0, r3, #15
   1b6ca:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b6ce:	e7f2      	b.n	1b6b6 <z_impl_k_sleep+0x1a>
   1b6d0:	f7ff ff5c 	bl	1b58c <z_tick_sleep.part.0>
   1b6d4:	4604      	mov	r4, r0
   1b6d6:	e7f3      	b.n	1b6c0 <z_impl_k_sleep+0x24>
   1b6d8:	20002a3c 	.word	0x20002a3c

0001b6dc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b6dc:	4b01      	ldr	r3, [pc, #4]	; (1b6e4 <z_impl_k_current_get+0x8>)
   1b6de:	6898      	ldr	r0, [r3, #8]
   1b6e0:	4770      	bx	lr
   1b6e2:	bf00      	nop
   1b6e4:	20002a3c 	.word	0x20002a3c

0001b6e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b6e8:	b538      	push	{r3, r4, r5, lr}
   1b6ea:	4604      	mov	r4, r0
   1b6ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6f0:	f3ef 8511 	mrs	r5, BASEPRI
   1b6f4:	f383 8811 	msr	BASEPRI, r3
   1b6f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1b6fc:	f005 fb48 	bl	20d90 <z_unpend_first_thread>

	if (thread != NULL) {
   1b700:	b150      	cbz	r0, 1b718 <z_impl_k_sem_give+0x30>
   1b702:	2200      	movs	r2, #0
   1b704:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b708:	f005 fae7 	bl	20cda <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b70c:	4629      	mov	r1, r5
   1b70e:	4808      	ldr	r0, [pc, #32]	; (1b730 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1b710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b714:	f7ff bcde 	b.w	1b0d4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b718:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b71c:	429a      	cmp	r2, r3
   1b71e:	bf18      	it	ne
   1b720:	3301      	addne	r3, #1
   1b722:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b724:	2102      	movs	r1, #2
   1b726:	f104 0010 	add.w	r0, r4, #16
   1b72a:	f005 fdd6 	bl	212da <z_handle_obj_poll_events>
}
   1b72e:	e7ed      	b.n	1b70c <z_impl_k_sem_give+0x24>
   1b730:	200033c4 	.word	0x200033c4

0001b734 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b734:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b736:	4614      	mov	r4, r2
   1b738:	461d      	mov	r5, r3
   1b73a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b73e:	f3ef 8111 	mrs	r1, BASEPRI
   1b742:	f383 8811 	msr	BASEPRI, r3
   1b746:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1b74a:	6883      	ldr	r3, [r0, #8]
   1b74c:	b143      	cbz	r3, 1b760 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1b74e:	3b01      	subs	r3, #1
   1b750:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1b752:	f381 8811 	msr	BASEPRI, r1
   1b756:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b75a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b75c:	b003      	add	sp, #12
   1b75e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b760:	ea54 0305 	orrs.w	r3, r4, r5
   1b764:	d106      	bne.n	1b774 <z_impl_k_sem_take+0x40>
   1b766:	f381 8811 	msr	BASEPRI, r1
   1b76a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b76e:	f06f 000f 	mvn.w	r0, #15
   1b772:	e7f3      	b.n	1b75c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b774:	4602      	mov	r2, r0
   1b776:	e9cd 4500 	strd	r4, r5, [sp]
   1b77a:	4802      	ldr	r0, [pc, #8]	; (1b784 <z_impl_k_sem_take+0x50>)
   1b77c:	f7ff fef2 	bl	1b564 <z_pend_curr>
	return ret;
   1b780:	e7ec      	b.n	1b75c <z_impl_k_sem_take+0x28>
   1b782:	bf00      	nop
   1b784:	200033c4 	.word	0x200033c4

0001b788 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b788:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b78a:	4c08      	ldr	r4, [pc, #32]	; (1b7ac <k_sys_work_q_init+0x24>)
   1b78c:	4908      	ldr	r1, [pc, #32]	; (1b7b0 <k_sys_work_q_init+0x28>)
   1b78e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b792:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b796:	4620      	mov	r0, r4
   1b798:	f000 f8de 	bl	1b958 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b79c:	4905      	ldr	r1, [pc, #20]	; (1b7b4 <k_sys_work_q_init+0x2c>)
   1b79e:	f104 0018 	add.w	r0, r4, #24
   1b7a2:	f005 fb44 	bl	20e2e <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b7a6:	2000      	movs	r0, #0
   1b7a8:	bd10      	pop	{r4, pc}
   1b7aa:	bf00      	nop
   1b7ac:	20002718 	.word	0x20002718
   1b7b0:	20006480 	.word	0x20006480
   1b7b4:	000223f8 	.word	0x000223f8

0001b7b8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b7b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1b7bc:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1b7c0:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1b7c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b7c6:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b7c8:	2504      	movs	r5, #4
   1b7ca:	7345      	strb	r5, [r0, #13]
{
   1b7cc:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1b7ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b7d0:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b7d2:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1b7d4:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1b7d8:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b7da:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1b7de:	3720      	adds	r7, #32
	node->prev = NULL;
   1b7e0:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1b7e4:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1b7e8:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b7ea:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7ee:	9202      	str	r2, [sp, #8]
   1b7f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b7f2:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1b7f4:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b7f8:	9200      	str	r2, [sp, #0]
   1b7fa:	4642      	mov	r2, r8
{
   1b7fc:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7fe:	f7f8 fb7d 	bl	13efc <arch_new_thread>
	if (!_current) {
   1b802:	4b05      	ldr	r3, [pc, #20]	; (1b818 <z_setup_new_thread+0x60>)
   1b804:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1b806:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1b80a:	b103      	cbz	r3, 1b80e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1b80c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1b80e:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1b810:	4640      	mov	r0, r8
   1b812:	b004      	add	sp, #16
   1b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b818:	20002a3c 	.word	0x20002a3c

0001b81c <z_impl_k_thread_create>:
{
   1b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b81e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b820:	2500      	movs	r5, #0
   1b822:	9505      	str	r5, [sp, #20]
   1b824:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b826:	9504      	str	r5, [sp, #16]
   1b828:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1b82a:	9503      	str	r5, [sp, #12]
   1b82c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b82e:	9502      	str	r5, [sp, #8]
{
   1b830:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b834:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b836:	9501      	str	r5, [sp, #4]
   1b838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b83a:	9500      	str	r5, [sp, #0]
{
   1b83c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b83e:	f7ff ffbb 	bl	1b7b8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b842:	1c7b      	adds	r3, r7, #1
   1b844:	bf08      	it	eq
   1b846:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1b84a:	d005      	beq.n	1b858 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b84c:	ea56 0307 	orrs.w	r3, r6, r7
   1b850:	d105      	bne.n	1b85e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1b852:	4620      	mov	r0, r4
   1b854:	f7ff fcf6 	bl	1b244 <z_sched_start>
}
   1b858:	4620      	mov	r0, r4
   1b85a:	b007      	add	sp, #28
   1b85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b85e:	4904      	ldr	r1, [pc, #16]	; (1b870 <z_impl_k_thread_create+0x54>)
   1b860:	4632      	mov	r2, r6
   1b862:	463b      	mov	r3, r7
   1b864:	f104 0018 	add.w	r0, r4, #24
   1b868:	f000 f92c 	bl	1bac4 <z_add_timeout>
   1b86c:	e7f4      	b.n	1b858 <z_impl_k_thread_create+0x3c>
   1b86e:	bf00      	nop
   1b870:	00020cfb 	.word	0x00020cfb

0001b874 <z_init_static_threads>:
{
   1b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b878:	4e2a      	ldr	r6, [pc, #168]	; (1b924 <z_init_static_threads+0xb0>)
   1b87a:	4d2b      	ldr	r5, [pc, #172]	; (1b928 <z_init_static_threads+0xb4>)
{
   1b87c:	b086      	sub	sp, #24
   1b87e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1b880:	42b5      	cmp	r5, r6
   1b882:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b886:	d310      	bcc.n	1b8aa <z_init_static_threads+0x36>
	k_sched_lock();
   1b888:	f7ff fc36 	bl	1b0f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b88c:	4c26      	ldr	r4, [pc, #152]	; (1b928 <z_init_static_threads+0xb4>)
   1b88e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1b92c <z_init_static_threads+0xb8>
   1b892:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1b896:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b89a:	2700      	movs	r7, #0
   1b89c:	4544      	cmp	r4, r8
   1b89e:	d321      	bcc.n	1b8e4 <z_init_static_threads+0x70>
}
   1b8a0:	b006      	add	sp, #24
   1b8a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1b8a6:	f7ff bc79 	b.w	1b19c <k_sched_unlock>
		z_setup_new_thread(
   1b8aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b8ae:	9305      	str	r3, [sp, #20]
   1b8b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b8b4:	9304      	str	r3, [sp, #16]
   1b8b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b8ba:	9303      	str	r3, [sp, #12]
   1b8bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b8c0:	9302      	str	r3, [sp, #8]
   1b8c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b8c6:	9301      	str	r3, [sp, #4]
   1b8c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b8cc:	9300      	str	r3, [sp, #0]
   1b8ce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b8d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b8d6:	f7ff ff6f 	bl	1b7b8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b8da:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b8de:	65dd      	str	r5, [r3, #92]	; 0x5c
   1b8e0:	4625      	mov	r5, r4
   1b8e2:	e7cd      	b.n	1b880 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b8e6:	1c5a      	adds	r2, r3, #1
   1b8e8:	d00d      	beq.n	1b906 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1b8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b8ee:	4630      	mov	r0, r6
   1b8f0:	4639      	mov	r1, r7
   1b8f2:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b8f6:	42b9      	cmp	r1, r7
   1b8f8:	bf08      	it	eq
   1b8fa:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1b8fc:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b8fe:	d104      	bne.n	1b90a <z_init_static_threads+0x96>
	z_sched_start(thread);
   1b900:	4628      	mov	r0, r5
   1b902:	f7ff fc9f 	bl	1b244 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b906:	3430      	adds	r4, #48	; 0x30
   1b908:	e7c8      	b.n	1b89c <z_init_static_threads+0x28>
   1b90a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b90e:	2300      	movs	r3, #0
   1b910:	f7e4 fe6a 	bl	5e8 <__aeabi_uldivmod>
   1b914:	4602      	mov	r2, r0
   1b916:	460b      	mov	r3, r1
   1b918:	f105 0018 	add.w	r0, r5, #24
   1b91c:	4651      	mov	r1, sl
   1b91e:	f000 f8d1 	bl	1bac4 <z_add_timeout>
   1b922:	e7f0      	b.n	1b906 <z_init_static_threads+0x92>
   1b924:	20000920 	.word	0x20000920
   1b928:	20000920 	.word	0x20000920
   1b92c:	00020cfb 	.word	0x00020cfb

0001b930 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   1b930:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b932:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b936:	f3ef 8411 	mrs	r4, BASEPRI
   1b93a:	f383 8811 	msr	BASEPRI, r3
   1b93e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1b942:	4b04      	ldr	r3, [pc, #16]	; (1b954 <z_self_abort+0x24>)
   1b944:	6898      	ldr	r0, [r3, #8]
   1b946:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1b948:	f7ff fd16 	bl	1b378 <z_impl_k_thread_suspend>
   1b94c:	4620      	mov	r0, r4
   1b94e:	f7f8 fa81 	bl	13e54 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   1b952:	bf00      	nop
   1b954:	20002a3c 	.word	0x20002a3c

0001b958 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b95c:	4604      	mov	r4, r0
   1b95e:	b088      	sub	sp, #32
   1b960:	460d      	mov	r5, r1
   1b962:	4616      	mov	r6, r2
   1b964:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1b966:	f005 f8f0 	bl	20b4a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1b96a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b96e:	2200      	movs	r2, #0
   1b970:	2300      	movs	r3, #0
   1b972:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b976:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1b97a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1b97e:	4b07      	ldr	r3, [pc, #28]	; (1b99c <k_work_q_start+0x44>)
   1b980:	9400      	str	r4, [sp, #0]
   1b982:	4632      	mov	r2, r6
   1b984:	4629      	mov	r1, r5
   1b986:	4640      	mov	r0, r8
   1b988:	f7ff ff48 	bl	1b81c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b98c:	4904      	ldr	r1, [pc, #16]	; (1b9a0 <k_work_q_start+0x48>)
   1b98e:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1b990:	b008      	add	sp, #32
   1b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b996:	f005 ba4a 	b.w	20e2e <z_impl_k_thread_name_set>
   1b99a:	bf00      	nop
   1b99c:	0001c295 	.word	0x0001c295
   1b9a0:	00022401 	.word	0x00022401

0001b9a4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1b9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b9a8:	4606      	mov	r6, r0
   1b9aa:	460d      	mov	r5, r1
   1b9ac:	4690      	mov	r8, r2
   1b9ae:	4699      	mov	r9, r3
   1b9b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9b4:	f3ef 8711 	mrs	r7, BASEPRI
   1b9b8:	f383 8811 	msr	BASEPRI, r3
   1b9bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1b9c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1b9c2:	b17b      	cbz	r3, 1b9e4 <k_delayed_work_submit_to_queue+0x40>
   1b9c4:	4283      	cmp	r3, r0
   1b9c6:	d128      	bne.n	1ba1a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1b9c8:	4628      	mov	r0, r5
   1b9ca:	f005 fa50 	bl	20e6e <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1b9ce:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1b9d2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1b9d4:	d008      	beq.n	1b9e8 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1b9d6:	2800      	cmp	r0, #0
   1b9d8:	da07      	bge.n	1b9ea <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1b9da:	f387 8811 	msr	BASEPRI, r7
   1b9de:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1b9e2:	e00f      	b.n	1ba04 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1b9e4:	2800      	cmp	r0, #0
   1b9e6:	d0ef      	beq.n	1b9c8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1b9e8:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b9ea:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1b9ee:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b9f0:	d10b      	bne.n	1ba0a <k_delayed_work_submit_to_queue+0x66>
   1b9f2:	f387 8811 	msr	BASEPRI, r7
   1b9f6:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1b9fa:	4629      	mov	r1, r5
   1b9fc:	4630      	mov	r0, r6
   1b9fe:	f005 fa19 	bl	20e34 <k_work_submit_to_queue>
		return 0;
   1ba02:	2400      	movs	r4, #0
}
   1ba04:	4620      	mov	r0, r4
   1ba06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1ba0a:	4905      	ldr	r1, [pc, #20]	; (1ba20 <k_delayed_work_submit_to_queue+0x7c>)
   1ba0c:	4642      	mov	r2, r8
   1ba0e:	464b      	mov	r3, r9
   1ba10:	f105 0010 	add.w	r0, r5, #16
   1ba14:	f000 f856 	bl	1bac4 <z_add_timeout>
   1ba18:	e7df      	b.n	1b9da <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1ba1a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ba1e:	e7dc      	b.n	1b9da <k_delayed_work_submit_to_queue+0x36>
   1ba20:	00020e65 	.word	0x00020e65

0001ba24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1ba24:	4b03      	ldr	r3, [pc, #12]	; (1ba34 <elapsed+0x10>)
   1ba26:	681b      	ldr	r3, [r3, #0]
   1ba28:	b90b      	cbnz	r3, 1ba2e <elapsed+0xa>
   1ba2a:	f7f8 b837 	b.w	13a9c <z_clock_elapsed>
}
   1ba2e:	2000      	movs	r0, #0
   1ba30:	4770      	bx	lr
   1ba32:	bf00      	nop
   1ba34:	20002a7c 	.word	0x20002a7c

0001ba38 <remove_timeout>:
{
   1ba38:	b530      	push	{r4, r5, lr}
   1ba3a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ba3c:	b168      	cbz	r0, 1ba5a <remove_timeout+0x22>
   1ba3e:	4a0a      	ldr	r2, [pc, #40]	; (1ba68 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1ba40:	6852      	ldr	r2, [r2, #4]
   1ba42:	4290      	cmp	r0, r2
   1ba44:	d009      	beq.n	1ba5a <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ba46:	b143      	cbz	r3, 1ba5a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ba48:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ba4c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ba50:	1912      	adds	r2, r2, r4
   1ba52:	eb45 0101 	adc.w	r1, r5, r1
   1ba56:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1ba5a:	6842      	ldr	r2, [r0, #4]
   1ba5c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ba5e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ba60:	2300      	movs	r3, #0
	node->prev = NULL;
   1ba62:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ba66:	bd30      	pop	{r4, r5, pc}
   1ba68:	200007b8 	.word	0x200007b8

0001ba6c <next_timeout>:

static int32_t next_timeout(void)
{
   1ba6c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1ba6e:	4b13      	ldr	r3, [pc, #76]	; (1babc <next_timeout+0x50>)
   1ba70:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba72:	429c      	cmp	r4, r3
   1ba74:	bf08      	it	eq
   1ba76:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ba78:	f7ff ffd4 	bl	1ba24 <elapsed>
   1ba7c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1ba7e:	b1bc      	cbz	r4, 1bab0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ba80:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1ba84:	1b40      	subs	r0, r0, r5
   1ba86:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1ba8a:	2801      	cmp	r0, #1
   1ba8c:	f171 0300 	sbcs.w	r3, r1, #0
   1ba90:	db11      	blt.n	1bab6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ba92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1ba96:	2300      	movs	r3, #0
   1ba98:	4282      	cmp	r2, r0
   1ba9a:	eb73 0401 	sbcs.w	r4, r3, r1
   1ba9e:	da00      	bge.n	1baa2 <next_timeout+0x36>
   1baa0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1baa2:	4b07      	ldr	r3, [pc, #28]	; (1bac0 <next_timeout+0x54>)
   1baa4:	695b      	ldr	r3, [r3, #20]
   1baa6:	b113      	cbz	r3, 1baae <next_timeout+0x42>
   1baa8:	4298      	cmp	r0, r3
   1baaa:	bfa8      	it	ge
   1baac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1baae:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bab0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bab4:	e7f5      	b.n	1baa2 <next_timeout+0x36>
   1bab6:	2000      	movs	r0, #0
   1bab8:	e7f3      	b.n	1baa2 <next_timeout+0x36>
   1baba:	bf00      	nop
   1babc:	200007b8 	.word	0x200007b8
   1bac0:	20002a3c 	.word	0x20002a3c

0001bac4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bac8:	9101      	str	r1, [sp, #4]
   1baca:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bacc:	1c4b      	adds	r3, r1, #1
   1bace:	bf08      	it	eq
   1bad0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1bad4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bad6:	d06c      	beq.n	1bbb2 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1bad8:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bada:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1bade:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1bae2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1bae6:	ebb3 0804 	subs.w	r8, r3, r4
   1baea:	eb6b 0905 	sbc.w	r9, fp, r5
   1baee:	f1b8 0f00 	cmp.w	r8, #0
   1baf2:	f179 0300 	sbcs.w	r3, r9, #0
   1baf6:	db0f      	blt.n	1bb18 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1baf8:	f7ff ff94 	bl	1ba24 <elapsed>
   1bafc:	4a33      	ldr	r2, [pc, #204]	; (1bbcc <z_add_timeout+0x108>)
   1bafe:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1bb02:	f06f 0301 	mvn.w	r3, #1
   1bb06:	1a5b      	subs	r3, r3, r1
   1bb08:	eb6b 020c 	sbc.w	r2, fp, ip
   1bb0c:	1b1e      	subs	r6, r3, r4
   1bb0e:	eb62 0705 	sbc.w	r7, r2, r5
   1bb12:	1a34      	subs	r4, r6, r0
   1bb14:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bb18:	9b01      	ldr	r3, [sp, #4]
   1bb1a:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1bb1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb22:	f3ef 8611 	mrs	r6, BASEPRI
   1bb26:	f383 8811 	msr	BASEPRI, r3
   1bb2a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1bb2e:	f7ff ff79 	bl	1ba24 <elapsed>
	ticks = MAX(1, ticks);
   1bb32:	2c01      	cmp	r4, #1
   1bb34:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1bb38:	4b25      	ldr	r3, [pc, #148]	; (1bbd0 <z_add_timeout+0x10c>)
   1bb3a:	bfb8      	it	lt
   1bb3c:	2401      	movlt	r4, #1
   1bb3e:	681a      	ldr	r2, [r3, #0]
   1bb40:	bfb8      	it	lt
   1bb42:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1bb44:	1824      	adds	r4, r4, r0
   1bb46:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb4a:	429a      	cmp	r2, r3
   1bb4c:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1bb50:	d001      	beq.n	1bb56 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb52:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bb54:	b952      	cbnz	r2, 1bb6c <z_add_timeout+0xa8>
	node->prev = list->tail;
   1bb56:	685a      	ldr	r2, [r3, #4]
   1bb58:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1bb5c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bb5e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1bb62:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1bb66:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1bb6a:	e014      	b.n	1bb96 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1bb6c:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1bb70:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1bb74:	4544      	cmp	r4, r8
   1bb76:	eb75 0109 	sbcs.w	r1, r5, r9
   1bb7a:	da1d      	bge.n	1bbb8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1bb7c:	ebb8 0004 	subs.w	r0, r8, r4
   1bb80:	eb69 0105 	sbc.w	r1, r9, r5
   1bb84:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1bb88:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bb8a:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1bb8e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1bb92:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1bb96:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb98:	429a      	cmp	r2, r3
   1bb9a:	d006      	beq.n	1bbaa <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bb9c:	4592      	cmp	sl, r2
   1bb9e:	d104      	bne.n	1bbaa <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1bba0:	f7ff ff64 	bl	1ba6c <next_timeout>
   1bba4:	2100      	movs	r1, #0
   1bba6:	f7f7 ff13 	bl	139d0 <z_clock_set_timeout>
	__asm__ volatile(
   1bbaa:	f386 8811 	msr	BASEPRI, r6
   1bbae:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bbb2:	b003      	add	sp, #12
   1bbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1bbb8:	ebb4 0008 	subs.w	r0, r4, r8
   1bbbc:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1bbc0:	42ba      	cmp	r2, r7
   1bbc2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1bbc6:	d0c6      	beq.n	1bb56 <z_add_timeout+0x92>
   1bbc8:	6812      	ldr	r2, [r2, #0]
   1bbca:	e7c3      	b.n	1bb54 <z_add_timeout+0x90>
   1bbcc:	200027b8 	.word	0x200027b8
   1bbd0:	200007b8 	.word	0x200007b8

0001bbd4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1bbd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbd8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bbda:	f7ff fb8b 	bl	1b2f4 <z_time_slice>
	__asm__ volatile(
   1bbde:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbe2:	f3ef 8411 	mrs	r4, BASEPRI
   1bbe6:	f383 8811 	msr	BASEPRI, r3
   1bbea:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bbee:	4d2c      	ldr	r5, [pc, #176]	; (1bca0 <z_clock_announce+0xcc>)
   1bbf0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1bca4 <z_clock_announce+0xd0>
	return list->head == list;
   1bbf4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1bca8 <z_clock_announce+0xd4>
   1bbf8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bbfa:	4651      	mov	r1, sl
   1bbfc:	f8d5 c000 	ldr.w	ip, [r5]
   1bc00:	f8db 0000 	ldr.w	r0, [fp]
   1bc04:	4662      	mov	r2, ip
   1bc06:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc08:	4558      	cmp	r0, fp
   1bc0a:	e9da 8900 	ldrd	r8, r9, [sl]
   1bc0e:	e9cd 2300 	strd	r2, r3, [sp]
   1bc12:	d00d      	beq.n	1bc30 <z_clock_announce+0x5c>
   1bc14:	b160      	cbz	r0, 1bc30 <z_clock_announce+0x5c>
   1bc16:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1bc1a:	45b4      	cmp	ip, r6
   1bc1c:	41bb      	sbcs	r3, r7
   1bc1e:	da1e      	bge.n	1bc5e <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bc20:	9b00      	ldr	r3, [sp, #0]
   1bc22:	ebb6 0c03 	subs.w	ip, r6, r3
   1bc26:	9b01      	ldr	r3, [sp, #4]
   1bc28:	eb67 0603 	sbc.w	r6, r7, r3
   1bc2c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1bc30:	9b00      	ldr	r3, [sp, #0]
   1bc32:	eb13 0208 	adds.w	r2, r3, r8
   1bc36:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1bc38:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1bc3c:	eb43 0309 	adc.w	r3, r3, r9
   1bc40:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1bc44:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bc46:	f7ff ff11 	bl	1ba6c <next_timeout>
   1bc4a:	4631      	mov	r1, r6
   1bc4c:	f7f7 fec0 	bl	139d0 <z_clock_set_timeout>
	__asm__ volatile(
   1bc50:	f384 8811 	msr	BASEPRI, r4
   1bc54:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bc58:	b003      	add	sp, #12
   1bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1bc5e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1bc62:	f04f 0200 	mov.w	r2, #0
   1bc66:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1bc6a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1bc6e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1bc72:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1bc76:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1bc7a:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1bc7c:	f7ff fedc 	bl	1ba38 <remove_timeout>
   1bc80:	f384 8811 	msr	BASEPRI, r4
   1bc84:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bc88:	6883      	ldr	r3, [r0, #8]
   1bc8a:	4798      	blx	r3
	__asm__ volatile(
   1bc8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc90:	f3ef 8411 	mrs	r4, BASEPRI
   1bc94:	f383 8811 	msr	BASEPRI, r3
   1bc98:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1bc9c:	4901      	ldr	r1, [pc, #4]	; (1bca4 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bc9e:	e7ad      	b.n	1bbfc <z_clock_announce+0x28>
   1bca0:	20002a7c 	.word	0x20002a7c
   1bca4:	200027b8 	.word	0x200027b8
   1bca8:	200007b8 	.word	0x200007b8

0001bcac <z_tick_get>:

int64_t z_tick_get(void)
{
   1bcac:	b510      	push	{r4, lr}
   1bcae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcb2:	f3ef 8411 	mrs	r4, BASEPRI
   1bcb6:	f383 8811 	msr	BASEPRI, r3
   1bcba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bcbe:	f7f7 feed 	bl	13a9c <z_clock_elapsed>
   1bcc2:	4b06      	ldr	r3, [pc, #24]	; (1bcdc <z_tick_get+0x30>)
   1bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bcc8:	1812      	adds	r2, r2, r0
   1bcca:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bcce:	f384 8811 	msr	BASEPRI, r4
   1bcd2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bcd6:	4610      	mov	r0, r2
   1bcd8:	4619      	mov	r1, r3
   1bcda:	bd10      	pop	{r4, pc}
   1bcdc:	200027b8 	.word	0x200027b8

0001bce0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bce2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1bce6:	1c56      	adds	r6, r2, #1
   1bce8:	f143 0700 	adc.w	r7, r3, #0
   1bcec:	2f00      	cmp	r7, #0
   1bcee:	bf08      	it	eq
   1bcf0:	2e02      	cmpeq	r6, #2
{
   1bcf2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bcf4:	d302      	bcc.n	1bcfc <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bcf6:	490c      	ldr	r1, [pc, #48]	; (1bd28 <z_timer_expiration_handler+0x48>)
   1bcf8:	f7ff fee4 	bl	1bac4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bcfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bcfe:	3301      	adds	r3, #1
   1bd00:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bd02:	6a23      	ldr	r3, [r4, #32]
   1bd04:	b10b      	cbz	r3, 1bd0a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1bd06:	4620      	mov	r0, r4
   1bd08:	4798      	blx	r3
	return list->head == list;
   1bd0a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd0e:	42a5      	cmp	r5, r4
   1bd10:	d009      	beq.n	1bd26 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bd12:	b145      	cbz	r5, 1bd26 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bd14:	4628      	mov	r0, r5
   1bd16:	f004 ff8e 	bl	20c36 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1bd1a:	4628      	mov	r0, r5
   1bd1c:	f004 ffdd 	bl	20cda <z_ready_thread>
   1bd20:	2300      	movs	r3, #0
   1bd22:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1bd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd28:	0001bce1 	.word	0x0001bce1

0001bd2c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1bd2c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1bd30:	4619      	mov	r1, r3
   1bd32:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd34:	1c4c      	adds	r4, r1, #1
{
   1bd36:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd38:	bf08      	it	eq
   1bd3a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1bd3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1bd42:	4680      	mov	r8, r0
   1bd44:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd46:	d047      	beq.n	1bdd8 <z_impl_k_timer_start+0xac>
   1bd48:	4614      	mov	r4, r2
   1bd4a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1bd4c:	ea54 0305 	orrs.w	r3, r4, r5
   1bd50:	d016      	beq.n	1bd80 <z_impl_k_timer_start+0x54>
   1bd52:	f06f 0301 	mvn.w	r3, #1
   1bd56:	ebb3 0a02 	subs.w	sl, r3, r2
   1bd5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd5e:	eb63 0b05 	sbc.w	fp, r3, r5
   1bd62:	f1ba 0f00 	cmp.w	sl, #0
   1bd66:	f17b 0300 	sbcs.w	r3, fp, #0
   1bd6a:	da09      	bge.n	1bd80 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1bd6c:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1bd70:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1bd74:	2c01      	cmp	r4, #1
   1bd76:	f175 0300 	sbcs.w	r3, r5, #0
   1bd7a:	bfbc      	itt	lt
   1bd7c:	2401      	movlt	r4, #1
   1bd7e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bd80:	f06f 0301 	mvn.w	r3, #1
   1bd84:	1a1b      	subs	r3, r3, r0
   1bd86:	9300      	str	r3, [sp, #0]
   1bd88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd8c:	eb63 0301 	sbc.w	r3, r3, r1
   1bd90:	9301      	str	r3, [sp, #4]
   1bd92:	e9dd 2300 	ldrd	r2, r3, [sp]
   1bd96:	2a00      	cmp	r2, #0
   1bd98:	f173 0300 	sbcs.w	r3, r3, #0
   1bd9c:	da0c      	bge.n	1bdb8 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bd9e:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1bda2:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1bda6:	f1b8 0f00 	cmp.w	r8, #0
   1bdaa:	f179 0300 	sbcs.w	r3, r9, #0
   1bdae:	bfbc      	itt	lt
   1bdb0:	f04f 0800 	movlt.w	r8, #0
   1bdb4:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1bdb8:	4630      	mov	r0, r6
   1bdba:	f005 f8bb 	bl	20f34 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bdbe:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdc0:	4907      	ldr	r1, [pc, #28]	; (1bde0 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1bdc2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdc4:	4642      	mov	r2, r8
   1bdc6:	464b      	mov	r3, r9
   1bdc8:	4630      	mov	r0, r6
	timer->period = period;
   1bdca:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1bdce:	b002      	add	sp, #8
   1bdd0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdd4:	f7ff be76 	b.w	1bac4 <z_add_timeout>
}
   1bdd8:	b002      	add	sp, #8
   1bdda:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1bdde:	bf00      	nop
   1bde0:	0001bce1 	.word	0x0001bce1

0001bde4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bde4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1bde8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bdea:	4b2a      	ldr	r3, [pc, #168]	; (1be94 <z_impl_k_poll+0xb0>)
   1bdec:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1bdee:	2301      	movs	r3, #1
   1bdf0:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1bdf4:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1bdf8:	ea52 0307 	orrs.w	r3, r2, r7
{
   1bdfc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1bdfe:	bf0c      	ite	eq
   1be00:	2301      	moveq	r3, #1
   1be02:	2300      	movne	r3, #0
   1be04:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1be08:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1be0a:	f005 f9f6 	bl	211fa <register_events>
   1be0e:	4681      	mov	r9, r0
	__asm__ volatile(
   1be10:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be14:	f3ef 8a11 	mrs	sl, BASEPRI
   1be18:	f383 8811 	msr	BASEPRI, r3
   1be1c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1be20:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1be24:	b964      	cbnz	r4, 1be40 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1be26:	4601      	mov	r1, r0
   1be28:	4652      	mov	r2, sl
   1be2a:	4640      	mov	r0, r8
   1be2c:	f005 f911 	bl	21052 <clear_event_registrations>
	__asm__ volatile(
   1be30:	f38a 8811 	msr	BASEPRI, sl
   1be34:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1be38:	4620      	mov	r0, r4
   1be3a:	b004      	add	sp, #16
   1be3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1be40:	2300      	movs	r3, #0
   1be42:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1be46:	ea56 0307 	orrs.w	r3, r6, r7
   1be4a:	d106      	bne.n	1be5a <z_impl_k_poll+0x76>
   1be4c:	f38a 8811 	msr	BASEPRI, sl
   1be50:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1be54:	f06f 040a 	mvn.w	r4, #10
   1be58:	e7ee      	b.n	1be38 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1be5a:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1be5c:	e9cd 6700 	strd	r6, r7, [sp]
   1be60:	4651      	mov	r1, sl
   1be62:	480d      	ldr	r0, [pc, #52]	; (1be98 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1be64:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1be68:	f7ff fb7c 	bl	1b564 <z_pend_curr>
   1be6c:	4604      	mov	r4, r0
	__asm__ volatile(
   1be6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be72:	f3ef 8511 	mrs	r5, BASEPRI
   1be76:	f383 8811 	msr	BASEPRI, r3
   1be7a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1be7e:	462a      	mov	r2, r5
   1be80:	4649      	mov	r1, r9
   1be82:	4640      	mov	r0, r8
   1be84:	f005 f8e5 	bl	21052 <clear_event_registrations>
	__asm__ volatile(
   1be88:	f385 8811 	msr	BASEPRI, r5
   1be8c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1be90:	e7d2      	b.n	1be38 <z_impl_k_poll+0x54>
   1be92:	bf00      	nop
   1be94:	20002a3c 	.word	0x20002a3c
   1be98:	200033c4 	.word	0x200033c4

0001be9c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1be9c:	b538      	push	{r3, r4, r5, lr}
   1be9e:	4603      	mov	r3, r0
	__asm__ volatile(
   1bea0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bea4:	f3ef 8511 	mrs	r5, BASEPRI
   1bea8:	f382 8811 	msr	BASEPRI, r2
   1beac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1beb0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1beb2:	2101      	movs	r1, #1
   1beb4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1beb6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1beb8:	4283      	cmp	r3, r0
   1beba:	d106      	bne.n	1beca <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1bebc:	f385 8811 	msr	BASEPRI, r5
   1bec0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1bec4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1bec6:	4620      	mov	r0, r4
   1bec8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1beca:	e9d0 3200 	ldrd	r3, r2, [r0]
   1bece:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bed0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bed2:	2300      	movs	r3, #0
	node->prev = NULL;
   1bed4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bed8:	f005 f8fe 	bl	210d8 <signal_poll_event>
	z_reschedule(&lock, key);
   1bedc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bede:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1bee0:	4801      	ldr	r0, [pc, #4]	; (1bee8 <z_impl_k_poll_signal_raise+0x4c>)
   1bee2:	f7ff f8f7 	bl	1b0d4 <z_reschedule>
	return rc;
   1bee6:	e7ee      	b.n	1bec6 <z_impl_k_poll_signal_raise+0x2a>
   1bee8:	200033c4 	.word	0x200033c4

0001beec <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1beec:	b510      	push	{r4, lr}
   1beee:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1bef0:	f004 ff93 	bl	20e1a <k_is_in_isr>
   1bef4:	b940      	cbnz	r0, 1bf08 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1bef6:	4b05      	ldr	r3, [pc, #20]	; (1bf0c <z_thread_malloc+0x20>)
   1bef8:	689b      	ldr	r3, [r3, #8]
   1befa:	6f98      	ldr	r0, [r3, #120]	; 0x78
	}

	if (pool) {
   1befc:	b120      	cbz	r0, 1bf08 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1befe:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1bf04:	f005 b9f7 	b.w	212f6 <k_mem_pool_malloc>
}
   1bf08:	2000      	movs	r0, #0
   1bf0a:	bd10      	pop	{r4, pc}
   1bf0c:	20002a3c 	.word	0x20002a3c

0001bf10 <check_condition>:
{
   1bf10:	b510      	push	{r4, lr}
   1bf12:	1ec4      	subs	r4, r0, #3
   1bf14:	2c06      	cmp	r4, #6
   1bf16:	d823      	bhi.n	1bf60 <check_condition+0x50>
   1bf18:	e8df f004 	tbb	[pc, r4]
   1bf1c:	120d0804 	.word	0x120d0804
   1bf20:	1c17      	.short	0x1c17
   1bf22:	20          	.byte	0x20
   1bf23:	00          	.byte	0x00
		return new_val != old_val;
   1bf24:	1a50      	subs	r0, r2, r1
		return new_val != ref_val;
   1bf26:	bf18      	it	ne
   1bf28:	2001      	movne	r0, #1
   1bf2a:	e003      	b.n	1bf34 <check_condition+0x24>
		return new_val < ref_val;
   1bf2c:	429a      	cmp	r2, r3
   1bf2e:	bfac      	ite	ge
   1bf30:	2000      	movge	r0, #0
   1bf32:	2001      	movlt	r0, #1
}
   1bf34:	bd10      	pop	{r4, pc}
		return new_val <= ref_val;
   1bf36:	429a      	cmp	r2, r3
   1bf38:	bfcc      	ite	gt
   1bf3a:	2000      	movgt	r0, #0
   1bf3c:	2001      	movle	r0, #1
   1bf3e:	e7f9      	b.n	1bf34 <check_condition+0x24>
		return new_val > ref_val;
   1bf40:	429a      	cmp	r2, r3
   1bf42:	bfd4      	ite	le
   1bf44:	2000      	movle	r0, #0
   1bf46:	2001      	movgt	r0, #1
   1bf48:	e7f4      	b.n	1bf34 <check_condition+0x24>
		return new_val >= ref_val;
   1bf4a:	429a      	cmp	r2, r3
   1bf4c:	bfb4      	ite	lt
   1bf4e:	2000      	movlt	r0, #0
   1bf50:	2001      	movge	r0, #1
   1bf52:	e7ef      	b.n	1bf34 <check_condition+0x24>
		return new_val == ref_val;
   1bf54:	1ad3      	subs	r3, r2, r3
   1bf56:	4258      	negs	r0, r3
   1bf58:	4158      	adcs	r0, r3
   1bf5a:	e7eb      	b.n	1bf34 <check_condition+0x24>
		return new_val != ref_val;
   1bf5c:	1ad0      	subs	r0, r2, r3
   1bf5e:	e7e2      	b.n	1bf26 <check_condition+0x16>
{
   1bf60:	2000      	movs	r0, #0
   1bf62:	e7e7      	b.n	1bf34 <check_condition+0x24>

0001bf64 <read_temp_trigger_setting>:
{
   1bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct temperature_sensor *sensor = attr->user_data;
   1bf68:	68cc      	ldr	r4, [r1, #12]
	switch (sensor->condition) {
   1bf6a:	79a5      	ldrb	r5, [r4, #6]
{
   1bf6c:	b086      	sub	sp, #24
	switch (sensor->condition) {
   1bf6e:	2d02      	cmp	r5, #2
{
   1bf70:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   1bf74:	4684      	mov	ip, r0
   1bf76:	460e      	mov	r6, r1
   1bf78:	4696      	mov	lr, r2
   1bf7a:	4698      	mov	r8, r3
	switch (sensor->condition) {
   1bf7c:	d812      	bhi.n	1bfa4 <read_temp_trigger_setting+0x40>
   1bf7e:	b19d      	cbz	r5, 1bfa8 <read_temp_trigger_setting+0x44>
			rp.condition = sensor->condition;
   1bf80:	f88d 5014 	strb.w	r5, [sp, #20]
			sys_put_le24(sensor->seconds, rp.sec);
   1bf84:	68a4      	ldr	r4, [r4, #8]
	dst[0] = val;
   1bf86:	f88d 4015 	strb.w	r4, [sp, #21]
	dst[1] = val >> 8;
   1bf8a:	f3c4 2507 	ubfx	r5, r4, #8, #8
	dst[2] = val >> 16;
   1bf8e:	0c24      	lsrs	r4, r4, #16
   1bf90:	f88d 4017 	strb.w	r4, [sp, #23]
	dst[1] = val >> 8;
   1bf94:	f88d 5016 	strb.w	r5, [sp, #22]
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1bf98:	2404      	movs	r4, #4
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1bf9a:	9402      	str	r4, [sp, #8]
   1bf9c:	ac05      	add	r4, sp, #20
   1bf9e:	e9cd 7400 	strd	r7, r4, [sp]
   1bfa2:	e00a      	b.n	1bfba <read_temp_trigger_setting+0x56>
	switch (sensor->condition) {
   1bfa4:	2d03      	cmp	r5, #3
   1bfa6:	d10d      	bne.n	1bfc4 <read_temp_trigger_setting+0x60>
					 &sensor->condition,
   1bfa8:	3406      	adds	r4, #6
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1bfaa:	e9cd 7400 	strd	r7, r4, [sp]
   1bfae:	2301      	movs	r3, #1
   1bfb0:	9302      	str	r3, [sp, #8]
   1bfb2:	4672      	mov	r2, lr
   1bfb4:	4643      	mov	r3, r8
   1bfb6:	4631      	mov	r1, r6
   1bfb8:	4660      	mov	r0, ip
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1bfba:	f003 fca2 	bl	1f902 <bt_gatt_attr_read>
}
   1bfbe:	b006      	add	sp, #24
   1bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rp.condition = sensor->condition;
   1bfc4:	f88d 5014 	strb.w	r5, [sp, #20]
			rp.ref_val = sys_cpu_to_le16(sensor->ref_val);
   1bfc8:	8924      	ldrh	r4, [r4, #8]
   1bfca:	f8ad 4015 	strh.w	r4, [sp, #21]
			return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1bfce:	2403      	movs	r4, #3
   1bfd0:	e7e3      	b.n	1bf9a <read_temp_trigger_setting+0x36>

0001bfd2 <read_temp_valid_range>:
{
   1bfd2:	b530      	push	{r4, r5, lr}
	const struct temperature_sensor *sensor = attr->user_data;
   1bfd4:	68cc      	ldr	r4, [r1, #12]
{
   1bfd6:	b087      	sub	sp, #28
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
   1bfd8:	8865      	ldrh	r5, [r4, #2]
   1bfda:	88a4      	ldrh	r4, [r4, #4]
   1bfdc:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
   1bfe0:	2404      	movs	r4, #4
   1bfe2:	9402      	str	r4, [sp, #8]
   1bfe4:	ac05      	add	r4, sp, #20
   1bfe6:	9401      	str	r4, [sp, #4]
   1bfe8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
   1bfec:	9400      	str	r4, [sp, #0]
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
   1bfee:	f8ad 5014 	strh.w	r5, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
   1bff2:	f003 fc86 	bl	1f902 <bt_gatt_attr_read>
}
   1bff6:	b007      	add	sp, #28
   1bff8:	bd30      	pop	{r4, r5, pc}

0001bffa <read_u16>:
{
   1bffa:	b510      	push	{r4, lr}
	uint16_t value = sys_cpu_to_le16(*u16);
   1bffc:	68cc      	ldr	r4, [r1, #12]
{
   1bffe:	b086      	sub	sp, #24
	uint16_t value = sys_cpu_to_le16(*u16);
   1c000:	8824      	ldrh	r4, [r4, #0]
   1c002:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c006:	2402      	movs	r4, #2
   1c008:	9402      	str	r4, [sp, #8]
   1c00a:	f10d 0416 	add.w	r4, sp, #22
   1c00e:	9401      	str	r4, [sp, #4]
   1c010:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1c014:	9400      	str	r4, [sp, #0]
   1c016:	f003 fc74 	bl	1f902 <bt_gatt_attr_read>
}
   1c01a:	b006      	add	sp, #24
   1c01c:	bd10      	pop	{r4, pc}

0001c01e <read_es_measurement>:
{
   1c01e:	b570      	push	{r4, r5, r6, lr}
	const struct es_measurement *value = attr->user_data;
   1c020:	68cc      	ldr	r4, [r1, #12]
{
   1c022:	b088      	sub	sp, #32
	rsp.flags = sys_cpu_to_le16(value->flags);
   1c024:	8825      	ldrh	r5, [r4, #0]
   1c026:	f8ad 5014 	strh.w	r5, [sp, #20]
	rsp.sampling_function = value->sampling_func;
   1c02a:	78a5      	ldrb	r5, [r4, #2]
   1c02c:	f88d 5016 	strb.w	r5, [sp, #22]
	sys_put_le24(value->meas_period, rsp.measurement_period);
   1c030:	6865      	ldr	r5, [r4, #4]
	dst[0] = val;
   1c032:	f88d 5017 	strb.w	r5, [sp, #23]
	dst[1] = val >> 8;
   1c036:	f3c5 2607 	ubfx	r6, r5, #8, #8
	dst[2] = val >> 16;
   1c03a:	0c2d      	lsrs	r5, r5, #16
   1c03c:	f88d 5019 	strb.w	r5, [sp, #25]
	dst[0] = val;
   1c040:	8925      	ldrh	r5, [r4, #8]
   1c042:	f8ad 501a 	strh.w	r5, [sp, #26]
	dst[2] = val >> 16;
   1c046:	8965      	ldrh	r5, [r4, #10]
   1c048:	f88d 501c 	strb.w	r5, [sp, #28]
	rsp.application = value->application;
   1c04c:	7b25      	ldrb	r5, [r4, #12]
	rsp.measurement_uncertainty = value->meas_uncertainty;
   1c04e:	7b64      	ldrb	r4, [r4, #13]
   1c050:	f88d 401e 	strb.w	r4, [sp, #30]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
   1c054:	240b      	movs	r4, #11
   1c056:	9402      	str	r4, [sp, #8]
   1c058:	ac05      	add	r4, sp, #20
   1c05a:	9401      	str	r4, [sp, #4]
   1c05c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
   1c060:	9400      	str	r4, [sp, #0]
	dst[1] = val >> 8;
   1c062:	f88d 6018 	strb.w	r6, [sp, #24]
	rsp.application = value->application;
   1c066:	f88d 501d 	strb.w	r5, [sp, #29]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
   1c06a:	f003 fc4a 	bl	1f902 <bt_gatt_attr_read>
}
   1c06e:	b008      	add	sp, #32
   1c070:	bd70      	pop	{r4, r5, r6, pc}

0001c072 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c072:	4603      	mov	r3, r0
   1c074:	b140      	cbz	r0, 1c088 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c076:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c078:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c07c:	2a02      	cmp	r2, #2
   1c07e:	d006      	beq.n	1c08e <sys_notify_validate+0x1c>
   1c080:	2a03      	cmp	r2, #3
   1c082:	d004      	beq.n	1c08e <sys_notify_validate+0x1c>
   1c084:	2a01      	cmp	r2, #1
   1c086:	d005      	beq.n	1c094 <sys_notify_validate+0x22>
		return -EINVAL;
   1c088:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c08c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c08e:	681a      	ldr	r2, [r3, #0]
   1c090:	2a00      	cmp	r2, #0
   1c092:	d0f9      	beq.n	1c088 <sys_notify_validate+0x16>
		notify->result = 0;
   1c094:	2000      	movs	r0, #0
   1c096:	6098      	str	r0, [r3, #8]
   1c098:	4770      	bx	lr

0001c09a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c09a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c09c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c0a0:	2a02      	cmp	r2, #2
{
   1c0a2:	b510      	push	{r4, lr}
   1c0a4:	4603      	mov	r3, r0
	notify->result = res;
   1c0a6:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c0a8:	d00a      	beq.n	1c0c0 <sys_notify_finalize+0x26>
   1c0aa:	2a03      	cmp	r2, #3
   1c0ac:	d10b      	bne.n	1c0c6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c0ae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c0b0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c0b2:	2200      	movs	r2, #0
   1c0b4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c0b6:	b108      	cbz	r0, 1c0bc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1c0b8:	f7ff fef0 	bl	1be9c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c0bc:	4620      	mov	r0, r4
   1c0be:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c0c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1c0c2:	2400      	movs	r4, #0
		break;
   1c0c4:	e7f5      	b.n	1c0b2 <sys_notify_finalize+0x18>
	switch (method) {
   1c0c6:	2400      	movs	r4, #0
   1c0c8:	4620      	mov	r0, r4
   1c0ca:	e7f2      	b.n	1c0b2 <sys_notify_finalize+0x18>

0001c0cc <arch_printk_char_out>:
}
   1c0cc:	2000      	movs	r0, #0
   1c0ce:	4770      	bx	lr

0001c0d0 <str_out>:
{
   1c0d0:	b530      	push	{r4, r5, lr}
   1c0d2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c0d4:	680c      	ldr	r4, [r1, #0]
   1c0d6:	1c55      	adds	r5, r2, #1
   1c0d8:	b114      	cbz	r4, 1c0e0 <str_out+0x10>
   1c0da:	684b      	ldr	r3, [r1, #4]
   1c0dc:	4293      	cmp	r3, r2
   1c0de:	dc01      	bgt.n	1c0e4 <str_out+0x14>
		ctx->count++;
   1c0e0:	608d      	str	r5, [r1, #8]
}
   1c0e2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c0e4:	3b01      	subs	r3, #1
   1c0e6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c0e8:	bf08      	it	eq
   1c0ea:	2200      	moveq	r2, #0
   1c0ec:	608d      	str	r5, [r1, #8]
   1c0ee:	bf0c      	ite	eq
   1c0f0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c0f2:	54a0      	strbne	r0, [r4, r2]
   1c0f4:	e7f5      	b.n	1c0e2 <str_out+0x12>

0001c0f6 <printk>:
{
   1c0f6:	b40f      	push	{r0, r1, r2, r3}
   1c0f8:	b507      	push	{r0, r1, r2, lr}
   1c0fa:	a904      	add	r1, sp, #16
   1c0fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c100:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c102:	f7f6 fd9b 	bl	12c3c <vprintk>
}
   1c106:	b003      	add	sp, #12
   1c108:	f85d eb04 	ldr.w	lr, [sp], #4
   1c10c:	b004      	add	sp, #16
   1c10e:	4770      	bx	lr

0001c110 <snprintk>:
{
   1c110:	b40c      	push	{r2, r3}
   1c112:	b507      	push	{r0, r1, r2, lr}
   1c114:	ab04      	add	r3, sp, #16
   1c116:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c11a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c11c:	f7f6 fd9c 	bl	12c58 <vsnprintk>
}
   1c120:	b003      	add	sp, #12
   1c122:	f85d eb04 	ldr.w	lr, [sp], #4
   1c126:	b002      	add	sp, #8
   1c128:	4770      	bx	lr

0001c12a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c12a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c12c:	f013 0307 	ands.w	r3, r3, #7
   1c130:	d105      	bne.n	1c13e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c132:	6803      	ldr	r3, [r0, #0]
   1c134:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1c136:	bf0c      	ite	eq
   1c138:	2000      	moveq	r0, #0
   1c13a:	2003      	movne	r0, #3
   1c13c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c13e:	2b02      	cmp	r3, #2
   1c140:	d105      	bne.n	1c14e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c142:	8b43      	ldrh	r3, [r0, #26]
   1c144:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1c146:	bf14      	ite	ne
   1c148:	2000      	movne	r0, #0
   1c14a:	2004      	moveq	r0, #4
   1c14c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c14e:	2b01      	cmp	r3, #1
   1c150:	d105      	bne.n	1c15e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c152:	6803      	ldr	r3, [r0, #0]
   1c154:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1c156:	bf0c      	ite	eq
   1c158:	2000      	moveq	r0, #0
   1c15a:	2005      	movne	r0, #5
   1c15c:	4770      	bx	lr
	int evt = EVT_NOP;
   1c15e:	2000      	movs	r0, #0
}
   1c160:	4770      	bx	lr

0001c162 <notify_one>:
{
   1c162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c166:	460d      	mov	r5, r1
   1c168:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c16a:	4619      	mov	r1, r3
   1c16c:	1d28      	adds	r0, r5, #4
{
   1c16e:	4690      	mov	r8, r2
   1c170:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c172:	f7ff ff92 	bl	1c09a <sys_notify_finalize>
	if (cb) {
   1c176:	4604      	mov	r4, r0
   1c178:	b138      	cbz	r0, 1c18a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c17a:	4633      	mov	r3, r6
   1c17c:	4642      	mov	r2, r8
   1c17e:	4629      	mov	r1, r5
   1c180:	4638      	mov	r0, r7
   1c182:	46a4      	mov	ip, r4
}
   1c184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c188:	4760      	bx	ip
}
   1c18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c18e <transition_complete>:
{
   1c18e:	b410      	push	{r4}
	__asm__ volatile(
   1c190:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c194:	f3ef 8211 	mrs	r2, BASEPRI
   1c198:	f384 8811 	msr	BASEPRI, r4
   1c19c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c1a0:	6141      	str	r1, [r0, #20]
}
   1c1a2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c1a4:	2101      	movs	r1, #1
   1c1a6:	f7f6 bd6b 	b.w	12c80 <process_event>

0001c1aa <validate_args>:
{
   1c1aa:	b510      	push	{r4, lr}
   1c1ac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c1ae:	b140      	cbz	r0, 1c1c2 <validate_args+0x18>
   1c1b0:	b139      	cbz	r1, 1c1c2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c1b2:	1d08      	adds	r0, r1, #4
   1c1b4:	f7ff ff5d 	bl	1c072 <sys_notify_validate>
	if ((rv == 0)
   1c1b8:	b928      	cbnz	r0, 1c1c6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1c1ba:	68a3      	ldr	r3, [r4, #8]
   1c1bc:	f033 0303 	bics.w	r3, r3, #3
   1c1c0:	d001      	beq.n	1c1c6 <validate_args+0x1c>
		rv = -EINVAL;
   1c1c2:	f06f 0015 	mvn.w	r0, #21
}
   1c1c6:	bd10      	pop	{r4, pc}

0001c1c8 <onoff_manager_init>:
{
   1c1c8:	b538      	push	{r3, r4, r5, lr}
   1c1ca:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c1cc:	4605      	mov	r5, r0
   1c1ce:	b158      	cbz	r0, 1c1e8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c1d0:	b151      	cbz	r1, 1c1e8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c1d2:	680b      	ldr	r3, [r1, #0]
   1c1d4:	b143      	cbz	r3, 1c1e8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c1d6:	684b      	ldr	r3, [r1, #4]
   1c1d8:	b133      	cbz	r3, 1c1e8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c1da:	221c      	movs	r2, #28
   1c1dc:	2100      	movs	r1, #0
   1c1de:	f001 fcf2 	bl	1dbc6 <memset>
   1c1e2:	612c      	str	r4, [r5, #16]
	return 0;
   1c1e4:	2000      	movs	r0, #0
}
   1c1e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c1e8:	f06f 0015 	mvn.w	r0, #21
   1c1ec:	e7fb      	b.n	1c1e6 <onoff_manager_init+0x1e>

0001c1ee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c1ee:	b570      	push	{r4, r5, r6, lr}
   1c1f0:	4604      	mov	r4, r0
   1c1f2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c1f4:	f7ff ffd9 	bl	1c1aa <validate_args>

	if (rv < 0) {
   1c1f8:	1e05      	subs	r5, r0, #0
   1c1fa:	db31      	blt.n	1c260 <onoff_request+0x72>
   1c1fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c200:	f3ef 8111 	mrs	r1, BASEPRI
   1c204:	f383 8811 	msr	BASEPRI, r3
   1c208:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c20c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c20e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c210:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1c214:	42ab      	cmp	r3, r5
   1c216:	f000 0207 	and.w	r2, r0, #7
   1c21a:	d02e      	beq.n	1c27a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1c21c:	2a02      	cmp	r2, #2
   1c21e:	d10e      	bne.n	1c23e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1c220:	3301      	adds	r3, #1
   1c222:	8363      	strh	r3, [r4, #26]
	rv = state;
   1c224:	4615      	mov	r5, r2
		notify = true;
   1c226:	2301      	movs	r3, #1
	__asm__ volatile(
   1c228:	f381 8811 	msr	BASEPRI, r1
   1c22c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1c230:	b1b3      	cbz	r3, 1c260 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1c232:	2300      	movs	r3, #0
   1c234:	4631      	mov	r1, r6
   1c236:	4620      	mov	r0, r4
   1c238:	f7ff ff93 	bl	1c162 <notify_one>
   1c23c:	e010      	b.n	1c260 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1c23e:	0783      	lsls	r3, r0, #30
   1c240:	d001      	beq.n	1c246 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1c242:	2a06      	cmp	r2, #6
   1c244:	d10e      	bne.n	1c264 <onoff_request+0x76>
	parent->next = child;
   1c246:	2300      	movs	r3, #0
   1c248:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1c24a:	6863      	ldr	r3, [r4, #4]
   1c24c:	b993      	cbnz	r3, 1c274 <onoff_request+0x86>
	list->head = node;
   1c24e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1c252:	4615      	mov	r5, r2
   1c254:	b962      	cbnz	r2, 1c270 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1c256:	460a      	mov	r2, r1
   1c258:	4620      	mov	r0, r4
   1c25a:	2102      	movs	r1, #2
   1c25c:	f7f6 fd10 	bl	12c80 <process_event>
		}
	}

	return rv;
}
   1c260:	4628      	mov	r0, r5
   1c262:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1c264:	2a05      	cmp	r2, #5
   1c266:	bf0c      	ite	eq
   1c268:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1c26c:	f06f 0504 	mvnne.w	r5, #4
   1c270:	2300      	movs	r3, #0
   1c272:	e7d9      	b.n	1c228 <onoff_request+0x3a>
	parent->next = child;
   1c274:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c276:	6066      	str	r6, [r4, #4]
}
   1c278:	e7eb      	b.n	1c252 <onoff_request+0x64>
		rv = -EAGAIN;
   1c27a:	f06f 050a 	mvn.w	r5, #10
   1c27e:	e7f7      	b.n	1c270 <onoff_request+0x82>

0001c280 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c280:	4604      	mov	r4, r0
   1c282:	b508      	push	{r3, lr}
   1c284:	4608      	mov	r0, r1
   1c286:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c288:	461a      	mov	r2, r3
   1c28a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c28c:	f7ff fa26 	bl	1b6dc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c290:	f7f8 f83e 	bl	14310 <z_impl_k_thread_abort>

0001c294 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c294:	b510      	push	{r4, lr}
   1c296:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c29c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2a0:	4620      	mov	r0, r4
   1c2a2:	f7fe fea1 	bl	1afe8 <z_impl_k_queue_get>
   1c2a6:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c2a8:	2800      	cmp	r0, #0
   1c2aa:	d0f5      	beq.n	1c298 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2ac:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1c2ae:	6842      	ldr	r2, [r0, #4]
   1c2b0:	f3bf 8f5b 	dmb	ish
   1c2b4:	e853 1f00 	ldrex	r1, [r3]
   1c2b8:	f021 0c01 	bic.w	ip, r1, #1
   1c2bc:	e843 ce00 	strex	lr, ip, [r3]
   1c2c0:	f1be 0f00 	cmp.w	lr, #0
   1c2c4:	d1f6      	bne.n	1c2b4 <z_work_q_main+0x20>
   1c2c6:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c2ca:	07cb      	lsls	r3, r1, #31
   1c2cc:	d500      	bpl.n	1c2d0 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c2ce:	4790      	blx	r2
	z_impl_k_yield();
   1c2d0:	f7ff f996 	bl	1b600 <z_impl_k_yield>
   1c2d4:	e7e0      	b.n	1c298 <z_work_q_main+0x4>

0001c2d6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c2d6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c2d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c2dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1c2e0:	bf2c      	ite	cs
   1c2e2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1c2e6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1c2ea:	4770      	bx	lr

0001c2ec <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1c2ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1c2f0:	6880      	ldr	r0, [r0, #8]
   1c2f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1c2f6:	bf2c      	ite	cs
   1c2f8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1c2fc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1c300:	4770      	bx	lr

0001c302 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1c302:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c304:	2201      	movs	r2, #1
   1c306:	f7ff ffe6 	bl	1c2d6 <chunk_field>
}
   1c30a:	0840      	lsrs	r0, r0, #1
   1c30c:	bd08      	pop	{r3, pc}

0001c30e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c30e:	6883      	ldr	r3, [r0, #8]
   1c310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1c314:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c318:	d308      	bcc.n	1c32c <set_chunk_used+0x1e>
		if (used) {
   1c31a:	684b      	ldr	r3, [r1, #4]
   1c31c:	b11a      	cbz	r2, 1c326 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c31e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c322:	604b      	str	r3, [r1, #4]
   1c324:	4770      	bx	lr
   1c326:	f023 0301 	bic.w	r3, r3, #1
   1c32a:	e7fa      	b.n	1c322 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1c32c:	884b      	ldrh	r3, [r1, #2]
   1c32e:	b11a      	cbz	r2, 1c338 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c330:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c334:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1c336:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c338:	f023 0301 	bic.w	r3, r3, #1
   1c33c:	e7fa      	b.n	1c334 <set_chunk_used+0x26>

0001c33e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c33e:	0053      	lsls	r3, r2, #1
   1c340:	2201      	movs	r2, #1
   1c342:	f7ff bfd3 	b.w	1c2ec <chunk_set>

0001c346 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1c346:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c348:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c34a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c34e:	bf2c      	ite	cs
   1c350:	2002      	movcs	r0, #2
   1c352:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c354:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1c356:	fab0 f080 	clz	r0, r0
}
   1c35a:	f1c0 001f 	rsb	r0, r0, #31
   1c35e:	4770      	bx	lr

0001c360 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c364:	4616      	mov	r6, r2
   1c366:	4604      	mov	r4, r0
   1c368:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1c36a:	f7ff ffca 	bl	1c302 <chunk_size>
   1c36e:	4631      	mov	r1, r6
   1c370:	4605      	mov	r5, r0
   1c372:	4620      	mov	r0, r4
   1c374:	f7ff ffc5 	bl	1c302 <chunk_size>
   1c378:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1c37a:	462a      	mov	r2, r5
   1c37c:	4639      	mov	r1, r7
   1c37e:	4620      	mov	r0, r4
   1c380:	f7ff ffdd 	bl	1c33e <set_chunk_size>
	return c + chunk_size(h, c);
   1c384:	4631      	mov	r1, r6
   1c386:	4620      	mov	r0, r4
   1c388:	f7ff ffbb 	bl	1c302 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c38c:	462b      	mov	r3, r5
   1c38e:	1831      	adds	r1, r6, r0
   1c390:	2200      	movs	r2, #0
   1c392:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1c394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c398:	f7ff bfa8 	b.w	1c2ec <chunk_set>

0001c39c <split_chunks>:
{
   1c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3a0:	4614      	mov	r4, r2
   1c3a2:	4605      	mov	r5, r0
   1c3a4:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1c3a6:	f7ff ffac 	bl	1c302 <chunk_size>
	size_t lsz = rc - lc;
   1c3aa:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1c3ae:	1b37      	subs	r7, r6, r4
   1c3b0:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1c3b2:	4642      	mov	r2, r8
   1c3b4:	4631      	mov	r1, r6
   1c3b6:	4628      	mov	r0, r5
   1c3b8:	f7ff ffc1 	bl	1c33e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1c3bc:	463a      	mov	r2, r7
   1c3be:	4621      	mov	r1, r4
   1c3c0:	4628      	mov	r0, r5
   1c3c2:	f7ff ffbc 	bl	1c33e <set_chunk_size>
   1c3c6:	4643      	mov	r3, r8
   1c3c8:	2200      	movs	r2, #0
   1c3ca:	4621      	mov	r1, r4
   1c3cc:	4628      	mov	r0, r5
   1c3ce:	f7ff ff8d 	bl	1c2ec <chunk_set>
	return c + chunk_size(h, c);
   1c3d2:	4621      	mov	r1, r4
   1c3d4:	4628      	mov	r0, r5
   1c3d6:	f7ff ff94 	bl	1c302 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c3da:	463b      	mov	r3, r7
   1c3dc:	1821      	adds	r1, r4, r0
   1c3de:	2200      	movs	r2, #0
   1c3e0:	4628      	mov	r0, r5
}
   1c3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c3e6:	f7ff bf81 	b.w	1c2ec <chunk_set>

0001c3ea <free_list_remove_bidx>:
{
   1c3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3ee:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1c3f0:	2203      	movs	r2, #3
   1c3f2:	460e      	mov	r6, r1
   1c3f4:	4604      	mov	r4, r0
   1c3f6:	f7ff ff6e 	bl	1c2d6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1c3fa:	4286      	cmp	r6, r0
   1c3fc:	4605      	mov	r5, r0
   1c3fe:	f107 0804 	add.w	r8, r7, #4
   1c402:	d10b      	bne.n	1c41c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1c404:	2301      	movs	r3, #1
   1c406:	fa03 f707 	lsl.w	r7, r3, r7
   1c40a:	68e3      	ldr	r3, [r4, #12]
   1c40c:	ea23 0307 	bic.w	r3, r3, r7
   1c410:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1c412:	2300      	movs	r3, #0
   1c414:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1c41c:	4631      	mov	r1, r6
   1c41e:	2202      	movs	r2, #2
   1c420:	4620      	mov	r0, r4
   1c422:	f7ff ff58 	bl	1c2d6 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1c426:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1c428:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1c42a:	4601      	mov	r1, r0
		b->next = second;
   1c42c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1c430:	4620      	mov	r0, r4
   1c432:	2203      	movs	r2, #3
   1c434:	f7ff ff5a 	bl	1c2ec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c438:	4633      	mov	r3, r6
   1c43a:	4629      	mov	r1, r5
   1c43c:	4620      	mov	r0, r4
   1c43e:	2202      	movs	r2, #2
}
   1c440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c444:	f7ff bf52 	b.w	1c2ec <chunk_set>

0001c448 <free_list_remove>:
{
   1c448:	b538      	push	{r3, r4, r5, lr}
   1c44a:	4604      	mov	r4, r0
   1c44c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1c44e:	f7ff ff58 	bl	1c302 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c452:	68a3      	ldr	r3, [r4, #8]
   1c454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c458:	4601      	mov	r1, r0
   1c45a:	d301      	bcc.n	1c460 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1c45c:	2801      	cmp	r0, #1
   1c45e:	d009      	beq.n	1c474 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c460:	4620      	mov	r0, r4
   1c462:	f7ff ff70 	bl	1c346 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1c466:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c468:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1c46a:	4620      	mov	r0, r4
}
   1c46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1c470:	f7ff bfbb 	b.w	1c3ea <free_list_remove_bidx>
}
   1c474:	bd38      	pop	{r3, r4, r5, pc}

0001c476 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1c476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c47a:	4604      	mov	r4, r0
   1c47c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1c47e:	f7ff ff62 	bl	1c346 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1c482:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1c484:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1c486:	4620      	mov	r0, r4
   1c488:	f7ff ff5d 	bl	1c346 <bucket_idx>
   1c48c:	42a8      	cmp	r0, r5
   1c48e:	da03      	bge.n	1c498 <alloc_chunk+0x22>
		return 0;
   1c490:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1c492:	4630      	mov	r0, r6
   1c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1c498:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1c49c:	f8da 9010 	ldr.w	r9, [sl, #16]
   1c4a0:	f1b9 0f00 	cmp.w	r9, #0
   1c4a4:	d019      	beq.n	1c4da <alloc_chunk+0x64>
   1c4a6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1c4a8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1c4ac:	4620      	mov	r0, r4
   1c4ae:	4631      	mov	r1, r6
   1c4b0:	f7ff ff27 	bl	1c302 <chunk_size>
   1c4b4:	4540      	cmp	r0, r8
   1c4b6:	d305      	bcc.n	1c4c4 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1c4b8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1c4ba:	4631      	mov	r1, r6
   1c4bc:	4620      	mov	r0, r4
   1c4be:	f7ff ff94 	bl	1c3ea <free_list_remove_bidx>
		return c;
   1c4c2:	e7e6      	b.n	1c492 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1c4c4:	2203      	movs	r2, #3
   1c4c6:	4631      	mov	r1, r6
   1c4c8:	4620      	mov	r0, r4
   1c4ca:	f7ff ff04 	bl	1c2d6 <chunk_field>
		} while (--i && b->next != first);
   1c4ce:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1c4d0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1c4d4:	d001      	beq.n	1c4da <alloc_chunk+0x64>
   1c4d6:	4581      	cmp	r9, r0
   1c4d8:	d1e6      	bne.n	1c4a8 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1c4da:	68e3      	ldr	r3, [r4, #12]
   1c4dc:	3501      	adds	r5, #1
   1c4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c4e2:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1c4e4:	401a      	ands	r2, r3
   1c4e6:	d0d3      	beq.n	1c490 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1c4e8:	fa92 f2a2 	rbit	r2, r2
   1c4ec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1c4f0:	1d13      	adds	r3, r2, #4
   1c4f2:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1c4f6:	e7e0      	b.n	1c4ba <alloc_chunk+0x44>

0001c4f8 <free_list_add>:
{
   1c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4fc:	4604      	mov	r4, r0
   1c4fe:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1c500:	f7ff feff 	bl	1c302 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c504:	68a3      	ldr	r3, [r4, #8]
   1c506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c50a:	4601      	mov	r1, r0
   1c50c:	d301      	bcc.n	1c512 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1c50e:	2801      	cmp	r0, #1
   1c510:	d035      	beq.n	1c57e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c512:	4620      	mov	r0, r4
   1c514:	f7ff ff17 	bl	1c346 <bucket_idx>
	if (b->next == 0U) {
   1c518:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1c51c:	6916      	ldr	r6, [r2, #16]
   1c51e:	b99e      	cbnz	r6, 1c548 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1c520:	2301      	movs	r3, #1
   1c522:	fa03 f000 	lsl.w	r0, r3, r0
   1c526:	68e3      	ldr	r3, [r4, #12]
   1c528:	4303      	orrs	r3, r0
   1c52a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1c52c:	4629      	mov	r1, r5
		b->next = c;
   1c52e:	6115      	str	r5, [r2, #16]
   1c530:	462b      	mov	r3, r5
   1c532:	2202      	movs	r2, #2
   1c534:	4620      	mov	r0, r4
   1c536:	f7ff fed9 	bl	1c2ec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c53a:	2203      	movs	r2, #3
   1c53c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1c53e:	4620      	mov	r0, r4
}
   1c540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c544:	f7ff bed2 	b.w	1c2ec <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1c548:	2202      	movs	r2, #2
   1c54a:	4631      	mov	r1, r6
   1c54c:	4620      	mov	r0, r4
   1c54e:	f7ff fec2 	bl	1c2d6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1c552:	2202      	movs	r2, #2
   1c554:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1c556:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1c558:	4629      	mov	r1, r5
   1c55a:	4620      	mov	r0, r4
   1c55c:	f7ff fec6 	bl	1c2ec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c560:	4633      	mov	r3, r6
   1c562:	2203      	movs	r2, #3
   1c564:	4629      	mov	r1, r5
   1c566:	4620      	mov	r0, r4
   1c568:	f7ff fec0 	bl	1c2ec <chunk_set>
   1c56c:	2203      	movs	r2, #3
   1c56e:	4639      	mov	r1, r7
   1c570:	462b      	mov	r3, r5
   1c572:	4620      	mov	r0, r4
   1c574:	f7ff feba 	bl	1c2ec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c578:	2202      	movs	r2, #2
   1c57a:	4631      	mov	r1, r6
   1c57c:	e7df      	b.n	1c53e <free_list_add+0x46>
   1c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c582 <sys_heap_free>:
{
   1c582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1c584:	2900      	cmp	r1, #0
   1c586:	d04e      	beq.n	1c626 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1c588:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1c58a:	68ab      	ldr	r3, [r5, #8]
   1c58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c590:	bf2c      	ite	cs
   1c592:	2408      	movcs	r4, #8
   1c594:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1c596:	1b0c      	subs	r4, r1, r4
   1c598:	1b64      	subs	r4, r4, r5
   1c59a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1c59c:	2200      	movs	r2, #0
   1c59e:	4621      	mov	r1, r4
   1c5a0:	4628      	mov	r0, r5
   1c5a2:	f7ff feb4 	bl	1c30e <set_chunk_used>
	return c + chunk_size(h, c);
   1c5a6:	4621      	mov	r1, r4
   1c5a8:	f7ff feab 	bl	1c302 <chunk_size>
   1c5ac:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c5ae:	2201      	movs	r2, #1
   1c5b0:	4631      	mov	r1, r6
   1c5b2:	4628      	mov	r0, r5
   1c5b4:	f7ff fe8f 	bl	1c2d6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1c5b8:	07c3      	lsls	r3, r0, #31
   1c5ba:	d40c      	bmi.n	1c5d6 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1c5bc:	4631      	mov	r1, r6
   1c5be:	4628      	mov	r0, r5
   1c5c0:	f7ff ff42 	bl	1c448 <free_list_remove>
	return c + chunk_size(h, c);
   1c5c4:	4621      	mov	r1, r4
   1c5c6:	4628      	mov	r0, r5
   1c5c8:	f7ff fe9b 	bl	1c302 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1c5cc:	4621      	mov	r1, r4
   1c5ce:	1822      	adds	r2, r4, r0
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	f7ff fec5 	bl	1c360 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c5d6:	2200      	movs	r2, #0
   1c5d8:	4621      	mov	r1, r4
   1c5da:	4628      	mov	r0, r5
   1c5dc:	f7ff fe7b 	bl	1c2d6 <chunk_field>
   1c5e0:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1c5e2:	2201      	movs	r2, #1
   1c5e4:	4639      	mov	r1, r7
   1c5e6:	4628      	mov	r0, r5
   1c5e8:	f7ff fe75 	bl	1c2d6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1c5ec:	f010 0601 	ands.w	r6, r0, #1
   1c5f0:	d113      	bne.n	1c61a <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1c5f2:	4639      	mov	r1, r7
   1c5f4:	4628      	mov	r0, r5
   1c5f6:	f7ff ff27 	bl	1c448 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1c5fa:	4621      	mov	r1, r4
   1c5fc:	4632      	mov	r2, r6
   1c5fe:	4628      	mov	r0, r5
   1c600:	f7ff fe69 	bl	1c2d6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1c604:	4622      	mov	r2, r4
   1c606:	1a21      	subs	r1, r4, r0
   1c608:	4628      	mov	r0, r5
   1c60a:	f7ff fea9 	bl	1c360 <merge_chunks>
   1c60e:	4621      	mov	r1, r4
   1c610:	4632      	mov	r2, r6
   1c612:	4628      	mov	r0, r5
   1c614:	f7ff fe5f 	bl	1c2d6 <chunk_field>
   1c618:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1c61a:	4621      	mov	r1, r4
   1c61c:	4628      	mov	r0, r5
}
   1c61e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1c622:	f7ff bf69 	b.w	1c4f8 <free_list_add>
}
   1c626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c628 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c628:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1c62a:	b909      	cbnz	r1, 1c630 <sys_heap_alloc+0x8>
		return NULL;
   1c62c:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1c62e:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1c630:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1c632:	68ab      	ldr	r3, [r5, #8]
   1c634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c638:	bf2c      	ite	cs
   1c63a:	2208      	movcs	r2, #8
   1c63c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c63e:	1dcc      	adds	r4, r1, #7
   1c640:	4414      	add	r4, r2
   1c642:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1c644:	4621      	mov	r1, r4
   1c646:	4628      	mov	r0, r5
   1c648:	f7ff ff15 	bl	1c476 <alloc_chunk>
	if (c == 0U) {
   1c64c:	4606      	mov	r6, r0
   1c64e:	2800      	cmp	r0, #0
   1c650:	d0ec      	beq.n	1c62c <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1c652:	4601      	mov	r1, r0
   1c654:	4628      	mov	r0, r5
   1c656:	f7ff fe54 	bl	1c302 <chunk_size>
   1c65a:	42a0      	cmp	r0, r4
   1c65c:	d909      	bls.n	1c672 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1c65e:	4434      	add	r4, r6
   1c660:	4631      	mov	r1, r6
   1c662:	4628      	mov	r0, r5
   1c664:	4622      	mov	r2, r4
   1c666:	f7ff fe99 	bl	1c39c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1c66a:	4621      	mov	r1, r4
   1c66c:	4628      	mov	r0, r5
   1c66e:	f7ff ff43 	bl	1c4f8 <free_list_add>
	set_chunk_used(h, c, true);
   1c672:	4628      	mov	r0, r5
   1c674:	2201      	movs	r2, #1
   1c676:	4631      	mov	r1, r6
   1c678:	f7ff fe49 	bl	1c30e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1c67c:	68ab      	ldr	r3, [r5, #8]
   1c67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c682:	bf2c      	ite	cs
   1c684:	2008      	movcs	r0, #8
   1c686:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1c688:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1c68c:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1c68e:	e7ce      	b.n	1c62e <sys_heap_alloc+0x6>

0001c690 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1c690:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c696:	bf2c      	ite	cs
   1c698:	2508      	movcs	r5, #8
   1c69a:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c69c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c69e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6a0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c6a2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c6a6:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1c6aa:	2200      	movs	r2, #0
   1c6ac:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1c6ae:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1c6b0:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1c6b2:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1c6b4:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1c6b8:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c6ba:	4629      	mov	r1, r5
	h->len = buf_sz;
   1c6bc:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1c6be:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c6c0:	4620      	mov	r0, r4
   1c6c2:	f7ff fe40 	bl	1c346 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c6c6:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c6c8:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1c6ca:	1c41      	adds	r1, r0, #1
   1c6cc:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c6ce:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1c6d2:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1c6d4:	428b      	cmp	r3, r1
   1c6d6:	db29      	blt.n	1c72c <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1c6d8:	4632      	mov	r2, r6
   1c6da:	4620      	mov	r0, r4
   1c6dc:	2100      	movs	r1, #0
   1c6de:	f7ff fe2e 	bl	1c33e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1c6e2:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1c6e4:	4620      	mov	r0, r4
   1c6e6:	2201      	movs	r2, #1
   1c6e8:	2100      	movs	r1, #0
   1c6ea:	f7ff fe10 	bl	1c30e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1c6ee:	463a      	mov	r2, r7
   1c6f0:	4631      	mov	r1, r6
   1c6f2:	f7ff fe24 	bl	1c33e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c6f6:	4633      	mov	r3, r6
   1c6f8:	4631      	mov	r1, r6
   1c6fa:	4620      	mov	r0, r4
   1c6fc:	2200      	movs	r2, #0
   1c6fe:	f7ff fdf5 	bl	1c2ec <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1c702:	4629      	mov	r1, r5
   1c704:	4620      	mov	r0, r4
   1c706:	2200      	movs	r2, #0
   1c708:	f7ff fe19 	bl	1c33e <set_chunk_size>
   1c70c:	463b      	mov	r3, r7
   1c70e:	4629      	mov	r1, r5
   1c710:	4620      	mov	r0, r4
   1c712:	2200      	movs	r2, #0
   1c714:	f7ff fdea 	bl	1c2ec <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1c718:	4629      	mov	r1, r5
   1c71a:	4620      	mov	r0, r4
   1c71c:	2201      	movs	r2, #1
   1c71e:	f7ff fdf6 	bl	1c30e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1c722:	4631      	mov	r1, r6
}
   1c724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1c728:	f7ff bee6 	b.w	1c4f8 <free_list_add>
		h->buckets[i].next = 0;
   1c72c:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c730:	3301      	adds	r3, #1
   1c732:	e7cf      	b.n	1c6d4 <sys_heap_init+0x44>

0001c734 <encode_uint>:
{
   1c734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c738:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1c73a:	78d3      	ldrb	r3, [r2, #3]
{
   1c73c:	4614      	mov	r4, r2
	switch (specifier) {
   1c73e:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1c740:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1c744:	4606      	mov	r6, r0
   1c746:	460f      	mov	r7, r1
   1c748:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1c74a:	d02d      	beq.n	1c7a8 <encode_uint+0x74>
   1c74c:	d828      	bhi.n	1c7a0 <encode_uint+0x6c>
		return 16;
   1c74e:	2b58      	cmp	r3, #88	; 0x58
   1c750:	bf14      	ite	ne
   1c752:	250a      	movne	r5, #10
   1c754:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1c756:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1c75a:	46aa      	mov	sl, r5
   1c75c:	f04f 0b00 	mov.w	fp, #0
   1c760:	4652      	mov	r2, sl
   1c762:	465b      	mov	r3, fp
   1c764:	4630      	mov	r0, r6
   1c766:	4639      	mov	r1, r7
   1c768:	f7e3 ff3e 	bl	5e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c76c:	2a09      	cmp	r2, #9
   1c76e:	b2d3      	uxtb	r3, r2
   1c770:	d81f      	bhi.n	1c7b2 <encode_uint+0x7e>
   1c772:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1c774:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c776:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1c778:	bf08      	it	eq
   1c77a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c77c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1c780:	d301      	bcc.n	1c786 <encode_uint+0x52>
   1c782:	45c8      	cmp	r8, r9
   1c784:	d812      	bhi.n	1c7ac <encode_uint+0x78>
	if (conv->flag_hash) {
   1c786:	7823      	ldrb	r3, [r4, #0]
   1c788:	069b      	lsls	r3, r3, #26
   1c78a:	d505      	bpl.n	1c798 <encode_uint+0x64>
		if (radix == 8) {
   1c78c:	2d08      	cmp	r5, #8
   1c78e:	d116      	bne.n	1c7be <encode_uint+0x8a>
			conv->altform_0 = true;
   1c790:	78a3      	ldrb	r3, [r4, #2]
   1c792:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1c796:	70a3      	strb	r3, [r4, #2]
}
   1c798:	4640      	mov	r0, r8
   1c79a:	b003      	add	sp, #12
   1c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1c7a0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1c7a4:	2b70      	cmp	r3, #112	; 0x70
   1c7a6:	e7d3      	b.n	1c750 <encode_uint+0x1c>
	switch (specifier) {
   1c7a8:	2508      	movs	r5, #8
   1c7aa:	e7d4      	b.n	1c756 <encode_uint+0x22>
		value /= radix;
   1c7ac:	4606      	mov	r6, r0
   1c7ae:	460f      	mov	r7, r1
   1c7b0:	e7d6      	b.n	1c760 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1c7b2:	9a01      	ldr	r2, [sp, #4]
   1c7b4:	2a19      	cmp	r2, #25
   1c7b6:	bf94      	ite	ls
   1c7b8:	3337      	addls	r3, #55	; 0x37
   1c7ba:	3357      	addhi	r3, #87	; 0x57
   1c7bc:	e7da      	b.n	1c774 <encode_uint+0x40>
		} else if (radix == 16) {
   1c7be:	2d10      	cmp	r5, #16
   1c7c0:	d1ea      	bne.n	1c798 <encode_uint+0x64>
			conv->altform_0c = true;
   1c7c2:	78a3      	ldrb	r3, [r4, #2]
   1c7c4:	f043 0310 	orr.w	r3, r3, #16
   1c7c8:	e7e5      	b.n	1c796 <encode_uint+0x62>

0001c7ca <outs>:
{
   1c7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ce:	4607      	mov	r7, r0
   1c7d0:	4688      	mov	r8, r1
   1c7d2:	4615      	mov	r5, r2
   1c7d4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c7d6:	4614      	mov	r4, r2
   1c7d8:	42b4      	cmp	r4, r6
   1c7da:	eba4 0005 	sub.w	r0, r4, r5
   1c7de:	d302      	bcc.n	1c7e6 <outs+0x1c>
   1c7e0:	b93e      	cbnz	r6, 1c7f2 <outs+0x28>
   1c7e2:	7823      	ldrb	r3, [r4, #0]
   1c7e4:	b12b      	cbz	r3, 1c7f2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1c7e6:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c7ea:	4641      	mov	r1, r8
   1c7ec:	47b8      	blx	r7
		if (rc < 0) {
   1c7ee:	2800      	cmp	r0, #0
   1c7f0:	daf2      	bge.n	1c7d8 <outs+0xe>
}
   1c7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c7f6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1c7f6:	4770      	bx	lr

0001c7f8 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1c7f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c7fc:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1c800:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1c802:	4640      	mov	r0, r8
{
   1c804:	461f      	mov	r7, r3
   1c806:	460c      	mov	r4, r1
   1c808:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1c80a:	f001 f98e 	bl	1db2a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c80e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c812:	9300      	str	r3, [sp, #0]
   1c814:	b280      	uxth	r0, r0
   1c816:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1c81a:	463b      	mov	r3, r7
   1c81c:	4632      	mov	r2, r6
   1c81e:	4621      	mov	r1, r4
   1c820:	4628      	mov	r0, r5
   1c822:	f003 f86e 	bl	1f902 <bt_gatt_attr_read>
}
   1c826:	b004      	add	sp, #16
   1c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c82c <blvl_ccc_cfg_changed>:
}
   1c82c:	4770      	bx	lr

0001c82e <bas_init>:
}
   1c82e:	2000      	movs	r0, #0
   1c830:	4770      	bx	lr

0001c832 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c832:	68c2      	ldr	r2, [r0, #12]
   1c834:	b2cb      	uxtb	r3, r1
   1c836:	210c      	movs	r1, #12
   1c838:	fb03 2101 	mla	r1, r3, r1, r2
   1c83c:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1c83e:	f000 0007 	and.w	r0, r0, #7
   1c842:	4770      	bx	lr

0001c844 <set_off_state>:
	__asm__ volatile(
   1c844:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c848:	f3ef 8211 	mrs	r2, BASEPRI
   1c84c:	f383 8811 	msr	BASEPRI, r3
   1c850:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c854:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c856:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1c85a:	d001      	beq.n	1c860 <set_off_state+0x1c>
   1c85c:	428b      	cmp	r3, r1
   1c85e:	d107      	bne.n	1c870 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c860:	2301      	movs	r3, #1
   1c862:	6003      	str	r3, [r0, #0]
	int err = 0;
   1c864:	2000      	movs	r0, #0
	__asm__ volatile(
   1c866:	f382 8811 	msr	BASEPRI, r2
   1c86a:	f3bf 8f6f 	isb	sy
}
   1c86e:	4770      	bx	lr
		err = -EPERM;
   1c870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c874:	e7f7      	b.n	1c866 <set_off_state+0x22>

0001c876 <set_starting_state>:
{
   1c876:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c878:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c87c:	f3ef 8211 	mrs	r2, BASEPRI
   1c880:	f383 8811 	msr	BASEPRI, r3
   1c884:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c888:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c88a:	f003 0407 	and.w	r4, r3, #7
   1c88e:	2c01      	cmp	r4, #1
   1c890:	d106      	bne.n	1c8a0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c892:	6001      	str	r1, [r0, #0]
	int err = 0;
   1c894:	2000      	movs	r0, #0
	__asm__ volatile(
   1c896:	f382 8811 	msr	BASEPRI, r2
   1c89a:	f3bf 8f6f 	isb	sy
}
   1c89e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c8a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1c8a4:	428b      	cmp	r3, r1
		err = -EALREADY;
   1c8a6:	bf14      	ite	ne
   1c8a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c8ac:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1c8b0:	e7f1      	b.n	1c896 <set_starting_state+0x20>

0001c8b2 <set_on_state>:
	__asm__ volatile(
   1c8b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c8b6:	f3ef 8211 	mrs	r2, BASEPRI
   1c8ba:	f383 8811 	msr	BASEPRI, r3
   1c8be:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c8c2:	6803      	ldr	r3, [r0, #0]
   1c8c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c8c8:	f043 0302 	orr.w	r3, r3, #2
   1c8cc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c8ce:	f382 8811 	msr	BASEPRI, r2
   1c8d2:	f3bf 8f6f 	isb	sy
}
   1c8d6:	4770      	bx	lr

0001c8d8 <onoff_started_callback>:
	return &data->mgr[type];
   1c8d8:	68c0      	ldr	r0, [r0, #12]
{
   1c8da:	b410      	push	{r4}
	return &data->mgr[type];
   1c8dc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c8de:	241c      	movs	r4, #28
   1c8e0:	fb03 0004 	mla	r0, r3, r4, r0
   1c8e4:	2100      	movs	r1, #0
}
   1c8e6:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c8e8:	4710      	bx	r2

0001c8ea <blocking_start_callback>:
{
   1c8ea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c8ec:	f7fe befc 	b.w	1b6e8 <z_impl_k_sem_give>

0001c8f0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c8f0:	2000      	movs	r0, #0
   1c8f2:	f004 b80c 	b.w	2090e <nrfx_clock_stop>

0001c8f6 <api_stop>:
{
   1c8f6:	b538      	push	{r3, r4, r5, lr}
   1c8f8:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1c8fa:	230c      	movs	r3, #12
{
   1c8fc:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1c8fe:	4363      	muls	r3, r4
   1c900:	68c0      	ldr	r0, [r0, #12]
   1c902:	3340      	adds	r3, #64	; 0x40
   1c904:	2180      	movs	r1, #128	; 0x80
   1c906:	4418      	add	r0, r3
   1c908:	f7ff ff9c 	bl	1c844 <set_off_state>
	if (err < 0) {
   1c90c:	2800      	cmp	r0, #0
   1c90e:	db05      	blt.n	1c91c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1c910:	6869      	ldr	r1, [r5, #4]
   1c912:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1c916:	6863      	ldr	r3, [r4, #4]
   1c918:	4798      	blx	r3
	return 0;
   1c91a:	2000      	movs	r0, #0
}
   1c91c:	bd38      	pop	{r3, r4, r5, pc}

0001c91e <api_start>:
{
   1c91e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c922:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1c924:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1c926:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1c928:	436f      	muls	r7, r5
{
   1c92a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1c92c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1c930:	2180      	movs	r1, #128	; 0x80
   1c932:	4420      	add	r0, r4
{
   1c934:	4690      	mov	r8, r2
   1c936:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1c938:	f7ff ff9d 	bl	1c876 <set_starting_state>
	if (err < 0) {
   1c93c:	2800      	cmp	r0, #0
   1c93e:	db07      	blt.n	1c950 <api_start+0x32>
	subdata->cb = cb;
   1c940:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1c942:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1c946:	6873      	ldr	r3, [r6, #4]
   1c948:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1c94c:	4798      	blx	r3
	return 0;
   1c94e:	2000      	movs	r0, #0
}
   1c950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c954 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1c954:	4770      	bx	lr

0001c956 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1c956:	4770      	bx	lr

0001c958 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1c958:	f7f7 b8ba 	b.w	13ad0 <_DoInit>

0001c95c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1c95c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1c95e:	f7ff fffb 	bl	1c958 <SEGGER_RTT_Init>

	return 0;
}
   1c962:	2000      	movs	r0, #0
   1c964:	bd08      	pop	{r3, pc}

0001c966 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1c966:	b538      	push	{r3, r4, r5, lr}
   1c968:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1c96a:	42ab      	cmp	r3, r5
{
   1c96c:	4611      	mov	r1, r2
   1c96e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1c970:	d804      	bhi.n	1c97c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1c972:	461a      	mov	r2, r3
   1c974:	f001 f8fc 	bl	1db70 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1c978:	4620      	mov	r0, r4
   1c97a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1c97c:	2400      	movs	r4, #0
   1c97e:	e7fb      	b.n	1c978 <_copy+0x12>

0001c980 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1c980:	f001 b921 	b.w	1dbc6 <memset>

0001c984 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1c984:	09c3      	lsrs	r3, r0, #7
   1c986:	005a      	lsls	r2, r3, #1
   1c988:	4413      	add	r3, r2
   1c98a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c98e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1c992:	b2c0      	uxtb	r0, r0
   1c994:	4770      	bx	lr

0001c996 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1c996:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c99a:	4606      	mov	r6, r0
   1c99c:	b0a9      	sub	sp, #164	; 0xa4
   1c99e:	4688      	mov	r8, r1
   1c9a0:	4614      	mov	r4, r2
   1c9a2:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c9a4:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1c9a8:	f7f7 f8c2 	bl	13b30 <uECC_get_rng>
		if (!rng_function ||
   1c9ac:	4603      	mov	r3, r0
   1c9ae:	2800      	cmp	r0, #0
   1c9b0:	d03e      	beq.n	1ca30 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1c9b2:	2140      	movs	r1, #64	; 0x40
   1c9b4:	a808      	add	r0, sp, #32
   1c9b6:	4798      	blx	r3
		if (!rng_function ||
   1c9b8:	b3d0      	cbz	r0, 1ca30 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c9ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1c9be:	f112 031f 	adds.w	r3, r2, #31
   1c9c2:	bf48      	it	mi
   1c9c4:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1c9c8:	466d      	mov	r5, sp
   1c9ca:	464a      	mov	r2, r9
   1c9cc:	a908      	add	r1, sp, #32
   1c9ce:	4628      	mov	r0, r5
   1c9d0:	f343 1347 	sbfx	r3, r3, #5, #8
   1c9d4:	f000 fa03 	bl	1cdde <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1c9d8:	4622      	mov	r2, r4
   1c9da:	4629      	mov	r1, r5
   1c9dc:	a818      	add	r0, sp, #96	; 0x60
   1c9de:	f000 fe19 	bl	1d614 <EccPoint_compute_public_key>
   1c9e2:	b318      	cbz	r0, 1ca2c <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1c9e4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1c9e8:	1dd9      	adds	r1, r3, #7
   1c9ea:	bf48      	it	mi
   1c9ec:	f103 010e 	addmi.w	r1, r3, #14
   1c9f0:	462a      	mov	r2, r5
   1c9f2:	4640      	mov	r0, r8
   1c9f4:	10c9      	asrs	r1, r1, #3
   1c9f6:	f000 fe35 	bl	1d664 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1c9fa:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1c9fe:	aa18      	add	r2, sp, #96	; 0x60
   1ca00:	4630      	mov	r0, r6
   1ca02:	f000 fe2f 	bl	1d664 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ca06:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1ca0a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1ca0e:	ab18      	add	r3, sp, #96	; 0x60
   1ca10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ca14:	1870      	adds	r0, r6, r1
   1ca16:	f000 fe25 	bl	1d664 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1ca1a:	2220      	movs	r2, #32
   1ca1c:	2100      	movs	r1, #0
   1ca1e:	4628      	mov	r0, r5
   1ca20:	f001 f8d1 	bl	1dbc6 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1ca24:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1ca26:	b029      	add	sp, #164	; 0xa4
   1ca28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1ca2c:	3f01      	subs	r7, #1
   1ca2e:	d1bb      	bne.n	1c9a8 <uECC_make_key+0x12>
        		return 0;
   1ca30:	2000      	movs	r0, #0
   1ca32:	e7f8      	b.n	1ca26 <uECC_make_key+0x90>

0001ca34 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1ca34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca38:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1ca3a:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1ca3e:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1ca42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1ca46:	b0a4      	sub	sp, #144	; 0x90
   1ca48:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1ca4a:	1dda      	adds	r2, r3, #7
   1ca4c:	bf48      	it	mi
   1ca4e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1ca52:	ad04      	add	r5, sp, #16
{
   1ca54:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1ca56:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1ca58:	4628      	mov	r0, r5
   1ca5a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1ca5c:	9502      	str	r5, [sp, #8]
   1ca5e:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1ca60:	f000 fe14 	bl	1d68c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1ca64:	463a      	mov	r2, r7
   1ca66:	4649      	mov	r1, r9
   1ca68:	a814      	add	r0, sp, #80	; 0x50
   1ca6a:	f000 fe0f 	bl	1d68c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1ca6e:	ab14      	add	r3, sp, #80	; 0x50
   1ca70:	eb09 0107 	add.w	r1, r9, r7
   1ca74:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1ca78:	463a      	mov	r2, r7
   1ca7a:	f000 fe07 	bl	1d68c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1ca7e:	4623      	mov	r3, r4
   1ca80:	4632      	mov	r2, r6
   1ca82:	4629      	mov	r1, r5
   1ca84:	4628      	mov	r0, r5
   1ca86:	f000 fd99 	bl	1d5bc <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1ca8a:	fab0 f080 	clz	r0, r0
   1ca8e:	9401      	str	r4, [sp, #4]
   1ca90:	ab24      	add	r3, sp, #144	; 0x90
   1ca92:	0940      	lsrs	r0, r0, #5
   1ca94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ca98:	8863      	ldrh	r3, [r4, #2]
   1ca9a:	3301      	adds	r3, #1
   1ca9c:	b21b      	sxth	r3, r3
   1ca9e:	9300      	str	r3, [sp, #0]
   1caa0:	a914      	add	r1, sp, #80	; 0x50
   1caa2:	2300      	movs	r3, #0
   1caa4:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1caa8:	4608      	mov	r0, r1
   1caaa:	f000 fcb8 	bl	1d41e <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1caae:	aa14      	add	r2, sp, #80	; 0x50
   1cab0:	4639      	mov	r1, r7
   1cab2:	4640      	mov	r0, r8
   1cab4:	f000 fdd6 	bl	1d664 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1cab8:	4621      	mov	r1, r4
   1caba:	a814      	add	r0, sp, #80	; 0x50
   1cabc:	f000 fc24 	bl	1d308 <EccPoint_isZero>
   1cac0:	af02      	add	r7, sp, #8
   1cac2:	4604      	mov	r4, r0
   1cac4:	2208      	movs	r2, #8
   1cac6:	2100      	movs	r1, #0
   1cac8:	4638      	mov	r0, r7
   1caca:	f001 f87c 	bl	1dbc6 <memset>
   1cace:	2220      	movs	r2, #32
   1cad0:	2100      	movs	r1, #0
   1cad2:	4630      	mov	r0, r6
   1cad4:	f001 f877 	bl	1dbc6 <memset>
   1cad8:	2220      	movs	r2, #32
   1cada:	2100      	movs	r1, #0
   1cadc:	4628      	mov	r0, r5
   1cade:	f001 f872 	bl	1dbc6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1cae2:	fab4 f084 	clz	r0, r4
   1cae6:	0940      	lsrs	r0, r0, #5
   1cae8:	b024      	add	sp, #144	; 0x90
   1caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001caee <uECC_vli_add>:
{
   1caee:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1caf0:	2400      	movs	r4, #0
{
   1caf2:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1caf4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1caf6:	b265      	sxtb	r5, r4
   1caf8:	42ab      	cmp	r3, r5
   1cafa:	dc00      	bgt.n	1cafe <uECC_vli_add+0x10>
}
   1cafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1cafe:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1cb02:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1cb06:	443d      	add	r5, r7
   1cb08:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1cb0a:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1cb0c:	bf8c      	ite	hi
   1cb0e:	2701      	movhi	r7, #1
   1cb10:	2700      	movls	r7, #0
		result[i] = sum;
   1cb12:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1cb16:	bf18      	it	ne
   1cb18:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1cb1a:	3401      	adds	r4, #1
   1cb1c:	e7eb      	b.n	1caf6 <uECC_vli_add+0x8>

0001cb1e <uECC_vli_rshift1>:
	vli += num_words;
   1cb1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1cb22:	2300      	movs	r3, #0
	while (vli-- > end) {
   1cb24:	4288      	cmp	r0, r1
   1cb26:	d300      	bcc.n	1cb2a <uECC_vli_rshift1+0xc>
}
   1cb28:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1cb2a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1cb2e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1cb32:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1cb34:	07d3      	lsls	r3, r2, #31
   1cb36:	e7f5      	b.n	1cb24 <uECC_vli_rshift1+0x6>

0001cb38 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1cb38:	6803      	ldr	r3, [r0, #0]
{
   1cb3a:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1cb3c:	f013 0601 	ands.w	r6, r3, #1
{
   1cb40:	4605      	mov	r5, r0
   1cb42:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1cb44:	d005      	beq.n	1cb52 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1cb46:	4613      	mov	r3, r2
   1cb48:	460a      	mov	r2, r1
   1cb4a:	4601      	mov	r1, r0
   1cb4c:	f7ff ffcf 	bl	1caee <uECC_vli_add>
   1cb50:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1cb52:	4621      	mov	r1, r4
   1cb54:	4628      	mov	r0, r5
   1cb56:	f7ff ffe2 	bl	1cb1e <uECC_vli_rshift1>
	if (carry) {
   1cb5a:	b146      	cbz	r6, 1cb6e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1cb5c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1cb60:	3a01      	subs	r2, #1
   1cb62:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1cb66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cb6a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1cb6e:	bd70      	pop	{r4, r5, r6, pc}

0001cb70 <uECC_vli_mult>:
{
   1cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1cb74:	2500      	movs	r5, #0
{
   1cb76:	b087      	sub	sp, #28
   1cb78:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1cb7c:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1cb7e:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1cb80:	fa4f f885 	sxtb.w	r8, r5
   1cb84:	4543      	cmp	r3, r8
   1cb86:	dc16      	bgt.n	1cbb6 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1cb88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1cb8c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1cb90:	9502      	str	r5, [sp, #8]
   1cb92:	f04f 0a00 	mov.w	sl, #0
   1cb96:	9e02      	ldr	r6, [sp, #8]
   1cb98:	fa53 fe8a 	uxtab	lr, r3, sl
   1cb9c:	fa4f fe8e 	sxtb.w	lr, lr
   1cba0:	45b6      	cmp	lr, r6
   1cba2:	fa5f f58a 	uxtb.w	r5, sl
   1cba6:	db2d      	blt.n	1cc04 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1cba8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1cbac:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1cbb0:	b007      	add	sp, #28
   1cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbb6:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1cbb8:	f04f 0c00 	mov.w	ip, #0
   1cbbc:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1cbc0:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1cbc2:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1cbc6:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1cbc8:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1cbcc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1cbd0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1cbd4:	fba7 ab06 	umull	sl, fp, r7, r6
   1cbd8:	eb1a 0601 	adds.w	r6, sl, r1
   1cbdc:	f10c 0c01 	add.w	ip, ip, #1
   1cbe0:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1cbe4:	fa4f fa8c 	sxtb.w	sl, ip
   1cbe8:	bf2c      	ite	cs
   1cbea:	2201      	movcs	r2, #1
   1cbec:	2200      	movcc	r2, #0
   1cbee:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1cbf0:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1cbf2:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1cbf4:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1cbf6:	dde4      	ble.n	1cbc2 <uECC_vli_mult+0x52>
		result[k] = r0;
   1cbf8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1cbfc:	463a      	mov	r2, r7
   1cbfe:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1cc00:	4674      	mov	r4, lr
   1cc02:	e7bd      	b.n	1cb80 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1cc04:	3501      	adds	r5, #1
   1cc06:	9900      	ldr	r1, [sp, #0]
   1cc08:	9e01      	ldr	r6, [sp, #4]
   1cc0a:	fa4f fc85 	sxtb.w	ip, r5
   1cc0e:	ebae 0b0c 	sub.w	fp, lr, ip
   1cc12:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1cc16:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1cc1a:	4621      	mov	r1, r4
   1cc1c:	2400      	movs	r4, #0
   1cc1e:	459c      	cmp	ip, r3
   1cc20:	db05      	blt.n	1cc2e <uECC_vli_mult+0xbe>
		result[k] = r0;
   1cc22:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1cc26:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1cc2a:	460a      	mov	r2, r1
   1cc2c:	e7b3      	b.n	1cb96 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1cc2e:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1cc32:	f855 7b04 	ldr.w	r7, [r5], #4
   1cc36:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1cc3a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1cc3e:	fba7 6706 	umull	r6, r7, r7, r6
   1cc42:	eb16 0801 	adds.w	r8, r6, r1
   1cc46:	eb57 0902 	adcs.w	r9, r7, r2
   1cc4a:	bf2c      	ite	cs
   1cc4c:	2201      	movcs	r2, #1
   1cc4e:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1cc50:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1cc54:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1cc56:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1cc58:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1cc5a:	fa4f fc8c 	sxtb.w	ip, ip
   1cc5e:	e7de      	b.n	1cc1e <uECC_vli_mult+0xae>

0001cc60 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1cc60:	2300      	movs	r3, #0
{
   1cc62:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1cc64:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1cc66:	b25a      	sxtb	r2, r3
   1cc68:	4291      	cmp	r1, r2
   1cc6a:	dc00      	bgt.n	1cc6e <uECC_vli_clear+0xe>
}
   1cc6c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1cc6e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1cc72:	3301      	adds	r3, #1
   1cc74:	e7f7      	b.n	1cc66 <uECC_vli_clear+0x6>

0001cc76 <uECC_vli_isZero>:
{
   1cc76:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1cc78:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1cc7a:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1cc7c:	b25c      	sxtb	r4, r3
   1cc7e:	42a1      	cmp	r1, r4
   1cc80:	dc03      	bgt.n	1cc8a <uECC_vli_isZero+0x14>
}
   1cc82:	fab2 f082 	clz	r0, r2
   1cc86:	0940      	lsrs	r0, r0, #5
   1cc88:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1cc8a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1cc8e:	3301      	adds	r3, #1
   1cc90:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1cc92:	e7f3      	b.n	1cc7c <uECC_vli_isZero+0x6>

0001cc94 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cc94:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1cc96:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cc98:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1cc9c:	f001 011f 	and.w	r1, r1, #31
   1cca0:	fa03 f101 	lsl.w	r1, r3, r1
}
   1cca4:	4008      	ands	r0, r1
   1cca6:	4770      	bx	lr

0001cca8 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1cca8:	3901      	subs	r1, #1
   1ccaa:	b24b      	sxtb	r3, r1
{
   1ccac:	4602      	mov	r2, r0
   1ccae:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ccb2:	2b00      	cmp	r3, #0
   1ccb4:	da03      	bge.n	1ccbe <uECC_vli_numBits+0x16>
	return (i + 1);
   1ccb6:	3301      	adds	r3, #1
   1ccb8:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1ccba:	b938      	cbnz	r0, 1cccc <uECC_vli_numBits+0x24>
   1ccbc:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ccbe:	f851 0904 	ldr.w	r0, [r1], #-4
   1ccc2:	2800      	cmp	r0, #0
   1ccc4:	d1f7      	bne.n	1ccb6 <uECC_vli_numBits+0xe>
   1ccc6:	3b01      	subs	r3, #1
   1ccc8:	b25b      	sxtb	r3, r3
   1ccca:	e7f2      	b.n	1ccb2 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1cccc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1ccd0:	3b01      	subs	r3, #1
   1ccd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1ccd6:	2300      	movs	r3, #0
   1ccd8:	b922      	cbnz	r2, 1cce4 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1ccda:	3801      	subs	r0, #1
   1ccdc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1cce0:	b200      	sxth	r0, r0
}
   1cce2:	4770      	bx	lr
		digit >>= 1;
   1cce4:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1cce6:	3301      	adds	r3, #1
   1cce8:	e7f6      	b.n	1ccd8 <uECC_vli_numBits+0x30>

0001ccea <uECC_vli_set>:
{
   1ccea:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1ccec:	2300      	movs	r3, #0
   1ccee:	b25c      	sxtb	r4, r3
   1ccf0:	42a2      	cmp	r2, r4
   1ccf2:	dc00      	bgt.n	1ccf6 <uECC_vli_set+0xc>
}
   1ccf4:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1ccf6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1ccfa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1ccfe:	3301      	adds	r3, #1
   1cd00:	e7f5      	b.n	1ccee <uECC_vli_set+0x4>

0001cd02 <uECC_vli_cmp_unsafe>:
{
   1cd02:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1cd04:	3a01      	subs	r2, #1
   1cd06:	b253      	sxtb	r3, r2
   1cd08:	009a      	lsls	r2, r3, #2
   1cd0a:	2b00      	cmp	r3, #0
   1cd0c:	da01      	bge.n	1cd12 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1cd0e:	2000      	movs	r0, #0
}
   1cd10:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1cd12:	5885      	ldr	r5, [r0, r2]
   1cd14:	588c      	ldr	r4, [r1, r2]
   1cd16:	42a5      	cmp	r5, r4
   1cd18:	d805      	bhi.n	1cd26 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1cd1a:	f1a2 0204 	sub.w	r2, r2, #4
   1cd1e:	d304      	bcc.n	1cd2a <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1cd20:	3b01      	subs	r3, #1
   1cd22:	b25b      	sxtb	r3, r3
   1cd24:	e7f1      	b.n	1cd0a <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1cd26:	2001      	movs	r0, #1
   1cd28:	e7f2      	b.n	1cd10 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1cd2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd2e:	e7ef      	b.n	1cd10 <uECC_vli_cmp_unsafe+0xe>

0001cd30 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1cd30:	3a01      	subs	r2, #1
   1cd32:	b253      	sxtb	r3, r2
{
   1cd34:	b570      	push	{r4, r5, r6, lr}
   1cd36:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1cd38:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1cd3a:	2b00      	cmp	r3, #0
   1cd3c:	da03      	bge.n	1cd46 <uECC_vli_equal+0x16>
}
   1cd3e:	1e20      	subs	r0, r4, #0
   1cd40:	bf18      	it	ne
   1cd42:	2001      	movne	r0, #1
   1cd44:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1cd46:	5885      	ldr	r5, [r0, r2]
   1cd48:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1cd4a:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1cd4c:	4075      	eors	r5, r6
   1cd4e:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1cd50:	b25b      	sxtb	r3, r3
   1cd52:	3a04      	subs	r2, #4
   1cd54:	e7f1      	b.n	1cd3a <uECC_vli_equal+0xa>

0001cd56 <uECC_vli_sub>:
{
   1cd56:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1cd58:	2400      	movs	r4, #0
{
   1cd5a:	4606      	mov	r6, r0
   1cd5c:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1cd5e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1cd60:	b265      	sxtb	r5, r4
   1cd62:	45ac      	cmp	ip, r5
   1cd64:	dc00      	bgt.n	1cd68 <uECC_vli_sub+0x12>
}
   1cd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1cd68:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1cd6c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1cd70:	1a3d      	subs	r5, r7, r0
   1cd72:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1cd74:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1cd76:	bf34      	ite	cc
   1cd78:	2701      	movcc	r7, #1
   1cd7a:	2700      	movcs	r7, #0
		result[i] = diff;
   1cd7c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1cd80:	bf18      	it	ne
   1cd82:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1cd84:	3401      	adds	r4, #1
   1cd86:	e7eb      	b.n	1cd60 <uECC_vli_sub+0xa>

0001cd88 <uECC_vli_modAdd>:
{
   1cd88:	b570      	push	{r4, r5, r6, lr}
   1cd8a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1cd8e:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1cd90:	4633      	mov	r3, r6
{
   1cd92:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1cd94:	f7ff feab 	bl	1caee <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1cd98:	b930      	cbnz	r0, 1cda8 <uECC_vli_modAdd+0x20>
   1cd9a:	4632      	mov	r2, r6
   1cd9c:	4621      	mov	r1, r4
   1cd9e:	4628      	mov	r0, r5
   1cda0:	f7ff ffaf 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1cda4:	2801      	cmp	r0, #1
   1cda6:	d007      	beq.n	1cdb8 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1cda8:	4633      	mov	r3, r6
   1cdaa:	462a      	mov	r2, r5
   1cdac:	4621      	mov	r1, r4
   1cdae:	4620      	mov	r0, r4
}
   1cdb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1cdb4:	f7ff bfcf 	b.w	1cd56 <uECC_vli_sub>
}
   1cdb8:	bd70      	pop	{r4, r5, r6, pc}

0001cdba <uECC_vli_modSub>:
{
   1cdba:	b570      	push	{r4, r5, r6, lr}
   1cdbc:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1cdc0:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1cdc2:	4633      	mov	r3, r6
{
   1cdc4:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1cdc6:	f7ff ffc6 	bl	1cd56 <uECC_vli_sub>
	if (l_borrow) {
   1cdca:	b138      	cbz	r0, 1cddc <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1cdcc:	4633      	mov	r3, r6
   1cdce:	462a      	mov	r2, r5
   1cdd0:	4621      	mov	r1, r4
   1cdd2:	4620      	mov	r0, r4
}
   1cdd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1cdd8:	f7ff be89 	b.w	1caee <uECC_vli_add>
}
   1cddc:	bd70      	pop	{r4, r5, r6, pc}

0001cdde <uECC_vli_mmod>:
{
   1cdde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cde2:	b0a5      	sub	sp, #148	; 0x94
   1cde4:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1cde6:	ab14      	add	r3, sp, #80	; 0x50
   1cde8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1cdec:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1cdee:	4629      	mov	r1, r5
   1cdf0:	4610      	mov	r0, r2
{
   1cdf2:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1cdf4:	f7ff ff58 	bl	1cca8 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1cdf8:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1cdfc:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1cdfe:	2c00      	cmp	r4, #0
   1ce00:	4621      	mov	r1, r4
   1ce02:	bfb8      	it	lt
   1ce04:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ce08:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1ce0a:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ce0e:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1ce12:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1ce14:	f004 071f 	and.w	r7, r4, #31
   1ce18:	bf58      	it	pl
   1ce1a:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1ce1c:	f7ff ff20 	bl	1cc60 <uECC_vli_clear>
	if (bit_shift > 0) {
   1ce20:	2f00      	cmp	r7, #0
   1ce22:	b208      	sxth	r0, r1
   1ce24:	dd2b      	ble.n	1ce7e <uECC_vli_mmod+0xa0>
   1ce26:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1ce28:	2200      	movs	r2, #0
   1ce2a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1ce2e:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ce32:	4613      	mov	r3, r2
   1ce34:	429d      	cmp	r5, r3
   1ce36:	d817      	bhi.n	1ce68 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1ce38:	006b      	lsls	r3, r5, #1
   1ce3a:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ce3c:	ab04      	add	r3, sp, #16
   1ce3e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ce42:	1e6f      	subs	r7, r5, #1
   1ce44:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ce46:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ce48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1ce4c:	2c00      	cmp	r4, #0
   1ce4e:	da54      	bge.n	1cefa <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1ce50:	ab24      	add	r3, sp, #144	; 0x90
   1ce52:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1ce56:	462a      	mov	r2, r5
   1ce58:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1ce5c:	4640      	mov	r0, r8
   1ce5e:	f7ff ff44 	bl	1ccea <uECC_vli_set>
}
   1ce62:	b025      	add	sp, #148	; 0x94
   1ce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1ce68:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1ce6c:	fa0c f007 	lsl.w	r0, ip, r7
   1ce70:	4302      	orrs	r2, r0
   1ce72:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ce76:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1ce78:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ce7c:	e7da      	b.n	1ce34 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1ce7e:	ab04      	add	r3, sp, #16
   1ce80:	462a      	mov	r2, r5
   1ce82:	4631      	mov	r1, r6
   1ce84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ce88:	f7ff ff2f 	bl	1ccea <uECC_vli_set>
   1ce8c:	e7d4      	b.n	1ce38 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ce8e:	fa0f fe82 	sxth.w	lr, r2
   1ce92:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1ce96:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1ce9a:	ab24      	add	r3, sp, #144	; 0x90
   1ce9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1cea0:	3001      	adds	r0, #1
   1cea2:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1cea6:	440b      	add	r3, r1
   1cea8:	ebbb 0303 	subs.w	r3, fp, r3
   1ceac:	bf34      	ite	cc
   1ceae:	2201      	movcc	r2, #1
   1ceb0:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1ceb2:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1ceb4:	bf18      	it	ne
   1ceb6:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1ceb8:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1cebc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1cec0:	9b01      	ldr	r3, [sp, #4]
   1cec2:	b242      	sxtb	r2, r0
   1cec4:	429a      	cmp	r2, r3
   1cec6:	dbe2      	blt.n	1ce8e <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1cec8:	1a73      	subs	r3, r6, r1
   1ceca:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1cecc:	4629      	mov	r1, r5
   1cece:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1ced0:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ced2:	f7ff fe24 	bl	1cb1e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ced6:	ab24      	add	r3, sp, #144	; 0x90
   1ced8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cedc:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cede:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1cee2:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cee6:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cee8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ceec:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ceee:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1cef2:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cef4:	f7ff fe13 	bl	1cb1e <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1cef8:	e7a8      	b.n	1ce4c <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1cefa:	ab24      	add	r3, sp, #144	; 0x90
   1cefc:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1cefe:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1cf02:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1cf04:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1cf08:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1cf0c:	e7d8      	b.n	1cec0 <uECC_vli_mmod+0xe2>

0001cf0e <uECC_vli_modMult_fast>:
{
   1cf0e:	b530      	push	{r4, r5, lr}
   1cf10:	461c      	mov	r4, r3
   1cf12:	b091      	sub	sp, #68	; 0x44
   1cf14:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1cf16:	f993 3000 	ldrsb.w	r3, [r3]
   1cf1a:	4668      	mov	r0, sp
   1cf1c:	f7ff fe28 	bl	1cb70 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1cf20:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1cf24:	4669      	mov	r1, sp
   1cf26:	4628      	mov	r0, r5
   1cf28:	4798      	blx	r3
}
   1cf2a:	b011      	add	sp, #68	; 0x44
   1cf2c:	bd30      	pop	{r4, r5, pc}

0001cf2e <uECC_vli_modSquare_fast>:
{
   1cf2e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1cf30:	460a      	mov	r2, r1
   1cf32:	f7ff bfec 	b.w	1cf0e <uECC_vli_modMult_fast>

0001cf36 <double_jacobian_default>:
{
   1cf36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1cf3a:	f993 6000 	ldrsb.w	r6, [r3]
{
   1cf3e:	b092      	sub	sp, #72	; 0x48
   1cf40:	4604      	mov	r4, r0
   1cf42:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1cf44:	4610      	mov	r0, r2
   1cf46:	4631      	mov	r1, r6
{
   1cf48:	4615      	mov	r5, r2
   1cf4a:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1cf4c:	f7ff fe93 	bl	1cc76 <uECC_vli_isZero>
   1cf50:	2800      	cmp	r0, #0
   1cf52:	f040 8091 	bne.w	1d078 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1cf56:	463a      	mov	r2, r7
   1cf58:	4649      	mov	r1, r9
   1cf5a:	a802      	add	r0, sp, #8
   1cf5c:	f7ff ffe7 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1cf60:	463b      	mov	r3, r7
   1cf62:	aa02      	add	r2, sp, #8
   1cf64:	4621      	mov	r1, r4
   1cf66:	a80a      	add	r0, sp, #40	; 0x28
   1cf68:	f7ff ffd1 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1cf6c:	a902      	add	r1, sp, #8
   1cf6e:	4608      	mov	r0, r1
   1cf70:	463a      	mov	r2, r7
   1cf72:	f7ff ffdc 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1cf76:	463b      	mov	r3, r7
   1cf78:	462a      	mov	r2, r5
   1cf7a:	4649      	mov	r1, r9
   1cf7c:	4648      	mov	r0, r9
   1cf7e:	f7ff ffc6 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cf82:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1cf86:	463a      	mov	r2, r7
   1cf88:	4629      	mov	r1, r5
   1cf8a:	4628      	mov	r0, r5
   1cf8c:	f7ff ffcf 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cf90:	4643      	mov	r3, r8
   1cf92:	462a      	mov	r2, r5
   1cf94:	4621      	mov	r1, r4
   1cf96:	4620      	mov	r0, r4
   1cf98:	9600      	str	r6, [sp, #0]
   1cf9a:	f7ff fef5 	bl	1cd88 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1cf9e:	4643      	mov	r3, r8
   1cfa0:	462a      	mov	r2, r5
   1cfa2:	4629      	mov	r1, r5
   1cfa4:	4628      	mov	r0, r5
   1cfa6:	9600      	str	r6, [sp, #0]
   1cfa8:	f7ff feee 	bl	1cd88 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1cfac:	4643      	mov	r3, r8
   1cfae:	462a      	mov	r2, r5
   1cfb0:	4621      	mov	r1, r4
   1cfb2:	4628      	mov	r0, r5
   1cfb4:	9600      	str	r6, [sp, #0]
   1cfb6:	f7ff ff00 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1cfba:	463b      	mov	r3, r7
   1cfbc:	462a      	mov	r2, r5
   1cfbe:	4621      	mov	r1, r4
   1cfc0:	4620      	mov	r0, r4
   1cfc2:	f7ff ffa4 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1cfc6:	4643      	mov	r3, r8
   1cfc8:	4622      	mov	r2, r4
   1cfca:	4621      	mov	r1, r4
   1cfcc:	4628      	mov	r0, r5
   1cfce:	9600      	str	r6, [sp, #0]
   1cfd0:	f7ff feda 	bl	1cd88 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1cfd4:	4643      	mov	r3, r8
   1cfd6:	9600      	str	r6, [sp, #0]
   1cfd8:	462a      	mov	r2, r5
   1cfda:	4621      	mov	r1, r4
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f7ff fed3 	bl	1cd88 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cfe2:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1cfe4:	07db      	lsls	r3, r3, #31
   1cfe6:	d54a      	bpl.n	1d07e <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cfe8:	4633      	mov	r3, r6
   1cfea:	4642      	mov	r2, r8
   1cfec:	4621      	mov	r1, r4
   1cfee:	4620      	mov	r0, r4
   1cff0:	f7ff fd7d 	bl	1caee <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1cff4:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cff6:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1cff8:	4620      	mov	r0, r4
   1cffa:	f7ff fd90 	bl	1cb1e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1cffe:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1d002:	3b01      	subs	r3, #1
   1d004:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1d008:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1d00c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1d010:	463a      	mov	r2, r7
   1d012:	4621      	mov	r1, r4
   1d014:	4628      	mov	r0, r5
   1d016:	f7ff ff8a 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1d01a:	4643      	mov	r3, r8
   1d01c:	aa0a      	add	r2, sp, #40	; 0x28
   1d01e:	4629      	mov	r1, r5
   1d020:	4628      	mov	r0, r5
   1d022:	9600      	str	r6, [sp, #0]
   1d024:	f7ff fec9 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1d028:	4643      	mov	r3, r8
   1d02a:	aa0a      	add	r2, sp, #40	; 0x28
   1d02c:	4629      	mov	r1, r5
   1d02e:	4628      	mov	r0, r5
   1d030:	9600      	str	r6, [sp, #0]
   1d032:	f7ff fec2 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1d036:	a90a      	add	r1, sp, #40	; 0x28
   1d038:	4608      	mov	r0, r1
   1d03a:	4643      	mov	r3, r8
   1d03c:	462a      	mov	r2, r5
   1d03e:	9600      	str	r6, [sp, #0]
   1d040:	f7ff febb 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1d044:	463b      	mov	r3, r7
   1d046:	aa0a      	add	r2, sp, #40	; 0x28
   1d048:	4621      	mov	r1, r4
   1d04a:	4620      	mov	r0, r4
   1d04c:	f7ff ff5f 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1d050:	aa02      	add	r2, sp, #8
   1d052:	4643      	mov	r3, r8
   1d054:	4610      	mov	r0, r2
   1d056:	4621      	mov	r1, r4
   1d058:	9600      	str	r6, [sp, #0]
   1d05a:	f7ff feae 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1d05e:	4632      	mov	r2, r6
   1d060:	4629      	mov	r1, r5
   1d062:	4620      	mov	r0, r4
   1d064:	f7ff fe41 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1d068:	4649      	mov	r1, r9
   1d06a:	4628      	mov	r0, r5
   1d06c:	f7ff fe3d 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1d070:	a902      	add	r1, sp, #8
   1d072:	4648      	mov	r0, r9
   1d074:	f7ff fe39 	bl	1ccea <uECC_vli_set>
}
   1d078:	b012      	add	sp, #72	; 0x48
   1d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1d07e:	4631      	mov	r1, r6
   1d080:	4620      	mov	r0, r4
   1d082:	f7ff fd4c 	bl	1cb1e <uECC_vli_rshift1>
   1d086:	e7c3      	b.n	1d010 <double_jacobian_default+0xda>

0001d088 <x_side_default>:
{
   1d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d08c:	4615      	mov	r5, r2
   1d08e:	b08a      	sub	sp, #40	; 0x28
   1d090:	4604      	mov	r4, r0
   1d092:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d094:	221c      	movs	r2, #28
   1d096:	2100      	movs	r1, #0
   1d098:	a803      	add	r0, sp, #12
   1d09a:	f000 fd94 	bl	1dbc6 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d09e:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1d0a0:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d0a4:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d0a6:	462a      	mov	r2, r5
   1d0a8:	4631      	mov	r1, r6
   1d0aa:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d0ac:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d0ae:	f7ff ff3e 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d0b2:	463b      	mov	r3, r7
   1d0b4:	aa02      	add	r2, sp, #8
   1d0b6:	4621      	mov	r1, r4
   1d0b8:	4620      	mov	r0, r4
   1d0ba:	f8cd 8000 	str.w	r8, [sp]
   1d0be:	f7ff fe7c 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1d0c2:	462b      	mov	r3, r5
   1d0c4:	4632      	mov	r2, r6
   1d0c6:	4621      	mov	r1, r4
   1d0c8:	4620      	mov	r0, r4
   1d0ca:	f7ff ff20 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1d0ce:	f8cd 8000 	str.w	r8, [sp]
   1d0d2:	463b      	mov	r3, r7
   1d0d4:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1d0d8:	4621      	mov	r1, r4
   1d0da:	4620      	mov	r0, r4
   1d0dc:	f7ff fe54 	bl	1cd88 <uECC_vli_modAdd>
}
   1d0e0:	b00a      	add	sp, #40	; 0x28
   1d0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d0e6 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1d0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d0ea:	b09a      	sub	sp, #104	; 0x68
   1d0ec:	4616      	mov	r6, r2
   1d0ee:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d0f2:	4644      	mov	r4, r8
{
   1d0f4:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1d0f6:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d0fa:	9500      	str	r5, [sp, #0]
{
   1d0fc:	4607      	mov	r7, r0
   1d0fe:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d100:	4623      	mov	r3, r4
   1d102:	4602      	mov	r2, r0
   1d104:	4631      	mov	r1, r6
   1d106:	a802      	add	r0, sp, #8
   1d108:	f7ff fe57 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d10c:	a902      	add	r1, sp, #8
   1d10e:	4642      	mov	r2, r8
   1d110:	4608      	mov	r0, r1
   1d112:	f7ff ff0c 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d116:	4643      	mov	r3, r8
   1d118:	aa02      	add	r2, sp, #8
   1d11a:	4639      	mov	r1, r7
   1d11c:	4638      	mov	r0, r7
   1d11e:	f7ff fef6 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d122:	4643      	mov	r3, r8
   1d124:	aa02      	add	r2, sp, #8
   1d126:	4631      	mov	r1, r6
   1d128:	4630      	mov	r0, r6
   1d12a:	f7ff fef0 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1d12e:	4623      	mov	r3, r4
   1d130:	4652      	mov	r2, sl
   1d132:	4649      	mov	r1, r9
   1d134:	a802      	add	r0, sp, #8
   1d136:	9500      	str	r5, [sp, #0]
   1d138:	f7ff fe26 	bl	1cd88 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d13c:	4623      	mov	r3, r4
   1d13e:	4652      	mov	r2, sl
   1d140:	4649      	mov	r1, r9
   1d142:	4648      	mov	r0, r9
   1d144:	9500      	str	r5, [sp, #0]
   1d146:	f7ff fe38 	bl	1cdba <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1d14a:	4623      	mov	r3, r4
   1d14c:	463a      	mov	r2, r7
   1d14e:	4631      	mov	r1, r6
   1d150:	a80a      	add	r0, sp, #40	; 0x28
   1d152:	9500      	str	r5, [sp, #0]
   1d154:	f7ff fe31 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1d158:	4643      	mov	r3, r8
   1d15a:	aa0a      	add	r2, sp, #40	; 0x28
   1d15c:	4651      	mov	r1, sl
   1d15e:	4650      	mov	r0, sl
   1d160:	f7ff fed5 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1d164:	4623      	mov	r3, r4
   1d166:	4632      	mov	r2, r6
   1d168:	4639      	mov	r1, r7
   1d16a:	a80a      	add	r0, sp, #40	; 0x28
   1d16c:	9500      	str	r5, [sp, #0]
   1d16e:	f7ff fe0b 	bl	1cd88 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1d172:	4642      	mov	r2, r8
   1d174:	4649      	mov	r1, r9
   1d176:	4630      	mov	r0, r6
   1d178:	f7ff fed9 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1d17c:	4623      	mov	r3, r4
   1d17e:	aa0a      	add	r2, sp, #40	; 0x28
   1d180:	4631      	mov	r1, r6
   1d182:	4630      	mov	r0, r6
   1d184:	9500      	str	r5, [sp, #0]
   1d186:	f7ff fe18 	bl	1cdba <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1d18a:	4623      	mov	r3, r4
   1d18c:	4632      	mov	r2, r6
   1d18e:	4639      	mov	r1, r7
   1d190:	a812      	add	r0, sp, #72	; 0x48
   1d192:	9500      	str	r5, [sp, #0]
   1d194:	f7ff fe11 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d198:	4643      	mov	r3, r8
   1d19a:	aa12      	add	r2, sp, #72	; 0x48
   1d19c:	4649      	mov	r1, r9
   1d19e:	4648      	mov	r0, r9
   1d1a0:	f7ff feb5 	bl	1cf0e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1d1a4:	4623      	mov	r3, r4
   1d1a6:	4652      	mov	r2, sl
   1d1a8:	4649      	mov	r1, r9
   1d1aa:	4648      	mov	r0, r9
   1d1ac:	9500      	str	r5, [sp, #0]
   1d1ae:	f7ff fe04 	bl	1cdba <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1d1b2:	4642      	mov	r2, r8
   1d1b4:	a902      	add	r1, sp, #8
   1d1b6:	a812      	add	r0, sp, #72	; 0x48
   1d1b8:	f7ff feb9 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1d1bc:	a912      	add	r1, sp, #72	; 0x48
   1d1be:	4623      	mov	r3, r4
   1d1c0:	aa0a      	add	r2, sp, #40	; 0x28
   1d1c2:	4608      	mov	r0, r1
   1d1c4:	9500      	str	r5, [sp, #0]
   1d1c6:	f7ff fdf8 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1d1ca:	4623      	mov	r3, r4
   1d1cc:	463a      	mov	r2, r7
   1d1ce:	a912      	add	r1, sp, #72	; 0x48
   1d1d0:	a80a      	add	r0, sp, #40	; 0x28
   1d1d2:	9500      	str	r5, [sp, #0]
   1d1d4:	f7ff fdf1 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1d1d8:	a90a      	add	r1, sp, #40	; 0x28
   1d1da:	4643      	mov	r3, r8
   1d1dc:	aa02      	add	r2, sp, #8
   1d1de:	4608      	mov	r0, r1
   1d1e0:	f7ff fe95 	bl	1cf0e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1d1e4:	4623      	mov	r3, r4
   1d1e6:	4652      	mov	r2, sl
   1d1e8:	a90a      	add	r1, sp, #40	; 0x28
   1d1ea:	4650      	mov	r0, sl
   1d1ec:	9500      	str	r5, [sp, #0]
   1d1ee:	f7ff fde4 	bl	1cdba <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1d1f2:	462a      	mov	r2, r5
   1d1f4:	a912      	add	r1, sp, #72	; 0x48
   1d1f6:	4638      	mov	r0, r7
   1d1f8:	f7ff fd77 	bl	1ccea <uECC_vli_set>
}
   1d1fc:	b01a      	add	sp, #104	; 0x68
   1d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d202 <uECC_vli_modInv>:
{
   1d202:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d204:	460f      	mov	r7, r1
   1d206:	b0a1      	sub	sp, #132	; 0x84
   1d208:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1d20a:	4619      	mov	r1, r3
   1d20c:	4638      	mov	r0, r7
{
   1d20e:	4615      	mov	r5, r2
   1d210:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1d212:	f7ff fd30 	bl	1cc76 <uECC_vli_isZero>
   1d216:	b120      	cbz	r0, 1d222 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1d218:	4630      	mov	r0, r6
   1d21a:	f7ff fd21 	bl	1cc60 <uECC_vli_clear>
}
   1d21e:	b021      	add	sp, #132	; 0x84
   1d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1d222:	4622      	mov	r2, r4
   1d224:	4639      	mov	r1, r7
   1d226:	4668      	mov	r0, sp
   1d228:	f7ff fd5f 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1d22c:	4629      	mov	r1, r5
   1d22e:	a808      	add	r0, sp, #32
   1d230:	f7ff fd5b 	bl	1ccea <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1d234:	a810      	add	r0, sp, #64	; 0x40
   1d236:	4621      	mov	r1, r4
   1d238:	f7ff fd12 	bl	1cc60 <uECC_vli_clear>
	u[0] = 1;
   1d23c:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1d23e:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1d240:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1d242:	f7ff fd0d 	bl	1cc60 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1d246:	4622      	mov	r2, r4
   1d248:	a908      	add	r1, sp, #32
   1d24a:	4668      	mov	r0, sp
   1d24c:	f7ff fd59 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1d250:	b928      	cbnz	r0, 1d25e <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1d252:	4622      	mov	r2, r4
   1d254:	a910      	add	r1, sp, #64	; 0x40
   1d256:	4630      	mov	r0, r6
   1d258:	f7ff fd47 	bl	1ccea <uECC_vli_set>
   1d25c:	e7df      	b.n	1d21e <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1d25e:	9b00      	ldr	r3, [sp, #0]
   1d260:	07da      	lsls	r2, r3, #31
   1d262:	d409      	bmi.n	1d278 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1d264:	4621      	mov	r1, r4
   1d266:	4668      	mov	r0, sp
   1d268:	f7ff fc59 	bl	1cb1e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1d26c:	4622      	mov	r2, r4
   1d26e:	4629      	mov	r1, r5
   1d270:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1d272:	f7ff fc61 	bl	1cb38 <vli_modInv_update>
   1d276:	e7e6      	b.n	1d246 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1d278:	9b08      	ldr	r3, [sp, #32]
   1d27a:	07db      	lsls	r3, r3, #31
   1d27c:	d407      	bmi.n	1d28e <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1d27e:	4621      	mov	r1, r4
   1d280:	a808      	add	r0, sp, #32
   1d282:	f7ff fc4c 	bl	1cb1e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1d286:	4622      	mov	r2, r4
   1d288:	4629      	mov	r1, r5
   1d28a:	a818      	add	r0, sp, #96	; 0x60
   1d28c:	e7f1      	b.n	1d272 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1d28e:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1d290:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1d292:	dd1c      	ble.n	1d2ce <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1d294:	aa08      	add	r2, sp, #32
   1d296:	4669      	mov	r1, sp
   1d298:	4668      	mov	r0, sp
   1d29a:	f7ff fd5c 	bl	1cd56 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1d29e:	4621      	mov	r1, r4
   1d2a0:	4668      	mov	r0, sp
   1d2a2:	f7ff fc3c 	bl	1cb1e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1d2a6:	4622      	mov	r2, r4
   1d2a8:	a918      	add	r1, sp, #96	; 0x60
   1d2aa:	a810      	add	r0, sp, #64	; 0x40
   1d2ac:	f7ff fd29 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1d2b0:	2800      	cmp	r0, #0
   1d2b2:	da05      	bge.n	1d2c0 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1d2b4:	a910      	add	r1, sp, #64	; 0x40
   1d2b6:	4623      	mov	r3, r4
   1d2b8:	462a      	mov	r2, r5
   1d2ba:	4608      	mov	r0, r1
   1d2bc:	f7ff fc17 	bl	1caee <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1d2c0:	a910      	add	r1, sp, #64	; 0x40
   1d2c2:	4623      	mov	r3, r4
   1d2c4:	aa18      	add	r2, sp, #96	; 0x60
   1d2c6:	4608      	mov	r0, r1
   1d2c8:	f7ff fd45 	bl	1cd56 <uECC_vli_sub>
   1d2cc:	e7ce      	b.n	1d26c <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1d2ce:	a908      	add	r1, sp, #32
   1d2d0:	466a      	mov	r2, sp
   1d2d2:	4608      	mov	r0, r1
   1d2d4:	f7ff fd3f 	bl	1cd56 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1d2d8:	4621      	mov	r1, r4
   1d2da:	a808      	add	r0, sp, #32
   1d2dc:	f7ff fc1f 	bl	1cb1e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1d2e0:	4622      	mov	r2, r4
   1d2e2:	a910      	add	r1, sp, #64	; 0x40
   1d2e4:	a818      	add	r0, sp, #96	; 0x60
   1d2e6:	f7ff fd0c 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	da05      	bge.n	1d2fa <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1d2ee:	a918      	add	r1, sp, #96	; 0x60
   1d2f0:	4623      	mov	r3, r4
   1d2f2:	462a      	mov	r2, r5
   1d2f4:	4608      	mov	r0, r1
   1d2f6:	f7ff fbfa 	bl	1caee <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1d2fa:	a918      	add	r1, sp, #96	; 0x60
   1d2fc:	4623      	mov	r3, r4
   1d2fe:	aa10      	add	r2, sp, #64	; 0x40
   1d300:	4608      	mov	r0, r1
   1d302:	f7ff fd28 	bl	1cd56 <uECC_vli_sub>
   1d306:	e7be      	b.n	1d286 <uECC_vli_modInv+0x84>

0001d308 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1d308:	7809      	ldrb	r1, [r1, #0]
   1d30a:	0049      	lsls	r1, r1, #1
   1d30c:	b249      	sxtb	r1, r1
   1d30e:	f7ff bcb2 	b.w	1cc76 <uECC_vli_isZero>

0001d312 <apply_z>:
{
   1d312:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d314:	4615      	mov	r5, r2
   1d316:	b089      	sub	sp, #36	; 0x24
   1d318:	461c      	mov	r4, r3
   1d31a:	4607      	mov	r7, r0
   1d31c:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1d31e:	461a      	mov	r2, r3
   1d320:	4629      	mov	r1, r5
   1d322:	4668      	mov	r0, sp
   1d324:	f7ff fe03 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1d328:	4623      	mov	r3, r4
   1d32a:	466a      	mov	r2, sp
   1d32c:	4639      	mov	r1, r7
   1d32e:	4638      	mov	r0, r7
   1d330:	f7ff fded 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1d334:	4623      	mov	r3, r4
   1d336:	462a      	mov	r2, r5
   1d338:	4669      	mov	r1, sp
   1d33a:	4668      	mov	r0, sp
   1d33c:	f7ff fde7 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1d340:	4623      	mov	r3, r4
   1d342:	466a      	mov	r2, sp
   1d344:	4631      	mov	r1, r6
   1d346:	4630      	mov	r0, r6
   1d348:	f7ff fde1 	bl	1cf0e <uECC_vli_modMult_fast>
}
   1d34c:	b009      	add	sp, #36	; 0x24
   1d34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d350 <XYcZ_add>:
{
   1d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d354:	b08a      	sub	sp, #40	; 0x28
   1d356:	4614      	mov	r4, r2
   1d358:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1d35c:	4655      	mov	r5, sl
{
   1d35e:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1d360:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d364:	9600      	str	r6, [sp, #0]
{
   1d366:	4680      	mov	r8, r0
   1d368:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d36a:	462b      	mov	r3, r5
   1d36c:	4602      	mov	r2, r0
   1d36e:	4621      	mov	r1, r4
   1d370:	a802      	add	r0, sp, #8
   1d372:	f7ff fd22 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d376:	a902      	add	r1, sp, #8
   1d378:	4652      	mov	r2, sl
   1d37a:	4608      	mov	r0, r1
   1d37c:	f7ff fdd7 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d380:	4653      	mov	r3, sl
   1d382:	aa02      	add	r2, sp, #8
   1d384:	4641      	mov	r1, r8
   1d386:	4640      	mov	r0, r8
   1d388:	f7ff fdc1 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d38c:	4653      	mov	r3, sl
   1d38e:	aa02      	add	r2, sp, #8
   1d390:	4621      	mov	r1, r4
   1d392:	4620      	mov	r0, r4
   1d394:	f7ff fdbb 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d398:	462b      	mov	r3, r5
   1d39a:	464a      	mov	r2, r9
   1d39c:	4639      	mov	r1, r7
   1d39e:	4638      	mov	r0, r7
   1d3a0:	9600      	str	r6, [sp, #0]
   1d3a2:	f7ff fd0a 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1d3a6:	4652      	mov	r2, sl
   1d3a8:	4639      	mov	r1, r7
   1d3aa:	a802      	add	r0, sp, #8
   1d3ac:	f7ff fdbf 	bl	1cf2e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1d3b0:	a902      	add	r1, sp, #8
   1d3b2:	462b      	mov	r3, r5
   1d3b4:	4642      	mov	r2, r8
   1d3b6:	4608      	mov	r0, r1
   1d3b8:	9600      	str	r6, [sp, #0]
   1d3ba:	f7ff fcfe 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1d3be:	a902      	add	r1, sp, #8
   1d3c0:	462b      	mov	r3, r5
   1d3c2:	4622      	mov	r2, r4
   1d3c4:	4608      	mov	r0, r1
   1d3c6:	9600      	str	r6, [sp, #0]
   1d3c8:	f7ff fcf7 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1d3cc:	462b      	mov	r3, r5
   1d3ce:	4642      	mov	r2, r8
   1d3d0:	4621      	mov	r1, r4
   1d3d2:	4620      	mov	r0, r4
   1d3d4:	9600      	str	r6, [sp, #0]
   1d3d6:	f7ff fcf0 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1d3da:	4653      	mov	r3, sl
   1d3dc:	4622      	mov	r2, r4
   1d3de:	4649      	mov	r1, r9
   1d3e0:	4648      	mov	r0, r9
   1d3e2:	f7ff fd94 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1d3e6:	462b      	mov	r3, r5
   1d3e8:	aa02      	add	r2, sp, #8
   1d3ea:	4641      	mov	r1, r8
   1d3ec:	4620      	mov	r0, r4
   1d3ee:	9600      	str	r6, [sp, #0]
   1d3f0:	f7ff fce3 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d3f4:	4653      	mov	r3, sl
   1d3f6:	4622      	mov	r2, r4
   1d3f8:	4639      	mov	r1, r7
   1d3fa:	4638      	mov	r0, r7
   1d3fc:	f7ff fd87 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1d400:	462b      	mov	r3, r5
   1d402:	464a      	mov	r2, r9
   1d404:	4639      	mov	r1, r7
   1d406:	4638      	mov	r0, r7
   1d408:	9600      	str	r6, [sp, #0]
   1d40a:	f7ff fcd6 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1d40e:	4632      	mov	r2, r6
   1d410:	a902      	add	r1, sp, #8
   1d412:	4620      	mov	r0, r4
   1d414:	f7ff fc69 	bl	1ccea <uECC_vli_set>
}
   1d418:	b00a      	add	sp, #40	; 0x28
   1d41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d41e <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1d41e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d422:	b0b1      	sub	sp, #196	; 0xc4
   1d424:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1d428:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1d42a:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1d42e:	a818      	add	r0, sp, #96	; 0x60
{
   1d430:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1d432:	463a      	mov	r2, r7
{
   1d434:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1d436:	f7ff fc58 	bl	1ccea <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1d43a:	00bb      	lsls	r3, r7, #2
   1d43c:	9305      	str	r3, [sp, #20]
   1d43e:	9b04      	ldr	r3, [sp, #16]
   1d440:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1d444:	4619      	mov	r1, r3
   1d446:	a828      	add	r0, sp, #160	; 0xa0
   1d448:	9302      	str	r3, [sp, #8]
   1d44a:	f7ff fc4e 	bl	1ccea <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1d44e:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1d452:	2e00      	cmp	r6, #0
   1d454:	f000 8088 	beq.w	1d568 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1d458:	462a      	mov	r2, r5
   1d45a:	4631      	mov	r1, r6
   1d45c:	a808      	add	r0, sp, #32
   1d45e:	f7ff fc44 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1d462:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1d466:	462a      	mov	r2, r5
   1d468:	a918      	add	r1, sp, #96	; 0x60
   1d46a:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1d46c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1d470:	f7ff fc3b 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1d474:	a928      	add	r1, sp, #160	; 0xa0
   1d476:	4648      	mov	r0, r9
   1d478:	f7ff fc37 	bl	1ccea <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1d47c:	4623      	mov	r3, r4
   1d47e:	aa08      	add	r2, sp, #32
   1d480:	a928      	add	r1, sp, #160	; 0xa0
   1d482:	a818      	add	r0, sp, #96	; 0x60
   1d484:	f7ff ff45 	bl	1d312 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1d488:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1d48c:	4623      	mov	r3, r4
   1d48e:	aa08      	add	r2, sp, #32
   1d490:	a928      	add	r1, sp, #160	; 0xa0
   1d492:	a818      	add	r0, sp, #96	; 0x60
   1d494:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1d496:	4623      	mov	r3, r4
   1d498:	aa08      	add	r2, sp, #32
   1d49a:	4649      	mov	r1, r9
   1d49c:	4640      	mov	r0, r8
   1d49e:	f7ff ff38 	bl	1d312 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1d4a2:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1d4a6:	3d02      	subs	r5, #2
   1d4a8:	b22d      	sxth	r5, r5
   1d4aa:	2d00      	cmp	r5, #0
   1d4ac:	dc63      	bgt.n	1d576 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d4ae:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d4b2:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d4b4:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d4b8:	ab10      	add	r3, sp, #64	; 0x40
   1d4ba:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1d4be:	43ed      	mvns	r5, r5
   1d4c0:	ab20      	add	r3, sp, #128	; 0x80
   1d4c2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1d4c6:	f005 0501 	and.w	r5, r5, #1
   1d4ca:	ab10      	add	r3, sp, #64	; 0x40
   1d4cc:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1d4d0:	ab20      	add	r3, sp, #128	; 0x80
   1d4d2:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d4d6:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d4da:	462b      	mov	r3, r5
   1d4dc:	464a      	mov	r2, r9
   1d4de:	4631      	mov	r1, r6
   1d4e0:	4640      	mov	r0, r8
   1d4e2:	f7ff fe00 	bl	1d0e6 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d4e6:	4653      	mov	r3, sl
   1d4e8:	aa10      	add	r2, sp, #64	; 0x40
   1d4ea:	a918      	add	r1, sp, #96	; 0x60
   1d4ec:	a808      	add	r0, sp, #32
   1d4ee:	9700      	str	r7, [sp, #0]
   1d4f0:	f7ff fc63 	bl	1cdba <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1d4f4:	a908      	add	r1, sp, #32
   1d4f6:	4623      	mov	r3, r4
   1d4f8:	4632      	mov	r2, r6
   1d4fa:	4608      	mov	r0, r1
   1d4fc:	f7ff fd07 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1d500:	a908      	add	r1, sp, #32
   1d502:	9a04      	ldr	r2, [sp, #16]
   1d504:	4623      	mov	r3, r4
   1d506:	4608      	mov	r0, r1
   1d508:	f7ff fd01 	bl	1cf0e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1d50c:	a908      	add	r1, sp, #32
   1d50e:	463b      	mov	r3, r7
   1d510:	4652      	mov	r2, sl
   1d512:	4608      	mov	r0, r1
   1d514:	f7ff fe75 	bl	1d202 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1d518:	a908      	add	r1, sp, #32
   1d51a:	9a02      	ldr	r2, [sp, #8]
   1d51c:	4623      	mov	r3, r4
   1d51e:	4608      	mov	r0, r1
   1d520:	f7ff fcf5 	bl	1cf0e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1d524:	a908      	add	r1, sp, #32
   1d526:	4623      	mov	r3, r4
   1d528:	4642      	mov	r2, r8
   1d52a:	4608      	mov	r0, r1
   1d52c:	f7ff fcef 	bl	1cf0e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d530:	9400      	str	r4, [sp, #0]
   1d532:	4633      	mov	r3, r6
   1d534:	4642      	mov	r2, r8
   1d536:	4629      	mov	r1, r5
   1d538:	4648      	mov	r0, r9
   1d53a:	f7ff ff09 	bl	1d350 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1d53e:	4623      	mov	r3, r4
   1d540:	aa08      	add	r2, sp, #32
   1d542:	a920      	add	r1, sp, #128	; 0x80
   1d544:	a810      	add	r0, sp, #64	; 0x40
   1d546:	f7ff fee4 	bl	1d312 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1d54a:	9803      	ldr	r0, [sp, #12]
   1d54c:	463a      	mov	r2, r7
   1d54e:	a910      	add	r1, sp, #64	; 0x40
   1d550:	f7ff fbcb 	bl	1ccea <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1d554:	9b03      	ldr	r3, [sp, #12]
   1d556:	9c05      	ldr	r4, [sp, #20]
   1d558:	4423      	add	r3, r4
   1d55a:	a920      	add	r1, sp, #128	; 0x80
   1d55c:	4618      	mov	r0, r3
   1d55e:	f7ff fbc4 	bl	1ccea <uECC_vli_set>
}
   1d562:	b031      	add	sp, #196	; 0xc4
   1d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1d568:	4629      	mov	r1, r5
   1d56a:	a808      	add	r0, sp, #32
   1d56c:	f7ff fb78 	bl	1cc60 <uECC_vli_clear>
		z[0] = 1;
   1d570:	2301      	movs	r3, #1
   1d572:	9308      	str	r3, [sp, #32]
   1d574:	e775      	b.n	1d462 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1d576:	4629      	mov	r1, r5
   1d578:	4650      	mov	r0, sl
   1d57a:	f7ff fb8b 	bl	1cc94 <uECC_vli_testBit>
   1d57e:	fab0 f680 	clz	r6, r0
   1d582:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d584:	f1c6 0101 	rsb	r1, r6, #1
   1d588:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1d58c:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1d590:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1d594:	4633      	mov	r3, r6
   1d596:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1d59a:	465a      	mov	r2, fp
   1d59c:	9400      	str	r4, [sp, #0]
   1d59e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d5a2:	f7ff fda0 	bl	1d0e6 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d5a6:	9907      	ldr	r1, [sp, #28]
   1d5a8:	9806      	ldr	r0, [sp, #24]
   1d5aa:	9400      	str	r4, [sp, #0]
   1d5ac:	460b      	mov	r3, r1
   1d5ae:	4602      	mov	r2, r0
   1d5b0:	4631      	mov	r1, r6
   1d5b2:	4658      	mov	r0, fp
   1d5b4:	f7ff fecc 	bl	1d350 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1d5b8:	3d01      	subs	r5, #1
   1d5ba:	e775      	b.n	1d4a8 <EccPoint_mult+0x8a>

0001d5bc <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1d5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d5c0:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1d5c4:	f119 081f 	adds.w	r8, r9, #31
{
   1d5c8:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d5ca:	bf48      	it	mi
   1d5cc:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1d5d0:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d5d2:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d5d6:	3524      	adds	r5, #36	; 0x24
   1d5d8:	4601      	mov	r1, r0
{
   1d5da:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d5dc:	4643      	mov	r3, r8
   1d5de:	462a      	mov	r2, r5
   1d5e0:	4630      	mov	r0, r6
   1d5e2:	f7ff fa84 	bl	1caee <uECC_vli_add>
   1d5e6:	4604      	mov	r4, r0
   1d5e8:	b990      	cbnz	r0, 1d610 <regularize_k+0x54>
   1d5ea:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1d5ee:	da06      	bge.n	1d5fe <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1d5f0:	4649      	mov	r1, r9
   1d5f2:	4630      	mov	r0, r6
   1d5f4:	f7ff fb4e 	bl	1cc94 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1d5f8:	1e04      	subs	r4, r0, #0
   1d5fa:	bf18      	it	ne
   1d5fc:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1d5fe:	4643      	mov	r3, r8
   1d600:	462a      	mov	r2, r5
   1d602:	4631      	mov	r1, r6
   1d604:	4638      	mov	r0, r7
   1d606:	f7ff fa72 	bl	1caee <uECC_vli_add>

	return carry;
}
   1d60a:	4620      	mov	r0, r4
   1d60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d610:	2401      	movs	r4, #1
   1d612:	e7f4      	b.n	1d5fe <regularize_k+0x42>

0001d614 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1d614:	b530      	push	{r4, r5, lr}
   1d616:	4614      	mov	r4, r2
   1d618:	b095      	sub	sp, #84	; 0x54
   1d61a:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d61c:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d61e:	4623      	mov	r3, r4
{
   1d620:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d622:	a904      	add	r1, sp, #16
   1d624:	9102      	str	r1, [sp, #8]
   1d626:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d628:	f7ff ffc8 	bl	1d5bc <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1d62c:	fab0 f380 	clz	r3, r0
   1d630:	095b      	lsrs	r3, r3, #5
   1d632:	aa14      	add	r2, sp, #80	; 0x50
   1d634:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1d638:	8863      	ldrh	r3, [r4, #2]
   1d63a:	9401      	str	r4, [sp, #4]
   1d63c:	3301      	adds	r3, #1
   1d63e:	b21b      	sxth	r3, r3
   1d640:	9300      	str	r3, [sp, #0]
   1d642:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1d646:	2300      	movs	r3, #0
   1d648:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1d64c:	4628      	mov	r0, r5
   1d64e:	f7ff fee6 	bl	1d41e <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1d652:	4621      	mov	r1, r4
   1d654:	4628      	mov	r0, r5
   1d656:	f7ff fe57 	bl	1d308 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1d65a:	fab0 f080 	clz	r0, r0
   1d65e:	0940      	lsrs	r0, r0, #5
   1d660:	b015      	add	sp, #84	; 0x54
   1d662:	bd30      	pop	{r4, r5, pc}

0001d664 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1d664:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1d666:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d668:	1e4f      	subs	r7, r1, #1
   1d66a:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1d66c:	428c      	cmp	r4, r1
   1d66e:	f105 0501 	add.w	r5, r5, #1
   1d672:	db00      	blt.n	1d676 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d676:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1d678:	f023 0603 	bic.w	r6, r3, #3
   1d67c:	f003 0303 	and.w	r3, r3, #3
   1d680:	5996      	ldr	r6, [r2, r6]
   1d682:	00db      	lsls	r3, r3, #3
   1d684:	fa26 f303 	lsr.w	r3, r6, r3
   1d688:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1d68a:	e7ee      	b.n	1d66a <uECC_vli_nativeToBytes+0x6>

0001d68c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d68e:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d690:	1cd1      	adds	r1, r2, #3
   1d692:	bf48      	it	mi
   1d694:	1d91      	addmi	r1, r2, #6
   1d696:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1d69a:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d69c:	f7ff fae0 	bl	1cc60 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1d6a0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d6a2:	1e67      	subs	r7, r4, #1
   1d6a4:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1d6a6:	42a2      	cmp	r2, r4
   1d6a8:	f105 0501 	add.w	r5, r5, #1
   1d6ac:	db00      	blt.n	1d6b0 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1d6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d6b0:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1d6b2:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1d6b6:	5cb2      	ldrb	r2, [r6, r2]
   1d6b8:	f003 0303 	and.w	r3, r3, #3
   1d6bc:	00db      	lsls	r3, r3, #3
   1d6be:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1d6c2:	5842      	ldr	r2, [r0, r1]
   1d6c4:	431a      	orrs	r2, r3
   1d6c6:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1d6c8:	e7ec      	b.n	1d6a4 <uECC_vli_bytesToNative+0x18>

0001d6ca <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1d6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6cc:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d6ce:	f991 6000 	ldrsb.w	r6, [r1]
{
   1d6d2:	4605      	mov	r5, r0
   1d6d4:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1d6d6:	f7ff fe17 	bl	1d308 <EccPoint_isZero>
   1d6da:	bb28      	cbnz	r0, 1d728 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d6dc:	1d27      	adds	r7, r4, #4
   1d6de:	4632      	mov	r2, r6
   1d6e0:	4629      	mov	r1, r5
   1d6e2:	4638      	mov	r0, r7
   1d6e4:	f7ff fb0d 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1d6e8:	2801      	cmp	r0, #1
   1d6ea:	d120      	bne.n	1d72e <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1d6ec:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1d6f0:	4632      	mov	r2, r6
   1d6f2:	4638      	mov	r0, r7
   1d6f4:	f7ff fb05 	bl	1cd02 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d6f8:	2801      	cmp	r0, #1
   1d6fa:	d118      	bne.n	1d72e <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1d6fc:	4622      	mov	r2, r4
   1d6fe:	4668      	mov	r0, sp
   1d700:	f7ff fc15 	bl	1cf2e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1d704:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d708:	4622      	mov	r2, r4
   1d70a:	4629      	mov	r1, r5
   1d70c:	a808      	add	r0, sp, #32
   1d70e:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1d710:	4632      	mov	r2, r6
   1d712:	a908      	add	r1, sp, #32
   1d714:	4668      	mov	r0, sp
   1d716:	f7ff fb0b 	bl	1cd30 <uECC_vli_equal>
   1d71a:	2800      	cmp	r0, #0
		return -3;
   1d71c:	bf0c      	ite	eq
   1d71e:	2000      	moveq	r0, #0
   1d720:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1d724:	b011      	add	sp, #68	; 0x44
   1d726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1d728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d72c:	e7fa      	b.n	1d724 <uECC_valid_point+0x5a>
		return -2;
   1d72e:	f06f 0001 	mvn.w	r0, #1
   1d732:	e7f7      	b.n	1d724 <uECC_valid_point+0x5a>

0001d734 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1d734:	b570      	push	{r4, r5, r6, lr}
   1d736:	460c      	mov	r4, r1
   1d738:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1d73a:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d73c:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1d740:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d742:	4601      	mov	r1, r0
   1d744:	4668      	mov	r0, sp
   1d746:	f7ff ffa1 	bl	1d68c <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1d74a:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1d74e:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1d752:	18a9      	adds	r1, r5, r2
   1d754:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1d758:	f7ff ff98 	bl	1d68c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1d75c:	2210      	movs	r2, #16
   1d75e:	4631      	mov	r1, r6
   1d760:	4668      	mov	r0, sp
   1d762:	f7ff face 	bl	1cd02 <uECC_vli_cmp_unsafe>
   1d766:	b128      	cbz	r0, 1d774 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1d768:	4621      	mov	r1, r4
   1d76a:	4668      	mov	r0, sp
   1d76c:	f7ff ffad 	bl	1d6ca <uECC_valid_point>
}
   1d770:	b010      	add	sp, #64	; 0x40
   1d772:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1d774:	f06f 0003 	mvn.w	r0, #3
   1d778:	e7fa      	b.n	1d770 <uECC_valid_public_key+0x3c>

0001d77a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d77a:	78cb      	ldrb	r3, [r1, #3]
   1d77c:	7802      	ldrb	r2, [r0, #0]
   1d77e:	4053      	eors	r3, r2
   1d780:	7003      	strb	r3, [r0, #0]
   1d782:	884b      	ldrh	r3, [r1, #2]
   1d784:	7842      	ldrb	r2, [r0, #1]
   1d786:	4053      	eors	r3, r2
   1d788:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d78a:	680a      	ldr	r2, [r1, #0]
   1d78c:	7883      	ldrb	r3, [r0, #2]
   1d78e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d792:	7083      	strb	r3, [r0, #2]
   1d794:	680a      	ldr	r2, [r1, #0]
   1d796:	78c3      	ldrb	r3, [r0, #3]
   1d798:	4053      	eors	r3, r2
   1d79a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d79c:	79cb      	ldrb	r3, [r1, #7]
   1d79e:	7902      	ldrb	r2, [r0, #4]
   1d7a0:	4053      	eors	r3, r2
   1d7a2:	7103      	strb	r3, [r0, #4]
   1d7a4:	88cb      	ldrh	r3, [r1, #6]
   1d7a6:	7942      	ldrb	r2, [r0, #5]
   1d7a8:	4053      	eors	r3, r2
   1d7aa:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d7ac:	684a      	ldr	r2, [r1, #4]
   1d7ae:	7983      	ldrb	r3, [r0, #6]
   1d7b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d7b4:	7183      	strb	r3, [r0, #6]
   1d7b6:	684a      	ldr	r2, [r1, #4]
   1d7b8:	79c3      	ldrb	r3, [r0, #7]
   1d7ba:	4053      	eors	r3, r2
   1d7bc:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d7be:	7acb      	ldrb	r3, [r1, #11]
   1d7c0:	7a02      	ldrb	r2, [r0, #8]
   1d7c2:	4053      	eors	r3, r2
   1d7c4:	7203      	strb	r3, [r0, #8]
   1d7c6:	7a42      	ldrb	r2, [r0, #9]
   1d7c8:	894b      	ldrh	r3, [r1, #10]
   1d7ca:	4053      	eors	r3, r2
   1d7cc:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d7ce:	688a      	ldr	r2, [r1, #8]
   1d7d0:	7a83      	ldrb	r3, [r0, #10]
   1d7d2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d7d6:	7283      	strb	r3, [r0, #10]
   1d7d8:	688a      	ldr	r2, [r1, #8]
   1d7da:	7ac3      	ldrb	r3, [r0, #11]
   1d7dc:	4053      	eors	r3, r2
   1d7de:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d7e0:	7bcb      	ldrb	r3, [r1, #15]
   1d7e2:	7b02      	ldrb	r2, [r0, #12]
   1d7e4:	4053      	eors	r3, r2
   1d7e6:	7303      	strb	r3, [r0, #12]
   1d7e8:	89cb      	ldrh	r3, [r1, #14]
   1d7ea:	7b42      	ldrb	r2, [r0, #13]
   1d7ec:	4053      	eors	r3, r2
   1d7ee:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d7f0:	68ca      	ldr	r2, [r1, #12]
   1d7f2:	7b83      	ldrb	r3, [r0, #14]
   1d7f4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d7f8:	7383      	strb	r3, [r0, #14]
   1d7fa:	68ca      	ldr	r2, [r1, #12]
   1d7fc:	7bc3      	ldrb	r3, [r0, #15]
   1d7fe:	4053      	eors	r3, r2
   1d800:	73c3      	strb	r3, [r0, #15]
}
   1d802:	4770      	bx	lr

0001d804 <shift_rows>:
{
   1d804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d806:	7802      	ldrb	r2, [r0, #0]
   1d808:	f88d 2000 	strb.w	r2, [sp]
   1d80c:	7942      	ldrb	r2, [r0, #5]
   1d80e:	f88d 2001 	strb.w	r2, [sp, #1]
   1d812:	7a82      	ldrb	r2, [r0, #10]
   1d814:	f88d 2002 	strb.w	r2, [sp, #2]
   1d818:	7bc2      	ldrb	r2, [r0, #15]
   1d81a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d81e:	7902      	ldrb	r2, [r0, #4]
   1d820:	f88d 2004 	strb.w	r2, [sp, #4]
   1d824:	7a42      	ldrb	r2, [r0, #9]
   1d826:	f88d 2005 	strb.w	r2, [sp, #5]
   1d82a:	7b82      	ldrb	r2, [r0, #14]
   1d82c:	f88d 2006 	strb.w	r2, [sp, #6]
   1d830:	78c2      	ldrb	r2, [r0, #3]
   1d832:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d836:	7a02      	ldrb	r2, [r0, #8]
   1d838:	f88d 2008 	strb.w	r2, [sp, #8]
   1d83c:	7b42      	ldrb	r2, [r0, #13]
   1d83e:	f88d 2009 	strb.w	r2, [sp, #9]
   1d842:	7882      	ldrb	r2, [r0, #2]
   1d844:	f88d 200a 	strb.w	r2, [sp, #10]
   1d848:	79c2      	ldrb	r2, [r0, #7]
   1d84a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d84e:	7b02      	ldrb	r2, [r0, #12]
   1d850:	f88d 200c 	strb.w	r2, [sp, #12]
   1d854:	7842      	ldrb	r2, [r0, #1]
   1d856:	7ac3      	ldrb	r3, [r0, #11]
   1d858:	f88d 200d 	strb.w	r2, [sp, #13]
   1d85c:	7982      	ldrb	r2, [r0, #6]
   1d85e:	f88d 200e 	strb.w	r2, [sp, #14]
   1d862:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d866:	2310      	movs	r3, #16
   1d868:	466a      	mov	r2, sp
   1d86a:	4619      	mov	r1, r3
   1d86c:	f7ff f87b 	bl	1c966 <_copy>
}
   1d870:	b005      	add	sp, #20
   1d872:	f85d fb04 	ldr.w	pc, [sp], #4

0001d876 <mult_row_column>:
{
   1d876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d878:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d87a:	7808      	ldrb	r0, [r1, #0]
{
   1d87c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d87e:	f7ff f881 	bl	1c984 <_double_byte>
   1d882:	4605      	mov	r5, r0
   1d884:	7860      	ldrb	r0, [r4, #1]
   1d886:	f7ff f87d 	bl	1c984 <_double_byte>
   1d88a:	78a2      	ldrb	r2, [r4, #2]
   1d88c:	7863      	ldrb	r3, [r4, #1]
   1d88e:	4053      	eors	r3, r2
   1d890:	78e2      	ldrb	r2, [r4, #3]
   1d892:	4053      	eors	r3, r2
   1d894:	405d      	eors	r5, r3
   1d896:	4045      	eors	r5, r0
   1d898:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d89a:	7860      	ldrb	r0, [r4, #1]
   1d89c:	7827      	ldrb	r7, [r4, #0]
   1d89e:	f7ff f871 	bl	1c984 <_double_byte>
   1d8a2:	4605      	mov	r5, r0
   1d8a4:	78a0      	ldrb	r0, [r4, #2]
   1d8a6:	f7ff f86d 	bl	1c984 <_double_byte>
   1d8aa:	78a3      	ldrb	r3, [r4, #2]
   1d8ac:	405f      	eors	r7, r3
   1d8ae:	78e3      	ldrb	r3, [r4, #3]
   1d8b0:	405f      	eors	r7, r3
   1d8b2:	407d      	eors	r5, r7
   1d8b4:	4045      	eors	r5, r0
   1d8b6:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d8b8:	78a0      	ldrb	r0, [r4, #2]
   1d8ba:	7865      	ldrb	r5, [r4, #1]
   1d8bc:	7827      	ldrb	r7, [r4, #0]
   1d8be:	f7ff f861 	bl	1c984 <_double_byte>
   1d8c2:	406f      	eors	r7, r5
   1d8c4:	4605      	mov	r5, r0
   1d8c6:	78e0      	ldrb	r0, [r4, #3]
   1d8c8:	f7ff f85c 	bl	1c984 <_double_byte>
   1d8cc:	78e3      	ldrb	r3, [r4, #3]
   1d8ce:	405f      	eors	r7, r3
   1d8d0:	407d      	eors	r5, r7
   1d8d2:	4045      	eors	r5, r0
   1d8d4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d8d6:	7820      	ldrb	r0, [r4, #0]
   1d8d8:	f7ff f854 	bl	1c984 <_double_byte>
   1d8dc:	7863      	ldrb	r3, [r4, #1]
   1d8de:	7825      	ldrb	r5, [r4, #0]
   1d8e0:	405d      	eors	r5, r3
   1d8e2:	78a3      	ldrb	r3, [r4, #2]
   1d8e4:	405d      	eors	r5, r3
   1d8e6:	4045      	eors	r5, r0
   1d8e8:	78e0      	ldrb	r0, [r4, #3]
   1d8ea:	f7ff f84b 	bl	1c984 <_double_byte>
   1d8ee:	b2ed      	uxtb	r5, r5
   1d8f0:	4045      	eors	r5, r0
   1d8f2:	70f5      	strb	r5, [r6, #3]
}
   1d8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d8f6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d8f6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d8f8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d8fa:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d8fc:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d900:	2b00      	cmp	r3, #0
   1d902:	bfb4      	ite	lt
   1d904:	2387      	movlt	r3, #135	; 0x87
   1d906:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d908:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d90c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d910:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d912:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d916:	d002      	beq.n	1d91e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d918:	7813      	ldrb	r3, [r2, #0]
   1d91a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d91c:	e7f4      	b.n	1d908 <gf_double+0x12>
	}
}
   1d91e:	bd10      	pop	{r4, pc}

0001d920 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d920:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d922:	b120      	cbz	r0, 1d92e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d924:	2258      	movs	r2, #88	; 0x58
   1d926:	2100      	movs	r1, #0
   1d928:	f7ff f82a 	bl	1c980 <_set>
   1d92c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d92e:	bd08      	pop	{r3, pc}

0001d930 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d930:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d932:	4604      	mov	r4, r0
   1d934:	b188      	cbz	r0, 1d95a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d936:	2210      	movs	r2, #16
   1d938:	2100      	movs	r1, #0
   1d93a:	f7ff f821 	bl	1c980 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d93e:	2210      	movs	r2, #16
   1d940:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d944:	2100      	movs	r1, #0
   1d946:	f7ff f81b 	bl	1c980 <_set>
	s->leftover_offset = 0;
   1d94a:	2300      	movs	r3, #0
   1d94c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d94e:	2200      	movs	r2, #0
   1d950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d954:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d958:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d95a:	bd10      	pop	{r4, pc}

0001d95c <tc_cmac_setup>:
{
   1d95c:	b570      	push	{r4, r5, r6, lr}
   1d95e:	460d      	mov	r5, r1
   1d960:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d962:	4604      	mov	r4, r0
   1d964:	b310      	cbz	r0, 1d9ac <tc_cmac_setup+0x50>
   1d966:	b311      	cbz	r1, 1d9ae <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d968:	2258      	movs	r2, #88	; 0x58
   1d96a:	2100      	movs	r1, #0
   1d96c:	f7ff f808 	bl	1c980 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d970:	4629      	mov	r1, r5
	s->sched = sched;
   1d972:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d974:	4630      	mov	r0, r6
   1d976:	f7f6 f9b1 	bl	13cdc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d97a:	2210      	movs	r2, #16
   1d97c:	2100      	movs	r1, #0
   1d97e:	4620      	mov	r0, r4
   1d980:	f7fe fffe 	bl	1c980 <_set>
	gf_double (s->K1, s->iv);
   1d984:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d988:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d98a:	4621      	mov	r1, r4
   1d98c:	4620      	mov	r0, r4
   1d98e:	f7f6 f9f7 	bl	13d80 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d992:	4621      	mov	r1, r4
   1d994:	4628      	mov	r0, r5
   1d996:	f7ff ffae 	bl	1d8f6 <gf_double>
	gf_double (s->K2, s->K1);
   1d99a:	4629      	mov	r1, r5
   1d99c:	f104 0020 	add.w	r0, r4, #32
   1d9a0:	f7ff ffa9 	bl	1d8f6 <gf_double>
	tc_cmac_init(s);
   1d9a4:	4620      	mov	r0, r4
   1d9a6:	f7ff ffc3 	bl	1d930 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d9aa:	2001      	movs	r0, #1
}
   1d9ac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d9ae:	4608      	mov	r0, r1
   1d9b0:	e7fc      	b.n	1d9ac <tc_cmac_setup+0x50>

0001d9b2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9b6:	460d      	mov	r5, r1
   1d9b8:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d9ba:	4604      	mov	r4, r0
   1d9bc:	2800      	cmp	r0, #0
   1d9be:	d062      	beq.n	1da86 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d9c0:	b912      	cbnz	r2, 1d9c8 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d9c2:	2001      	movs	r0, #1
}
   1d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d9c8:	2900      	cmp	r1, #0
   1d9ca:	d05c      	beq.n	1da86 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1d9cc:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1d9d0:	ea50 0301 	orrs.w	r3, r0, r1
   1d9d4:	d057      	beq.n	1da86 <tc_cmac_update+0xd4>
	s->countdown--;
   1d9d6:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1d9da:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1d9de:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1d9e2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d9e6:	f1b8 0f00 	cmp.w	r8, #0
   1d9ea:	d02a      	beq.n	1da42 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d9ec:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1d9f0:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1d9f4:	42be      	cmp	r6, r7
   1d9f6:	4420      	add	r0, r4
   1d9f8:	d208      	bcs.n	1da0c <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d9fa:	462a      	mov	r2, r5
   1d9fc:	4633      	mov	r3, r6
   1d9fe:	4631      	mov	r1, r6
   1da00:	f7fe ffb1 	bl	1c966 <_copy>
			s->leftover_offset += data_length;
   1da04:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1da06:	4432      	add	r2, r6
   1da08:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1da0a:	e7da      	b.n	1d9c2 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1da0c:	463b      	mov	r3, r7
   1da0e:	462a      	mov	r2, r5
   1da10:	4639      	mov	r1, r7
   1da12:	f7fe ffa8 	bl	1c966 <_copy>
		data_length -= remaining_space;
   1da16:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1da18:	2300      	movs	r3, #0
   1da1a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1da1c:	4446      	add	r6, r8
		data += remaining_space;
   1da1e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da20:	1e63      	subs	r3, r4, #1
   1da22:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1da26:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1da2a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da2e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1da30:	ea82 0200 	eor.w	r2, r2, r0
   1da34:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da36:	d1f6      	bne.n	1da26 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1da38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1da3a:	4621      	mov	r1, r4
   1da3c:	4620      	mov	r0, r4
   1da3e:	f7f6 f99f 	bl	13d80 <tc_aes_encrypt>
   1da42:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1da46:	2e10      	cmp	r6, #16
   1da48:	d80a      	bhi.n	1da60 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1da4a:	2e00      	cmp	r6, #0
   1da4c:	d0b9      	beq.n	1d9c2 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1da4e:	4633      	mov	r3, r6
   1da50:	462a      	mov	r2, r5
   1da52:	4631      	mov	r1, r6
   1da54:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1da58:	f7fe ff85 	bl	1c966 <_copy>
		s->leftover_offset = data_length;
   1da5c:	6466      	str	r6, [r4, #68]	; 0x44
   1da5e:	e7b0      	b.n	1d9c2 <tc_cmac_update+0x10>
   1da60:	1e63      	subs	r3, r4, #1
   1da62:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1da64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1da68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da6c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1da6e:	ea82 0200 	eor.w	r2, r2, r0
   1da72:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da74:	d1f6      	bne.n	1da64 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1da76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1da78:	4621      	mov	r1, r4
   1da7a:	4620      	mov	r0, r4
   1da7c:	f7f6 f980 	bl	13d80 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1da80:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1da82:	3e10      	subs	r6, #16
   1da84:	e7df      	b.n	1da46 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1da86:	2000      	movs	r0, #0
   1da88:	e79c      	b.n	1d9c4 <tc_cmac_update+0x12>

0001da8a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1da8a:	b570      	push	{r4, r5, r6, lr}
   1da8c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1da8e:	4605      	mov	r5, r0
   1da90:	b1e8      	cbz	r0, 1dace <tc_cmac_final+0x44>
   1da92:	b369      	cbz	r1, 1daf0 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1da94:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1da96:	2a10      	cmp	r2, #16
   1da98:	d11a      	bne.n	1dad0 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1da9a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1da9c:	1e63      	subs	r3, r4, #1
   1da9e:	3901      	subs	r1, #1
   1daa0:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1daa4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1daa8:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1daac:	4072      	eors	r2, r6
   1daae:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dab2:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dab4:	ea82 0206 	eor.w	r2, r2, r6
   1dab8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1daba:	d1f3      	bne.n	1daa4 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1dabc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dabe:	4621      	mov	r1, r4
   1dac0:	4628      	mov	r0, r5
   1dac2:	f7f6 f95d 	bl	13d80 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1dac6:	4620      	mov	r0, r4
   1dac8:	f7ff ff2a 	bl	1d920 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1dacc:	2001      	movs	r0, #1
}
   1dace:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1dad0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1dad4:	2100      	movs	r1, #0
   1dad6:	f1c2 0210 	rsb	r2, r2, #16
   1dada:	4420      	add	r0, r4
   1dadc:	f7fe ff50 	bl	1c980 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dae2:	4423      	add	r3, r4
   1dae4:	2280      	movs	r2, #128	; 0x80
   1dae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1daea:	f104 0120 	add.w	r1, r4, #32
   1daee:	e7d5      	b.n	1da9c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1daf0:	4608      	mov	r0, r1
   1daf2:	e7ec      	b.n	1dace <tc_cmac_final+0x44>

0001daf4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1daf4:	2100      	movs	r1, #0
   1daf6:	2001      	movs	r0, #1
   1daf8:	f000 b800 	b.w	1dafc <z_arm_fatal_error>

0001dafc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1dafc:	f002 bf12 	b.w	20924 <z_fatal_error>

0001db00 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1db00:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1db02:	6800      	ldr	r0, [r0, #0]
   1db04:	f002 bf0e 	b.w	20924 <z_fatal_error>

0001db08 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1db08:	b508      	push	{r3, lr}
	handler();
   1db0a:	f7f6 fac1 	bl	14090 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1db0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1db12:	f7f6 bb03 	b.w	1411c <z_arm_exc_exit>

0001db16 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1db16:	3901      	subs	r1, #1
   1db18:	4603      	mov	r3, r0
   1db1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1db1e:	b90a      	cbnz	r2, 1db24 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1db20:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1db22:	4770      	bx	lr
		*d = *s;
   1db24:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1db28:	e7f7      	b.n	1db1a <strcpy+0x4>

0001db2a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1db2a:	4603      	mov	r3, r0
	size_t n = 0;
   1db2c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1db2e:	5c1a      	ldrb	r2, [r3, r0]
   1db30:	b902      	cbnz	r2, 1db34 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1db32:	4770      	bx	lr
		n++;
   1db34:	3001      	adds	r0, #1
   1db36:	e7fa      	b.n	1db2e <strlen+0x4>

0001db38 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1db38:	1e43      	subs	r3, r0, #1
   1db3a:	3901      	subs	r1, #1
   1db3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1db40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1db44:	4282      	cmp	r2, r0
   1db46:	d101      	bne.n	1db4c <strcmp+0x14>
   1db48:	2a00      	cmp	r2, #0
   1db4a:	d1f7      	bne.n	1db3c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1db4c:	1a10      	subs	r0, r2, r0
   1db4e:	4770      	bx	lr

0001db50 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1db50:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1db52:	b15a      	cbz	r2, 1db6c <memcmp+0x1c>
   1db54:	3901      	subs	r1, #1
   1db56:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1db58:	f810 2b01 	ldrb.w	r2, [r0], #1
   1db5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1db60:	42a0      	cmp	r0, r4
   1db62:	d001      	beq.n	1db68 <memcmp+0x18>
   1db64:	429a      	cmp	r2, r3
   1db66:	d0f7      	beq.n	1db58 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1db68:	1ad0      	subs	r0, r2, r3
}
   1db6a:	bd10      	pop	{r4, pc}
		return 0;
   1db6c:	4610      	mov	r0, r2
   1db6e:	e7fc      	b.n	1db6a <memcmp+0x1a>

0001db70 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1db70:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1db72:	ea81 0400 	eor.w	r4, r1, r0
   1db76:	07a5      	lsls	r5, r4, #30
   1db78:	4603      	mov	r3, r0
   1db7a:	d00b      	beq.n	1db94 <memcpy+0x24>
   1db7c:	3b01      	subs	r3, #1
   1db7e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1db80:	4291      	cmp	r1, r2
   1db82:	d11b      	bne.n	1dbbc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1db84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1db86:	2a00      	cmp	r2, #0
   1db88:	d0fc      	beq.n	1db84 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1db8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1db8e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1db92:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1db94:	079c      	lsls	r4, r3, #30
   1db96:	d1f6      	bne.n	1db86 <memcpy+0x16>
   1db98:	f022 0403 	bic.w	r4, r2, #3
   1db9c:	1f1d      	subs	r5, r3, #4
   1db9e:	0896      	lsrs	r6, r2, #2
   1dba0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1dba2:	42b9      	cmp	r1, r7
   1dba4:	d105      	bne.n	1dbb2 <memcpy+0x42>
   1dba6:	f06f 0503 	mvn.w	r5, #3
   1dbaa:	fb05 2206 	mla	r2, r5, r6, r2
   1dbae:	4423      	add	r3, r4
   1dbb0:	e7e4      	b.n	1db7c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1dbb2:	f851 cb04 	ldr.w	ip, [r1], #4
   1dbb6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1dbba:	e7f2      	b.n	1dba2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1dbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
   1dbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1dbc4:	e7dc      	b.n	1db80 <memcpy+0x10>

0001dbc6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1dbc6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1dbc8:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1dbca:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1dbcc:	079c      	lsls	r4, r3, #30
   1dbce:	d111      	bne.n	1dbf4 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1dbd0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1dbd4:	f022 0603 	bic.w	r6, r2, #3
   1dbd8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1dbdc:	441e      	add	r6, r3
   1dbde:	0894      	lsrs	r4, r2, #2
   1dbe0:	42b3      	cmp	r3, r6
   1dbe2:	d10d      	bne.n	1dc00 <memset+0x3a>
   1dbe4:	f06f 0503 	mvn.w	r5, #3
   1dbe8:	fb05 2204 	mla	r2, r5, r4, r2
   1dbec:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1dbee:	4293      	cmp	r3, r2
   1dbf0:	d109      	bne.n	1dc06 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1dbf2:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1dbf4:	2a00      	cmp	r2, #0
   1dbf6:	d0fc      	beq.n	1dbf2 <memset+0x2c>
		*(d_byte++) = c_byte;
   1dbf8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1dbfc:	3a01      	subs	r2, #1
   1dbfe:	e7e5      	b.n	1dbcc <memset+0x6>
		*(d_word++) = c_word;
   1dc00:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1dc04:	e7ec      	b.n	1dbe0 <memset+0x1a>
		*(d_byte++) = c_byte;
   1dc06:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1dc0a:	e7f0      	b.n	1dbee <memset+0x28>

0001dc0c <_stdout_hook_default>:
}
   1dc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dc10:	4770      	bx	lr

0001dc12 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1dc12:	f7f6 bc7b 	b.w	1450c <z_impl_zephyr_fputc>

0001dc16 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1dc16:	f7fc be8f 	b.w	1a938 <SystemInit>

0001dc1a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1dc1a:	b530      	push	{r4, r5, lr}
   1dc1c:	b085      	sub	sp, #20
   1dc1e:	4604      	mov	r4, r0
   1dc20:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1dc22:	4668      	mov	r0, sp
   1dc24:	2203      	movs	r2, #3
   1dc26:	f7ff ffa3 	bl	1db70 <memcpy>
	(void)memset(res + 3, 0, 13);
   1dc2a:	220d      	movs	r2, #13
   1dc2c:	2100      	movs	r1, #0
   1dc2e:	f10d 0003 	add.w	r0, sp, #3
   1dc32:	f7ff ffc8 	bl	1dbc6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1dc36:	4620      	mov	r0, r4
   1dc38:	466a      	mov	r2, sp
   1dc3a:	4669      	mov	r1, sp
   1dc3c:	f002 fe00 	bl	20840 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1dc40:	4604      	mov	r4, r0
   1dc42:	b920      	cbnz	r0, 1dc4e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1dc44:	2203      	movs	r2, #3
   1dc46:	4669      	mov	r1, sp
   1dc48:	4628      	mov	r0, r5
   1dc4a:	f7ff ff91 	bl	1db70 <memcpy>

	return 0;
}
   1dc4e:	4620      	mov	r0, r4
   1dc50:	b005      	add	sp, #20
   1dc52:	bd30      	pop	{r4, r5, pc}

0001dc54 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1dc54:	b513      	push	{r0, r1, r4, lr}
   1dc56:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1dc58:	aa01      	add	r2, sp, #4
   1dc5a:	3103      	adds	r1, #3
   1dc5c:	f7ff ffdd 	bl	1dc1a <ah>
	if (err) {
   1dc60:	b948      	cbnz	r0, 1dc76 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1dc62:	2203      	movs	r2, #3
   1dc64:	a901      	add	r1, sp, #4
   1dc66:	4620      	mov	r0, r4
   1dc68:	f7ff ff72 	bl	1db50 <memcmp>
   1dc6c:	fab0 f080 	clz	r0, r0
   1dc70:	0940      	lsrs	r0, r0, #5
}
   1dc72:	b002      	add	sp, #8
   1dc74:	bd10      	pop	{r4, pc}
		return false;
   1dc76:	2000      	movs	r0, #0
   1dc78:	e7fb      	b.n	1dc72 <bt_rpa_irk_matches+0x1e>

0001dc7a <send_cmd_status>:
{
   1dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1dc7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1dc82:	4606      	mov	r6, r0
   1dc84:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1dc86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc8a:	2100      	movs	r1, #0
   1dc8c:	200f      	movs	r0, #15
   1dc8e:	f7f8 f98f 	bl	15fb0 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1dc92:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1dc94:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1dc98:	4604      	mov	r4, r0
   1dc9a:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1dc9c:	2102      	movs	r1, #2
   1dc9e:	4640      	mov	r0, r8
   1dca0:	f002 fc60 	bl	20564 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dca4:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1dca6:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dca8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1dcaa:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1dcac:	4640      	mov	r0, r8
   1dcae:	f002 fc59 	bl	20564 <net_buf_simple_add>
	evt->ncmd = 1U;
   1dcb2:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1dcb4:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1dcb6:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   1dcb8:	4620      	mov	r0, r4
}
   1dcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   1dcbe:	f7f7 bd4d 	b.w	1575c <bt_recv>

0001dcc2 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1dcc2:	f101 0320 	add.w	r3, r1, #32
   1dcc6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1dcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1dccc:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1dcd0:	428b      	cmp	r3, r1
   1dcd2:	d1f9      	bne.n	1dcc8 <sys_memcpy_swap.constprop.0+0x6>
}
   1dcd4:	4770      	bx	lr

0001dcd6 <default_CSPRNG>:
{
   1dcd6:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1dcd8:	f7fc fd5a 	bl	1a790 <bt_rand>
}
   1dcdc:	fab0 f080 	clz	r0, r0
   1dce0:	0940      	lsrs	r0, r0, #5
   1dce2:	bd08      	pop	{r3, pc}

0001dce4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1dce4:	b510      	push	{r4, lr}
   1dce6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1dce8:	7801      	ldrb	r1, [r0, #0]
   1dcea:	7822      	ldrb	r2, [r4, #0]
   1dcec:	428a      	cmp	r2, r1
{
   1dcee:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1dcf0:	d00e      	beq.n	1dd10 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1dcf2:	4669      	mov	r1, sp
   1dcf4:	f7f6 fdd4 	bl	148a0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1dcf8:	a905      	add	r1, sp, #20
   1dcfa:	4620      	mov	r0, r4
   1dcfc:	f7f6 fdd0 	bl	148a0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1dd00:	2210      	movs	r2, #16
   1dd02:	f10d 0115 	add.w	r1, sp, #21
   1dd06:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dd0a:	f7ff ff21 	bl	1db50 <memcmp>
   1dd0e:	e007      	b.n	1dd20 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1dd10:	2a01      	cmp	r2, #1
   1dd12:	d007      	beq.n	1dd24 <bt_uuid_cmp+0x40>
   1dd14:	2a02      	cmp	r2, #2
   1dd16:	d008      	beq.n	1dd2a <bt_uuid_cmp+0x46>
   1dd18:	b95a      	cbnz	r2, 1dd32 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1dd1a:	8840      	ldrh	r0, [r0, #2]
   1dd1c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dd1e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1dd20:	b00a      	add	sp, #40	; 0x28
   1dd22:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dd24:	6840      	ldr	r0, [r0, #4]
   1dd26:	6863      	ldr	r3, [r4, #4]
   1dd28:	e7f9      	b.n	1dd1e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dd2a:	2210      	movs	r2, #16
   1dd2c:	1c61      	adds	r1, r4, #1
   1dd2e:	3001      	adds	r0, #1
   1dd30:	e7eb      	b.n	1dd0a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1dd32:	f06f 0015 	mvn.w	r0, #21
   1dd36:	e7f3      	b.n	1dd20 <bt_uuid_cmp+0x3c>

0001dd38 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1dd38:	2a04      	cmp	r2, #4
{
   1dd3a:	b538      	push	{r3, r4, r5, lr}
   1dd3c:	460c      	mov	r4, r1
	switch (data_len) {
   1dd3e:	d00d      	beq.n	1dd5c <bt_uuid_create+0x24>
   1dd40:	2a10      	cmp	r2, #16
   1dd42:	d019      	beq.n	1dd78 <bt_uuid_create+0x40>
   1dd44:	2a02      	cmp	r2, #2
   1dd46:	f04f 0300 	mov.w	r3, #0
   1dd4a:	d11b      	bne.n	1dd84 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1dd4c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1dd4e:	784a      	ldrb	r2, [r1, #1]
   1dd50:	780b      	ldrb	r3, [r1, #0]
   1dd52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1dd56:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1dd58:	2001      	movs	r0, #1
}
   1dd5a:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1dd5c:	2301      	movs	r3, #1
   1dd5e:	7003      	strb	r3, [r0, #0]
   1dd60:	78a2      	ldrb	r2, [r4, #2]
   1dd62:	78c9      	ldrb	r1, [r1, #3]
   1dd64:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dd66:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1dd6a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dd6c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1dd70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1dd74:	6042      	str	r2, [r0, #4]
		break;
   1dd76:	e7ef      	b.n	1dd58 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1dd78:	2302      	movs	r3, #2
   1dd7a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1dd7e:	f7ff fef7 	bl	1db70 <memcpy>
		break;
   1dd82:	e7e9      	b.n	1dd58 <bt_uuid_create+0x20>
	switch (data_len) {
   1dd84:	4618      	mov	r0, r3
   1dd86:	e7e8      	b.n	1dd5a <bt_uuid_create+0x22>

0001dd88 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1dd88:	280f      	cmp	r0, #15
   1dd8a:	d806      	bhi.n	1dd9a <bt_hci_evt_get_flags+0x12>
   1dd8c:	280d      	cmp	r0, #13
   1dd8e:	d80b      	bhi.n	1dda8 <bt_hci_evt_get_flags+0x20>
   1dd90:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1dd92:	bf14      	ite	ne
   1dd94:	2002      	movne	r0, #2
   1dd96:	2003      	moveq	r0, #3
   1dd98:	4770      	bx	lr
	switch (evt) {
   1dd9a:	2813      	cmp	r0, #19
   1dd9c:	d004      	beq.n	1dda8 <bt_hci_evt_get_flags+0x20>
   1dd9e:	281a      	cmp	r0, #26
   1dda0:	bf14      	ite	ne
   1dda2:	2002      	movne	r0, #2
   1dda4:	2001      	moveq	r0, #1
   1dda6:	4770      	bx	lr
   1dda8:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1ddaa:	4770      	bx	lr

0001ddac <handle_event>:
{
   1ddac:	b410      	push	{r4}
   1ddae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ddb2:	4604      	mov	r4, r0
   1ddb4:	4608      	mov	r0, r1
		if (handler->event != event) {
   1ddb6:	7811      	ldrb	r1, [r2, #0]
   1ddb8:	42a1      	cmp	r1, r4
   1ddba:	d004      	beq.n	1ddc6 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1ddbc:	3208      	adds	r2, #8
   1ddbe:	429a      	cmp	r2, r3
   1ddc0:	d1f9      	bne.n	1ddb6 <handle_event+0xa>
}
   1ddc2:	bc10      	pop	{r4}
   1ddc4:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1ddc6:	8981      	ldrh	r1, [r0, #12]
   1ddc8:	7853      	ldrb	r3, [r2, #1]
   1ddca:	4299      	cmp	r1, r3
   1ddcc:	d3f9      	bcc.n	1ddc2 <handle_event+0x16>
		handler->handler(buf);
   1ddce:	6853      	ldr	r3, [r2, #4]
}
   1ddd0:	bc10      	pop	{r4}
		handler->handler(buf);
   1ddd2:	4718      	bx	r3

0001ddd4 <hci_data_buf_overflow>:
}
   1ddd4:	4770      	bx	lr

0001ddd6 <get_adv_channel_map>:
{
   1ddd6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1ddd8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1dddc:	bf0c      	ite	eq
   1ddde:	2007      	moveq	r0, #7
   1dde0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1dde2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1dde4:	bf48      	it	mi
   1dde6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1ddea:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1ddec:	bf48      	it	mi
   1ddee:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1ddf2:	4770      	bx	lr

0001ddf4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ddf4:	f3bf 8f5b 	dmb	ish
   1ddf8:	6800      	ldr	r0, [r0, #0]
   1ddfa:	f3bf 8f5b 	dmb	ish
}
   1ddfe:	4770      	bx	lr

0001de00 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1de00:	2207      	movs	r2, #7
   1de02:	f7ff beb5 	b.w	1db70 <memcpy>

0001de06 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1de06:	2207      	movs	r2, #7
   1de08:	f7ff bea2 	b.w	1db50 <memcmp>

0001de0c <atomic_and>:
{
   1de0c:	4603      	mov	r3, r0
}
   1de0e:	f3bf 8f5b 	dmb	ish
   1de12:	e853 0f00 	ldrex	r0, [r3]
   1de16:	ea00 0201 	and.w	r2, r0, r1
   1de1a:	e843 2c00 	strex	ip, r2, [r3]
   1de1e:	f1bc 0f00 	cmp.w	ip, #0
   1de22:	d1f6      	bne.n	1de12 <atomic_and+0x6>
   1de24:	f3bf 8f5b 	dmb	ish
   1de28:	4770      	bx	lr

0001de2a <atomic_or>:
{
   1de2a:	4603      	mov	r3, r0
}
   1de2c:	f3bf 8f5b 	dmb	ish
   1de30:	e853 0f00 	ldrex	r0, [r3]
   1de34:	ea40 0201 	orr.w	r2, r0, r1
   1de38:	e843 2c00 	strex	ip, r2, [r3]
   1de3c:	f1bc 0f00 	cmp.w	ip, #0
   1de40:	d1f6      	bne.n	1de30 <atomic_or+0x6>
   1de42:	f3bf 8f5b 	dmb	ish
   1de46:	4770      	bx	lr

0001de48 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1de48:	460b      	mov	r3, r1
   1de4a:	b410      	push	{r4}
   1de4c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1de4e:	f001 041f 	and.w	r4, r1, #31
   1de52:	2101      	movs	r1, #1
   1de54:	40a1      	lsls	r1, r4

	if (val) {
   1de56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1de5a:	b112      	cbz	r2, 1de62 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1de5c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1de5e:	f7ff bfe4 	b.w	1de2a <atomic_or>
}
   1de62:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1de64:	43c9      	mvns	r1, r1
   1de66:	f7ff bfd1 	b.w	1de0c <atomic_and>

0001de6a <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1de6a:	2101      	movs	r1, #1
   1de6c:	3008      	adds	r0, #8
   1de6e:	f002 bba0 	b.w	205b2 <net_buf_simple_pull_mem>

0001de72 <le_data_len_change>:
{
   1de72:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1de74:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1de76:	8818      	ldrh	r0, [r3, #0]
   1de78:	f7f8 fb48 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1de7c:	b118      	cbz	r0, 1de86 <le_data_len_change+0x14>
}
   1de7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1de82:	f000 bc73 	b.w	1e76c <bt_conn_unref>
}
   1de86:	bd08      	pop	{r3, pc}

0001de88 <hci_disconn_complete_prio>:
{
   1de88:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1de8a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1de8c:	781a      	ldrb	r2, [r3, #0]
   1de8e:	b96a      	cbnz	r2, 1deac <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1de90:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1de94:	f7f8 fb3a 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1de98:	4604      	mov	r4, r0
   1de9a:	b138      	cbz	r0, 1deac <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1de9c:	2101      	movs	r1, #1
   1de9e:	f7f8 fb83 	bl	165a8 <bt_conn_set_state>
	bt_conn_unref(conn);
   1dea2:	4620      	mov	r0, r4
}
   1dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1dea8:	f000 bc60 	b.w	1e76c <bt_conn_unref>
}
   1deac:	bd10      	pop	{r4, pc}

0001deae <hci_disconn_complete>:
{
   1deae:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1deb0:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1deb2:	7835      	ldrb	r5, [r6, #0]
   1deb4:	b985      	cbnz	r5, 1ded8 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1deb6:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1deba:	f7f8 fb27 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1debe:	4604      	mov	r4, r0
   1dec0:	b150      	cbz	r0, 1ded8 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1dec2:	78f3      	ldrb	r3, [r6, #3]
   1dec4:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1dec6:	4629      	mov	r1, r5
   1dec8:	f7f8 fb6e 	bl	165a8 <bt_conn_set_state>
	conn->handle = 0U;
   1decc:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1dece:	4620      	mov	r0, r4
}
   1ded0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1ded4:	f000 bc4a 	b.w	1e76c <bt_conn_unref>
}
   1ded8:	bd70      	pop	{r4, r5, r6, pc}

0001deda <le_conn_update_complete>:
{
   1deda:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1dedc:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1dede:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1dee2:	f7f8 fb13 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1dee6:	4604      	mov	r4, r0
   1dee8:	b1c0      	cbz	r0, 1df1c <le_conn_update_complete+0x42>
	if (!evt->status) {
   1deea:	782b      	ldrb	r3, [r5, #0]
   1deec:	b9c3      	cbnz	r3, 1df20 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1deee:	792a      	ldrb	r2, [r5, #4]
   1def0:	78eb      	ldrb	r3, [r5, #3]
   1def2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1def6:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1defa:	79aa      	ldrb	r2, [r5, #6]
   1defc:	796b      	ldrb	r3, [r5, #5]
   1defe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1df02:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1df06:	79eb      	ldrb	r3, [r5, #7]
   1df08:	7a2a      	ldrb	r2, [r5, #8]
   1df0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1df0e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1df12:	f7f8 f9a1 	bl	16258 <notify_le_param_updated>
	bt_conn_unref(conn);
   1df16:	4620      	mov	r0, r4
   1df18:	f000 fc28 	bl	1e76c <bt_conn_unref>
}
   1df1c:	b003      	add	sp, #12
   1df1e:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1df20:	2b1a      	cmp	r3, #26
   1df22:	d1f8      	bne.n	1df16 <le_conn_update_complete+0x3c>
   1df24:	78c3      	ldrb	r3, [r0, #3]
   1df26:	2b01      	cmp	r3, #1
   1df28:	d1f5      	bne.n	1df16 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1df2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1df2e:	3004      	adds	r0, #4
   1df30:	f7ff ff7b 	bl	1de2a <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1df34:	0543      	lsls	r3, r0, #21
   1df36:	d4ee      	bmi.n	1df16 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1df38:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1df3c:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1df3e:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1df40:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1df44:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1df46:	4620      	mov	r0, r4
   1df48:	f7f8 fdc0 	bl	16acc <bt_l2cap_update_conn_param>
   1df4c:	e7e3      	b.n	1df16 <le_conn_update_complete+0x3c>

0001df4e <update_sec_level>:
	if (!conn->encrypt) {
   1df4e:	7ac3      	ldrb	r3, [r0, #11]
   1df50:	b913      	cbnz	r3, 1df58 <update_sec_level+0xa>
		conn->sec_level = BT_SECURITY_L1;
   1df52:	2301      	movs	r3, #1
   1df54:	7243      	strb	r3, [r0, #9]
		return;
   1df56:	4770      	bx	lr
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1df58:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1df5c:	b193      	cbz	r3, 1df84 <update_sec_level+0x36>
   1df5e:	7b5a      	ldrb	r2, [r3, #13]
   1df60:	07d1      	lsls	r1, r2, #31
   1df62:	d50f      	bpl.n	1df84 <update_sec_level+0x36>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1df64:	06d2      	lsls	r2, r2, #27
   1df66:	d50b      	bpl.n	1df80 <update_sec_level+0x32>
   1df68:	7b1b      	ldrb	r3, [r3, #12]
   1df6a:	2b10      	cmp	r3, #16
   1df6c:	d108      	bne.n	1df80 <update_sec_level+0x32>
			conn->sec_level = BT_SECURITY_L4;
   1df6e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1df70:	7243      	strb	r3, [r0, #9]
	if (conn->required_sec_level > conn->sec_level) {
   1df72:	7a82      	ldrb	r2, [r0, #10]
   1df74:	7a43      	ldrb	r3, [r0, #9]
   1df76:	429a      	cmp	r2, r3
   1df78:	d906      	bls.n	1df88 <update_sec_level+0x3a>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   1df7a:	2105      	movs	r1, #5
   1df7c:	f000 bc15 	b.w	1e7aa <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
   1df80:	2303      	movs	r3, #3
   1df82:	e7f5      	b.n	1df70 <update_sec_level+0x22>
		conn->sec_level = BT_SECURITY_L2;
   1df84:	2302      	movs	r3, #2
   1df86:	e7f3      	b.n	1df70 <update_sec_level+0x22>
}
   1df88:	4770      	bx	lr

0001df8a <hci_vendor_event>:
   1df8a:	4770      	bx	lr

0001df8c <sys_put_le64>:
	dst[1] = val >> 8;
   1df8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1df90:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1df92:	0e00      	lsrs	r0, r0, #24
   1df94:	7053      	strb	r3, [r2, #1]
   1df96:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1df98:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1df9a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1df9e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1dfa0:	7093      	strb	r3, [r2, #2]
   1dfa2:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1dfa4:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1dfa6:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1dfa8:	71d1      	strb	r1, [r2, #7]
}
   1dfaa:	4770      	bx	lr

0001dfac <le_ltk_request>:
{
   1dfac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1dfae:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1dfb0:	8826      	ldrh	r6, [r4, #0]
{
   1dfb2:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1dfb4:	b2b0      	uxth	r0, r6
   1dfb6:	f7f8 faa9 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1dfba:	4605      	mov	r5, r0
   1dfbc:	b318      	cbz	r0, 1e006 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1dfbe:	af02      	add	r7, sp, #8
   1dfc0:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1dfc4:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1dfc8:	9701      	str	r7, [sp, #4]
   1dfca:	8961      	ldrh	r1, [r4, #10]
   1dfcc:	9100      	str	r1, [sp, #0]
   1dfce:	f002 f92b 	bl	20228 <bt_smp_request_ltk>
   1dfd2:	b1d0      	cbz	r0, 1e00a <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1dfd4:	2112      	movs	r1, #18
   1dfd6:	f242 001a 	movw	r0, #8218	; 0x201a
   1dfda:	f7f6 fffb 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1dfde:	4604      	mov	r4, r0
   1dfe0:	b170      	cbz	r0, 1e000 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1dfe2:	2112      	movs	r1, #18
   1dfe4:	3008      	adds	r0, #8
   1dfe6:	f002 fabd 	bl	20564 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1dfea:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1dfec:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1dff0:	2210      	movs	r2, #16
   1dff2:	f7ff fdbd 	bl	1db70 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1dff6:	4621      	mov	r1, r4
   1dff8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1dffc:	f7f7 f822 	bl	15044 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1e000:	4628      	mov	r0, r5
   1e002:	f000 fbb3 	bl	1e76c <bt_conn_unref>
}
   1e006:	b007      	add	sp, #28
   1e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1e00a:	2102      	movs	r1, #2
   1e00c:	f242 001b 	movw	r0, #8219	; 0x201b
   1e010:	f7f6 ffe0 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e014:	4604      	mov	r4, r0
   1e016:	2800      	cmp	r0, #0
   1e018:	d0f2      	beq.n	1e000 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1e01a:	2102      	movs	r1, #2
   1e01c:	3008      	adds	r0, #8
   1e01e:	f002 faa1 	bl	20564 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1e022:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1e024:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1e026:	f242 001b 	movw	r0, #8219	; 0x201b
   1e02a:	e7e7      	b.n	1dffc <le_ltk_request+0x50>

0001e02c <le_conn_param_neg_reply>:
{
   1e02c:	b570      	push	{r4, r5, r6, lr}
   1e02e:	4606      	mov	r6, r0
   1e030:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1e032:	f242 0021 	movw	r0, #8225	; 0x2021
   1e036:	2103      	movs	r1, #3
   1e038:	f7f6 ffcc 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e03c:	4604      	mov	r4, r0
   1e03e:	b160      	cbz	r0, 1e05a <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1e040:	2103      	movs	r1, #3
   1e042:	3008      	adds	r0, #8
   1e044:	f002 fa8e 	bl	20564 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1e048:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1e04a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e04c:	4621      	mov	r1, r4
   1e04e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1e052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1e056:	f7f6 bff5 	b.w	15044 <bt_hci_cmd_send>
}
   1e05a:	bd70      	pop	{r4, r5, r6, pc}

0001e05c <le_conn_param_req>:
{
   1e05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1e05e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e060:	78d9      	ldrb	r1, [r3, #3]
   1e062:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1e064:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1e066:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e06a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1e06e:	7959      	ldrb	r1, [r3, #5]
   1e070:	791a      	ldrb	r2, [r3, #4]
   1e072:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e076:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1e07a:	799a      	ldrb	r2, [r3, #6]
   1e07c:	79d9      	ldrb	r1, [r3, #7]
   1e07e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e082:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e086:	7a1a      	ldrb	r2, [r3, #8]
   1e088:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1e08a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e08c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1e090:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1e092:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1e096:	f7f8 fa39 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1e09a:	4606      	mov	r6, r0
   1e09c:	b928      	cbnz	r0, 1e0aa <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1e09e:	2102      	movs	r1, #2
   1e0a0:	4620      	mov	r0, r4
   1e0a2:	f7ff ffc3 	bl	1e02c <le_conn_param_neg_reply>
}
   1e0a6:	b003      	add	sp, #12
   1e0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1e0aa:	4669      	mov	r1, sp
   1e0ac:	f7f8 f908 	bl	162c0 <le_param_req>
   1e0b0:	b938      	cbnz	r0, 1e0c2 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1e0b2:	211e      	movs	r1, #30
   1e0b4:	4620      	mov	r0, r4
   1e0b6:	f7ff ffb9 	bl	1e02c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1e0ba:	4630      	mov	r0, r6
   1e0bc:	f000 fb56 	bl	1e76c <bt_conn_unref>
   1e0c0:	e7f1      	b.n	1e0a6 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e0c2:	210e      	movs	r1, #14
   1e0c4:	f242 0020 	movw	r0, #8224	; 0x2020
   1e0c8:	f7f6 ff84 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e0cc:	4605      	mov	r5, r0
   1e0ce:	2800      	cmp	r0, #0
   1e0d0:	d0f3      	beq.n	1e0ba <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   1e0d2:	210e      	movs	r1, #14
   1e0d4:	3008      	adds	r0, #8
   1e0d6:	f002 fa45 	bl	20564 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1e0da:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   1e0dc:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1e0de:	2100      	movs	r1, #0
   1e0e0:	f7ff fd71 	bl	1dbc6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e0e4:	f8bd 3000 	ldrh.w	r3, [sp]
   1e0e8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e0ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1e0ee:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e0f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e0f4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e0f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1e0fa:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e0fc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e0fe:	4629      	mov	r1, r5
   1e100:	f242 0020 	movw	r0, #8224	; 0x2020
   1e104:	f7f6 ff9e 	bl	15044 <bt_hci_cmd_send>
   1e108:	e7d7      	b.n	1e0ba <le_conn_param_req+0x5e>

0001e10a <hci_le_read_max_data_len>:
{
   1e10a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e10c:	4606      	mov	r6, r0
   1e10e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1e110:	aa01      	add	r2, sp, #4
   1e112:	2100      	movs	r1, #0
   1e114:	f242 002f 	movw	r0, #8239	; 0x202f
   1e118:	f7f6 ffb6 	bl	15088 <bt_hci_cmd_send_sync>
	if (err) {
   1e11c:	4604      	mov	r4, r0
   1e11e:	b948      	cbnz	r0, 1e134 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1e120:	9801      	ldr	r0, [sp, #4]
   1e122:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1e124:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1e128:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1e12a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1e12e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1e130:	f7fb f988 	bl	19444 <net_buf_unref>
}
   1e134:	4620      	mov	r0, r4
   1e136:	b002      	add	sp, #8
   1e138:	bd70      	pop	{r4, r5, r6, pc}

0001e13a <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e13a:	f100 0314 	add.w	r3, r0, #20
{
   1e13e:	b510      	push	{r4, lr}
   1e140:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e142:	4618      	mov	r0, r3
   1e144:	f7ff fe56 	bl	1ddf4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1e148:	0642      	lsls	r2, r0, #25
   1e14a:	d50a      	bpl.n	1e162 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e14c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1e150:	4618      	mov	r0, r3
   1e152:	f7ff fe6a 	bl	1de2a <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1e156:	4620      	mov	r0, r4
   1e158:	2100      	movs	r1, #0
}
   1e15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e15e:	f7f7 b87d 	b.w	1525c <set_le_adv_enable_legacy>
}
   1e162:	bd10      	pop	{r4, pc}

0001e164 <adv_unpause_enabled>:
{
   1e164:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e166:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1e16a:	4604      	mov	r4, r0
   1e16c:	3014      	adds	r0, #20
   1e16e:	f7ff fe4d 	bl	1de0c <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1e172:	0483      	lsls	r3, r0, #18
   1e174:	d505      	bpl.n	1e182 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1e176:	4620      	mov	r0, r4
   1e178:	2101      	movs	r1, #1
}
   1e17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1e17e:	f7f7 b86d 	b.w	1525c <set_le_adv_enable_legacy>
}
   1e182:	bd10      	pop	{r4, pc}

0001e184 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e186:	4607      	mov	r7, r0
   1e188:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1e18a:	f242 0027 	movw	r0, #8231	; 0x2027
   1e18e:	2127      	movs	r1, #39	; 0x27
   1e190:	f7f6 ff20 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e194:	4604      	mov	r4, r0
   1e196:	b1d0      	cbz	r0, 1e1ce <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   1e198:	2127      	movs	r1, #39	; 0x27
   1e19a:	3008      	adds	r0, #8
   1e19c:	f002 f9e2 	bl	20564 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1e1a0:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   1e1a2:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1e1a4:	f7ff fe2c 	bl	1de00 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1e1a8:	4631      	mov	r1, r6
   1e1aa:	2210      	movs	r2, #16
   1e1ac:	1de8      	adds	r0, r5, #7
   1e1ae:	f7ff fcdf 	bl	1db70 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1e1b2:	2210      	movs	r2, #16
   1e1b4:	2100      	movs	r1, #0
   1e1b6:	f105 0017 	add.w	r0, r5, #23
   1e1ba:	f7ff fd04 	bl	1dbc6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e1be:	4621      	mov	r1, r4
   1e1c0:	2200      	movs	r2, #0
}
   1e1c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1e1c6:	f242 0027 	movw	r0, #8231	; 0x2027
   1e1ca:	f7f6 bf5d 	b.w	15088 <bt_hci_cmd_send_sync>
}
   1e1ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e1d4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e1d4:	7a03      	ldrb	r3, [r0, #8]
   1e1d6:	075b      	lsls	r3, r3, #29
   1e1d8:	d504      	bpl.n	1e1e4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1e1da:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1e1de:	3001      	adds	r0, #1
   1e1e0:	f7ff bfd0 	b.w	1e184 <hci_id_add.isra.0>
}
   1e1e4:	4770      	bx	lr

0001e1e6 <addr_res_enable>:
{
   1e1e6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e1e8:	2101      	movs	r1, #1
{
   1e1ea:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1e1ec:	f242 002d 	movw	r0, #8237	; 0x202d
   1e1f0:	f7f6 fef0 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e1f4:	4604      	mov	r4, r0
   1e1f6:	b158      	cbz	r0, 1e210 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1e1f8:	4629      	mov	r1, r5
   1e1fa:	3008      	adds	r0, #8
   1e1fc:	f002 f9c1 	bl	20582 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e200:	4621      	mov	r1, r4
   1e202:	2200      	movs	r2, #0
}
   1e204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1e208:	f242 002d 	movw	r0, #8237	; 0x202d
   1e20c:	f7f6 bf3c 	b.w	15088 <bt_hci_cmd_send_sync>
}
   1e210:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e214:	bd38      	pop	{r3, r4, r5, pc}

0001e216 <hci_set_ad>:
{
   1e216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e21a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e21c:	2120      	movs	r1, #32
{
   1e21e:	4682      	mov	sl, r0
   1e220:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e222:	f7f6 fed7 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e226:	4606      	mov	r6, r0
   1e228:	2800      	cmp	r0, #0
   1e22a:	d04a      	beq.n	1e2c2 <hci_set_ad+0xac>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1e22c:	2120      	movs	r1, #32
   1e22e:	3008      	adds	r0, #8
   1e230:	f002 f998 	bl	20564 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1e234:	2220      	movs	r2, #32
   1e236:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   1e238:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1e23a:	f7ff fcc4 	bl	1dbc6 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1e23e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1e242:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1e246:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1e248:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1e24a:	f8d4 8000 	ldr.w	r8, [r4]
   1e24e:	2300      	movs	r3, #0
   1e250:	6862      	ldr	r2, [r4, #4]
   1e252:	4293      	cmp	r3, r2
   1e254:	d30d      	bcc.n	1e272 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1e256:	9b00      	ldr	r3, [sp, #0]
   1e258:	3408      	adds	r4, #8
   1e25a:	42a3      	cmp	r3, r4
   1e25c:	d1f5      	bne.n	1e24a <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e25e:	2200      	movs	r2, #0
   1e260:	4631      	mov	r1, r6
   1e262:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1e264:	f889 5000 	strb.w	r5, [r9]
}
   1e268:	b003      	add	sp, #12
   1e26a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e26e:	f7f6 bf0b 	b.w	15088 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1e272:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1e276:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1e27a:	1ca8      	adds	r0, r5, #2
   1e27c:	1811      	adds	r1, r2, r0
   1e27e:	291f      	cmp	r1, #31
   1e280:	d908      	bls.n	1e294 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e282:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1e286:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1e28a:	d11f      	bne.n	1e2cc <hci_set_ad+0xb6>
   1e28c:	2a00      	cmp	r2, #0
   1e28e:	dd1d      	ble.n	1e2cc <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1e290:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1e294:	b2d7      	uxtb	r7, r2
   1e296:	1c79      	adds	r1, r7, #1
   1e298:	f80b 1005 	strb.w	r1, [fp, r5]
   1e29c:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1e29e:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e2a0:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1e2a4:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e2a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e2ac:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1e2ae:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1e2b0:	f7ff fc5e 	bl	1db70 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1e2b4:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1e2b6:	443d      	add	r5, r7
   1e2b8:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1e2ba:	3301      	adds	r3, #1
   1e2bc:	f108 0808 	add.w	r8, r8, #8
   1e2c0:	e7c6      	b.n	1e250 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1e2c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1e2c6:	b003      	add	sp, #12
   1e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1e2cc:	4630      	mov	r0, r6
   1e2ce:	f7fb f8b9 	bl	19444 <net_buf_unref>
		return err;
   1e2d2:	f06f 0015 	mvn.w	r0, #21
   1e2d6:	e7f6      	b.n	1e2c6 <hci_set_ad+0xb0>

0001e2d8 <bt_lookup_id_addr>:
{
   1e2d8:	b510      	push	{r4, lr}
   1e2da:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1e2dc:	f7fa ffac 	bl	19238 <bt_keys_find_irk>
		if (keys) {
   1e2e0:	b100      	cbz	r0, 1e2e4 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1e2e2:	1c44      	adds	r4, r0, #1
}
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	bd10      	pop	{r4, pc}

0001e2e8 <bt_hci_disconnect>:
{
   1e2e8:	b570      	push	{r4, r5, r6, lr}
   1e2ea:	4606      	mov	r6, r0
   1e2ec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e2ee:	f240 4006 	movw	r0, #1030	; 0x406
   1e2f2:	2103      	movs	r1, #3
   1e2f4:	f7f6 fe6e 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e2f8:	4604      	mov	r4, r0
   1e2fa:	b160      	cbz	r0, 1e316 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1e2fc:	2103      	movs	r1, #3
   1e2fe:	3008      	adds	r0, #8
   1e300:	f002 f930 	bl	20564 <net_buf_simple_add>
	disconn->reason = reason;
   1e304:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1e306:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1e308:	4621      	mov	r1, r4
   1e30a:	f240 4006 	movw	r0, #1030	; 0x406
}
   1e30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1e312:	f7f6 be97 	b.w	15044 <bt_hci_cmd_send>
}
   1e316:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e31a:	bd70      	pop	{r4, r5, r6, pc}

0001e31c <bt_le_set_data_len>:
{
   1e31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e31e:	4607      	mov	r7, r0
   1e320:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e322:	f242 0022 	movw	r0, #8226	; 0x2022
   1e326:	2106      	movs	r1, #6
{
   1e328:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e32a:	f7f6 fe53 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e32e:	4604      	mov	r4, r0
   1e330:	b170      	cbz	r0, 1e350 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1e332:	2106      	movs	r1, #6
   1e334:	3008      	adds	r0, #8
   1e336:	f002 f915 	bl	20564 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e33a:	883b      	ldrh	r3, [r7, #0]
   1e33c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e33e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e340:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e342:	4621      	mov	r1, r4
   1e344:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1e348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e34c:	f7f6 be7a 	b.w	15044 <bt_hci_cmd_send>
}
   1e350:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e356 <bt_le_set_phy>:
{
   1e356:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e35a:	4680      	mov	r8, r0
   1e35c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e35e:	f242 0032 	movw	r0, #8242	; 0x2032
   1e362:	2107      	movs	r1, #7
{
   1e364:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e368:	4616      	mov	r6, r2
   1e36a:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e36c:	f7f6 fe32 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e370:	4604      	mov	r4, r0
   1e372:	b190      	cbz	r0, 1e39a <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1e374:	2107      	movs	r1, #7
   1e376:	3008      	adds	r0, #8
   1e378:	f002 f8f4 	bl	20564 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e37c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1e380:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e382:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e384:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e386:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1e388:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e38c:	4621      	mov	r1, r4
   1e38e:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1e392:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e396:	f7f6 be55 	b.w	15044 <bt_hci_cmd_send>
}
   1e39a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e3a2 <le_phy_update_complete>:
{
   1e3a2:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1e3a4:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e3a6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1e3aa:	f7f8 f8af 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1e3ae:	4604      	mov	r4, r0
   1e3b0:	b1a0      	cbz	r0, 1e3dc <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1e3b2:	1d05      	adds	r5, r0, #4
   1e3b4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1e3b8:	4628      	mov	r0, r5
   1e3ba:	f7ff fd27 	bl	1de0c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1e3be:	0603      	lsls	r3, r0, #24
   1e3c0:	d507      	bpl.n	1e3d2 <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e3c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e3c6:	4628      	mov	r0, r5
   1e3c8:	f7ff fd2f 	bl	1de2a <atomic_or>
		conn_auto_initiate(conn);
   1e3cc:	4620      	mov	r0, r4
   1e3ce:	f7f6 ffe7 	bl	153a0 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e3d2:	4620      	mov	r0, r4
}
   1e3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e3d8:	f000 b9c8 	b.w	1e76c <bt_conn_unref>
}
   1e3dc:	bd38      	pop	{r3, r4, r5, pc}

0001e3de <le_remote_feat_complete>:
{
   1e3de:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1e3e0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1e3e2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1e3e6:	f7f8 f891 	bl	1650c <bt_conn_lookup_handle>
	if (!conn) {
   1e3ea:	4604      	mov	r4, r0
   1e3ec:	b198      	cbz	r0, 1e416 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1e3ee:	782b      	ldrb	r3, [r5, #0]
   1e3f0:	b923      	cbnz	r3, 1e3fc <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1e3f2:	2208      	movs	r2, #8
   1e3f4:	1ce9      	adds	r1, r5, #3
   1e3f6:	30ac      	adds	r0, #172	; 0xac
   1e3f8:	f7ff fbba 	bl	1db70 <memcpy>
   1e3fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1e400:	1d20      	adds	r0, r4, #4
   1e402:	f7ff fd12 	bl	1de2a <atomic_or>
	conn_auto_initiate(conn);
   1e406:	4620      	mov	r0, r4
   1e408:	f7f6 ffca 	bl	153a0 <conn_auto_initiate>
	bt_conn_unref(conn);
   1e40c:	4620      	mov	r0, r4
}
   1e40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1e412:	f000 b9ab 	b.w	1e76c <bt_conn_unref>
}
   1e416:	bd38      	pop	{r3, r4, r5, pc}

0001e418 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e418:	8802      	ldrh	r2, [r0, #0]
   1e41a:	8843      	ldrh	r3, [r0, #2]
   1e41c:	429a      	cmp	r2, r3
{
   1e41e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e420:	d818      	bhi.n	1e454 <bt_le_conn_params_valid+0x3c>
   1e422:	2a05      	cmp	r2, #5
   1e424:	d916      	bls.n	1e454 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e426:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e42a:	d813      	bhi.n	1e454 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1e42c:	8884      	ldrh	r4, [r0, #4]
   1e42e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1e432:	d20f      	bcs.n	1e454 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e434:	88c1      	ldrh	r1, [r0, #6]
   1e436:	f1a1 020a 	sub.w	r2, r1, #10
   1e43a:	b292      	uxth	r2, r2
   1e43c:	f640 4076 	movw	r0, #3190	; 0xc76
   1e440:	4282      	cmp	r2, r0
   1e442:	d807      	bhi.n	1e454 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1e444:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e448:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1e44c:	bf34      	ite	cc
   1e44e:	2001      	movcc	r0, #1
   1e450:	2000      	movcs	r0, #0
}
   1e452:	bd10      	pop	{r4, pc}
		return false;
   1e454:	2000      	movs	r0, #0
   1e456:	e7fc      	b.n	1e452 <bt_le_conn_params_valid+0x3a>

0001e458 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1e458:	7a03      	ldrb	r3, [r0, #8]
   1e45a:	07d9      	lsls	r1, r3, #31
   1e45c:	d504      	bpl.n	1e468 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1e45e:	f023 0301 	bic.w	r3, r3, #1
   1e462:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1e464:	f7f6 bff6 	b.w	15454 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1e468:	0799      	lsls	r1, r3, #30
   1e46a:	d504      	bpl.n	1e476 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1e46c:	f023 0302 	bic.w	r3, r3, #2
   1e470:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1e472:	f7f7 b879 	b.w	15568 <bt_id_del>
}
   1e476:	4770      	bx	lr

0001e478 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1e478:	2301      	movs	r3, #1
{
   1e47a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e47c:	2106      	movs	r1, #6
{
   1e47e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e480:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e484:	f7fc f984 	bl	1a790 <bt_rand>
	if (err) {
   1e488:	b918      	cbnz	r0, 1e492 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1e48a:	79a3      	ldrb	r3, [r4, #6]
   1e48c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e490:	71a3      	strb	r3, [r4, #6]
}
   1e492:	bd10      	pop	{r4, pc}

0001e494 <bt_send>:
		return bt_hci_ecc_send(buf);
   1e494:	f7f6 b958 	b.w	14748 <bt_hci_ecc_send>

0001e498 <bt_addr_le_is_bonded>:
{
   1e498:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1e49a:	f7fa ff07 	bl	192ac <bt_keys_find_addr>
		return keys && keys->keys;
   1e49e:	b118      	cbz	r0, 1e4a8 <bt_addr_le_is_bonded+0x10>
   1e4a0:	89c0      	ldrh	r0, [r0, #14]
   1e4a2:	3800      	subs	r0, #0
   1e4a4:	bf18      	it	ne
   1e4a6:	2001      	movne	r0, #1
}
   1e4a8:	bd08      	pop	{r3, pc}

0001e4aa <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1e4aa:	6880      	ldr	r0, [r0, #8]
   1e4ac:	f7f7 bc98 	b.w	15de0 <enh_conn_complete>

0001e4b0 <le_legacy_conn_complete>:
{
   1e4b0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e4b2:	6881      	ldr	r1, [r0, #8]
{
   1e4b4:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1e4b6:	780b      	ldrb	r3, [r1, #0]
   1e4b8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1e4bc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1e4c0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1e4c4:	78cb      	ldrb	r3, [r1, #3]
   1e4c6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1e4ca:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e4ce:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1e4d2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1e4d6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1e4da:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1e4de:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1e4e2:	7c4b      	ldrb	r3, [r1, #17]
   1e4e4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1e4e8:	a803      	add	r0, sp, #12
   1e4ea:	3104      	adds	r1, #4
   1e4ec:	f7ff fc88 	bl	1de00 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e4f0:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1e4f2:	4669      	mov	r1, sp
   1e4f4:	2206      	movs	r2, #6
   1e4f6:	f10d 0013 	add.w	r0, sp, #19
   1e4fa:	9400      	str	r4, [sp, #0]
   1e4fc:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e500:	f7ff fb36 	bl	1db70 <memcpy>
   1e504:	2206      	movs	r2, #6
   1e506:	4669      	mov	r1, sp
   1e508:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e50c:	9400      	str	r4, [sp, #0]
   1e50e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1e512:	f7ff fb2d 	bl	1db70 <memcpy>
	enh_conn_complete(&enh);
   1e516:	a802      	add	r0, sp, #8
   1e518:	f7f7 fc62 	bl	15de0 <enh_conn_complete>
}
   1e51c:	b00a      	add	sp, #40	; 0x28
   1e51e:	bd10      	pop	{r4, pc}

0001e520 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e520:	f3bf 8f5b 	dmb	ish
   1e524:	6800      	ldr	r0, [r0, #0]
   1e526:	f3bf 8f5b 	dmb	ish
}
   1e52a:	4770      	bx	lr

0001e52c <atomic_inc>:
{
   1e52c:	4603      	mov	r3, r0
}
   1e52e:	f3bf 8f5b 	dmb	ish
   1e532:	e853 0f00 	ldrex	r0, [r3]
   1e536:	1c42      	adds	r2, r0, #1
   1e538:	e843 2100 	strex	r1, r2, [r3]
   1e53c:	2900      	cmp	r1, #0
   1e53e:	d1f8      	bne.n	1e532 <atomic_inc+0x6>
   1e540:	f3bf 8f5b 	dmb	ish
   1e544:	4770      	bx	lr

0001e546 <tx_notify>:
{
   1e546:	b570      	push	{r4, r5, r6, lr}
   1e548:	4604      	mov	r4, r0
	__asm__ volatile(
   1e54a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e54e:	f3ef 8311 	mrs	r3, BASEPRI
   1e552:	f382 8811 	msr	BASEPRI, r2
   1e556:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1e55a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e55c:	b920      	cbnz	r0, 1e568 <tx_notify+0x22>
	__asm__ volatile(
   1e55e:	f383 8811 	msr	BASEPRI, r3
   1e562:	f3bf 8f6f 	isb	sy
}
   1e566:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e568:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e56a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e56c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e56e:	4288      	cmp	r0, r1
	list->tail = node;
   1e570:	bf08      	it	eq
   1e572:	6262      	streq	r2, [r4, #36]	; 0x24
   1e574:	f383 8811 	msr	BASEPRI, r3
   1e578:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e57c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e580:	f7f7 fdbc 	bl	160fc <tx_free>
		cb(conn, user_data);
   1e584:	4631      	mov	r1, r6
   1e586:	4620      	mov	r0, r4
   1e588:	47a8      	blx	r5
	while (1) {
   1e58a:	e7de      	b.n	1e54a <tx_notify+0x4>

0001e58c <tx_complete_work>:
	tx_notify(conn);
   1e58c:	3828      	subs	r0, #40	; 0x28
   1e58e:	f7ff bfda 	b.w	1e546 <tx_notify>

0001e592 <bt_conn_new>:
{
   1e592:	b570      	push	{r4, r5, r6, lr}
   1e594:	460a      	mov	r2, r1
   1e596:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1e598:	2600      	movs	r6, #0
   1e59a:	4296      	cmp	r6, r2
   1e59c:	d102      	bne.n	1e5a4 <bt_conn_new+0x12>
		return NULL;
   1e59e:	2400      	movs	r4, #0
}
   1e5a0:	4620      	mov	r0, r4
   1e5a2:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   1e5a4:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1e5a8:	4628      	mov	r0, r5
   1e5aa:	f7ff ffb9 	bl	1e520 <atomic_get>
   1e5ae:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1e5b2:	4601      	mov	r1, r0
   1e5b4:	b110      	cbz	r0, 1e5bc <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   1e5b6:	3601      	adds	r6, #1
   1e5b8:	461c      	mov	r4, r3
   1e5ba:	e7ee      	b.n	1e59a <bt_conn_new+0x8>
	if (!conn) {
   1e5bc:	2c00      	cmp	r4, #0
   1e5be:	d0ef      	beq.n	1e5a0 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   1e5c0:	22b8      	movs	r2, #184	; 0xb8
   1e5c2:	4620      	mov	r0, r4
   1e5c4:	f7ff faff 	bl	1dbc6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e5c8:	f3bf 8f5b 	dmb	ish
   1e5cc:	2301      	movs	r3, #1
   1e5ce:	e855 2f00 	ldrex	r2, [r5]
   1e5d2:	e845 3100 	strex	r1, r3, [r5]
   1e5d6:	2900      	cmp	r1, #0
   1e5d8:	d1f9      	bne.n	1e5ce <bt_conn_new+0x3c>
   1e5da:	f3bf 8f5b 	dmb	ish
   1e5de:	e7df      	b.n	1e5a0 <bt_conn_new+0xe>

0001e5e0 <bt_conn_set_security>:
{
   1e5e0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e5e2:	7b43      	ldrb	r3, [r0, #13]
   1e5e4:	2b07      	cmp	r3, #7
{
   1e5e6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1e5e8:	d128      	bne.n	1e63c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1e5ea:	7a43      	ldrb	r3, [r0, #9]
   1e5ec:	428b      	cmp	r3, r1
   1e5ee:	d228      	bcs.n	1e642 <bt_conn_set_security+0x62>
   1e5f0:	7a83      	ldrb	r3, [r0, #10]
   1e5f2:	428b      	cmp	r3, r1
   1e5f4:	d225      	bcs.n	1e642 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e5f6:	f3bf 8f5b 	dmb	ish
	if (val) {
   1e5fa:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1e5fc:	f100 0304 	add.w	r3, r0, #4
   1e600:	d513      	bpl.n	1e62a <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e602:	e853 2f00 	ldrex	r2, [r3]
   1e606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1e60a:	e843 2000 	strex	r0, r2, [r3]
   1e60e:	2800      	cmp	r0, #0
   1e610:	d1f7      	bne.n	1e602 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e612:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e616:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1e61a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1e61c:	4620      	mov	r0, r4
   1e61e:	f7fa fceb 	bl	18ff8 <bt_smp_start_security>
	if (err) {
   1e622:	b108      	cbz	r0, 1e628 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1e624:	7a63      	ldrb	r3, [r4, #9]
   1e626:	72a3      	strb	r3, [r4, #10]
}
   1e628:	bd10      	pop	{r4, pc}
   1e62a:	e853 2f00 	ldrex	r2, [r3]
   1e62e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1e632:	e843 2000 	strex	r0, r2, [r3]
   1e636:	2800      	cmp	r0, #0
   1e638:	d0eb      	beq.n	1e612 <bt_conn_set_security+0x32>
   1e63a:	e7f6      	b.n	1e62a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1e63c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1e640:	e7f2      	b.n	1e628 <bt_conn_set_security+0x48>
		return 0;
   1e642:	2000      	movs	r0, #0
   1e644:	e7f0      	b.n	1e628 <bt_conn_set_security+0x48>

0001e646 <bt_conn_get_security>:
}
   1e646:	7a40      	ldrb	r0, [r0, #9]
   1e648:	4770      	bx	lr

0001e64a <bt_conn_reset_rx_state>:
{
   1e64a:	b510      	push	{r4, lr}
   1e64c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e64e:	6900      	ldr	r0, [r0, #16]
   1e650:	b118      	cbz	r0, 1e65a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e652:	f7fa fef7 	bl	19444 <net_buf_unref>
	conn->rx = NULL;
   1e656:	2300      	movs	r3, #0
   1e658:	6123      	str	r3, [r4, #16]
}
   1e65a:	bd10      	pop	{r4, pc}

0001e65c <bt_conn_recv>:
{
   1e65c:	b570      	push	{r4, r5, r6, lr}
   1e65e:	4616      	mov	r6, r2
   1e660:	4604      	mov	r4, r0
   1e662:	460d      	mov	r5, r1
	tx_notify(conn);
   1e664:	f7ff ff6f 	bl	1e546 <tx_notify>
	switch (flags) {
   1e668:	2e01      	cmp	r6, #1
   1e66a:	d01a      	beq.n	1e6a2 <bt_conn_recv+0x46>
   1e66c:	2e02      	cmp	r6, #2
   1e66e:	d11a      	bne.n	1e6a6 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1e670:	6923      	ldr	r3, [r4, #16]
   1e672:	b113      	cbz	r3, 1e67a <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1e674:	4620      	mov	r0, r4
   1e676:	f7ff ffe8 	bl	1e64a <bt_conn_reset_rx_state>
		conn->rx = buf;
   1e67a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1e67c:	6921      	ldr	r1, [r4, #16]
   1e67e:	898a      	ldrh	r2, [r1, #12]
   1e680:	2a01      	cmp	r2, #1
   1e682:	d931      	bls.n	1e6e8 <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1e684:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1e686:	7845      	ldrb	r5, [r0, #1]
   1e688:	7803      	ldrb	r3, [r0, #0]
   1e68a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1e68e:	3304      	adds	r3, #4
   1e690:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1e692:	429a      	cmp	r2, r3
   1e694:	d328      	bcc.n	1e6e8 <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1e696:	d920      	bls.n	1e6da <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1e698:	4620      	mov	r0, r4
}
   1e69a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1e69e:	f7ff bfd4 	b.w	1e64a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1e6a2:	6920      	ldr	r0, [r4, #16]
   1e6a4:	b918      	cbnz	r0, 1e6ae <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1e6a6:	4620      	mov	r0, r4
   1e6a8:	f7ff ffcf 	bl	1e64a <bt_conn_reset_rx_state>
   1e6ac:	e001      	b.n	1e6b2 <bt_conn_recv+0x56>
		if (!buf->len) {
   1e6ae:	89ae      	ldrh	r6, [r5, #12]
   1e6b0:	b926      	cbnz	r6, 1e6bc <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1e6b2:	4628      	mov	r0, r5
}
   1e6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1e6b8:	f7fa bec4 	b.w	19444 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1e6bc:	3008      	adds	r0, #8
   1e6be:	f001 ff8c 	bl	205da <net_buf_simple_tailroom>
   1e6c2:	4286      	cmp	r6, r0
   1e6c4:	d8ef      	bhi.n	1e6a6 <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1e6c6:	6920      	ldr	r0, [r4, #16]
   1e6c8:	89aa      	ldrh	r2, [r5, #12]
   1e6ca:	68a9      	ldr	r1, [r5, #8]
   1e6cc:	3008      	adds	r0, #8
   1e6ce:	f001 ff4f 	bl	20570 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1e6d2:	4628      	mov	r0, r5
   1e6d4:	f7fa feb6 	bl	19444 <net_buf_unref>
		break;
   1e6d8:	e7d0      	b.n	1e67c <bt_conn_recv+0x20>
	conn->rx = NULL;
   1e6da:	2300      	movs	r3, #0
   1e6dc:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1e6de:	4620      	mov	r0, r4
}
   1e6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1e6e4:	f000 b9a6 	b.w	1ea34 <bt_l2cap_recv>
}
   1e6e8:	bd70      	pop	{r4, r5, r6, pc}

0001e6ea <conn_lookup_handle>:
{
   1e6ea:	b538      	push	{r3, r4, r5, lr}
   1e6ec:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   1e6f0:	2400      	movs	r4, #0
   1e6f2:	428c      	cmp	r4, r1
   1e6f4:	d101      	bne.n	1e6fa <conn_lookup_handle+0x10>
	return NULL;
   1e6f6:	2500      	movs	r5, #0
   1e6f8:	e013      	b.n	1e722 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   1e6fa:	4618      	mov	r0, r3
   1e6fc:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   1e700:	f7ff ff0e 	bl	1e520 <atomic_get>
   1e704:	b178      	cbz	r0, 1e726 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   1e706:	f813 0c47 	ldrb.w	r0, [r3, #-71]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e70a:	2801      	cmp	r0, #1
   1e70c:	d002      	beq.n	1e714 <conn_lookup_handle+0x2a>
   1e70e:	3807      	subs	r0, #7
   1e710:	2801      	cmp	r0, #1
   1e712:	d808      	bhi.n	1e726 <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   1e714:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   1e718:	4290      	cmp	r0, r2
   1e71a:	d104      	bne.n	1e726 <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   1e71c:	4618      	mov	r0, r3
   1e71e:	f7ff ff05 	bl	1e52c <atomic_inc>
}
   1e722:	4628      	mov	r0, r5
   1e724:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1e726:	3401      	adds	r4, #1
   1e728:	33b8      	adds	r3, #184	; 0xb8
   1e72a:	e7e2      	b.n	1e6f2 <conn_lookup_handle+0x8>

0001e72c <bt_conn_is_peer_addr_le>:
{
   1e72c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e72e:	7a03      	ldrb	r3, [r0, #8]
   1e730:	428b      	cmp	r3, r1
{
   1e732:	4604      	mov	r4, r0
   1e734:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e736:	d115      	bne.n	1e764 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e738:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e73c:	2207      	movs	r2, #7
   1e73e:	4628      	mov	r0, r5
   1e740:	f7ff fa06 	bl	1db50 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e744:	b180      	cbz	r0, 1e768 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e746:	78e3      	ldrb	r3, [r4, #3]
   1e748:	2207      	movs	r2, #7
   1e74a:	b943      	cbnz	r3, 1e75e <bt_conn_is_peer_addr_le+0x32>
   1e74c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e750:	4628      	mov	r0, r5
   1e752:	f7ff f9fd 	bl	1db50 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e756:	fab0 f080 	clz	r0, r0
   1e75a:	0940      	lsrs	r0, r0, #5
}
   1e75c:	bd38      	pop	{r3, r4, r5, pc}
   1e75e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e762:	e7f5      	b.n	1e750 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e764:	2000      	movs	r0, #0
   1e766:	e7f9      	b.n	1e75c <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e768:	2001      	movs	r0, #1
   1e76a:	e7f7      	b.n	1e75c <bt_conn_is_peer_addr_le+0x30>

0001e76c <bt_conn_unref>:
{
   1e76c:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1e76e:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e770:	f3bf 8f5b 	dmb	ish
   1e774:	e850 3f00 	ldrex	r3, [r0]
   1e778:	3b01      	subs	r3, #1
   1e77a:	e840 3200 	strex	r2, r3, [r0]
   1e77e:	2a00      	cmp	r2, #0
   1e780:	d1f8      	bne.n	1e774 <bt_conn_unref+0x8>
   1e782:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1e786:	f7ff fecb 	bl	1e520 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1e78a:	b918      	cbnz	r0, 1e794 <bt_conn_unref+0x28>
}
   1e78c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1e790:	f7f7 baf0 	b.w	15d74 <bt_le_adv_resume>
}
   1e794:	bd08      	pop	{r3, pc}

0001e796 <bt_conn_exists_le>:
{
   1e796:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1e798:	f7f7 fec4 	bl	16524 <bt_conn_lookup_addr_le>
	if (conn) {
   1e79c:	b110      	cbz	r0, 1e7a4 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1e79e:	f7ff ffe5 	bl	1e76c <bt_conn_unref>
		return true;
   1e7a2:	2001      	movs	r0, #1
}
   1e7a4:	bd08      	pop	{r3, pc}

0001e7a6 <bt_conn_get_dst>:
}
   1e7a6:	3088      	adds	r0, #136	; 0x88
   1e7a8:	4770      	bx	lr

0001e7aa <bt_conn_disconnect>:
{
   1e7aa:	b538      	push	{r3, r4, r5, lr}
   1e7ac:	7b43      	ldrb	r3, [r0, #13]
   1e7ae:	3b02      	subs	r3, #2
   1e7b0:	4604      	mov	r4, r0
   1e7b2:	2b06      	cmp	r3, #6
   1e7b4:	d805      	bhi.n	1e7c2 <bt_conn_disconnect+0x18>
   1e7b6:	e8df f003 	tbb	[pc, r3]
   1e7ba:	0408      	.short	0x0408
   1e7bc:	160c0e04 	.word	0x160c0e04
   1e7c0:	0c          	.byte	0x0c
   1e7c1:	00          	.byte	0x00
	switch (conn->state) {
   1e7c2:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1e7c6:	4628      	mov	r0, r5
   1e7c8:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1e7ca:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e7cc:	2100      	movs	r1, #0
   1e7ce:	f7f7 feeb 	bl	165a8 <bt_conn_set_state>
		return 0;
   1e7d2:	2500      	movs	r5, #0
   1e7d4:	e7f7      	b.n	1e7c6 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1e7d6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e7d8:	2100      	movs	r1, #0
   1e7da:	f7f7 fee5 	bl	165a8 <bt_conn_set_state>
}
   1e7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   1e7e2:	f7f7 ba7b 	b.w	15cdc <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   1e7e6:	8800      	ldrh	r0, [r0, #0]
   1e7e8:	f7ff fd7e 	bl	1e2e8 <bt_hci_disconnect>
	if (err) {
   1e7ec:	4605      	mov	r5, r0
   1e7ee:	2800      	cmp	r0, #0
   1e7f0:	d1e9      	bne.n	1e7c6 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1e7f2:	2108      	movs	r1, #8
   1e7f4:	4620      	mov	r0, r4
   1e7f6:	f7f7 fed7 	bl	165a8 <bt_conn_set_state>
	return 0;
   1e7fa:	e7e4      	b.n	1e7c6 <bt_conn_disconnect+0x1c>

0001e7fc <bt_conn_le_conn_update>:
{
   1e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7fe:	4607      	mov	r7, r0
   1e800:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e802:	f242 0013 	movw	r0, #8211	; 0x2013
   1e806:	210e      	movs	r1, #14
   1e808:	f7f6 fbe4 	bl	14fd4 <bt_hci_cmd_create>
	if (!buf) {
   1e80c:	4606      	mov	r6, r0
   1e80e:	b1d0      	cbz	r0, 1e846 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1e810:	210e      	movs	r1, #14
   1e812:	3008      	adds	r0, #8
   1e814:	f001 fea6 	bl	20564 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e818:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1e81a:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e81c:	2100      	movs	r1, #0
   1e81e:	f7ff f9d2 	bl	1dbc6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e822:	883b      	ldrh	r3, [r7, #0]
   1e824:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e826:	882b      	ldrh	r3, [r5, #0]
   1e828:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e82a:	886b      	ldrh	r3, [r5, #2]
   1e82c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e82e:	88ab      	ldrh	r3, [r5, #4]
   1e830:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e832:	88eb      	ldrh	r3, [r5, #6]
   1e834:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e836:	4631      	mov	r1, r6
   1e838:	2200      	movs	r2, #0
}
   1e83a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e83e:	f242 0013 	movw	r0, #8211	; 0x2013
   1e842:	f7f6 bc21 	b.w	15088 <bt_hci_cmd_send_sync>
}
   1e846:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e84c <l2cap_connected>:
}
   1e84c:	4770      	bx	lr

0001e84e <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1e84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e850:	4607      	mov	r7, r0
   1e852:	460e      	mov	r6, r1
   1e854:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1e856:	2300      	movs	r3, #0
   1e858:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e85c:	2104      	movs	r1, #4
   1e85e:	2000      	movs	r0, #0
   1e860:	f7f7 ffcc 	bl	167fc <bt_conn_create_pdu_timeout>
	if (!buf) {
   1e864:	4604      	mov	r4, r0
   1e866:	b130      	cbz	r0, 1e876 <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e868:	2104      	movs	r1, #4
   1e86a:	3008      	adds	r0, #8
   1e86c:	f001 fe7a 	bl	20564 <net_buf_simple_add>
	hdr->code = code;
   1e870:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1e872:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1e874:	8045      	strh	r5, [r0, #2]
}
   1e876:	4620      	mov	r0, r4
   1e878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e87a <l2cap_disconnected>:
   1e87a:	4770      	bx	lr

0001e87c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e87c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1e87e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e880:	b17b      	cbz	r3, 1e8a2 <bt_l2cap_chan_remove+0x26>
   1e882:	3b08      	subs	r3, #8
   1e884:	2200      	movs	r2, #0
   1e886:	b163      	cbz	r3, 1e8a2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e888:	428b      	cmp	r3, r1
   1e88a:	f103 0408 	add.w	r4, r3, #8
   1e88e:	d10f      	bne.n	1e8b0 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e890:	688b      	ldr	r3, [r1, #8]
   1e892:	b93a      	cbnz	r2, 1e8a4 <bt_l2cap_chan_remove+0x28>
   1e894:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1e896:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1e898:	4294      	cmp	r4, r2
   1e89a:	d100      	bne.n	1e89e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e89c:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1e89e:	2300      	movs	r3, #0
   1e8a0:	608b      	str	r3, [r1, #8]
}
   1e8a2:	bd10      	pop	{r4, pc}
   1e8a4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e8a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1e8a8:	429c      	cmp	r4, r3
	list->tail = node;
   1e8aa:	bf08      	it	eq
   1e8ac:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1e8ae:	e7f6      	b.n	1e89e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e8b0:	2c00      	cmp	r4, #0
   1e8b2:	d0f6      	beq.n	1e8a2 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e8b4:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d0f3      	beq.n	1e8a2 <bt_l2cap_chan_remove+0x26>
   1e8ba:	3b08      	subs	r3, #8
   1e8bc:	4622      	mov	r2, r4
   1e8be:	e7e2      	b.n	1e886 <bt_l2cap_chan_remove+0xa>

0001e8c0 <bt_l2cap_chan_del>:
{
   1e8c0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e8c2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e8c6:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e8c8:	b123      	cbz	r3, 1e8d4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e8ca:	686b      	ldr	r3, [r5, #4]
   1e8cc:	b103      	cbz	r3, 1e8d0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e8ce:	4798      	blx	r3
	chan->conn = NULL;
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e8d4:	68e3      	ldr	r3, [r4, #12]
   1e8d6:	b10b      	cbz	r3, 1e8dc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e8d8:	4620      	mov	r0, r4
   1e8da:	4798      	blx	r3
	if (ops->released) {
   1e8dc:	69eb      	ldr	r3, [r5, #28]
   1e8de:	b11b      	cbz	r3, 1e8e8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e8e0:	4620      	mov	r0, r4
}
   1e8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e8e6:	4718      	bx	r3
}
   1e8e8:	bd70      	pop	{r4, r5, r6, pc}

0001e8ea <l2cap_rtx_timeout>:
{
   1e8ea:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1e8ec:	f1a0 0110 	sub.w	r1, r0, #16
   1e8f0:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e8f4:	f7ff ffc2 	bl	1e87c <bt_l2cap_chan_remove>
}
   1e8f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1e8fc:	4608      	mov	r0, r1
   1e8fe:	f7ff bfdf 	b.w	1e8c0 <bt_l2cap_chan_del>

0001e902 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e902:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1e904:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e906:	b18b      	cbz	r3, 1e92c <bt_l2cap_disconnected+0x2a>
   1e908:	f1b3 0008 	subs.w	r0, r3, #8
   1e90c:	d00e      	beq.n	1e92c <bt_l2cap_disconnected+0x2a>
   1e90e:	681c      	ldr	r4, [r3, #0]
   1e910:	b104      	cbz	r4, 1e914 <bt_l2cap_disconnected+0x12>
   1e912:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e914:	f7ff ffd4 	bl	1e8c0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e918:	b144      	cbz	r4, 1e92c <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e91a:	f114 0308 	adds.w	r3, r4, #8
   1e91e:	d002      	beq.n	1e926 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e920:	68a3      	ldr	r3, [r4, #8]
   1e922:	b103      	cbz	r3, 1e926 <bt_l2cap_disconnected+0x24>
   1e924:	3b08      	subs	r3, #8
{
   1e926:	4620      	mov	r0, r4
   1e928:	461c      	mov	r4, r3
   1e92a:	e7f3      	b.n	1e914 <bt_l2cap_disconnected+0x12>
}
   1e92c:	bd10      	pop	{r4, pc}

0001e92e <bt_l2cap_security_changed>:
{
   1e92e:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e930:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1e932:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e934:	b1a3      	cbz	r3, 1e960 <bt_l2cap_security_changed+0x32>
   1e936:	f1b3 0008 	subs.w	r0, r3, #8
   1e93a:	d011      	beq.n	1e960 <bt_l2cap_security_changed+0x32>
   1e93c:	681c      	ldr	r4, [r3, #0]
   1e93e:	b104      	cbz	r4, 1e942 <bt_l2cap_security_changed+0x14>
   1e940:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1e942:	6843      	ldr	r3, [r0, #4]
   1e944:	689b      	ldr	r3, [r3, #8]
   1e946:	b10b      	cbz	r3, 1e94c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1e948:	4629      	mov	r1, r5
   1e94a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e94c:	b144      	cbz	r4, 1e960 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e94e:	f114 0308 	adds.w	r3, r4, #8
   1e952:	d002      	beq.n	1e95a <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e954:	68a3      	ldr	r3, [r4, #8]
   1e956:	b103      	cbz	r3, 1e95a <bt_l2cap_security_changed+0x2c>
   1e958:	3b08      	subs	r3, #8
{
   1e95a:	4620      	mov	r0, r4
   1e95c:	461c      	mov	r4, r3
   1e95e:	e7f0      	b.n	1e942 <bt_l2cap_security_changed+0x14>
}
   1e960:	bd38      	pop	{r3, r4, r5, pc}

0001e962 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e962:	3104      	adds	r1, #4
   1e964:	f7f7 bf4a 	b.w	167fc <bt_conn_create_pdu_timeout>

0001e968 <bt_l2cap_send_cb>:
{
   1e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e96c:	4614      	mov	r4, r2
   1e96e:	4605      	mov	r5, r0
   1e970:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1e972:	f102 0008 	add.w	r0, r2, #8
   1e976:	2104      	movs	r1, #4
{
   1e978:	461e      	mov	r6, r3
   1e97a:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1e97e:	f001 fe08 	bl	20592 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e982:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e984:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e986:	3a04      	subs	r2, #4
   1e988:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e98a:	4643      	mov	r3, r8
   1e98c:	4632      	mov	r2, r6
   1e98e:	4621      	mov	r1, r4
   1e990:	4628      	mov	r0, r5
}
   1e992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e996:	f7f7 bd0d 	b.w	163b4 <bt_conn_send_cb>

0001e99a <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1e99a:	898b      	ldrh	r3, [r1, #12]
   1e99c:	2b03      	cmp	r3, #3
{
   1e99e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e9a0:	4605      	mov	r5, r0
   1e9a2:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e9a4:	d923      	bls.n	1e9ee <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1e9a6:	2104      	movs	r1, #4
   1e9a8:	f104 0008 	add.w	r0, r4, #8
   1e9ac:	f001 fe01 	bl	205b2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1e9b0:	89a3      	ldrh	r3, [r4, #12]
   1e9b2:	8842      	ldrh	r2, [r0, #2]
   1e9b4:	429a      	cmp	r2, r3
   1e9b6:	d11a      	bne.n	1e9ee <l2cap_recv+0x54>
	if (!hdr->ident) {
   1e9b8:	7841      	ldrb	r1, [r0, #1]
   1e9ba:	b1c1      	cbz	r1, 1e9ee <l2cap_recv+0x54>
	switch (hdr->code) {
   1e9bc:	7803      	ldrb	r3, [r0, #0]
   1e9be:	2b01      	cmp	r3, #1
   1e9c0:	d015      	beq.n	1e9ee <l2cap_recv+0x54>
   1e9c2:	2b13      	cmp	r3, #19
   1e9c4:	d013      	beq.n	1e9ee <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e9c6:	2202      	movs	r2, #2
   1e9c8:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1e9ca:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e9cc:	f7ff ff3f 	bl	1e84e <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1e9d0:	4604      	mov	r4, r0
   1e9d2:	b160      	cbz	r0, 1e9ee <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   1e9d4:	2102      	movs	r1, #2
   1e9d6:	3008      	adds	r0, #8
   1e9d8:	f001 fdc4 	bl	20564 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1e9dc:	2300      	movs	r3, #0
   1e9de:	7003      	strb	r3, [r0, #0]
   1e9e0:	7043      	strb	r3, [r0, #1]
   1e9e2:	4622      	mov	r2, r4
   1e9e4:	9300      	str	r3, [sp, #0]
   1e9e6:	2105      	movs	r1, #5
   1e9e8:	4628      	mov	r0, r5
   1e9ea:	f7ff ffbd 	bl	1e968 <bt_l2cap_send_cb>
}
   1e9ee:	2000      	movs	r0, #0
   1e9f0:	b003      	add	sp, #12
   1e9f2:	bd30      	pop	{r4, r5, pc}

0001e9f4 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e9f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e9f6:	b160      	cbz	r0, 1ea12 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e9f8:	3808      	subs	r0, #8
   1e9fa:	b900      	cbnz	r0, 1e9fe <bt_l2cap_le_lookup_tx_cid+0xa>
   1e9fc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e9fe:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1ea02:	428b      	cmp	r3, r1
   1ea04:	d005      	beq.n	1ea12 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea06:	f110 0308 	adds.w	r3, r0, #8
   1ea0a:	d001      	beq.n	1ea10 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea0c:	6880      	ldr	r0, [r0, #8]
   1ea0e:	e7f2      	b.n	1e9f6 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ea10:	4618      	mov	r0, r3
}
   1ea12:	4770      	bx	lr

0001ea14 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ea14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1ea16:	b160      	cbz	r0, 1ea32 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ea18:	3808      	subs	r0, #8
   1ea1a:	b900      	cbnz	r0, 1ea1e <bt_l2cap_le_lookup_rx_cid+0xa>
   1ea1c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ea1e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1ea22:	428b      	cmp	r3, r1
   1ea24:	d005      	beq.n	1ea32 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea26:	f110 0308 	adds.w	r3, r0, #8
   1ea2a:	d001      	beq.n	1ea30 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea2c:	6880      	ldr	r0, [r0, #8]
   1ea2e:	e7f2      	b.n	1ea16 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ea30:	4618      	mov	r0, r3
}
   1ea32:	4770      	bx	lr

0001ea34 <bt_l2cap_recv>:
{
   1ea34:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ea36:	898b      	ldrh	r3, [r1, #12]
   1ea38:	2b03      	cmp	r3, #3
{
   1ea3a:	4605      	mov	r5, r0
   1ea3c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ea3e:	d804      	bhi.n	1ea4a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1ea40:	4620      	mov	r0, r4
}
   1ea42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1ea46:	f7fa bcfd 	b.w	19444 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1ea4a:	2104      	movs	r1, #4
   1ea4c:	f104 0008 	add.w	r0, r4, #8
   1ea50:	f001 fdaf 	bl	205b2 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1ea54:	8841      	ldrh	r1, [r0, #2]
   1ea56:	4628      	mov	r0, r5
   1ea58:	f7ff ffdc 	bl	1ea14 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ea5c:	2800      	cmp	r0, #0
   1ea5e:	d0ef      	beq.n	1ea40 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1ea60:	6843      	ldr	r3, [r0, #4]
   1ea62:	4621      	mov	r1, r4
   1ea64:	691b      	ldr	r3, [r3, #16]
   1ea66:	4798      	blx	r3
   1ea68:	e7ea      	b.n	1ea40 <bt_l2cap_recv+0xc>

0001ea6a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ea6a:	4770      	bx	lr

0001ea6c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ea6c:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1ea6e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ea70:	b128      	cbz	r0, 1ea7e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ea72:	6859      	ldr	r1, [r3, #4]
   1ea74:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ea76:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ea78:	4288      	cmp	r0, r1
	list->tail = node;
   1ea7a:	bf08      	it	eq
   1ea7c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ea7e:	4770      	bx	lr

0001ea80 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea80:	4603      	mov	r3, r0
   1ea82:	6800      	ldr	r0, [r0, #0]
   1ea84:	2200      	movs	r2, #0
   1ea86:	b900      	cbnz	r0, 1ea8a <sys_slist_find_and_remove+0xa>
   1ea88:	4770      	bx	lr
   1ea8a:	4288      	cmp	r0, r1
   1ea8c:	d110      	bne.n	1eab0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1ea8e:	6808      	ldr	r0, [r1, #0]
   1ea90:	b942      	cbnz	r2, 1eaa4 <sys_slist_find_and_remove+0x24>
   1ea92:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1ea94:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ea96:	4291      	cmp	r1, r2
   1ea98:	d100      	bne.n	1ea9c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1ea9a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1ea9c:	2300      	movs	r3, #0
   1ea9e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eaa0:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1eaa2:	4770      	bx	lr
	parent->next = child;
   1eaa4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1eaa6:	6858      	ldr	r0, [r3, #4]
   1eaa8:	4281      	cmp	r1, r0
	list->tail = node;
   1eaaa:	bf08      	it	eq
   1eaac:	605a      	streq	r2, [r3, #4]
}
   1eaae:	e7f5      	b.n	1ea9c <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eab0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eab2:	6800      	ldr	r0, [r0, #0]
   1eab4:	e7e7      	b.n	1ea86 <sys_slist_find_and_remove+0x6>

0001eab6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1eab6:	4603      	mov	r3, r0
	size_t bytes = 0;
   1eab8:	2000      	movs	r0, #0

	while (buf) {
   1eaba:	b903      	cbnz	r3, 1eabe <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1eabc:	4770      	bx	lr
		bytes += buf->len;
   1eabe:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1eac0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1eac2:	4410      	add	r0, r2
		buf = buf->frags;
   1eac4:	e7f9      	b.n	1eaba <net_buf_frags_len+0x4>

0001eac6 <att_sent>:
	if (chan->ops->sent) {
   1eac6:	684b      	ldr	r3, [r1, #4]
   1eac8:	695b      	ldr	r3, [r3, #20]
{
   1eaca:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1eacc:	b103      	cbz	r3, 1ead0 <att_sent+0xa>
		chan->ops->sent(chan);
   1eace:	4718      	bx	r3
}
   1ead0:	4770      	bx	lr

0001ead2 <attr_read_type_cb>:
{
   1ead2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ead4:	68d4      	ldr	r4, [r2, #12]
   1ead6:	7823      	ldrb	r3, [r4, #0]
   1ead8:	3102      	adds	r1, #2
   1eada:	b913      	cbnz	r3, 1eae2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1eadc:	7021      	strb	r1, [r4, #0]
	return true;
   1eade:	2001      	movs	r0, #1
   1eae0:	e006      	b.n	1eaf0 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1eae2:	428b      	cmp	r3, r1
   1eae4:	d0fb      	beq.n	1eade <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1eae6:	8983      	ldrh	r3, [r0, #12]
   1eae8:	3b02      	subs	r3, #2
   1eaea:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1eaec:	2000      	movs	r0, #0
   1eaee:	6110      	str	r0, [r2, #16]
}
   1eaf0:	bd10      	pop	{r4, pc}

0001eaf2 <att_prepare_write_req>:
}
   1eaf2:	2006      	movs	r0, #6
   1eaf4:	4770      	bx	lr

0001eaf6 <att_op_get_type>:
	switch (op) {
   1eaf6:	281e      	cmp	r0, #30
   1eaf8:	d816      	bhi.n	1eb28 <att_op_get_type+0x32>
   1eafa:	b308      	cbz	r0, 1eb40 <att_op_get_type+0x4a>
   1eafc:	1e43      	subs	r3, r0, #1
   1eafe:	2b1d      	cmp	r3, #29
   1eb00:	d81e      	bhi.n	1eb40 <att_op_get_type+0x4a>
   1eb02:	e8df f003 	tbb	[pc, r3]
   1eb06:	2317      	.short	0x2317
   1eb08:	23172317 	.word	0x23172317
   1eb0c:	23172317 	.word	0x23172317
   1eb10:	23172317 	.word	0x23172317
   1eb14:	23172317 	.word	0x23172317
   1eb18:	231d1d17 	.word	0x231d1d17
   1eb1c:	1d172317 	.word	0x1d172317
   1eb20:	0f1b1d19 	.word	0x0f1b1d19
   1eb24:	2004      	movs	r0, #4
   1eb26:	4770      	bx	lr
   1eb28:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1eb2c:	2b52      	cmp	r3, #82	; 0x52
   1eb2e:	d107      	bne.n	1eb40 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1eb30:	2000      	movs	r0, #0
}
   1eb32:	4770      	bx	lr
		return ATT_RESPONSE;
   1eb34:	2002      	movs	r0, #2
   1eb36:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1eb38:	2003      	movs	r0, #3
   1eb3a:	4770      	bx	lr
		return ATT_INDICATION;
   1eb3c:	2005      	movs	r0, #5
   1eb3e:	4770      	bx	lr
		return ATT_COMMAND;
   1eb40:	f010 0f40 	tst.w	r0, #64	; 0x40
   1eb44:	bf0c      	ite	eq
   1eb46:	2006      	moveq	r0, #6
   1eb48:	2000      	movne	r0, #0
   1eb4a:	4770      	bx	lr
		return ATT_REQUEST;
   1eb4c:	2001      	movs	r0, #1
   1eb4e:	4770      	bx	lr

0001eb50 <bt_gatt_foreach_attr>:
{
   1eb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1eb52:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1eb56:	2300      	movs	r3, #0
   1eb58:	9300      	str	r3, [sp, #0]
   1eb5a:	461a      	mov	r2, r3
   1eb5c:	f7f9 f85c 	bl	17c18 <bt_gatt_foreach_attr_type>
}
   1eb60:	b005      	add	sp, #20
   1eb62:	f85d fb04 	ldr.w	pc, [sp], #4

0001eb66 <att_chan_read>:
{
   1eb66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb6a:	4680      	mov	r8, r0
   1eb6c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1eb6e:	4610      	mov	r0, r2
{
   1eb70:	4699      	mov	r9, r3
   1eb72:	468b      	mov	fp, r1
   1eb74:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1eb76:	f7ff ff9e 	bl	1eab6 <net_buf_frags_len>
   1eb7a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1eb7e:	4283      	cmp	r3, r0
   1eb80:	d97a      	bls.n	1ec78 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1eb82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1eb86:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1eb88:	4630      	mov	r0, r6
   1eb8a:	f001 fcc9 	bl	20520 <net_buf_frag_last>
	size_t len, total = 0;
   1eb8e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1eb92:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1eb94:	4630      	mov	r0, r6
   1eb96:	f7ff ff8e 	bl	1eab6 <net_buf_frags_len>
   1eb9a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1eb9e:	f105 0708 	add.w	r7, r5, #8
   1eba2:	1a24      	subs	r4, r4, r0
   1eba4:	4638      	mov	r0, r7
   1eba6:	f001 fd18 	bl	205da <net_buf_simple_tailroom>
   1ebaa:	4284      	cmp	r4, r0
   1ebac:	d211      	bcs.n	1ebd2 <att_chan_read+0x6c>
   1ebae:	4630      	mov	r0, r6
   1ebb0:	f7ff ff81 	bl	1eab6 <net_buf_frags_len>
   1ebb4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ebb8:	1a24      	subs	r4, r4, r0
		if (!len) {
   1ebba:	bb34      	cbnz	r4, 1ec0a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ebbc:	79b0      	ldrb	r0, [r6, #6]
   1ebbe:	f7fa fb85 	bl	192cc <net_buf_pool_get>
   1ebc2:	2200      	movs	r2, #0
   1ebc4:	2300      	movs	r3, #0
   1ebc6:	f001 fc77 	bl	204b8 <net_buf_alloc_fixed>
			if (!frag) {
   1ebca:	4605      	mov	r5, r0
   1ebcc:	b930      	cbnz	r0, 1ebdc <att_chan_read+0x76>
	return total;
   1ebce:	4657      	mov	r7, sl
   1ebd0:	e02c      	b.n	1ec2c <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ebd2:	4638      	mov	r0, r7
   1ebd4:	f001 fd01 	bl	205da <net_buf_simple_tailroom>
   1ebd8:	4604      	mov	r4, r0
   1ebda:	e7ee      	b.n	1ebba <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1ebdc:	4601      	mov	r1, r0
   1ebde:	4630      	mov	r0, r6
   1ebe0:	f001 fcaf 	bl	20542 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ebe4:	4630      	mov	r0, r6
   1ebe6:	f7ff ff66 	bl	1eab6 <net_buf_frags_len>
   1ebea:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ebee:	f105 0708 	add.w	r7, r5, #8
   1ebf2:	1a24      	subs	r4, r4, r0
   1ebf4:	4638      	mov	r0, r7
   1ebf6:	f001 fcf0 	bl	205da <net_buf_simple_tailroom>
   1ebfa:	4284      	cmp	r4, r0
   1ebfc:	d21a      	bcs.n	1ec34 <att_chan_read+0xce>
   1ebfe:	4630      	mov	r0, r6
   1ec00:	f7ff ff59 	bl	1eab6 <net_buf_frags_len>
   1ec04:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1ec08:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ec0a:	68a9      	ldr	r1, [r5, #8]
   1ec0c:	89aa      	ldrh	r2, [r5, #12]
   1ec0e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ec12:	9803      	ldr	r0, [sp, #12]
   1ec14:	f8cd 9000 	str.w	r9, [sp]
   1ec18:	440a      	add	r2, r1
   1ec1a:	b2a3      	uxth	r3, r4
   1ec1c:	4659      	mov	r1, fp
   1ec1e:	47b8      	blx	r7
		if (read < 0) {
   1ec20:	1e07      	subs	r7, r0, #0
   1ec22:	da0c      	bge.n	1ec3e <att_chan_read+0xd8>
				return total;
   1ec24:	f1ba 0f00 	cmp.w	sl, #0
   1ec28:	bf18      	it	ne
   1ec2a:	4657      	movne	r7, sl
}
   1ec2c:	4638      	mov	r0, r7
   1ec2e:	b005      	add	sp, #20
   1ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1ec34:	4638      	mov	r0, r7
   1ec36:	f001 fcd0 	bl	205da <net_buf_simple_tailroom>
   1ec3a:	4604      	mov	r4, r0
   1ec3c:	e7e5      	b.n	1ec0a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1ec3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ec40:	b993      	cbnz	r3, 1ec68 <att_chan_read+0x102>
		net_buf_add(frag, read);
   1ec42:	4639      	mov	r1, r7
   1ec44:	f105 0008 	add.w	r0, r5, #8
   1ec48:	f001 fc8c 	bl	20564 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ec4c:	4630      	mov	r0, r6
   1ec4e:	f7ff ff32 	bl	1eab6 <net_buf_frags_len>
   1ec52:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1ec56:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ec58:	4283      	cmp	r3, r0
		total += read;
   1ec5a:	44ba      	add	sl, r7
		offset += read;
   1ec5c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ec60:	d9b5      	bls.n	1ebce <att_chan_read+0x68>
   1ec62:	42a7      	cmp	r7, r4
   1ec64:	d096      	beq.n	1eb94 <att_chan_read+0x2e>
   1ec66:	e7b2      	b.n	1ebce <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ec68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ec6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ec6c:	4639      	mov	r1, r7
   1ec6e:	4628      	mov	r0, r5
   1ec70:	4798      	blx	r3
   1ec72:	2800      	cmp	r0, #0
   1ec74:	d1e5      	bne.n	1ec42 <att_chan_read+0xdc>
   1ec76:	e7aa      	b.n	1ebce <att_chan_read+0x68>
		return 0;
   1ec78:	2700      	movs	r7, #0
   1ec7a:	e7d7      	b.n	1ec2c <att_chan_read+0xc6>

0001ec7c <find_type_cb>:
{
   1ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1ec80:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ec84:	b091      	sub	sp, #68	; 0x44
   1ec86:	4607      	mov	r7, r0
   1ec88:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ec8a:	2400      	movs	r4, #0
   1ec8c:	f642 0301 	movw	r3, #10241	; 0x2801
   1ec90:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ec92:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ec96:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1ec9a:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ec9c:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ec9e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1eca2:	f7ff f81f 	bl	1dce4 <bt_uuid_cmp>
   1eca6:	2800      	cmp	r0, #0
   1eca8:	d079      	beq.n	1ed9e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ecaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ecae:	6838      	ldr	r0, [r7, #0]
   1ecb0:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1ecb4:	a90b      	add	r1, sp, #44	; 0x2c
   1ecb6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ecba:	f7ff f813 	bl	1dce4 <bt_uuid_cmp>
   1ecbe:	4604      	mov	r4, r0
   1ecc0:	b148      	cbz	r0, 1ecd6 <find_type_cb+0x5a>
		if (data->group &&
   1ecc2:	68ab      	ldr	r3, [r5, #8]
   1ecc4:	b11b      	cbz	r3, 1ecce <find_type_cb+0x52>
   1ecc6:	885a      	ldrh	r2, [r3, #2]
   1ecc8:	42b2      	cmp	r2, r6
   1ecca:	d200      	bcs.n	1ecce <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1eccc:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ecce:	2001      	movs	r0, #1
}
   1ecd0:	b011      	add	sp, #68	; 0x44
   1ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ecd6:	6869      	ldr	r1, [r5, #4]
   1ecd8:	4608      	mov	r0, r1
   1ecda:	f7ff feec 	bl	1eab6 <net_buf_frags_len>
   1ecde:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1ece2:	1a1b      	subs	r3, r3, r0
   1ece4:	2b03      	cmp	r3, #3
   1ece6:	d922      	bls.n	1ed2e <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   1ece8:	4608      	mov	r0, r1
   1ecea:	f001 fc19 	bl	20520 <net_buf_frag_last>
   1ecee:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ecf0:	6868      	ldr	r0, [r5, #4]
   1ecf2:	f7ff fee0 	bl	1eab6 <net_buf_frags_len>
   1ecf6:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   1ecfa:	f104 0b08 	add.w	fp, r4, #8
   1ecfe:	ebaa 0a00 	sub.w	sl, sl, r0
   1ed02:	4658      	mov	r0, fp
   1ed04:	f001 fc69 	bl	205da <net_buf_simple_tailroom>
   1ed08:	4582      	cmp	sl, r0
   1ed0a:	d212      	bcs.n	1ed32 <find_type_cb+0xb6>
   1ed0c:	6868      	ldr	r0, [r5, #4]
   1ed0e:	f7ff fed2 	bl	1eab6 <net_buf_frags_len>
   1ed12:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1ed16:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ed18:	b998      	cbnz	r0, 1ed42 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ed1a:	686b      	ldr	r3, [r5, #4]
   1ed1c:	7998      	ldrb	r0, [r3, #6]
   1ed1e:	f7fa fad5 	bl	192cc <net_buf_pool_get>
   1ed22:	2200      	movs	r2, #0
   1ed24:	2300      	movs	r3, #0
   1ed26:	f001 fbc7 	bl	204b8 <net_buf_alloc_fixed>
		if (!frag) {
   1ed2a:	4604      	mov	r4, r0
   1ed2c:	b928      	cbnz	r0, 1ed3a <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   1ed2e:	4620      	mov	r0, r4
   1ed30:	e7ce      	b.n	1ecd0 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ed32:	4658      	mov	r0, fp
   1ed34:	f001 fc51 	bl	205da <net_buf_simple_tailroom>
   1ed38:	e7ee      	b.n	1ed18 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   1ed3a:	4601      	mov	r1, r0
   1ed3c:	6868      	ldr	r0, [r5, #4]
   1ed3e:	f001 fc00 	bl	20542 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1ed42:	2300      	movs	r3, #0
   1ed44:	9300      	str	r3, [sp, #0]
   1ed46:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ed4a:	4639      	mov	r1, r7
   1ed4c:	2310      	movs	r3, #16
   1ed4e:	aa02      	add	r2, sp, #8
   1ed50:	4640      	mov	r0, r8
   1ed52:	47c8      	blx	r9
	if (read < 0) {
   1ed54:	1e07      	subs	r7, r0, #0
   1ed56:	db22      	blt.n	1ed9e <find_type_cb+0x122>
	if (read != data->value_len) {
   1ed58:	7c2a      	ldrb	r2, [r5, #16]
   1ed5a:	68e8      	ldr	r0, [r5, #12]
   1ed5c:	42ba      	cmp	r2, r7
   1ed5e:	d01a      	beq.n	1ed96 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ed60:	4601      	mov	r1, r0
   1ed62:	a80b      	add	r0, sp, #44	; 0x2c
   1ed64:	f7fe ffe8 	bl	1dd38 <bt_uuid_create>
   1ed68:	b1c8      	cbz	r0, 1ed9e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ed6a:	b2fa      	uxtb	r2, r7
   1ed6c:	a902      	add	r1, sp, #8
   1ed6e:	a806      	add	r0, sp, #24
   1ed70:	f7fe ffe2 	bl	1dd38 <bt_uuid_create>
   1ed74:	b198      	cbz	r0, 1ed9e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ed76:	a906      	add	r1, sp, #24
   1ed78:	a80b      	add	r0, sp, #44	; 0x2c
   1ed7a:	f7fe ffb3 	bl	1dce4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ed7e:	b970      	cbnz	r0, 1ed9e <find_type_cb+0x122>
	data->err = 0x00;
   1ed80:	2300      	movs	r3, #0
   1ed82:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ed84:	2104      	movs	r1, #4
   1ed86:	f104 0008 	add.w	r0, r4, #8
   1ed8a:	f001 fbeb 	bl	20564 <net_buf_simple_add>
   1ed8e:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ed90:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ed92:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ed94:	e79b      	b.n	1ecce <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1ed96:	a902      	add	r1, sp, #8
   1ed98:	f7fe feda 	bl	1db50 <memcmp>
   1ed9c:	e7ef      	b.n	1ed7e <find_type_cb+0x102>
	data->group = NULL;
   1ed9e:	2300      	movs	r3, #0
   1eda0:	60ab      	str	r3, [r5, #8]
   1eda2:	e794      	b.n	1ecce <find_type_cb+0x52>

0001eda4 <find_info_cb>:
{
   1eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1eda6:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1eda8:	6817      	ldr	r7, [r2, #0]
{
   1edaa:	4605      	mov	r5, r0
   1edac:	460e      	mov	r6, r1
   1edae:	4614      	mov	r4, r2
	if (!data->rsp) {
   1edb0:	b963      	cbnz	r3, 1edcc <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1edb2:	6850      	ldr	r0, [r2, #4]
   1edb4:	2101      	movs	r1, #1
   1edb6:	3008      	adds	r0, #8
   1edb8:	f001 fbd4 	bl	20564 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1edbc:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1edbe:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1edc0:	781b      	ldrb	r3, [r3, #0]
   1edc2:	2b00      	cmp	r3, #0
   1edc4:	bf0c      	ite	eq
   1edc6:	2301      	moveq	r3, #1
   1edc8:	2302      	movne	r3, #2
   1edca:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1edcc:	68a3      	ldr	r3, [r4, #8]
   1edce:	781b      	ldrb	r3, [r3, #0]
   1edd0:	2b01      	cmp	r3, #1
   1edd2:	d003      	beq.n	1eddc <find_info_cb+0x38>
   1edd4:	2b02      	cmp	r3, #2
   1edd6:	d019      	beq.n	1ee0c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1edd8:	2000      	movs	r0, #0
   1edda:	e016      	b.n	1ee0a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1eddc:	682b      	ldr	r3, [r5, #0]
   1edde:	781b      	ldrb	r3, [r3, #0]
   1ede0:	2b00      	cmp	r3, #0
   1ede2:	d1f9      	bne.n	1edd8 <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ede4:	6860      	ldr	r0, [r4, #4]
   1ede6:	2104      	movs	r1, #4
   1ede8:	3008      	adds	r0, #8
   1edea:	f001 fbbb 	bl	20564 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1edee:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1edf0:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1edf2:	885b      	ldrh	r3, [r3, #2]
   1edf4:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1edf6:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1edf8:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1edfa:	899b      	ldrh	r3, [r3, #12]
   1edfc:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1ee00:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ee02:	2804      	cmp	r0, #4
   1ee04:	bf94      	ite	ls
   1ee06:	2000      	movls	r0, #0
   1ee08:	2001      	movhi	r0, #1
}
   1ee0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ee0c:	682b      	ldr	r3, [r5, #0]
   1ee0e:	781b      	ldrb	r3, [r3, #0]
   1ee10:	2b02      	cmp	r3, #2
   1ee12:	d1e1      	bne.n	1edd8 <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ee14:	6860      	ldr	r0, [r4, #4]
   1ee16:	2112      	movs	r1, #18
   1ee18:	3008      	adds	r0, #8
   1ee1a:	f001 fba3 	bl	20564 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee1e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ee20:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee22:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1ee24:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ee28:	3101      	adds	r1, #1
   1ee2a:	f7fe fea1 	bl	1db70 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1ee2e:	6863      	ldr	r3, [r4, #4]
   1ee30:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1ee34:	899b      	ldrh	r3, [r3, #12]
   1ee36:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ee38:	2812      	cmp	r0, #18
   1ee3a:	e7e3      	b.n	1ee04 <find_info_cb+0x60>

0001ee3c <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ee3c:	68d0      	ldr	r0, [r2, #12]
   1ee3e:	7803      	ldrb	r3, [r0, #0]
   1ee40:	3104      	adds	r1, #4
   1ee42:	b913      	cbnz	r3, 1ee4a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ee44:	7001      	strb	r1, [r0, #0]
	return true;
   1ee46:	2001      	movs	r0, #1
}
   1ee48:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ee4a:	428b      	cmp	r3, r1
   1ee4c:	d0fb      	beq.n	1ee46 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1ee4e:	6891      	ldr	r1, [r2, #8]
   1ee50:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1ee52:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1ee54:	3b04      	subs	r3, #4
   1ee56:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1ee58:	6110      	str	r0, [r2, #16]
		return false;
   1ee5a:	4770      	bx	lr

0001ee5c <att_exec_write_req>:
   1ee5c:	2006      	movs	r0, #6
   1ee5e:	4770      	bx	lr

0001ee60 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee60:	30c0      	adds	r0, #192	; 0xc0
   1ee62:	f3bf 8f5b 	dmb	ish
   1ee66:	e850 3f00 	ldrex	r3, [r0]
   1ee6a:	f023 0301 	bic.w	r3, r3, #1
   1ee6e:	e840 3200 	strex	r2, r3, [r0]
   1ee72:	2a00      	cmp	r2, #0
   1ee74:	d1f7      	bne.n	1ee66 <chan_rsp_sent+0x6>
   1ee76:	f3bf 8f5b 	dmb	ish
}
   1ee7a:	4770      	bx	lr

0001ee7c <chan_cfm_sent>:
   1ee7c:	30c0      	adds	r0, #192	; 0xc0
   1ee7e:	f3bf 8f5b 	dmb	ish
   1ee82:	e850 3f00 	ldrex	r3, [r0]
   1ee86:	f023 0302 	bic.w	r3, r3, #2
   1ee8a:	e840 3200 	strex	r2, r3, [r0]
   1ee8e:	2a00      	cmp	r2, #0
   1ee90:	d1f7      	bne.n	1ee82 <chan_cfm_sent+0x6>
   1ee92:	f3bf 8f5b 	dmb	ish
}
   1ee96:	4770      	bx	lr

0001ee98 <att_get>:
{
   1ee98:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ee9a:	7b43      	ldrb	r3, [r0, #13]
   1ee9c:	2b07      	cmp	r3, #7
   1ee9e:	d001      	beq.n	1eea4 <att_get+0xc>
		return NULL;
   1eea0:	2000      	movs	r0, #0
}
   1eea2:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1eea4:	2104      	movs	r1, #4
   1eea6:	f7ff fdb5 	bl	1ea14 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	d0f8      	beq.n	1eea0 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eeae:	f3bf 8f5b 	dmb	ish
   1eeb2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1eeb6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1eeba:	075b      	lsls	r3, r3, #29
   1eebc:	d4f0      	bmi.n	1eea0 <att_get+0x8>
	return att_chan->att;
   1eebe:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1eec2:	e7ee      	b.n	1eea2 <att_get+0xa>

0001eec4 <write_cb>:
{
   1eec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eec6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1eec8:	4601      	mov	r1, r0
{
   1eeca:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1eecc:	222a      	movs	r2, #42	; 0x2a
   1eece:	6820      	ldr	r0, [r4, #0]
   1eed0:	f000 fda8 	bl	1fa24 <bt_gatt_check_perm>
   1eed4:	4605      	mov	r5, r0
   1eed6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1eed8:	bb00      	cbnz	r0, 1ef1c <write_cb+0x58>
	if (!data->req) {
   1eeda:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1eedc:	68b7      	ldr	r7, [r6, #8]
   1eede:	68e2      	ldr	r2, [r4, #12]
   1eee0:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1eee2:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1eee4:	bf14      	ite	ne
   1eee6:	2300      	movne	r3, #0
   1eee8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1eeea:	9301      	str	r3, [sp, #4]
   1eeec:	8a63      	ldrh	r3, [r4, #18]
   1eeee:	9300      	str	r3, [sp, #0]
   1eef0:	4631      	mov	r1, r6
   1eef2:	8a23      	ldrh	r3, [r4, #16]
   1eef4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1eef6:	1e03      	subs	r3, r0, #0
   1eef8:	db05      	blt.n	1ef06 <write_cb+0x42>
   1eefa:	8a22      	ldrh	r2, [r4, #16]
   1eefc:	4293      	cmp	r3, r2
   1eefe:	d10b      	bne.n	1ef18 <write_cb+0x54>
	data->err = 0U;
   1ef00:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1ef02:	2501      	movs	r5, #1
   1ef04:	e005      	b.n	1ef12 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1ef06:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1ef0a:	d305      	bcc.n	1ef18 <write_cb+0x54>
		return -err;
   1ef0c:	425b      	negs	r3, r3
   1ef0e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1ef10:	7523      	strb	r3, [r4, #20]
}
   1ef12:	4628      	mov	r0, r5
   1ef14:	b003      	add	sp, #12
   1ef16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1ef18:	230e      	movs	r3, #14
   1ef1a:	e7f9      	b.n	1ef10 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1ef1c:	2500      	movs	r5, #0
   1ef1e:	e7f8      	b.n	1ef12 <write_cb+0x4e>

0001ef20 <read_cb>:
{
   1ef20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1ef24:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ef28:	4606      	mov	r6, r0
	data->err = 0x00;
   1ef2a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ef2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1ef30:	7317      	strb	r7, [r2, #12]
{
   1ef32:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ef34:	4631      	mov	r1, r6
   1ef36:	2215      	movs	r2, #21
   1ef38:	f000 fd74 	bl	1fa24 <bt_gatt_check_perm>
   1ef3c:	4604      	mov	r4, r0
   1ef3e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ef40:	b9a0      	cbnz	r0, 1ef6c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ef42:	e9cd 0000 	strd	r0, r0, [sp]
   1ef46:	88ab      	ldrh	r3, [r5, #4]
   1ef48:	68aa      	ldr	r2, [r5, #8]
   1ef4a:	4631      	mov	r1, r6
   1ef4c:	4640      	mov	r0, r8
   1ef4e:	f7ff fe0a 	bl	1eb66 <att_chan_read>
	if (ret < 0) {
   1ef52:	1e03      	subs	r3, r0, #0
   1ef54:	da0c      	bge.n	1ef70 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ef56:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1ef5a:	bf26      	itte	cs
   1ef5c:	425b      	negcs	r3, r3
   1ef5e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1ef60:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1ef62:	732b      	strb	r3, [r5, #12]
}
   1ef64:	4620      	mov	r0, r4
   1ef66:	b002      	add	sp, #8
   1ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ef6c:	463c      	mov	r4, r7
   1ef6e:	e7f9      	b.n	1ef64 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ef70:	2401      	movs	r4, #1
   1ef72:	e7f7      	b.n	1ef64 <read_cb+0x44>

0001ef74 <chan_req_send>:
{
   1ef74:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef76:	690e      	ldr	r6, [r1, #16]
{
   1ef78:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef7a:	4630      	mov	r0, r6
{
   1ef7c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ef7e:	f7ff fd9a 	bl	1eab6 <net_buf_frags_len>
   1ef82:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1ef86:	4283      	cmp	r3, r0
   1ef88:	d317      	bcc.n	1efba <chan_req_send+0x46>
	chan->req = req;
   1ef8a:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1ef8e:	f106 0008 	add.w	r0, r6, #8
   1ef92:	f001 fb1e 	bl	205d2 <net_buf_simple_headroom>
	state->len = buf->len;
   1ef96:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ef98:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ef9a:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ef9c:	6920      	ldr	r0, [r4, #16]
   1ef9e:	f001 fabb 	bl	20518 <net_buf_ref>
   1efa2:	2200      	movs	r2, #0
   1efa4:	4601      	mov	r1, r0
   1efa6:	4628      	mov	r0, r5
   1efa8:	f7f7 ff18 	bl	16ddc <chan_send>
	if (err) {
   1efac:	4605      	mov	r5, r0
   1efae:	b110      	cbz	r0, 1efb6 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1efb0:	6920      	ldr	r0, [r4, #16]
   1efb2:	f7fa fa47 	bl	19444 <net_buf_unref>
}
   1efb6:	4628      	mov	r0, r5
   1efb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1efba:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1efbe:	e7fa      	b.n	1efb6 <chan_req_send+0x42>

0001efc0 <bt_att_chan_req_send>:
{
   1efc0:	b570      	push	{r4, r5, r6, lr}
   1efc2:	4604      	mov	r4, r0
   1efc4:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1efc6:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1efca:	2200      	movs	r2, #0
   1efcc:	2300      	movs	r3, #0
   1efce:	4630      	mov	r0, r6
   1efd0:	f7fc fbb0 	bl	1b734 <z_impl_k_sem_take>
   1efd4:	2800      	cmp	r0, #0
   1efd6:	db0a      	blt.n	1efee <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1efd8:	4620      	mov	r0, r4
   1efda:	4629      	mov	r1, r5
   1efdc:	f7ff ffca 	bl	1ef74 <chan_req_send>
	if (err < 0) {
   1efe0:	1e04      	subs	r4, r0, #0
   1efe2:	da02      	bge.n	1efea <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1efe4:	4630      	mov	r0, r6
   1efe6:	f7fc fb7f 	bl	1b6e8 <z_impl_k_sem_give>
}
   1efea:	4620      	mov	r0, r4
   1efec:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1efee:	f06f 040a 	mvn.w	r4, #10
   1eff2:	e7fa      	b.n	1efea <bt_att_chan_req_send+0x2a>

0001eff4 <bt_att_status>:
{
   1eff4:	b538      	push	{r3, r4, r5, lr}
   1eff6:	f3bf 8f5b 	dmb	ish
   1effa:	680b      	ldr	r3, [r1, #0]
   1effc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f000:	07db      	lsls	r3, r3, #31
{
   1f002:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f004:	d518      	bpl.n	1f038 <bt_att_status+0x44>
	if (chan->req) {
   1f006:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1f00a:	b9ab      	cbnz	r3, 1f038 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1f00c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1f010:	3004      	adds	r0, #4
   1f012:	f7ff fd2b 	bl	1ea6c <sys_slist_get>
	if (!node) {
   1f016:	4604      	mov	r4, r0
   1f018:	b170      	cbz	r0, 1f038 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f01a:	4601      	mov	r1, r0
   1f01c:	f1a5 0008 	sub.w	r0, r5, #8
   1f020:	f7ff ffce 	bl	1efc0 <bt_att_chan_req_send>
   1f024:	2800      	cmp	r0, #0
   1f026:	da07      	bge.n	1f038 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1f028:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1f02c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f02e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f030:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f032:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f034:	b902      	cbnz	r2, 1f038 <bt_att_status+0x44>
	list->tail = node;
   1f036:	609c      	str	r4, [r3, #8]
}
   1f038:	bd38      	pop	{r3, r4, r5, pc}

0001f03a <bt_att_chan_send>:
{
   1f03a:	b570      	push	{r4, r5, r6, lr}
   1f03c:	4604      	mov	r4, r0
   1f03e:	460e      	mov	r6, r1
	if (!cb) {
   1f040:	4615      	mov	r5, r2
   1f042:	b132      	cbz	r2, 1f052 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1f044:	462a      	mov	r2, r5
   1f046:	4631      	mov	r1, r6
   1f048:	4620      	mov	r0, r4
}
   1f04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1f04e:	f7f7 bec5 	b.w	16ddc <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1f052:	2200      	movs	r2, #0
   1f054:	2300      	movs	r3, #0
   1f056:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1f05a:	f7fc fb6b 	bl	1b734 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1f05e:	2800      	cmp	r0, #0
   1f060:	daf0      	bge.n	1f044 <bt_att_chan_send+0xa>
}
   1f062:	f06f 000a 	mvn.w	r0, #10
   1f066:	bd70      	pop	{r4, r5, r6, pc}

0001f068 <bt_att_chan_send_rsp>:
{
   1f068:	b538      	push	{r3, r4, r5, lr}
   1f06a:	4604      	mov	r4, r0
   1f06c:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1f06e:	f7ff ffe4 	bl	1f03a <bt_att_chan_send>
	if (err) {
   1f072:	b130      	cbz	r0, 1f082 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f074:	4629      	mov	r1, r5
   1f076:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1f07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f07e:	f001 ba3e 	b.w	204fe <net_buf_put>
}
   1f082:	bd38      	pop	{r3, r4, r5, pc}

0001f084 <process_queue>:
{
   1f084:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1f086:	2200      	movs	r2, #0
{
   1f088:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1f08a:	2300      	movs	r3, #0
   1f08c:	4608      	mov	r0, r1
{
   1f08e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1f090:	f001 fa17 	bl	204c2 <net_buf_get>
	if (buf) {
   1f094:	4605      	mov	r5, r0
   1f096:	b160      	cbz	r0, 1f0b2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1f098:	4601      	mov	r1, r0
   1f09a:	2200      	movs	r2, #0
   1f09c:	4620      	mov	r0, r4
   1f09e:	f7f7 fe9d 	bl	16ddc <chan_send>
		if (err) {
   1f0a2:	4604      	mov	r4, r0
   1f0a4:	b118      	cbz	r0, 1f0ae <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1f0a6:	4629      	mov	r1, r5
   1f0a8:	4630      	mov	r0, r6
   1f0aa:	f001 fd65 	bl	20b78 <k_queue_prepend>
}
   1f0ae:	4620      	mov	r0, r4
   1f0b0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1f0b2:	f06f 0401 	mvn.w	r4, #1
   1f0b6:	e7fa      	b.n	1f0ae <process_queue+0x2a>

0001f0b8 <bt_att_sent>:
{
   1f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1f0ba:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1f0be:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1f0c2:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f0c4:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1f0c8:	b10b      	cbz	r3, 1f0ce <bt_att_sent+0x16>
		chan->sent(chan);
   1f0ca:	4638      	mov	r0, r7
   1f0cc:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f0ce:	f3bf 8f5b 	dmb	ish
   1f0d2:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1f0d6:	e853 2f00 	ldrex	r2, [r3]
   1f0da:	f022 0210 	bic.w	r2, r2, #16
   1f0de:	e843 2100 	strex	r1, r2, [r3]
   1f0e2:	2900      	cmp	r1, #0
   1f0e4:	d1f7      	bne.n	1f0d6 <bt_att_sent+0x1e>
   1f0e6:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f0ea:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1f0ee:	b98b      	cbnz	r3, 1f114 <bt_att_sent+0x5c>
   1f0f0:	686b      	ldr	r3, [r5, #4]
   1f0f2:	b17b      	cbz	r3, 1f114 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f0f4:	1d28      	adds	r0, r5, #4
   1f0f6:	f7ff fcb9 	bl	1ea6c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0fa:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f0fc:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f0fe:	4638      	mov	r0, r7
   1f100:	f7ff ff38 	bl	1ef74 <chan_req_send>
   1f104:	2800      	cmp	r0, #0
   1f106:	da17      	bge.n	1f138 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1f108:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1f10a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f10c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1f10e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f110:	b903      	cbnz	r3, 1f114 <bt_att_sent+0x5c>
	list->tail = node;
   1f112:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f114:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1f118:	4638      	mov	r0, r7
   1f11a:	f7ff ffb3 	bl	1f084 <process_queue>
	if (!err) {
   1f11e:	b158      	cbz	r0, 1f138 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1f120:	f105 010c 	add.w	r1, r5, #12
   1f124:	4638      	mov	r0, r7
   1f126:	f7ff ffad 	bl	1f084 <process_queue>
	if (!err) {
   1f12a:	b128      	cbz	r0, 1f138 <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   1f12c:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1f130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f134:	f7fc bad8 	b.w	1b6e8 <z_impl_k_sem_give>
   1f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f13a <bt_att_chan_create_pdu>:
{
   1f13a:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f13c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1f140:	3201      	adds	r2, #1
   1f142:	429a      	cmp	r2, r3
{
   1f144:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f146:	d81b      	bhi.n	1f180 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1f148:	4608      	mov	r0, r1
   1f14a:	f7ff fcd4 	bl	1eaf6 <att_op_get_type>
   1f14e:	2802      	cmp	r0, #2
   1f150:	d001      	beq.n	1f156 <bt_att_chan_create_pdu+0x1c>
   1f152:	2804      	cmp	r0, #4
   1f154:	d10f      	bne.n	1f176 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1f156:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f15a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f15c:	2100      	movs	r1, #0
   1f15e:	4608      	mov	r0, r1
   1f160:	f7ff fbff 	bl	1e962 <bt_l2cap_create_pdu_timeout>
   1f164:	4604      	mov	r4, r0
	if (!buf) {
   1f166:	b120      	cbz	r0, 1f172 <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f168:	2101      	movs	r1, #1
   1f16a:	3008      	adds	r0, #8
   1f16c:	f001 f9fa 	bl	20564 <net_buf_simple_add>
	hdr->code = op;
   1f170:	7005      	strb	r5, [r0, #0]
}
   1f172:	4620      	mov	r0, r4
   1f174:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1f176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f17e:	e7ed      	b.n	1f15c <bt_att_chan_create_pdu+0x22>
		return NULL;
   1f180:	2400      	movs	r4, #0
   1f182:	e7f6      	b.n	1f172 <bt_att_chan_create_pdu+0x38>

0001f184 <bt_att_create_pdu>:
{
   1f184:	b570      	push	{r4, r5, r6, lr}
   1f186:	460e      	mov	r6, r1
   1f188:	4615      	mov	r5, r2
	att = att_get(conn);
   1f18a:	f7ff fe85 	bl	1ee98 <att_get>
	if (!att) {
   1f18e:	b170      	cbz	r0, 1f1ae <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f190:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f192:	b163      	cbz	r3, 1f1ae <bt_att_create_pdu+0x2a>
   1f194:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1f198:	d009      	beq.n	1f1ae <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f19a:	681b      	ldr	r3, [r3, #0]
   1f19c:	b10b      	cbz	r3, 1f1a2 <bt_att_create_pdu+0x1e>
   1f19e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1f1a2:	1c6a      	adds	r2, r5, #1
   1f1a4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1f1a8:	428a      	cmp	r2, r1
   1f1aa:	d902      	bls.n	1f1b2 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f1ac:	b93b      	cbnz	r3, 1f1be <bt_att_create_pdu+0x3a>
}
   1f1ae:	2000      	movs	r0, #0
   1f1b0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1f1b2:	462a      	mov	r2, r5
   1f1b4:	4631      	mov	r1, r6
}
   1f1b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1f1ba:	f7ff bfbe 	b.w	1f13a <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f1be:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1f1c2:	d004      	beq.n	1f1ce <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f1c4:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f1c8:	b10c      	cbz	r4, 1f1ce <bt_att_create_pdu+0x4a>
   1f1ca:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   1f1ce:	4618      	mov	r0, r3
   1f1d0:	4623      	mov	r3, r4
   1f1d2:	e7e7      	b.n	1f1a4 <bt_att_create_pdu+0x20>

0001f1d4 <att_read_blob_req>:
{
   1f1d4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f1d6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f1d8:	8813      	ldrh	r3, [r2, #0]
   1f1da:	8852      	ldrh	r2, [r2, #2]
   1f1dc:	9200      	str	r2, [sp, #0]
   1f1de:	210c      	movs	r1, #12
   1f1e0:	220d      	movs	r2, #13
   1f1e2:	f7f8 f855 	bl	17290 <att_read_rsp>
}
   1f1e6:	b003      	add	sp, #12
   1f1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1ec <att_read_req>:
{
   1f1ec:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f1ee:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f1f0:	2200      	movs	r2, #0
   1f1f2:	881b      	ldrh	r3, [r3, #0]
   1f1f4:	9200      	str	r2, [sp, #0]
   1f1f6:	210a      	movs	r1, #10
   1f1f8:	220b      	movs	r2, #11
   1f1fa:	f7f8 f849 	bl	17290 <att_read_rsp>
}
   1f1fe:	b003      	add	sp, #12
   1f200:	f85d fb04 	ldr.w	pc, [sp], #4

0001f204 <bt_att_init>:
	bt_gatt_init();
   1f204:	f7f8 bc84 	b.w	17b10 <bt_gatt_init>

0001f208 <att_req_destroy>:
{
   1f208:	b510      	push	{r4, lr}
   1f20a:	4604      	mov	r4, r0
	if (req->buf) {
   1f20c:	6900      	ldr	r0, [r0, #16]
   1f20e:	b108      	cbz	r0, 1f214 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1f210:	f7fa f918 	bl	19444 <net_buf_unref>
	if (req->destroy) {
   1f214:	68a3      	ldr	r3, [r4, #8]
   1f216:	b10b      	cbz	r3, 1f21c <att_req_destroy+0x14>
		req->destroy(req);
   1f218:	4620      	mov	r0, r4
   1f21a:	4798      	blx	r3
	bt_att_req_free(req);
   1f21c:	4620      	mov	r0, r4
}
   1f21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1f222:	f7f8 b9d9 	b.w	175d8 <bt_att_req_free>

0001f226 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f226:	898a      	ldrh	r2, [r1, #12]
   1f228:	6889      	ldr	r1, [r1, #8]
   1f22a:	2300      	movs	r3, #0
   1f22c:	f7f8 b9e0 	b.w	175f0 <att_handle_rsp>

0001f230 <att_chan_detach>:
{
   1f230:	b538      	push	{r3, r4, r5, lr}
   1f232:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1f234:	6800      	ldr	r0, [r0, #0]
   1f236:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1f23a:	3024      	adds	r0, #36	; 0x24
   1f23c:	f7ff fc20 	bl	1ea80 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1f240:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1f244:	4628      	mov	r0, r5
   1f246:	f7fc fa4f 	bl	1b6e8 <z_impl_k_sem_give>
   1f24a:	4628      	mov	r0, r5
   1f24c:	f7fc fa4c 	bl	1b6e8 <z_impl_k_sem_give>
   1f250:	4628      	mov	r0, r5
   1f252:	f7fc fa49 	bl	1b6e8 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1f256:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1f25a:	2200      	movs	r2, #0
   1f25c:	2300      	movs	r3, #0
   1f25e:	4628      	mov	r0, r5
   1f260:	f001 f92f 	bl	204c2 <net_buf_get>
   1f264:	4602      	mov	r2, r0
   1f266:	b950      	cbnz	r0, 1f27e <att_chan_detach+0x4e>
	if (chan->req) {
   1f268:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1f26c:	b123      	cbz	r3, 1f278 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f26e:	4601      	mov	r1, r0
   1f270:	230e      	movs	r3, #14
   1f272:	4620      	mov	r0, r4
   1f274:	f7f8 f9bc 	bl	175f0 <att_handle_rsp>
	chan->att = NULL;
   1f278:	2300      	movs	r3, #0
   1f27a:	6023      	str	r3, [r4, #0]
}
   1f27c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1f27e:	f7fa f8e1 	bl	19444 <net_buf_unref>
   1f282:	e7ea      	b.n	1f25a <att_chan_detach+0x2a>

0001f284 <bt_att_disconnected>:
{
   1f284:	b538      	push	{r3, r4, r5, lr}
   1f286:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1f288:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1f28c:	f7ff ffd0 	bl	1f230 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1f290:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f292:	b93b      	cbnz	r3, 1f2a4 <bt_att_disconnected+0x20>
	att_reset(att);
   1f294:	4628      	mov	r0, r5
   1f296:	f7f8 fa4b 	bl	17730 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f29a:	6820      	ldr	r0, [r4, #0]
}
   1f29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1f2a0:	f7f8 bf2c 	b.w	180fc <bt_gatt_disconnected>
}
   1f2a4:	bd38      	pop	{r3, r4, r5, pc}

0001f2a6 <att_timeout>:
{
   1f2a6:	b570      	push	{r4, r5, r6, lr}
   1f2a8:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1f2aa:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   1f2ae:	f7ff ffbf 	bl	1f230 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1f2b2:	6a75      	ldr	r5, [r6, #36]	; 0x24
   1f2b4:	b945      	cbnz	r5, 1f2c8 <att_timeout+0x22>
	att_reset(att);
   1f2b6:	4630      	mov	r0, r6
   1f2b8:	f7f8 fa3a 	bl	17730 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f2bc:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   1f2c0:	f7f8 ff1c 	bl	180fc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1f2c4:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1f2c8:	bd70      	pop	{r4, r5, r6, pc}

0001f2ca <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1f2ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f2ce:	4605      	mov	r5, r0
   1f2d0:	460e      	mov	r6, r1
   1f2d2:	4614      	mov	r4, r2
   1f2d4:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1f2d6:	f7ff fddf 	bl	1ee98 <att_get>
	if (!att) {
   1f2da:	4607      	mov	r7, r0
   1f2dc:	b938      	cbnz	r0, 1f2ee <bt_att_send+0x24>
		net_buf_unref(buf);
   1f2de:	4630      	mov	r0, r6
   1f2e0:	f7fa f8b0 	bl	19444 <net_buf_unref>
		return -ENOTCONN;
   1f2e4:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1f2e8:	b002      	add	sp, #8
   1f2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1f2ee:	b144      	cbz	r4, 1f302 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1f2f0:	f8cd 8000 	str.w	r8, [sp]
   1f2f4:	4623      	mov	r3, r4
   1f2f6:	4632      	mov	r2, r6
   1f2f8:	2104      	movs	r1, #4
   1f2fa:	4628      	mov	r0, r5
   1f2fc:	f7ff fb34 	bl	1e968 <bt_l2cap_send_cb>
   1f300:	e7f2      	b.n	1f2e8 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f302:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1f304:	b184      	cbz	r4, 1f328 <bt_att_send+0x5e>
   1f306:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1f30a:	d00f      	beq.n	1f32c <bt_att_send+0x62>
   1f30c:	6824      	ldr	r4, [r4, #0]
   1f30e:	b10c      	cbz	r4, 1f314 <bt_att_send+0x4a>
   1f310:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1f314:	2000      	movs	r0, #0
   1f316:	b95d      	cbnz	r5, 1f330 <bt_att_send+0x66>
	if (ret < 0) {
   1f318:	b188      	cbz	r0, 1f33e <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1f31a:	f107 000c 	add.w	r0, r7, #12
   1f31e:	4631      	mov	r1, r6
   1f320:	f001 f8ed 	bl	204fe <net_buf_put>
	return 0;
   1f324:	4628      	mov	r0, r5
   1f326:	e7df      	b.n	1f2e8 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f328:	4625      	mov	r5, r4
   1f32a:	e7f3      	b.n	1f314 <bt_att_send+0x4a>
   1f32c:	462c      	mov	r4, r5
   1f32e:	e7f1      	b.n	1f314 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1f330:	2200      	movs	r2, #0
   1f332:	4631      	mov	r1, r6
   1f334:	4628      	mov	r0, r5
   1f336:	f7ff fe80 	bl	1f03a <bt_att_chan_send>
		if (ret >= 0) {
   1f33a:	2800      	cmp	r0, #0
   1f33c:	db01      	blt.n	1f342 <bt_att_send+0x78>
	return 0;
   1f33e:	2000      	movs	r0, #0
   1f340:	e7d2      	b.n	1f2e8 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f342:	b154      	cbz	r4, 1f35a <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f344:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1f348:	d004      	beq.n	1f354 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f34a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1f34e:	b10b      	cbz	r3, 1f354 <bt_att_send+0x8a>
   1f350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1f354:	4625      	mov	r5, r4
   1f356:	461c      	mov	r4, r3
   1f358:	e7dd      	b.n	1f316 <bt_att_send+0x4c>
   1f35a:	4623      	mov	r3, r4
   1f35c:	e7fa      	b.n	1f354 <bt_att_send+0x8a>

0001f35e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f35e:	b570      	push	{r4, r5, r6, lr}
   1f360:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1f362:	f7ff fd99 	bl	1ee98 <att_get>
	if (!att) {
   1f366:	4605      	mov	r5, r0
   1f368:	b930      	cbnz	r0, 1f378 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1f36a:	6920      	ldr	r0, [r4, #16]
   1f36c:	f7fa f86a 	bl	19444 <net_buf_unref>
		req->buf = NULL;
   1f370:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1f372:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1f376:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f378:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f37a:	b153      	cbz	r3, 1f392 <bt_att_req_send+0x34>
   1f37c:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1f380:	d007      	beq.n	1f392 <bt_att_req_send+0x34>
   1f382:	681e      	ldr	r6, [r3, #0]
   1f384:	b10e      	cbz	r6, 1f38a <bt_att_req_send+0x2c>
   1f386:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1f38a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1f38e:	b143      	cbz	r3, 1f3a2 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f390:	b96e      	cbnz	r6, 1f3ae <bt_att_req_send+0x50>
	parent->next = child;
   1f392:	2000      	movs	r0, #0
   1f394:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1f396:	68ab      	ldr	r3, [r5, #8]
   1f398:	b9a3      	cbnz	r3, 1f3c4 <bt_att_req_send+0x66>
	list->head = node;
   1f39a:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1f39e:	4618      	mov	r0, r3
}
   1f3a0:	e7e9      	b.n	1f376 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1f3a2:	4621      	mov	r1, r4
   1f3a4:	f7ff fe0c 	bl	1efc0 <bt_att_chan_req_send>
			if (ret >= 0) {
   1f3a8:	2800      	cmp	r0, #0
   1f3aa:	dbf1      	blt.n	1f390 <bt_att_req_send+0x32>
   1f3ac:	e7e3      	b.n	1f376 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f3ae:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1f3b2:	d004      	beq.n	1f3be <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f3b4:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f3b8:	b10b      	cbz	r3, 1f3be <bt_att_req_send+0x60>
   1f3ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1f3be:	4630      	mov	r0, r6
   1f3c0:	461e      	mov	r6, r3
   1f3c2:	e7e2      	b.n	1f38a <bt_att_req_send+0x2c>
	parent->next = child;
   1f3c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f3c6:	60ac      	str	r4, [r5, #8]
}
   1f3c8:	e7d5      	b.n	1f376 <bt_att_req_send+0x18>

0001f3ca <gatt_ccc_changed>:
{
   1f3ca:	460b      	mov	r3, r1
   1f3cc:	8909      	ldrh	r1, [r1, #8]
   1f3ce:	8a5a      	ldrh	r2, [r3, #18]
   1f3d0:	4291      	cmp	r1, r2
   1f3d2:	bf38      	it	cc
   1f3d4:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1f3d6:	8a9a      	ldrh	r2, [r3, #20]
   1f3d8:	428a      	cmp	r2, r1
   1f3da:	d003      	beq.n	1f3e4 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1f3dc:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1f3de:	699b      	ldr	r3, [r3, #24]
   1f3e0:	b103      	cbz	r3, 1f3e4 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1f3e2:	4718      	bx	r3
}
   1f3e4:	4770      	bx	lr

0001f3e6 <gatt_indicate_rsp>:
{
   1f3e6:	b510      	push	{r4, lr}
   1f3e8:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   1f3ea:	7da3      	ldrb	r3, [r4, #22]
   1f3ec:	3b01      	subs	r3, #1
{
   1f3ee:	460a      	mov	r2, r1
	params->_ref--;
   1f3f0:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1f3f2:	4621      	mov	r1, r4
   1f3f4:	68a3      	ldr	r3, [r4, #8]
   1f3f6:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1f3f8:	68e3      	ldr	r3, [r4, #12]
   1f3fa:	b12b      	cbz	r3, 1f408 <gatt_indicate_rsp+0x22>
   1f3fc:	7da2      	ldrb	r2, [r4, #22]
   1f3fe:	b91a      	cbnz	r2, 1f408 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1f400:	4620      	mov	r0, r4
}
   1f402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f406:	4718      	bx	r3
}
   1f408:	bd10      	pop	{r4, pc}

0001f40a <match_uuid>:
	data->attr = attr;
   1f40a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f40c:	8091      	strh	r1, [r2, #4]
}
   1f40e:	2000      	movs	r0, #0
   1f410:	4770      	bx	lr

0001f412 <gen_hash_m>:
{
   1f412:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f414:	6807      	ldr	r7, [r0, #0]
   1f416:	783d      	ldrb	r5, [r7, #0]
{
   1f418:	b089      	sub	sp, #36	; 0x24
   1f41a:	4606      	mov	r6, r0
   1f41c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f41e:	b10d      	cbz	r5, 1f424 <gen_hash_m+0x12>
	switch (u16->val) {
   1f420:	2501      	movs	r5, #1
   1f422:	e014      	b.n	1f44e <gen_hash_m+0x3c>
   1f424:	887b      	ldrh	r3, [r7, #2]
   1f426:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f42a:	d004      	beq.n	1f436 <gen_hash_m+0x24>
   1f42c:	d812      	bhi.n	1f454 <gen_hash_m+0x42>
   1f42e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f432:	2b03      	cmp	r3, #3
   1f434:	d8f4      	bhi.n	1f420 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f436:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f43a:	2202      	movs	r2, #2
   1f43c:	f10d 010e 	add.w	r1, sp, #14
   1f440:	4620      	mov	r0, r4
   1f442:	f7fe fab6 	bl	1d9b2 <tc_cmac_update>
   1f446:	b9e0      	cbnz	r0, 1f482 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1f448:	f06f 0315 	mvn.w	r3, #21
   1f44c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1f44e:	4628      	mov	r0, r5
   1f450:	b009      	add	sp, #36	; 0x24
   1f452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f454:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f458:	33ff      	adds	r3, #255	; 0xff
   1f45a:	b29b      	uxth	r3, r3
   1f45c:	2b04      	cmp	r3, #4
   1f45e:	d8df      	bhi.n	1f420 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1f460:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f464:	2202      	movs	r2, #2
   1f466:	f10d 010e 	add.w	r1, sp, #14
   1f46a:	4620      	mov	r0, r4
   1f46c:	f7fe faa1 	bl	1d9b2 <tc_cmac_update>
   1f470:	2800      	cmp	r0, #0
   1f472:	d0e9      	beq.n	1f448 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1f474:	887b      	ldrh	r3, [r7, #2]
   1f476:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f47a:	2202      	movs	r2, #2
   1f47c:	f10d 010e 	add.w	r1, sp, #14
   1f480:	e017      	b.n	1f4b2 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1f482:	887b      	ldrh	r3, [r7, #2]
   1f484:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f488:	2202      	movs	r2, #2
   1f48a:	f10d 010e 	add.w	r1, sp, #14
   1f48e:	4620      	mov	r0, r4
   1f490:	f7fe fa8f 	bl	1d9b2 <tc_cmac_update>
   1f494:	2800      	cmp	r0, #0
   1f496:	d0d7      	beq.n	1f448 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f498:	2000      	movs	r0, #0
   1f49a:	2310      	movs	r3, #16
   1f49c:	eb0d 0203 	add.w	r2, sp, r3
   1f4a0:	6877      	ldr	r7, [r6, #4]
   1f4a2:	9000      	str	r0, [sp, #0]
   1f4a4:	4631      	mov	r1, r6
   1f4a6:	47b8      	blx	r7
		if (len < 0) {
   1f4a8:	1e02      	subs	r2, r0, #0
   1f4aa:	da01      	bge.n	1f4b0 <gen_hash_m+0x9e>
			state->err = len;
   1f4ac:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f4ae:	e7ce      	b.n	1f44e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1f4b0:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f4b2:	4620      	mov	r0, r4
   1f4b4:	f7fe fa7d 	bl	1d9b2 <tc_cmac_update>
   1f4b8:	2800      	cmp	r0, #0
   1f4ba:	d1b1      	bne.n	1f420 <gen_hash_m+0xe>
   1f4bc:	e7c4      	b.n	1f448 <gen_hash_m+0x36>

0001f4be <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f4be:	2301      	movs	r3, #1
   1f4c0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f4c2:	f3bf 8f5b 	dmb	ish
   1f4c6:	e850 2f00 	ldrex	r2, [r0]
   1f4ca:	431a      	orrs	r2, r3
   1f4cc:	e840 2100 	strex	r1, r2, [r0]
   1f4d0:	2900      	cmp	r1, #0
   1f4d2:	d1f8      	bne.n	1f4c6 <atomic_set_bit+0x8>
   1f4d4:	f3bf 8f5b 	dmb	ish
}
   1f4d8:	4770      	bx	lr

0001f4da <gatt_notify>:
{
   1f4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f4de:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1f4e0:	8992      	ldrh	r2, [r2, #12]
{
   1f4e2:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f4e4:	3202      	adds	r2, #2
   1f4e6:	211b      	movs	r1, #27
{
   1f4e8:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f4ea:	f7ff fe4b 	bl	1f184 <bt_att_create_pdu>
	if (!buf) {
   1f4ee:	4605      	mov	r5, r0
   1f4f0:	b1c8      	cbz	r0, 1f526 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1f4f2:	f100 0908 	add.w	r9, r0, #8
   1f4f6:	2102      	movs	r1, #2
   1f4f8:	4648      	mov	r0, r9
   1f4fa:	f001 f833 	bl	20564 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1f4fe:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   1f500:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   1f502:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   1f506:	4648      	mov	r0, r9
   1f508:	f001 f82c 	bl	20564 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1f50c:	89a2      	ldrh	r2, [r4, #12]
   1f50e:	68a1      	ldr	r1, [r4, #8]
   1f510:	4630      	mov	r0, r6
   1f512:	f7fe fb2d 	bl	1db70 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f516:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f51a:	4629      	mov	r1, r5
   1f51c:	4638      	mov	r0, r7
}
   1f51e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f522:	f7ff bed2 	b.w	1f2ca <bt_att_send>
}
   1f526:	f06f 000b 	mvn.w	r0, #11
   1f52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f52e <clear_cf_cfg>:
{
   1f52e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f530:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f532:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1f534:	2207      	movs	r2, #7
   1f536:	4669      	mov	r1, sp
   1f538:	3001      	adds	r0, #1
   1f53a:	9500      	str	r5, [sp, #0]
   1f53c:	f8cd 5003 	str.w	r5, [sp, #3]
   1f540:	f7fe fb16 	bl	1db70 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f544:	f104 0008 	add.w	r0, r4, #8
   1f548:	2201      	movs	r2, #1
   1f54a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f54c:	340c      	adds	r4, #12
   1f54e:	f7fe fb3a 	bl	1dbc6 <memset>
   1f552:	f3bf 8f5b 	dmb	ish
   1f556:	e854 3f00 	ldrex	r3, [r4]
   1f55a:	e844 5200 	strex	r2, r5, [r4]
   1f55e:	2a00      	cmp	r2, #0
   1f560:	d1f9      	bne.n	1f556 <clear_cf_cfg+0x28>
   1f562:	f3bf 8f5b 	dmb	ish
}
   1f566:	b003      	add	sp, #12
   1f568:	bd30      	pop	{r4, r5, pc}

0001f56a <cf_write>:
{
   1f56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f56e:	461f      	mov	r7, r3
   1f570:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1f574:	2b01      	cmp	r3, #1
{
   1f576:	4680      	mov	r8, r0
   1f578:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1f57a:	d83b      	bhi.n	1f5f4 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1f57c:	443b      	add	r3, r7
   1f57e:	2b01      	cmp	r3, #1
   1f580:	463d      	mov	r5, r7
   1f582:	dc3a      	bgt.n	1f5fa <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1f584:	f7f8 f928 	bl	177d8 <find_cf_cfg>
	if (!cfg) {
   1f588:	4604      	mov	r4, r0
   1f58a:	b918      	cbnz	r0, 1f594 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1f58c:	f7f8 f924 	bl	177d8 <find_cf_cfg>
	if (!cfg) {
   1f590:	4604      	mov	r4, r0
   1f592:	b3a8      	cbz	r0, 1f600 <cf_write+0x96>
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   1f594:	4632      	mov	r2, r6
   1f596:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1f59a:	4562      	cmp	r2, ip
   1f59c:	d117      	bne.n	1f5ce <cf_write+0x64>
	for (i = 0U; i < len && i < last_byte; i++) {
   1f59e:	b12f      	cbz	r7, 1f5ac <cf_write+0x42>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1f5a0:	7833      	ldrb	r3, [r6, #0]
   1f5a2:	7a22      	ldrb	r2, [r4, #8]
   1f5a4:	f003 0307 	and.w	r3, r3, #7
   1f5a8:	4313      	orrs	r3, r2
   1f5aa:	7223      	strb	r3, [r4, #8]
   1f5ac:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1f5b0:	2207      	movs	r2, #7
   1f5b2:	1c60      	adds	r0, r4, #1
   1f5b4:	f7fe fadc 	bl	1db70 <memcpy>
	cfg->id = conn->id;
   1f5b8:	4620      	mov	r0, r4
   1f5ba:	f898 3008 	ldrb.w	r3, [r8, #8]
   1f5be:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f5c2:	2100      	movs	r1, #0
   1f5c4:	f7ff ff7b 	bl	1f4be <atomic_set_bit>
}
   1f5c8:	4628      	mov	r0, r5
   1f5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1f5ce:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f5d2:	7a20      	ldrb	r0, [r4, #8]
   1f5d4:	2300      	movs	r3, #0
   1f5d6:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   1f5d8:	fa21 fe03 	lsr.w	lr, r1, r3
   1f5dc:	f01e 0f01 	tst.w	lr, #1
   1f5e0:	d004      	beq.n	1f5ec <cf_write+0x82>
   1f5e2:	fa20 fe03 	lsr.w	lr, r0, r3
   1f5e6:	f01e 0f01 	tst.w	lr, #1
   1f5ea:	d10c      	bne.n	1f606 <cf_write+0x9c>
		for (bit = 0U; bit <= last_bit; bit++) {
   1f5ec:	3301      	adds	r3, #1
   1f5ee:	2b03      	cmp	r3, #3
   1f5f0:	d1f2      	bne.n	1f5d8 <cf_write+0x6e>
   1f5f2:	e7d2      	b.n	1f59a <cf_write+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f5f4:	f06f 0506 	mvn.w	r5, #6
   1f5f8:	e7e6      	b.n	1f5c8 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f5fa:	f06f 050c 	mvn.w	r5, #12
   1f5fe:	e7e3      	b.n	1f5c8 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f600:	f06f 0510 	mvn.w	r5, #16
   1f604:	e7e0      	b.n	1f5c8 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1f606:	f06f 0512 	mvn.w	r5, #18
   1f60a:	e7dd      	b.n	1f5c8 <cf_write+0x5e>

0001f60c <sc_restore_rsp>:
{
   1f60c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f60e:	f7f8 f8e3 	bl	177d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f612:	b140      	cbz	r0, 1f626 <sc_restore_rsp+0x1a>
   1f614:	7a03      	ldrb	r3, [r0, #8]
   1f616:	07db      	lsls	r3, r3, #31
   1f618:	d505      	bpl.n	1f626 <sc_restore_rsp+0x1a>
}
   1f61a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f61e:	2100      	movs	r1, #0
   1f620:	300c      	adds	r0, #12
   1f622:	f7ff bf4c 	b.w	1f4be <atomic_set_bit>
}
   1f626:	bd08      	pop	{r3, pc}

0001f628 <find_ccc_cfg>:
{
   1f628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f62a:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f62c:	1c4c      	adds	r4, r1, #1
   1f62e:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f632:	1e67      	subs	r7, r4, #1
		if (conn) {
   1f634:	b14e      	cbz	r6, 1f64a <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f636:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1f63a:	4622      	mov	r2, r4
   1f63c:	4630      	mov	r0, r6
   1f63e:	f7ff f875 	bl	1e72c <bt_conn_is_peer_addr_le>
   1f642:	b160      	cbz	r0, 1f65e <find_ccc_cfg+0x36>
}
   1f644:	4638      	mov	r0, r7
   1f646:	b003      	add	sp, #12
   1f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1f64a:	2207      	movs	r2, #7
   1f64c:	4669      	mov	r1, sp
   1f64e:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f650:	9600      	str	r6, [sp, #0]
   1f652:	f8cd 6003 	str.w	r6, [sp, #3]
   1f656:	f7fe fa7b 	bl	1db50 <memcmp>
   1f65a:	2800      	cmp	r0, #0
   1f65c:	d0f2      	beq.n	1f644 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f65e:	340a      	adds	r4, #10
   1f660:	42ac      	cmp	r4, r5
   1f662:	d1e6      	bne.n	1f632 <find_ccc_cfg+0xa>
	return NULL;
   1f664:	2700      	movs	r7, #0
   1f666:	e7ed      	b.n	1f644 <find_ccc_cfg+0x1c>

0001f668 <read_appearance>:
{
   1f668:	b513      	push	{r0, r1, r4, lr}
   1f66a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f66e:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f670:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f672:	f44f 7240 	mov.w	r2, #768	; 0x300
   1f676:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f67a:	d80d      	bhi.n	1f698 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1f67c:	f1c1 0402 	rsb	r4, r1, #2
   1f680:	429c      	cmp	r4, r3
   1f682:	bfa8      	it	ge
   1f684:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f686:	f10d 0306 	add.w	r3, sp, #6
   1f68a:	4622      	mov	r2, r4
   1f68c:	4419      	add	r1, r3
   1f68e:	f7fe fa6f 	bl	1db70 <memcpy>
}
   1f692:	4620      	mov	r0, r4
   1f694:	b002      	add	sp, #8
   1f696:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f698:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f69c:	e7f9      	b.n	1f692 <read_appearance+0x2a>

0001f69e <read_name>:
{
   1f69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6a2:	4698      	mov	r8, r3
   1f6a4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f6a8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f6aa:	f7f6 f893 	bl	157d4 <bt_get_name>
   1f6ae:	4607      	mov	r7, r0
				 strlen(name));
   1f6b0:	f7fe fa3b 	bl	1db2a <strlen>
	if (offset > value_len) {
   1f6b4:	b283      	uxth	r3, r0
   1f6b6:	42b3      	cmp	r3, r6
   1f6b8:	d30c      	bcc.n	1f6d4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f6ba:	1b9c      	subs	r4, r3, r6
   1f6bc:	4544      	cmp	r4, r8
   1f6be:	bfa8      	it	ge
   1f6c0:	4644      	movge	r4, r8
   1f6c2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f6c4:	4622      	mov	r2, r4
   1f6c6:	19b9      	adds	r1, r7, r6
   1f6c8:	4628      	mov	r0, r5
   1f6ca:	f7fe fa51 	bl	1db70 <memcpy>
}
   1f6ce:	4620      	mov	r0, r4
   1f6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f6d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f6d8:	e7f9      	b.n	1f6ce <read_name+0x30>

0001f6da <cf_read>:
{
   1f6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f6dc:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f6de:	2300      	movs	r3, #0
{
   1f6e0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f6e4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f6e8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f6ea:	f7f8 f875 	bl	177d8 <find_cf_cfg>
	if (cfg) {
   1f6ee:	b128      	cbz	r0, 1f6fc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f6f0:	f100 0108 	add.w	r1, r0, #8
   1f6f4:	2201      	movs	r2, #1
   1f6f6:	a801      	add	r0, sp, #4
   1f6f8:	f7fe fa3a 	bl	1db70 <memcpy>
	if (offset > value_len) {
   1f6fc:	2e01      	cmp	r6, #1
   1f6fe:	d80d      	bhi.n	1f71c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f700:	f1c6 0401 	rsb	r4, r6, #1
   1f704:	42bc      	cmp	r4, r7
   1f706:	bfa8      	it	ge
   1f708:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f70a:	ab01      	add	r3, sp, #4
   1f70c:	4622      	mov	r2, r4
   1f70e:	1999      	adds	r1, r3, r6
   1f710:	4628      	mov	r0, r5
   1f712:	f7fe fa2d 	bl	1db70 <memcpy>
}
   1f716:	4620      	mov	r0, r4
   1f718:	b003      	add	sp, #12
   1f71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f71c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f720:	e7f9      	b.n	1f716 <cf_read+0x3c>

0001f722 <bt_gatt_attr_read_ccc>:
{
   1f722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f724:	68c9      	ldr	r1, [r1, #12]
{
   1f726:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f72a:	4615      	mov	r5, r2
   1f72c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f72e:	f7ff ff7b 	bl	1f628 <find_ccc_cfg>
	if (cfg) {
   1f732:	b100      	cbz	r0, 1f736 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f734:	8900      	ldrh	r0, [r0, #8]
   1f736:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f73a:	2e02      	cmp	r6, #2
   1f73c:	d80e      	bhi.n	1f75c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f73e:	f1c6 0402 	rsb	r4, r6, #2
   1f742:	42bc      	cmp	r4, r7
   1f744:	bfa8      	it	ge
   1f746:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f748:	f10d 0306 	add.w	r3, sp, #6
   1f74c:	4622      	mov	r2, r4
   1f74e:	1999      	adds	r1, r3, r6
   1f750:	4628      	mov	r0, r5
   1f752:	f7fe fa0d 	bl	1db70 <memcpy>
}
   1f756:	4620      	mov	r0, r4
   1f758:	b003      	add	sp, #12
   1f75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f75c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f760:	e7f9      	b.n	1f756 <bt_gatt_attr_read_ccc+0x34>

0001f762 <bt_gatt_attr_read_service>:
{
   1f762:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f764:	68c9      	ldr	r1, [r1, #12]
{
   1f766:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f76a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f76c:	780b      	ldrb	r3, [r1, #0]
{
   1f76e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f770:	b993      	cbnz	r3, 1f798 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f772:	884b      	ldrh	r3, [r1, #2]
   1f774:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f778:	2d02      	cmp	r5, #2
   1f77a:	d819      	bhi.n	1f7b0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f77c:	f1c5 0202 	rsb	r2, r5, #2
   1f780:	4294      	cmp	r4, r2
   1f782:	bfa8      	it	ge
   1f784:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f786:	f10d 0306 	add.w	r3, sp, #6
   1f78a:	4622      	mov	r2, r4
   1f78c:	1959      	adds	r1, r3, r5
   1f78e:	f7fe f9ef 	bl	1db70 <memcpy>
}
   1f792:	4620      	mov	r0, r4
   1f794:	b003      	add	sp, #12
   1f796:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f798:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f79a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f79e:	d807      	bhi.n	1f7b0 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f7a0:	f1c5 0210 	rsb	r2, r5, #16
   1f7a4:	4294      	cmp	r4, r2
   1f7a6:	bfa8      	it	ge
   1f7a8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f7aa:	4622      	mov	r2, r4
   1f7ac:	4429      	add	r1, r5
   1f7ae:	e7ee      	b.n	1f78e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f7b0:	f06f 0406 	mvn.w	r4, #6
   1f7b4:	e7ed      	b.n	1f792 <bt_gatt_attr_read_service+0x30>

0001f7b6 <sc_save>:
{
   1f7b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f7ba:	4680      	mov	r8, r0
   1f7bc:	460f      	mov	r7, r1
   1f7be:	4616      	mov	r6, r2
   1f7c0:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1f7c2:	f7f7 ffe7 	bl	17794 <find_sc_cfg>
	if (!cfg) {
   1f7c6:	4604      	mov	r4, r0
   1f7c8:	b968      	cbnz	r0, 1f7e6 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1f7ca:	4669      	mov	r1, sp
   1f7cc:	9000      	str	r0, [sp, #0]
   1f7ce:	f8cd 0003 	str.w	r0, [sp, #3]
   1f7d2:	f7f7 ffdf 	bl	17794 <find_sc_cfg>
		if (!cfg) {
   1f7d6:	4604      	mov	r4, r0
   1f7d8:	b180      	cbz	r0, 1f7fc <sc_save+0x46>
		cfg->id = id;
   1f7da:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   1f7de:	2207      	movs	r2, #7
   1f7e0:	4639      	mov	r1, r7
   1f7e2:	f7fe f9c5 	bl	1db70 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1f7e6:	8922      	ldrh	r2, [r4, #8]
   1f7e8:	8963      	ldrh	r3, [r4, #10]
   1f7ea:	b91a      	cbnz	r2, 1f7f4 <sc_save+0x3e>
   1f7ec:	b923      	cbnz	r3, 1f7f8 <sc_save+0x42>
		cfg->data.start = start;
   1f7ee:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1f7f0:	8165      	strh	r5, [r4, #10]
   1f7f2:	e003      	b.n	1f7fc <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   1f7f4:	4296      	cmp	r6, r2
   1f7f6:	d304      	bcc.n	1f802 <sc_save+0x4c>
   1f7f8:	429d      	cmp	r5, r3
   1f7fa:	d8f9      	bhi.n	1f7f0 <sc_save+0x3a>
}
   1f7fc:	b002      	add	sp, #8
   1f7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1f802:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1f804:	e7f8      	b.n	1f7f8 <sc_save+0x42>

0001f806 <sc_clear>:
{
   1f806:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f808:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f80c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f80e:	4631      	mov	r1, r6
   1f810:	7a00      	ldrb	r0, [r0, #8]
   1f812:	f7fe fe41 	bl	1e498 <bt_addr_le_is_bonded>
   1f816:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f818:	4631      	mov	r1, r6
   1f81a:	f7f7 ffbb 	bl	17794 <find_sc_cfg>
	if (!cfg) {
   1f81e:	b128      	cbz	r0, 1f82c <sc_clear+0x26>
}
   1f820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f824:	220c      	movs	r2, #12
   1f826:	2100      	movs	r1, #0
   1f828:	f7fe b9cd 	b.w	1dbc6 <memset>
}
   1f82c:	bd70      	pop	{r4, r5, r6, pc}

0001f82e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f82e:	2a02      	cmp	r2, #2
{
   1f830:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f832:	d108      	bne.n	1f846 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f834:	2300      	movs	r3, #0
   1f836:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f83a:	461a      	mov	r2, r3
   1f83c:	7a00      	ldrb	r0, [r0, #8]
   1f83e:	f7ff ffba 	bl	1f7b6 <sc_save>
}
   1f842:	2002      	movs	r0, #2
   1f844:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f846:	f7ff ffde 	bl	1f806 <sc_clear>
   1f84a:	e7fa      	b.n	1f842 <sc_ccc_cfg_write+0x14>

0001f84c <bt_gatt_attr_write_ccc>:
{
   1f84c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f850:	461f      	mov	r7, r3
   1f852:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1f856:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1f85a:	4606      	mov	r6, r0
   1f85c:	4688      	mov	r8, r1
	if (offset) {
   1f85e:	2b00      	cmp	r3, #0
   1f860:	d146      	bne.n	1f8f0 <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   1f862:	1e7b      	subs	r3, r7, #1
   1f864:	2b01      	cmp	r3, #1
   1f866:	d846      	bhi.n	1f8f6 <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   1f868:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1f86a:	7815      	ldrb	r5, [r2, #0]
   1f86c:	bf18      	it	ne
   1f86e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1f870:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1f872:	bf0c      	ite	eq
   1f874:	b2ad      	uxtheq	r5, r5
   1f876:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1f87a:	f7ff fed5 	bl	1f628 <find_ccc_cfg>
	if (!cfg) {
   1f87e:	4604      	mov	r4, r0
   1f880:	b988      	cbnz	r0, 1f8a6 <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1f882:	b91d      	cbnz	r5, 1f88c <bt_gatt_attr_write_ccc+0x40>
			return len;
   1f884:	4638      	mov	r0, r7
}
   1f886:	b003      	add	sp, #12
   1f888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1f88c:	4649      	mov	r1, r9
   1f88e:	f7ff fecb 	bl	1f628 <find_ccc_cfg>
		if (!cfg) {
   1f892:	4604      	mov	r4, r0
   1f894:	b390      	cbz	r0, 1f8fc <bt_gatt_attr_write_ccc+0xb0>
   1f896:	2207      	movs	r2, #7
   1f898:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f89c:	3001      	adds	r0, #1
   1f89e:	f7fe f967 	bl	1db70 <memcpy>
		cfg->id = conn->id;
   1f8a2:	7a33      	ldrb	r3, [r6, #8]
   1f8a4:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1f8a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1f8aa:	b9ab      	cbnz	r3, 1f8d8 <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   1f8ac:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   1f8b0:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1f8b2:	42ab      	cmp	r3, r5
   1f8b4:	d003      	beq.n	1f8be <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1f8b6:	4649      	mov	r1, r9
   1f8b8:	4640      	mov	r0, r8
   1f8ba:	f7ff fd86 	bl	1f3ca <gatt_ccc_changed>
	if (!value) {
   1f8be:	2d00      	cmp	r5, #0
   1f8c0:	d1e0      	bne.n	1f884 <bt_gatt_attr_write_ccc+0x38>
   1f8c2:	2207      	movs	r2, #7
   1f8c4:	4669      	mov	r1, sp
   1f8c6:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f8c8:	9500      	str	r5, [sp, #0]
   1f8ca:	f8cd 5003 	str.w	r5, [sp, #3]
   1f8ce:	f7fe f94f 	bl	1db70 <memcpy>
	cfg->id = 0U;
   1f8d2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f8d4:	8125      	strh	r5, [r4, #8]
}
   1f8d6:	e7d5      	b.n	1f884 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1f8d8:	462a      	mov	r2, r5
   1f8da:	4641      	mov	r1, r8
   1f8dc:	4630      	mov	r0, r6
   1f8de:	4798      	blx	r3
		if (write < 0) {
   1f8e0:	2800      	cmp	r0, #0
   1f8e2:	dbd0      	blt.n	1f886 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1f8e4:	3801      	subs	r0, #1
   1f8e6:	2801      	cmp	r0, #1
   1f8e8:	d9e0      	bls.n	1f8ac <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1f8ea:	f06f 000d 	mvn.w	r0, #13
   1f8ee:	e7ca      	b.n	1f886 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8f0:	f06f 0006 	mvn.w	r0, #6
   1f8f4:	e7c7      	b.n	1f886 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f8f6:	f06f 000c 	mvn.w	r0, #12
   1f8fa:	e7c4      	b.n	1f886 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1f8fc:	f06f 0010 	mvn.w	r0, #16
   1f900:	e7c1      	b.n	1f886 <bt_gatt_attr_write_ccc+0x3a>

0001f902 <bt_gatt_attr_read>:
{
   1f902:	b538      	push	{r3, r4, r5, lr}
   1f904:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f908:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f90c:	42a9      	cmp	r1, r5
{
   1f90e:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f910:	d80b      	bhi.n	1f92a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f912:	1a6d      	subs	r5, r5, r1
   1f914:	429d      	cmp	r5, r3
   1f916:	bfa8      	it	ge
   1f918:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f91a:	9b05      	ldr	r3, [sp, #20]
   1f91c:	b2ad      	uxth	r5, r5
   1f91e:	462a      	mov	r2, r5
   1f920:	4419      	add	r1, r3
   1f922:	f7fe f925 	bl	1db70 <memcpy>
}
   1f926:	4628      	mov	r0, r5
   1f928:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f92a:	f06f 0506 	mvn.w	r5, #6
   1f92e:	e7fa      	b.n	1f926 <bt_gatt_attr_read+0x24>

0001f930 <bt_gatt_attr_value_handle>:
{
   1f930:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f932:	4604      	mov	r4, r0
   1f934:	b910      	cbnz	r0, 1f93c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f936:	2000      	movs	r0, #0
}
   1f938:	b002      	add	sp, #8
   1f93a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f93c:	2300      	movs	r3, #0
   1f93e:	f88d 3004 	strb.w	r3, [sp, #4]
   1f942:	6800      	ldr	r0, [r0, #0]
   1f944:	f642 0303 	movw	r3, #10243	; 0x2803
   1f948:	a901      	add	r1, sp, #4
   1f94a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f94e:	f7fe f9c9 	bl	1dce4 <bt_uuid_cmp>
   1f952:	2800      	cmp	r0, #0
   1f954:	d1ef      	bne.n	1f936 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f956:	68e3      	ldr	r3, [r4, #12]
   1f958:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f95a:	2800      	cmp	r0, #0
   1f95c:	d1ec      	bne.n	1f938 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f95e:	4620      	mov	r0, r4
   1f960:	f7f8 f92a 	bl	17bb8 <bt_gatt_attr_get_handle>
   1f964:	3001      	adds	r0, #1
   1f966:	b280      	uxth	r0, r0
	return handle;
   1f968:	e7e6      	b.n	1f938 <bt_gatt_attr_value_handle+0x8>

0001f96a <bt_gatt_attr_read_chrc>:
{
   1f96a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f96c:	68cf      	ldr	r7, [r1, #12]
{
   1f96e:	b087      	sub	sp, #28
   1f970:	4608      	mov	r0, r1
   1f972:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f974:	79bb      	ldrb	r3, [r7, #6]
   1f976:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f97a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f97e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f980:	f7ff ffd6 	bl	1f930 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f984:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f986:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f98a:	780b      	ldrb	r3, [r1, #0]
   1f98c:	b99b      	cbnz	r3, 1f9b6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f98e:	884b      	ldrh	r3, [r1, #2]
   1f990:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f994:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f996:	42b1      	cmp	r1, r6
   1f998:	d315      	bcc.n	1f9c6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f99a:	1b89      	subs	r1, r1, r6
   1f99c:	42a1      	cmp	r1, r4
   1f99e:	bfa8      	it	ge
   1f9a0:	4621      	movge	r1, r4
   1f9a2:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1f9a4:	ab01      	add	r3, sp, #4
   1f9a6:	4622      	mov	r2, r4
   1f9a8:	1999      	adds	r1, r3, r6
   1f9aa:	4628      	mov	r0, r5
   1f9ac:	f7fe f8e0 	bl	1db70 <memcpy>
}
   1f9b0:	4620      	mov	r0, r4
   1f9b2:	b007      	add	sp, #28
   1f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f9b6:	3101      	adds	r1, #1
   1f9b8:	2210      	movs	r2, #16
   1f9ba:	f10d 0007 	add.w	r0, sp, #7
   1f9be:	f7fe f8d7 	bl	1db70 <memcpy>
		value_len += 16U;
   1f9c2:	2113      	movs	r1, #19
   1f9c4:	e7e7      	b.n	1f996 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f9c6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f9ca:	e7f1      	b.n	1f9b0 <bt_gatt_attr_read_chrc+0x46>

0001f9cc <bt_gatt_foreach_attr>:
{
   1f9cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f9ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f9d2:	2300      	movs	r3, #0
   1f9d4:	9300      	str	r3, [sp, #0]
   1f9d6:	461a      	mov	r2, r3
   1f9d8:	f7f8 f91e 	bl	17c18 <bt_gatt_foreach_attr_type>
}
   1f9dc:	b005      	add	sp, #20
   1f9de:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9e2 <db_hash_process>:
	db_hash_gen(true);
   1f9e2:	f7f8 b973 	b.w	17ccc <db_hash_gen.isra.0>

0001f9e6 <bt_gatt_attr_read_cud>:
{
   1f9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   1f9ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1f9ee:	f8bd 6018 	ldrh.w	r6, [sp, #24]
				 strlen(value));
   1f9f2:	4640      	mov	r0, r8
{
   1f9f4:	461f      	mov	r7, r3
   1f9f6:	4615      	mov	r5, r2
				 strlen(value));
   1f9f8:	f7fe f897 	bl	1db2a <strlen>
	if (offset > value_len) {
   1f9fc:	b283      	uxth	r3, r0
   1f9fe:	42b3      	cmp	r3, r6
   1fa00:	d30d      	bcc.n	1fa1e <bt_gatt_attr_read_cud+0x38>
	len = MIN(buf_len, value_len - offset);
   1fa02:	1b9c      	subs	r4, r3, r6
   1fa04:	42bc      	cmp	r4, r7
   1fa06:	bfa8      	it	ge
   1fa08:	463c      	movge	r4, r7
   1fa0a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1fa0c:	4622      	mov	r2, r4
   1fa0e:	eb08 0106 	add.w	r1, r8, r6
   1fa12:	4628      	mov	r0, r5
   1fa14:	f7fe f8ac 	bl	1db70 <memcpy>
}
   1fa18:	4620      	mov	r0, r4
   1fa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fa1e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1fa22:	e7f9      	b.n	1fa18 <bt_gatt_attr_read_cud+0x32>

0001fa24 <bt_gatt_check_perm>:
{
   1fa24:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1fa26:	07d4      	lsls	r4, r2, #31
{
   1fa28:	4605      	mov	r5, r0
   1fa2a:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fa2c:	d504      	bpl.n	1fa38 <bt_gatt_check_perm+0x14>
   1fa2e:	f010 0f15 	tst.w	r0, #21
   1fa32:	d01e      	beq.n	1fa72 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa34:	684b      	ldr	r3, [r1, #4]
   1fa36:	b1e3      	cbz	r3, 1fa72 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fa38:	0793      	lsls	r3, r2, #30
   1fa3a:	d504      	bpl.n	1fa46 <bt_gatt_check_perm+0x22>
   1fa3c:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1fa40:	d019      	beq.n	1fa76 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fa42:	688b      	ldr	r3, [r1, #8]
   1fa44:	b1bb      	cbz	r3, 1fa76 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1fa46:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fa4a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fa4e:	d103      	bne.n	1fa58 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1fa50:	f014 000c 	ands.w	r0, r4, #12
   1fa54:	d107      	bne.n	1fa66 <bt_gatt_check_perm+0x42>
}
   1fa56:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fa58:	4628      	mov	r0, r5
   1fa5a:	f7fe fdf4 	bl	1e646 <bt_conn_get_security>
   1fa5e:	2802      	cmp	r0, #2
   1fa60:	d8f6      	bhi.n	1fa50 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1fa62:	2005      	movs	r0, #5
   1fa64:	e7f7      	b.n	1fa56 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1fa66:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	bf14      	ite	ne
   1fa6c:	2000      	movne	r0, #0
   1fa6e:	200f      	moveq	r0, #15
   1fa70:	e7f1      	b.n	1fa56 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fa72:	2002      	movs	r0, #2
   1fa74:	e7ef      	b.n	1fa56 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fa76:	2003      	movs	r0, #3
   1fa78:	e7ed      	b.n	1fa56 <bt_gatt_check_perm+0x32>

0001fa7a <bt_gatt_change_aware>:
{
   1fa7a:	b510      	push	{r4, lr}
   1fa7c:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fa7e:	f7f7 feab 	bl	177d8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fa82:	4603      	mov	r3, r0
   1fa84:	b910      	cbnz	r0, 1fa8c <bt_gatt_change_aware+0x12>
		return true;
   1fa86:	2401      	movs	r4, #1
}
   1fa88:	4620      	mov	r0, r4
   1fa8a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fa8c:	7a02      	ldrb	r2, [r0, #8]
   1fa8e:	07d2      	lsls	r2, r2, #31
   1fa90:	d5f9      	bpl.n	1fa86 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fa92:	f3bf 8f5b 	dmb	ish
   1fa96:	68d9      	ldr	r1, [r3, #12]
   1fa98:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fa9c:	f011 0101 	ands.w	r1, r1, #1
   1faa0:	f100 000c 	add.w	r0, r0, #12
   1faa4:	d1ef      	bne.n	1fa86 <bt_gatt_change_aware+0xc>
	if (!req) {
   1faa6:	2c00      	cmp	r4, #0
   1faa8:	d0ee      	beq.n	1fa88 <bt_gatt_change_aware+0xe>
   1faaa:	f3bf 8f5b 	dmb	ish
   1faae:	68db      	ldr	r3, [r3, #12]
   1fab0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fab4:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fab8:	079b      	lsls	r3, r3, #30
   1faba:	d50e      	bpl.n	1fada <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fabc:	f3bf 8f5b 	dmb	ish
   1fac0:	e850 3f00 	ldrex	r3, [r0]
   1fac4:	f023 0302 	bic.w	r3, r3, #2
   1fac8:	e840 3200 	strex	r2, r3, [r0]
   1facc:	2a00      	cmp	r2, #0
   1face:	d1f7      	bne.n	1fac0 <bt_gatt_change_aware+0x46>
   1fad0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fad4:	f7ff fcf3 	bl	1f4be <atomic_set_bit>
	return false;
   1fad8:	e7d6      	b.n	1fa88 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1fada:	2101      	movs	r1, #1
   1fadc:	e7fa      	b.n	1fad4 <bt_gatt_change_aware+0x5a>

0001fade <sys_memcpy_swap>:
	psrc += length - 1;
   1fade:	1e53      	subs	r3, r2, #1
   1fae0:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1fae2:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1fae4:	f811 3901 	ldrb.w	r3, [r1], #-1
   1fae8:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1faec:	4290      	cmp	r0, r2
   1faee:	d1f9      	bne.n	1fae4 <sys_memcpy_swap+0x6>
}
   1faf0:	4770      	bx	lr

0001faf2 <smp_pairing_rsp>:
}
   1faf2:	2007      	movs	r0, #7
   1faf4:	4770      	bx	lr

0001faf6 <smp_chan_get>:
{
   1faf6:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1faf8:	2106      	movs	r1, #6
   1fafa:	f7fe ff8b 	bl	1ea14 <bt_l2cap_le_lookup_rx_cid>
}
   1fafe:	2800      	cmp	r0, #0
   1fb00:	bf38      	it	cc
   1fb02:	2000      	movcc	r0, #0
   1fb04:	bd08      	pop	{r3, pc}

0001fb06 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fb06:	2301      	movs	r3, #1
   1fb08:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fb0a:	f3bf 8f5b 	dmb	ish
   1fb0e:	e850 2f00 	ldrex	r2, [r0]
   1fb12:	431a      	orrs	r2, r3
   1fb14:	e840 2100 	strex	r1, r2, [r0]
   1fb18:	2900      	cmp	r1, #0
   1fb1a:	d1f8      	bne.n	1fb0e <atomic_set_bit+0x8>
   1fb1c:	f3bf 8f5b 	dmb	ish
}
   1fb20:	4770      	bx	lr

0001fb22 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fb22:	2301      	movs	r3, #1
   1fb24:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fb26:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fb28:	f3bf 8f5b 	dmb	ish
   1fb2c:	e850 2f00 	ldrex	r2, [r0]
   1fb30:	401a      	ands	r2, r3
   1fb32:	e840 2100 	strex	r1, r2, [r0]
   1fb36:	2900      	cmp	r1, #0
   1fb38:	d1f8      	bne.n	1fb2c <atomic_clear_bit+0xa>
   1fb3a:	f3bf 8f5b 	dmb	ish
}
   1fb3e:	4770      	bx	lr

0001fb40 <bt_smp_aes_cmac>:
{
   1fb40:	b570      	push	{r4, r5, r6, lr}
   1fb42:	b0c2      	sub	sp, #264	; 0x108
   1fb44:	460d      	mov	r5, r1
   1fb46:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fb48:	4601      	mov	r1, r0
   1fb4a:	aa16      	add	r2, sp, #88	; 0x58
   1fb4c:	4668      	mov	r0, sp
{
   1fb4e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1fb50:	f7fd ff04 	bl	1d95c <tc_cmac_setup>
   1fb54:	b150      	cbz	r0, 1fb6c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1fb56:	4632      	mov	r2, r6
   1fb58:	4629      	mov	r1, r5
   1fb5a:	4668      	mov	r0, sp
   1fb5c:	f7fd ff29 	bl	1d9b2 <tc_cmac_update>
   1fb60:	b120      	cbz	r0, 1fb6c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1fb62:	4669      	mov	r1, sp
   1fb64:	4620      	mov	r0, r4
   1fb66:	f7fd ff90 	bl	1da8a <tc_cmac_final>
   1fb6a:	b918      	cbnz	r0, 1fb74 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1fb6c:	f06f 0004 	mvn.w	r0, #4
}
   1fb70:	b042      	add	sp, #264	; 0x108
   1fb72:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fb74:	2000      	movs	r0, #0
   1fb76:	e7fb      	b.n	1fb70 <bt_smp_aes_cmac+0x30>

0001fb78 <bt_smp_disconnected>:
{
   1fb78:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1fb7a:	6803      	ldr	r3, [r0, #0]
   1fb7c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   1fb80:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1fb82:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1fb86:	f001 f9c0 	bl	20f0a <k_delayed_work_cancel>
	if (keys) {
   1fb8a:	b13d      	cbz	r5, 1fb9c <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fb8c:	89eb      	ldrh	r3, [r5, #14]
   1fb8e:	b113      	cbz	r3, 1fb96 <bt_smp_disconnected+0x1e>
   1fb90:	7b6b      	ldrb	r3, [r5, #13]
   1fb92:	079b      	lsls	r3, r3, #30
   1fb94:	d502      	bpl.n	1fb9c <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1fb96:	4628      	mov	r0, r5
   1fb98:	f000 fc7f 	bl	2049a <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1fb9c:	4620      	mov	r0, r4
   1fb9e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   1fba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1fba6:	2100      	movs	r1, #0
   1fba8:	f7fe b80d 	b.w	1dbc6 <memset>

0001fbac <smp_security_request>:
   1fbac:	2007      	movs	r0, #7
   1fbae:	4770      	bx	lr

0001fbb0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1fbb0:	b510      	push	{r4, lr}
   1fbb2:	1e43      	subs	r3, r0, #1
   1fbb4:	f100 0210 	add.w	r2, r0, #16
   1fbb8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1fbba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fbbe:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fbc2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1fbc4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1fbc6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1fbc8:	d1f7      	bne.n	1fbba <sys_mem_swap.constprop.0+0xa>
	}
}
   1fbca:	bd10      	pop	{r4, pc}

0001fbcc <smp_f6>:
{
   1fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbce:	b097      	sub	sp, #92	; 0x5c
   1fbd0:	4605      	mov	r5, r0
   1fbd2:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1fbd4:	a805      	add	r0, sp, #20
   1fbd6:	2210      	movs	r2, #16
{
   1fbd8:	461c      	mov	r4, r3
   1fbda:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1fbdc:	f7ff ff7f 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1fbe0:	2210      	movs	r2, #16
   1fbe2:	4631      	mov	r1, r6
   1fbe4:	a809      	add	r0, sp, #36	; 0x24
   1fbe6:	f7ff ff7a 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1fbea:	4621      	mov	r1, r4
   1fbec:	2210      	movs	r2, #16
   1fbee:	a80d      	add	r0, sp, #52	; 0x34
   1fbf0:	f7ff ff75 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1fbf4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fbf6:	2203      	movs	r2, #3
   1fbf8:	a811      	add	r0, sp, #68	; 0x44
   1fbfa:	f7ff ff70 	bl	1fade <sys_memcpy_swap>
	m[51] = a1->type;
   1fbfe:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1fc00:	f814 3b01 	ldrb.w	r3, [r4], #1
   1fc04:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1fc08:	4621      	mov	r1, r4
   1fc0a:	2206      	movs	r2, #6
   1fc0c:	a812      	add	r0, sp, #72	; 0x48
   1fc0e:	f7fd ffaf 	bl	1db70 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1fc12:	4621      	mov	r1, r4
   1fc14:	2206      	movs	r2, #6
   1fc16:	a812      	add	r0, sp, #72	; 0x48
   1fc18:	f7ff ff61 	bl	1fade <sys_memcpy_swap>
	m[58] = a2->type;
   1fc1c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1fc1e:	f814 3b01 	ldrb.w	r3, [r4], #1
   1fc22:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1fc26:	4621      	mov	r1, r4
   1fc28:	2206      	movs	r2, #6
   1fc2a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fc2e:	f7fd ff9f 	bl	1db70 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1fc32:	4621      	mov	r1, r4
   1fc34:	2206      	movs	r2, #6
   1fc36:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1fc3a:	f7ff ff50 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1fc3e:	2210      	movs	r2, #16
   1fc40:	4629      	mov	r1, r5
   1fc42:	a801      	add	r0, sp, #4
   1fc44:	f7ff ff4b 	bl	1fade <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1fc48:	463b      	mov	r3, r7
   1fc4a:	2241      	movs	r2, #65	; 0x41
   1fc4c:	a905      	add	r1, sp, #20
   1fc4e:	a801      	add	r0, sp, #4
   1fc50:	f7ff ff76 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   1fc54:	4604      	mov	r4, r0
   1fc56:	b910      	cbnz	r0, 1fc5e <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1fc58:	4638      	mov	r0, r7
   1fc5a:	f7ff ffa9 	bl	1fbb0 <sys_mem_swap.constprop.0>
}
   1fc5e:	4620      	mov	r0, r4
   1fc60:	b017      	add	sp, #92	; 0x5c
   1fc62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fc64 <smp_f4>:
{
   1fc64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc66:	b097      	sub	sp, #92	; 0x5c
   1fc68:	4614      	mov	r4, r2
   1fc6a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1fc6c:	2220      	movs	r2, #32
   1fc6e:	4601      	mov	r1, r0
   1fc70:	a805      	add	r0, sp, #20
{
   1fc72:	461d      	mov	r5, r3
   1fc74:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1fc76:	f7ff ff32 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1fc7a:	2220      	movs	r2, #32
   1fc7c:	4631      	mov	r1, r6
   1fc7e:	a80d      	add	r0, sp, #52	; 0x34
   1fc80:	f7ff ff2d 	bl	1fade <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1fc84:	4621      	mov	r1, r4
   1fc86:	2210      	movs	r2, #16
   1fc88:	a801      	add	r0, sp, #4
	m[64] = z;
   1fc8a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1fc8e:	f7ff ff26 	bl	1fade <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1fc92:	463b      	mov	r3, r7
   1fc94:	2241      	movs	r2, #65	; 0x41
   1fc96:	a905      	add	r1, sp, #20
   1fc98:	a801      	add	r0, sp, #4
   1fc9a:	f7ff ff51 	bl	1fb40 <bt_smp_aes_cmac>
	if (err) {
   1fc9e:	4604      	mov	r4, r0
   1fca0:	b910      	cbnz	r0, 1fca8 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1fca2:	4638      	mov	r0, r7
   1fca4:	f7ff ff84 	bl	1fbb0 <sys_mem_swap.constprop.0>
}
   1fca8:	4620      	mov	r0, r4
   1fcaa:	b017      	add	sp, #92	; 0x5c
   1fcac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fcae <smp_signing_info>:
   1fcae:	2007      	movs	r0, #7
   1fcb0:	4770      	bx	lr

0001fcb2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fcb2:	f3bf 8f5b 	dmb	ish
   1fcb6:	6800      	ldr	r0, [r0, #0]
   1fcb8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1fcbc:	4108      	asrs	r0, r1
}
   1fcbe:	f000 0001 	and.w	r0, r0, #1
   1fcc2:	4770      	bx	lr

0001fcc4 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fcc4:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fcc6:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1fcca:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fccc:	4628      	mov	r0, r5
   1fcce:	2104      	movs	r1, #4
   1fcd0:	f7ff ffef 	bl	1fcb2 <atomic_test_bit>
   1fcd4:	b168      	cbz	r0, 1fcf2 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   1fcd6:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fcd8:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1fcda:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1fcdc:	4608      	mov	r0, r1
   1fcde:	f7fe fe40 	bl	1e962 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1fce2:	4604      	mov	r4, r0
   1fce4:	b940      	cbnz	r0, 1fcf8 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1fce6:	2104      	movs	r1, #4
   1fce8:	4628      	mov	r0, r5
   1fcea:	f7ff ff0c 	bl	1fb06 <atomic_set_bit>
}
   1fcee:	4620      	mov	r0, r4
   1fcf0:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1fcf2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1fcf6:	e7ef      	b.n	1fcd8 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1fcf8:	2101      	movs	r1, #1
   1fcfa:	3008      	adds	r0, #8
   1fcfc:	f000 fc32 	bl	20564 <net_buf_simple_add>
	hdr->code = op;
   1fd00:	7006      	strb	r6, [r0, #0]
	return buf;
   1fd02:	e7f4      	b.n	1fcee <smp_create_pdu.isra.0+0x2a>

0001fd04 <smp_send_pairing_random>:
{
   1fd04:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fd06:	2104      	movs	r1, #4
{
   1fd08:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1fd0a:	f7ff ffdb 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1fd0e:	4604      	mov	r4, r0
   1fd10:	b178      	cbz	r0, 1fd32 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   1fd12:	2110      	movs	r1, #16
   1fd14:	3008      	adds	r0, #8
   1fd16:	f000 fc25 	bl	20564 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1fd1a:	2210      	movs	r2, #16
   1fd1c:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1fd20:	f7fd ff26 	bl	1db70 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fd24:	4628      	mov	r0, r5
   1fd26:	2200      	movs	r2, #0
   1fd28:	4621      	mov	r1, r4
   1fd2a:	f7f8 fa87 	bl	1823c <smp_send.isra.0>
	return 0;
   1fd2e:	2000      	movs	r0, #0
}
   1fd30:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fd32:	2008      	movs	r0, #8
   1fd34:	e7fc      	b.n	1fd30 <smp_send_pairing_random+0x2c>

0001fd36 <send_pairing_rsp>:
{
   1fd36:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fd38:	2102      	movs	r1, #2
{
   1fd3a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1fd3c:	f7ff ffc2 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1fd40:	4604      	mov	r4, r0
   1fd42:	b178      	cbz	r0, 1fd64 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   1fd44:	2106      	movs	r1, #6
   1fd46:	3008      	adds	r0, #8
   1fd48:	f000 fc0c 	bl	20564 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1fd4c:	2206      	movs	r2, #6
   1fd4e:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   1fd52:	f7fd ff0d 	bl	1db70 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1fd56:	4628      	mov	r0, r5
   1fd58:	2200      	movs	r2, #0
   1fd5a:	4621      	mov	r1, r4
   1fd5c:	f7f8 fa6e 	bl	1823c <smp_send.isra.0>
	return 0;
   1fd60:	2000      	movs	r0, #0
}
   1fd62:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1fd64:	2008      	movs	r0, #8
   1fd66:	e7fc      	b.n	1fd62 <send_pairing_rsp+0x2c>

0001fd68 <smp_dhkey_check>:
{
   1fd68:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1fd6a:	6803      	ldr	r3, [r0, #0]
   1fd6c:	78db      	ldrb	r3, [r3, #3]
   1fd6e:	2b01      	cmp	r3, #1
{
   1fd70:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1fd72:	d115      	bne.n	1fda0 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1fd74:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1fd76:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   1fd7a:	210f      	movs	r1, #15
   1fd7c:	4628      	mov	r0, r5
   1fd7e:	f7ff fed0 	bl	1fb22 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1fd82:	4631      	mov	r1, r6
   1fd84:	2210      	movs	r2, #16
   1fd86:	f204 106f 	addw	r0, r4, #367	; 0x16f
   1fd8a:	f7fd fef1 	bl	1db70 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1fd8e:	2107      	movs	r1, #7
   1fd90:	4628      	mov	r0, r5
   1fd92:	f7ff ff8e 	bl	1fcb2 <atomic_test_bit>
   1fd96:	b128      	cbz	r0, 1fda4 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fd98:	2108      	movs	r1, #8
   1fd9a:	4628      	mov	r0, r5
   1fd9c:	f7ff feb3 	bl	1fb06 <atomic_set_bit>
}
   1fda0:	2000      	movs	r0, #0
   1fda2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fda4:	2109      	movs	r1, #9
   1fda6:	4628      	mov	r0, r5
   1fda8:	f7ff ff83 	bl	1fcb2 <atomic_test_bit>
   1fdac:	2800      	cmp	r0, #0
   1fdae:	d1f3      	bne.n	1fd98 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1fdb0:	4620      	mov	r0, r4
}
   1fdb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1fdb6:	f7f8 ba59 	b.w	1826c <compute_and_check_and_send_slave_dhcheck>

0001fdba <smp_ident_info>:
{
   1fdba:	b538      	push	{r3, r4, r5, lr}
   1fdbc:	4604      	mov	r4, r0
   1fdbe:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fdc0:	30bc      	adds	r0, #188	; 0xbc
   1fdc2:	210c      	movs	r1, #12
   1fdc4:	f7ff ff75 	bl	1fcb2 <atomic_test_bit>
   1fdc8:	b168      	cbz	r0, 1fde6 <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1fdca:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1fdcc:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1fdce:	2002      	movs	r0, #2
   1fdd0:	7a19      	ldrb	r1, [r3, #8]
   1fdd2:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1fdd6:	f000 fb4c 	bl	20472 <bt_keys_get_type>
		if (!keys) {
   1fdda:	b158      	cbz	r0, 1fdf4 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1fddc:	2210      	movs	r2, #16
   1fdde:	4629      	mov	r1, r5
   1fde0:	302a      	adds	r0, #42	; 0x2a
   1fde2:	f7fd fec5 	bl	1db70 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1fde6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1fdea:	2109      	movs	r1, #9
   1fdec:	f7ff fe8b 	bl	1fb06 <atomic_set_bit>
	return 0;
   1fdf0:	2000      	movs	r0, #0
}
   1fdf2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1fdf4:	2008      	movs	r0, #8
   1fdf6:	e7fc      	b.n	1fdf2 <smp_ident_info+0x38>

0001fdf8 <smp_encrypt_info>:
{
   1fdf8:	b538      	push	{r3, r4, r5, lr}
   1fdfa:	4604      	mov	r4, r0
   1fdfc:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fdfe:	30bc      	adds	r0, #188	; 0xbc
   1fe00:	210c      	movs	r1, #12
   1fe02:	f7ff ff56 	bl	1fcb2 <atomic_test_bit>
   1fe06:	b168      	cbz	r0, 1fe24 <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1fe08:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1fe0a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1fe0c:	2004      	movs	r0, #4
   1fe0e:	7a19      	ldrb	r1, [r3, #8]
   1fe10:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1fe14:	f000 fb2d 	bl	20472 <bt_keys_get_type>
		if (!keys) {
   1fe18:	b158      	cbz	r0, 1fe32 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   1fe1a:	2210      	movs	r2, #16
   1fe1c:	4629      	mov	r1, r5
   1fe1e:	301a      	adds	r0, #26
   1fe20:	f7fd fea6 	bl	1db70 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1fe24:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1fe28:	2107      	movs	r1, #7
   1fe2a:	f7ff fe6c 	bl	1fb06 <atomic_set_bit>
	return 0;
   1fe2e:	2000      	movs	r0, #0
}
   1fe30:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1fe32:	2008      	movs	r0, #8
   1fe34:	e7fc      	b.n	1fe30 <smp_encrypt_info+0x38>

0001fe36 <atomic_test_and_clear_bit>:
{
   1fe36:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fe38:	2301      	movs	r3, #1
   1fe3a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fe3e:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fe40:	f3bf 8f5b 	dmb	ish
   1fe44:	e850 3f00 	ldrex	r3, [r0]
   1fe48:	ea03 0c02 	and.w	ip, r3, r2
   1fe4c:	e840 ce00 	strex	lr, ip, [r0]
   1fe50:	f1be 0f00 	cmp.w	lr, #0
   1fe54:	d1f6      	bne.n	1fe44 <atomic_test_and_clear_bit+0xe>
   1fe56:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1fe5a:	420b      	tst	r3, r1
}
   1fe5c:	bf14      	ite	ne
   1fe5e:	2001      	movne	r0, #1
   1fe60:	2000      	moveq	r0, #0
   1fe62:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe66 <smp_reset>:
{
   1fe66:	b538      	push	{r3, r4, r5, lr}
   1fe68:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe6a:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1fe6c:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1fe70:	f001 f84b 	bl	20f0a <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1fe74:	2300      	movs	r3, #0
   1fe76:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   1fe7a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fe7e:	f3bf 8f5b 	dmb	ish
   1fe82:	e850 2f00 	ldrex	r2, [r0]
   1fe86:	e840 3100 	strex	r1, r3, [r0]
   1fe8a:	2900      	cmp	r1, #0
   1fe8c:	d1f9      	bne.n	1fe82 <smp_reset+0x1c>
   1fe8e:	f3bf 8f5b 	dmb	ish
   1fe92:	f3bf 8f5b 	dmb	ish
   1fe96:	34bc      	adds	r4, #188	; 0xbc
   1fe98:	e854 2f00 	ldrex	r2, [r4]
   1fe9c:	e844 3100 	strex	r1, r3, [r4]
   1fea0:	2900      	cmp	r1, #0
   1fea2:	d1f9      	bne.n	1fe98 <smp_reset+0x32>
   1fea4:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   1fea8:	7a6b      	ldrb	r3, [r5, #9]
   1feaa:	7aaa      	ldrb	r2, [r5, #10]
   1feac:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1feae:	bf18      	it	ne
   1feb0:	72ab      	strbne	r3, [r5, #10]
}
   1feb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1feb6:	2101      	movs	r1, #1
   1feb8:	f7ff be25 	b.w	1fb06 <atomic_set_bit>

0001febc <smp_error>:
{
   1febc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1febe:	4606      	mov	r6, r0
   1fec0:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1fec2:	f7f8 fda1 	bl	18a08 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fec6:	2105      	movs	r1, #5
   1fec8:	4630      	mov	r0, r6
   1feca:	f7ff fefb 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!buf) {
   1fece:	4605      	mov	r5, r0
   1fed0:	b178      	cbz	r0, 1fef2 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1fed2:	2101      	movs	r1, #1
   1fed4:	3008      	adds	r0, #8
   1fed6:	f000 fb45 	bl	20564 <net_buf_simple_add>
	rsp->reason = reason;
   1feda:	7004      	strb	r4, [r0, #0]
   1fedc:	2400      	movs	r4, #0
   1fede:	6830      	ldr	r0, [r6, #0]
   1fee0:	9400      	str	r4, [sp, #0]
   1fee2:	4623      	mov	r3, r4
   1fee4:	462a      	mov	r2, r5
   1fee6:	2106      	movs	r1, #6
   1fee8:	f7fe fd3e 	bl	1e968 <bt_l2cap_send_cb>
	return 0;
   1feec:	4620      	mov	r0, r4
}
   1feee:	b002      	add	sp, #8
   1fef0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1fef2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fef6:	e7fa      	b.n	1feee <smp_error+0x32>

0001fef8 <smp_timeout>:
{
   1fef8:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fefa:	2108      	movs	r1, #8
{
   1fefc:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fefe:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
   1ff02:	f7f8 fd81 	bl	18a08 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ff06:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   1ff0a:	2104      	movs	r1, #4
}
   1ff0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ff10:	f7ff bdf9 	b.w	1fb06 <atomic_set_bit>

0001ff14 <smp_master_ident>:
{
   1ff14:	b570      	push	{r4, r5, r6, lr}
   1ff16:	460b      	mov	r3, r1
   1ff18:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ff1a:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1ff1c:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ff20:	f7ff fec7 	bl	1fcb2 <atomic_test_bit>
   1ff24:	b1c8      	cbz	r0, 1ff5a <smp_master_ident+0x46>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ff26:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1ff28:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ff2a:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1ff2e:	2004      	movs	r0, #4
   1ff30:	f000 fa9f 	bl	20472 <bt_keys_get_type>
		if (!keys) {
   1ff34:	4605      	mov	r5, r0
   1ff36:	b330      	cbz	r0, 1ff86 <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1ff38:	2202      	movs	r2, #2
   1ff3a:	4631      	mov	r1, r6
   1ff3c:	3018      	adds	r0, #24
   1ff3e:	f7fd fe17 	bl	1db70 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1ff42:	2208      	movs	r2, #8
   1ff44:	1cb1      	adds	r1, r6, #2
   1ff46:	f105 0010 	add.w	r0, r5, #16
   1ff4a:	f7fd fe11 	bl	1db70 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1ff4e:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1ff52:	f023 0301 	bic.w	r3, r3, #1
   1ff56:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ff5a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1ff5e:	079a      	lsls	r2, r3, #30
   1ff60:	d50d      	bpl.n	1ff7e <smp_master_ident+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ff62:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ff64:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1ff68:	f7ff fdcd 	bl	1fb06 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ff6c:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
   1ff70:	b91d      	cbnz	r5, 1ff7a <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   1ff72:	4629      	mov	r1, r5
   1ff74:	4620      	mov	r0, r4
   1ff76:	f7f8 fd47 	bl	18a08 <smp_pairing_complete>
	return 0;
   1ff7a:	2000      	movs	r0, #0
   1ff7c:	e004      	b.n	1ff88 <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ff7e:	075b      	lsls	r3, r3, #29
   1ff80:	d5f4      	bpl.n	1ff6c <smp_master_ident+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ff82:	210a      	movs	r1, #10
   1ff84:	e7ee      	b.n	1ff64 <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   1ff86:	2008      	movs	r0, #8
}
   1ff88:	bd70      	pop	{r4, r5, r6, pc}

0001ff8a <smp_ident_sent>:
{
   1ff8a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1ff8c:	7883      	ldrb	r3, [r0, #2]
   1ff8e:	2b01      	cmp	r3, #1
   1ff90:	d10f      	bne.n	1ffb2 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1ff92:	2106      	movs	r1, #6
   1ff94:	f7fe fd2e 	bl	1e9f4 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1ff98:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   1ff9c:	f022 0201 	bic.w	r2, r2, #1
   1ffa0:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   1ffa4:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   1ffa8:	b919      	cbnz	r1, 1ffb2 <smp_ident_sent+0x28>
}
   1ffaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1ffae:	f7f8 bd2b 	b.w	18a08 <smp_pairing_complete>
}
   1ffb2:	bd08      	pop	{r3, pc}

0001ffb4 <smp_c1>:
{
   1ffb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ffb8:	b089      	sub	sp, #36	; 0x24
   1ffba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1ffbe:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1ffc0:	783b      	ldrb	r3, [r7, #0]
{
   1ffc2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1ffc4:	f88d 3000 	strb.w	r3, [sp]
{
   1ffc8:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1ffca:	f898 3000 	ldrb.w	r3, [r8]
   1ffce:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1ffd2:	4611      	mov	r1, r2
   1ffd4:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1ffd6:	2207      	movs	r2, #7
   1ffd8:	f10d 0002 	add.w	r0, sp, #2
   1ffdc:	f7fd fdc8 	bl	1db70 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1ffe0:	2207      	movs	r2, #7
   1ffe2:	4649      	mov	r1, r9
   1ffe4:	f10d 0009 	add.w	r0, sp, #9
   1ffe8:	f7fd fdc2 	bl	1db70 <memcpy>
	while (len--) {
   1ffec:	f104 0010 	add.w	r0, r4, #16
   1fff0:	4629      	mov	r1, r5
   1fff2:	466a      	mov	r2, sp
   1fff4:	4284      	cmp	r4, r0
   1fff6:	d127      	bne.n	20048 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1fff8:	462a      	mov	r2, r5
   1fffa:	4629      	mov	r1, r5
   1fffc:	4630      	mov	r0, r6
   1fffe:	f000 fc1f 	bl	20840 <bt_encrypt_le>
	if (err) {
   20002:	4604      	mov	r4, r0
   20004:	b9e0      	cbnz	r0, 20040 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   20006:	2206      	movs	r2, #6
   20008:	f108 0101 	add.w	r1, r8, #1
   2000c:	a804      	add	r0, sp, #16
   2000e:	f7fd fdaf 	bl	1db70 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   20012:	2206      	movs	r2, #6
   20014:	1c79      	adds	r1, r7, #1
   20016:	f10d 0016 	add.w	r0, sp, #22
   2001a:	f7fd fda9 	bl	1db70 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2001e:	2204      	movs	r2, #4
   20020:	4621      	mov	r1, r4
   20022:	a807      	add	r0, sp, #28
   20024:	f7fd fdcf 	bl	1dbc6 <memset>
	while (len--) {
   20028:	f105 0010 	add.w	r0, r5, #16
   2002c:	462a      	mov	r2, r5
   2002e:	ab04      	add	r3, sp, #16
   20030:	4282      	cmp	r2, r0
   20032:	d112      	bne.n	2005a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   20034:	462a      	mov	r2, r5
   20036:	4629      	mov	r1, r5
   20038:	4630      	mov	r0, r6
   2003a:	f000 fc01 	bl	20840 <bt_encrypt_le>
   2003e:	4604      	mov	r4, r0
}
   20040:	4620      	mov	r0, r4
   20042:	b009      	add	sp, #36	; 0x24
   20044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   20048:	f814 3b01 	ldrb.w	r3, [r4], #1
   2004c:	f812 cb01 	ldrb.w	ip, [r2], #1
   20050:	ea83 030c 	eor.w	r3, r3, ip
   20054:	f801 3b01 	strb.w	r3, [r1], #1
   20058:	e7cc      	b.n	1fff4 <smp_c1+0x40>
   2005a:	f812 1b01 	ldrb.w	r1, [r2], #1
   2005e:	f813 4b01 	ldrb.w	r4, [r3], #1
   20062:	4061      	eors	r1, r4
   20064:	f802 1c01 	strb.w	r1, [r2, #-1]
   20068:	e7e2      	b.n	20030 <smp_c1+0x7c>

0002006a <legacy_pairing_confirm>:
{
   2006a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2006c:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   20070:	b085      	sub	sp, #20
   20072:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20074:	2109      	movs	r1, #9
   20076:	4638      	mov	r0, r7
   20078:	f7ff fe1b 	bl	1fcb2 <atomic_test_bit>
   2007c:	bb90      	cbnz	r0, 200e4 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   2007e:	2104      	movs	r1, #4
   20080:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   20084:	f7ff fd3f 	bl	1fb06 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   20088:	2103      	movs	r1, #3
   2008a:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   2008c:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2008e:	f7ff fe19 	bl	1fcc4 <smp_create_pdu.isra.0>
	if (!buf) {
   20092:	4606      	mov	r6, r0
   20094:	b1c0      	cbz	r0, 200c8 <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   20096:	2110      	movs	r1, #16
   20098:	3008      	adds	r0, #8
   2009a:	f000 fa63 	bl	20564 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2009e:	f104 0396 	add.w	r3, r4, #150	; 0x96
   200a2:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   200a4:	9002      	str	r0, [sp, #8]
   200a6:	9301      	str	r3, [sp, #4]
   200a8:	9400      	str	r4, [sp, #0]
   200aa:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   200ae:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   200b2:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   200b6:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   200ba:	f7ff ff7b 	bl	1ffb4 <smp_c1>
   200be:	4604      	mov	r4, r0
   200c0:	b120      	cbz	r0, 200cc <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   200c2:	4630      	mov	r0, r6
   200c4:	f7f9 f9be 	bl	19444 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   200c8:	2008      	movs	r0, #8
   200ca:	e009      	b.n	200e0 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   200cc:	4602      	mov	r2, r0
   200ce:	4631      	mov	r1, r6
   200d0:	4628      	mov	r0, r5
   200d2:	f7f8 f8b3 	bl	1823c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   200d6:	4621      	mov	r1, r4
   200d8:	4638      	mov	r0, r7
   200da:	f7ff fd22 	bl	1fb22 <atomic_clear_bit>
	return 0;
   200de:	2000      	movs	r0, #0
}
   200e0:	b005      	add	sp, #20
   200e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   200e4:	2100      	movs	r1, #0
   200e6:	4638      	mov	r0, r7
   200e8:	f7ff fd0d 	bl	1fb06 <atomic_set_bit>
   200ec:	e7f7      	b.n	200de <legacy_pairing_confirm+0x74>

000200ee <smp_pairing_confirm>:
{
   200ee:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   200f0:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   200f2:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   200f6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   200f8:	210a      	movs	r1, #10
   200fa:	4628      	mov	r0, r5
   200fc:	f7ff fd11 	bl	1fb22 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   20100:	4631      	mov	r1, r6
   20102:	2210      	movs	r2, #16
   20104:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   20108:	f7fd fd32 	bl	1db70 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2010c:	2105      	movs	r1, #5
   2010e:	4628      	mov	r0, r5
   20110:	f7ff fdcf 	bl	1fcb2 <atomic_test_bit>
   20114:	b920      	cbnz	r0, 20120 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   20116:	4620      	mov	r0, r4
}
   20118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   2011c:	f7ff bfa5 	b.w	2006a <legacy_pairing_confirm>
	switch (smp->method) {
   20120:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   20124:	2b01      	cmp	r3, #1
   20126:	d00b      	beq.n	20140 <smp_pairing_confirm+0x52>
   20128:	2b02      	cmp	r3, #2
   2012a:	d115      	bne.n	20158 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2012c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   20130:	2104      	movs	r1, #4
   20132:	f7ff fce8 	bl	1fb06 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   20136:	4620      	mov	r0, r4
}
   20138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   2013c:	f7f8 b99c 	b.w	18478 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20140:	2109      	movs	r1, #9
   20142:	4628      	mov	r0, r5
   20144:	f7ff fdb5 	bl	1fcb2 <atomic_test_bit>
   20148:	2800      	cmp	r0, #0
   2014a:	d0ef      	beq.n	2012c <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2014c:	4628      	mov	r0, r5
   2014e:	2100      	movs	r1, #0
   20150:	f7ff fcd9 	bl	1fb06 <atomic_set_bit>
			return 0;
   20154:	2000      	movs	r0, #0
}
   20156:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   20158:	2008      	movs	r0, #8
   2015a:	e7fc      	b.n	20156 <smp_pairing_confirm+0x68>

0002015c <smp_ident_addr_info>:
{
   2015c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   20160:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   20162:	783b      	ldrb	r3, [r7, #0]
{
   20164:	4605      	mov	r5, r0
   20166:	b123      	cbz	r3, 20172 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   20168:	79bb      	ldrb	r3, [r7, #6]
   2016a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2016e:	2bc0      	cmp	r3, #192	; 0xc0
   20170:	d155      	bne.n	2021e <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   20172:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   20174:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   20176:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2017a:	f7ff fd9a 	bl	1fcb2 <atomic_test_bit>
   2017e:	b3a8      	cbz	r0, 201ec <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   20180:	f104 0888 	add.w	r8, r4, #136	; 0x88
   20184:	7a21      	ldrb	r1, [r4, #8]
   20186:	4642      	mov	r2, r8
   20188:	2002      	movs	r0, #2
   2018a:	f000 f972 	bl	20472 <bt_keys_get_type>
		if (!keys) {
   2018e:	4606      	mov	r6, r0
   20190:	2800      	cmp	r0, #0
   20192:	d047      	beq.n	20224 <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   20194:	78e3      	ldrb	r3, [r4, #3]
   20196:	2b00      	cmp	r3, #0
   20198:	d13e      	bne.n	20218 <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   2019a:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2019e:	780b      	ldrb	r3, [r1, #0]
   201a0:	2b01      	cmp	r3, #1
   201a2:	d120      	bne.n	201e6 <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   201a4:	798b      	ldrb	r3, [r1, #6]
   201a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   201aa:	2b40      	cmp	r3, #64	; 0x40
   201ac:	d11b      	bne.n	201e6 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   201ae:	2206      	movs	r2, #6
   201b0:	3101      	adds	r1, #1
   201b2:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   201b6:	f7fd fcdb 	bl	1db70 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   201ba:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   201be:	b193      	cbz	r3, 201e6 <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   201c0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   201c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   201c8:	2bc0      	cmp	r3, #192	; 0xc0
   201ca:	d00c      	beq.n	201e6 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   201cc:	2207      	movs	r2, #7
   201ce:	4639      	mov	r1, r7
   201d0:	1c70      	adds	r0, r6, #1
   201d2:	f7fd fccd 	bl	1db70 <memcpy>
   201d6:	2207      	movs	r2, #7
   201d8:	4639      	mov	r1, r7
   201da:	4640      	mov	r0, r8
   201dc:	f7fd fcc8 	bl	1db70 <memcpy>
				bt_conn_identity_resolved(conn);
   201e0:	4620      	mov	r0, r4
   201e2:	f7f6 f88d 	bl	16300 <bt_conn_identity_resolved>
		bt_id_add(keys);
   201e6:	4630      	mov	r0, r6
   201e8:	f7f5 f934 	bl	15454 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   201ec:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
   201f0:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   201f4:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   201f6:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   201fa:	d504      	bpl.n	20206 <smp_ident_addr_info+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   201fc:	210a      	movs	r1, #10
   201fe:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   20202:	f7ff fc80 	bl	1fb06 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   20206:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
   2020a:	b91c      	cbnz	r4, 20214 <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   2020c:	4621      	mov	r1, r4
   2020e:	4628      	mov	r0, r5
   20210:	f7f8 fbfa 	bl	18a08 <smp_pairing_complete>
	return 0;
   20214:	2000      	movs	r0, #0
   20216:	e003      	b.n	20220 <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   20218:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2021c:	e7bf      	b.n	2019e <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   2021e:	200a      	movs	r0, #10
}
   20220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   20224:	2008      	movs	r0, #8
   20226:	e7fb      	b.n	20220 <smp_ident_addr_info+0xc4>

00020228 <bt_smp_request_ltk>:
{
   20228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2022c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2022e:	e9cd 2300 	strd	r2, r3, [sp]
   20232:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   20234:	f7ff fc5f 	bl	1faf6 <smp_chan_get>
	if (!smp) {
   20238:	4605      	mov	r5, r0
   2023a:	2800      	cmp	r0, #0
   2023c:	f000 809d 	beq.w	2037a <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   20240:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   20244:	f1b9 0f00 	cmp.w	r9, #0
   20248:	d12d      	bne.n	202a6 <bt_smp_request_ltk+0x7e>
   2024a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2024e:	4313      	orrs	r3, r2
   20250:	d129      	bne.n	202a6 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   20252:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   20256:	2103      	movs	r1, #3
   20258:	4640      	mov	r0, r8
   2025a:	f7ff fd2a 	bl	1fcb2 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2025e:	b310      	cbz	r0, 202a6 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20260:	2101      	movs	r1, #1
   20262:	4640      	mov	r0, r8
   20264:	f7ff fd25 	bl	1fcb2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   20268:	4606      	mov	r6, r0
   2026a:	b1e0      	cbz	r0, 202a6 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2026c:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   20270:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   20274:	429c      	cmp	r4, r3
   20276:	bf28      	it	cs
   20278:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2027a:	4622      	mov	r2, r4
   2027c:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   20280:	4638      	mov	r0, r7
   20282:	f7fd fc75 	bl	1db70 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20286:	2c0f      	cmp	r4, #15
   20288:	d805      	bhi.n	20296 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   2028a:	f1c4 0210 	rsb	r2, r4, #16
   2028e:	4649      	mov	r1, r9
   20290:	1938      	adds	r0, r7, r4
   20292:	f7fd fc98 	bl	1dbc6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20296:	2101      	movs	r1, #1
   20298:	4640      	mov	r0, r8
   2029a:	f7ff fc34 	bl	1fb06 <atomic_set_bit>
}
   2029e:	4630      	mov	r0, r6
   202a0:	b003      	add	sp, #12
   202a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   202a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   202aa:	b983      	cbnz	r3, 202ce <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   202ac:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   202b0:	7a21      	ldrb	r1, [r4, #8]
   202b2:	4632      	mov	r2, r6
   202b4:	2020      	movs	r0, #32
   202b6:	f7f8 ffa9 	bl	1920c <bt_keys_find>
   202ba:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   202be:	b930      	cbnz	r0, 202ce <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   202c0:	7a21      	ldrb	r1, [r4, #8]
   202c2:	4632      	mov	r2, r6
   202c4:	2001      	movs	r0, #1
   202c6:	f7f8 ffa1 	bl	1920c <bt_keys_find>
   202ca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   202ce:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   202d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202d6:	b9ce      	cbnz	r6, 2030c <bt_smp_request_ltk+0xe4>
   202d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   202dc:	4313      	orrs	r3, r2
   202de:	d115      	bne.n	2030c <bt_smp_request_ltk+0xe4>
   202e0:	2800      	cmp	r0, #0
   202e2:	d03c      	beq.n	2035e <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   202e4:	89c3      	ldrh	r3, [r0, #14]
   202e6:	069a      	lsls	r2, r3, #26
   202e8:	d511      	bpl.n	2030e <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   202ea:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   202ec:	f100 011a 	add.w	r1, r0, #26
   202f0:	4622      	mov	r2, r4
   202f2:	4638      	mov	r0, r7
   202f4:	f7fd fc3c 	bl	1db70 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   202f8:	2c0f      	cmp	r4, #15
   202fa:	d805      	bhi.n	20308 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   202fc:	f1c4 0210 	rsb	r2, r4, #16
   20300:	4631      	mov	r1, r6
   20302:	1938      	adds	r0, r7, r4
   20304:	f7fd fc5f 	bl	1dbc6 <memset>
		return true;
   20308:	2601      	movs	r6, #1
   2030a:	e7c8      	b.n	2029e <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2030c:	b338      	cbz	r0, 2035e <bt_smp_request_ltk+0x136>
   2030e:	89c3      	ldrh	r3, [r0, #14]
   20310:	07db      	lsls	r3, r3, #31
   20312:	d524      	bpl.n	2035e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   20314:	2208      	movs	r2, #8
   20316:	4669      	mov	r1, sp
   20318:	3040      	adds	r0, #64	; 0x40
   2031a:	f7fd fc19 	bl	1db50 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2031e:	b9f0      	cbnz	r0, 2035e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   20320:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20324:	2202      	movs	r2, #2
   20326:	a90a      	add	r1, sp, #40	; 0x28
   20328:	3048      	adds	r0, #72	; 0x48
   2032a:	f7fd fc11 	bl	1db50 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2032e:	4606      	mov	r6, r0
   20330:	b9a8      	cbnz	r0, 2035e <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   20332:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   20336:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   20338:	4638      	mov	r0, r7
   2033a:	4622      	mov	r2, r4
   2033c:	314a      	adds	r1, #74	; 0x4a
   2033e:	f7fd fc17 	bl	1db70 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20342:	2c0f      	cmp	r4, #15
   20344:	d805      	bhi.n	20352 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   20346:	f1c4 0210 	rsb	r2, r4, #16
   2034a:	4631      	mov	r1, r6
   2034c:	1938      	adds	r0, r7, r4
   2034e:	f7fd fc3a 	bl	1dbc6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20352:	2101      	movs	r1, #1
   20354:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   20358:	f7ff fbd5 	bl	1fb06 <atomic_set_bit>
		return true;
   2035c:	e7d4      	b.n	20308 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2035e:	210e      	movs	r1, #14
   20360:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   20364:	f7ff fca5 	bl	1fcb2 <atomic_test_bit>
   20368:	b120      	cbz	r0, 20374 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2036a:	2202      	movs	r2, #2
   2036c:	2106      	movs	r1, #6
   2036e:	4620      	mov	r0, r4
   20370:	f7f5 ffe0 	bl	16334 <bt_conn_security_changed>
	smp_reset(smp);
   20374:	4628      	mov	r0, r5
   20376:	f7ff fd76 	bl	1fe66 <smp_reset>
	return false;
   2037a:	2600      	movs	r6, #0
   2037c:	e78f      	b.n	2029e <bt_smp_request_ltk+0x76>

0002037e <bt_smp_sign>:
   2037e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20382:	4770      	bx	lr

00020384 <bt_smp_update_keys>:
{
   20384:	b570      	push	{r4, r5, r6, lr}
   20386:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   20388:	f7ff fbb5 	bl	1faf6 <smp_chan_get>
	if (!smp) {
   2038c:	4605      	mov	r5, r0
   2038e:	2800      	cmp	r0, #0
   20390:	d06e      	beq.n	20470 <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20392:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   20396:	2103      	movs	r1, #3
   20398:	4630      	mov	r0, r6
   2039a:	f7ff fc8a 	bl	1fcb2 <atomic_test_bit>
   2039e:	2800      	cmp	r0, #0
   203a0:	d066      	beq.n	20470 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   203a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   203a6:	b108      	cbz	r0, 203ac <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   203a8:	f000 f877 	bl	2049a <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   203ac:	7a20      	ldrb	r0, [r4, #8]
   203ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   203b2:	f7f8 fef5 	bl	191a0 <bt_keys_get_addr>
   203b6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   203ba:	b928      	cbnz	r0, 203c8 <bt_smp_update_keys+0x44>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   203bc:	4628      	mov	r0, r5
   203be:	2108      	movs	r1, #8
}
   203c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   203c4:	f7ff bd7a 	b.w	1febc <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   203c8:	210d      	movs	r1, #13
   203ca:	4630      	mov	r0, r6
   203cc:	f7ff fc71 	bl	1fcb2 <atomic_test_bit>
   203d0:	b128      	cbz	r0, 203de <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   203d2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   203d6:	7b53      	ldrb	r3, [r2, #13]
   203d8:	f043 0302 	orr.w	r3, r3, #2
   203dc:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   203de:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   203e2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   203e6:	2a03      	cmp	r2, #3
   203e8:	7b4b      	ldrb	r3, [r1, #13]
   203ea:	d838      	bhi.n	2045e <bt_smp_update_keys+0xda>
   203ec:	b3d2      	cbz	r2, 20464 <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   203ee:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   203f2:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   203f4:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   203f8:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
   203fc:	4293      	cmp	r3, r2
   203fe:	bf28      	it	cs
   20400:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   20402:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   20404:	4630      	mov	r0, r6
   20406:	2105      	movs	r1, #5
   20408:	f7ff fc53 	bl	1fcb2 <atomic_test_bit>
   2040c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   20410:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   20412:	b350      	cbz	r0, 2046a <bt_smp_update_keys+0xe6>
		conn->le.keys->flags |= BT_KEYS_SC;
   20414:	f042 0210 	orr.w	r2, r2, #16
   20418:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2041a:	210c      	movs	r1, #12
   2041c:	4630      	mov	r0, r6
   2041e:	f7ff fc48 	bl	1fcb2 <atomic_test_bit>
   20422:	b328      	cbz	r0, 20470 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   20424:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20428:	2120      	movs	r1, #32
   2042a:	f000 f832 	bl	20492 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   2042e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20432:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   20436:	2210      	movs	r2, #16
   20438:	301a      	adds	r0, #26
   2043a:	f7fd fb99 	bl	1db70 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   2043e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20442:	2208      	movs	r2, #8
   20444:	2100      	movs	r1, #0
   20446:	3010      	adds	r0, #16
   20448:	f7fd fbbd 	bl	1dbc6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   2044c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20450:	2202      	movs	r2, #2
}
   20452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   20456:	2100      	movs	r1, #0
   20458:	3018      	adds	r0, #24
   2045a:	f7fd bbb4 	b.w	1dbc6 <memset>
	switch (smp->method) {
   2045e:	3a05      	subs	r2, #5
   20460:	2a01      	cmp	r2, #1
   20462:	d9c4      	bls.n	203ee <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   20464:	f023 0301 	bic.w	r3, r3, #1
   20468:	e7c3      	b.n	203f2 <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   2046a:	f022 0210 	bic.w	r2, r2, #16
   2046e:	735a      	strb	r2, [r3, #13]
}
   20470:	bd70      	pop	{r4, r5, r6, pc}

00020472 <bt_keys_get_type>:
{
   20472:	b570      	push	{r4, r5, r6, lr}
   20474:	4604      	mov	r4, r0
   20476:	460d      	mov	r5, r1
   20478:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2047a:	f7f8 fec7 	bl	1920c <bt_keys_find>
	if (keys) {
   2047e:	b938      	cbnz	r0, 20490 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   20480:	4631      	mov	r1, r6
   20482:	4628      	mov	r0, r5
   20484:	f7f8 fe8c 	bl	191a0 <bt_keys_get_addr>
	if (!keys) {
   20488:	b110      	cbz	r0, 20490 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2048a:	89c3      	ldrh	r3, [r0, #14]
   2048c:	431c      	orrs	r4, r3
   2048e:	81c4      	strh	r4, [r0, #14]
}
   20490:	bd70      	pop	{r4, r5, r6, pc}

00020492 <bt_keys_add_type>:
	keys->keys |= type;
   20492:	89c3      	ldrh	r3, [r0, #14]
   20494:	4319      	orrs	r1, r3
   20496:	81c1      	strh	r1, [r0, #14]
}
   20498:	4770      	bx	lr

0002049a <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2049a:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2049c:	7a03      	ldrb	r3, [r0, #8]
   2049e:	075b      	lsls	r3, r3, #29
{
   204a0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   204a2:	d501      	bpl.n	204a8 <bt_keys_clear+0xe>
		bt_id_del(keys);
   204a4:	f7f5 f860 	bl	15568 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   204a8:	4620      	mov	r0, r4
   204aa:	225c      	movs	r2, #92	; 0x5c
}
   204ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   204b0:	2100      	movs	r1, #0
   204b2:	f7fd bb88 	b.w	1dbc6 <memset>

000204b6 <fixed_data_unref>:
}
   204b6:	4770      	bx	lr

000204b8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   204b8:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   204ba:	6849      	ldr	r1, [r1, #4]
   204bc:	6809      	ldr	r1, [r1, #0]
   204be:	f7f8 bf35 	b.w	1932c <net_buf_alloc_len>

000204c2 <net_buf_get>:
{
   204c2:	b570      	push	{r4, r5, r6, lr}
   204c4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   204c6:	f7fa fd8f 	bl	1afe8 <z_impl_k_queue_get>
	if (!buf) {
   204ca:	4605      	mov	r5, r0
   204cc:	b128      	cbz	r0, 204da <net_buf_get+0x18>
   204ce:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   204d0:	7963      	ldrb	r3, [r4, #5]
   204d2:	f013 0301 	ands.w	r3, r3, #1
   204d6:	d102      	bne.n	204de <net_buf_get+0x1c>
	frag->frags = NULL;
   204d8:	6023      	str	r3, [r4, #0]
}
   204da:	4628      	mov	r0, r5
   204dc:	bd70      	pop	{r4, r5, r6, pc}
   204de:	2300      	movs	r3, #0
   204e0:	2200      	movs	r2, #0
   204e2:	4630      	mov	r0, r6
   204e4:	f7fa fd80 	bl	1afe8 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   204e8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   204ea:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   204ec:	f023 0301 	bic.w	r3, r3, #1
   204f0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   204f2:	4604      	mov	r4, r0
   204f4:	e7ec      	b.n	204d0 <net_buf_get+0xe>

000204f6 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   204f6:	6883      	ldr	r3, [r0, #8]
   204f8:	440b      	add	r3, r1
   204fa:	6003      	str	r3, [r0, #0]
}
   204fc:	4770      	bx	lr

000204fe <net_buf_put>:
{
   204fe:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   20500:	460a      	mov	r2, r1
   20502:	6814      	ldr	r4, [r2, #0]
   20504:	b914      	cbnz	r4, 2050c <net_buf_put+0xe>
}
   20506:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   20508:	f000 bb40 	b.w	20b8c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2050c:	7953      	ldrb	r3, [r2, #5]
   2050e:	f043 0301 	orr.w	r3, r3, #1
   20512:	7153      	strb	r3, [r2, #5]
   20514:	4622      	mov	r2, r4
   20516:	e7f4      	b.n	20502 <net_buf_put+0x4>

00020518 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   20518:	7902      	ldrb	r2, [r0, #4]
   2051a:	3201      	adds	r2, #1
   2051c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2051e:	4770      	bx	lr

00020520 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20520:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   20522:	4618      	mov	r0, r3
   20524:	681b      	ldr	r3, [r3, #0]
   20526:	2b00      	cmp	r3, #0
   20528:	d1fb      	bne.n	20522 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2052a:	4770      	bx	lr

0002052c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2052c:	6802      	ldr	r2, [r0, #0]
{
   2052e:	b510      	push	{r4, lr}
	if (parent->frags) {
   20530:	b12a      	cbz	r2, 2053e <net_buf_frag_insert+0x12>
   20532:	460b      	mov	r3, r1
	while (buf->frags) {
   20534:	461c      	mov	r4, r3
   20536:	681b      	ldr	r3, [r3, #0]
   20538:	2b00      	cmp	r3, #0
   2053a:	d1fb      	bne.n	20534 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2053c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2053e:	6001      	str	r1, [r0, #0]
}
   20540:	bd10      	pop	{r4, pc}

00020542 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   20542:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   20544:	4604      	mov	r4, r0
   20546:	b920      	cbnz	r0, 20552 <net_buf_frag_add+0x10>
	buf->ref++;
   20548:	790b      	ldrb	r3, [r1, #4]
   2054a:	3301      	adds	r3, #1
   2054c:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2054e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20550:	bd10      	pop	{r4, pc}
   20552:	4603      	mov	r3, r0
	while (buf->frags) {
   20554:	4618      	mov	r0, r3
   20556:	681b      	ldr	r3, [r3, #0]
   20558:	2b00      	cmp	r3, #0
   2055a:	d1fb      	bne.n	20554 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2055c:	f7ff ffe6 	bl	2052c <net_buf_frag_insert>
   20560:	4620      	mov	r0, r4
   20562:	e7f5      	b.n	20550 <net_buf_frag_add+0xe>

00020564 <net_buf_simple_add>:
	return buf->data + buf->len;
   20564:	8883      	ldrh	r3, [r0, #4]
   20566:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   20568:	4419      	add	r1, r3
   2056a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2056c:	18d0      	adds	r0, r2, r3
   2056e:	4770      	bx	lr

00020570 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   20570:	b430      	push	{r4, r5}
   20572:	8884      	ldrh	r4, [r0, #4]
   20574:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   20576:	18a3      	adds	r3, r4, r2
   20578:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2057a:	1928      	adds	r0, r5, r4
}
   2057c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2057e:	f7fd baf7 	b.w	1db70 <memcpy>

00020582 <net_buf_simple_add_u8>:
   20582:	8883      	ldrh	r3, [r0, #4]
   20584:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   20586:	b510      	push	{r4, lr}
	buf->len += len;
   20588:	1c5c      	adds	r4, r3, #1
   2058a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2058c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2058e:	18d0      	adds	r0, r2, r3
   20590:	bd10      	pop	{r4, pc}

00020592 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20592:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   20594:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   20596:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   20598:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2059a:	4411      	add	r1, r2
	buf->data -= len;
   2059c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2059e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   205a0:	4770      	bx	lr

000205a2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   205a2:	8882      	ldrh	r2, [r0, #4]
   205a4:	1a52      	subs	r2, r2, r1
{
   205a6:	4603      	mov	r3, r0
	buf->len -= len;
   205a8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   205aa:	6800      	ldr	r0, [r0, #0]
   205ac:	4408      	add	r0, r1
   205ae:	6018      	str	r0, [r3, #0]
}
   205b0:	4770      	bx	lr

000205b2 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   205b2:	4603      	mov	r3, r0
	void *data = buf->data;
   205b4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   205b6:	889a      	ldrh	r2, [r3, #4]
   205b8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   205ba:	4401      	add	r1, r0
	buf->len -= len;
   205bc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   205be:	6019      	str	r1, [r3, #0]

	return data;
}
   205c0:	4770      	bx	lr

000205c2 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   205c2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   205c4:	6803      	ldr	r3, [r0, #0]
   205c6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   205c8:	2102      	movs	r1, #2
   205ca:	f7ff ffea 	bl	205a2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   205ce:	4620      	mov	r0, r4
   205d0:	bd10      	pop	{r4, pc}

000205d2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   205d2:	6802      	ldr	r2, [r0, #0]
   205d4:	6880      	ldr	r0, [r0, #8]
}
   205d6:	1a10      	subs	r0, r2, r0
   205d8:	4770      	bx	lr

000205da <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   205da:	8883      	ldrh	r3, [r0, #4]
   205dc:	88c2      	ldrh	r2, [r0, #6]
   205de:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   205e0:	6803      	ldr	r3, [r0, #0]
   205e2:	6880      	ldr	r0, [r0, #8]
   205e4:	1a18      	subs	r0, r3, r0
}
   205e6:	1a10      	subs	r0, r2, r0
   205e8:	4770      	bx	lr

000205ea <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   205ea:	f1a0 0308 	sub.w	r3, r0, #8
   205ee:	f3bf 8f5b 	dmb	ish
   205f2:	e853 2f00 	ldrex	r2, [r3]
   205f6:	1c51      	adds	r1, r2, #1
   205f8:	e843 1c00 	strex	ip, r1, [r3]
   205fc:	f1bc 0f00 	cmp.w	ip, #0
   20600:	d1f7      	bne.n	205f2 <adc_context_on_timer_expired+0x8>
   20602:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   20606:	b91a      	cbnz	r2, 20610 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   20608:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   2060c:	f7f8 bf4e 	b.w	194ac <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   20610:	f06f 030f 	mvn.w	r3, #15
   20614:	6683      	str	r3, [r0, #104]	; 0x68
}
   20616:	4770      	bx	lr

00020618 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   20618:	f000 001f 	and.w	r0, r0, #31
   2061c:	0080      	lsls	r0, r0, #2
   2061e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   20622:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   20626:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2062a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2062e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   20632:	4770      	bx	lr

00020634 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20634:	6843      	ldr	r3, [r0, #4]
   20636:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20638:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2063c:	600b      	str	r3, [r1, #0]
}
   2063e:	2000      	movs	r0, #0
   20640:	4770      	bx	lr

00020642 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20642:	6843      	ldr	r3, [r0, #4]
   20644:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   20646:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2064a:	4042      	eors	r2, r0
   2064c:	400a      	ands	r2, r1
   2064e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20650:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   20654:	2000      	movs	r0, #0
   20656:	4770      	bx	lr

00020658 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20658:	6843      	ldr	r3, [r0, #4]
   2065a:	685b      	ldr	r3, [r3, #4]
}
   2065c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2065e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   20662:	4770      	bx	lr

00020664 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20664:	6843      	ldr	r3, [r0, #4]
   20666:	685b      	ldr	r3, [r3, #4]
}
   20668:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2066a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2066e:	4770      	bx	lr

00020670 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20670:	6843      	ldr	r3, [r0, #4]
   20672:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20674:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   20678:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2067a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2067e:	2000      	movs	r0, #0
   20680:	4770      	bx	lr

00020682 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20682:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   20684:	6858      	ldr	r0, [r3, #4]
{
   20686:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   20688:	b158      	cbz	r0, 206a2 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2068a:	2400      	movs	r4, #0
   2068c:	4281      	cmp	r1, r0
   2068e:	d113      	bne.n	206b8 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   20690:	6808      	ldr	r0, [r1, #0]
   20692:	b95c      	cbnz	r4, 206ac <gpio_nrfx_manage_callback+0x2a>
   20694:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   20696:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20698:	42a1      	cmp	r1, r4
   2069a:	d100      	bne.n	2069e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2069c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2069e:	2000      	movs	r0, #0
   206a0:	6008      	str	r0, [r1, #0]
	if (set) {
   206a2:	b972      	cbnz	r2, 206c2 <gpio_nrfx_manage_callback+0x40>
	return 0;
   206a4:	2000      	movs	r0, #0
}
   206a6:	bd30      	pop	{r4, r5, pc}
   206a8:	4628      	mov	r0, r5
   206aa:	e7ef      	b.n	2068c <gpio_nrfx_manage_callback+0xa>
   206ac:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   206ae:	6898      	ldr	r0, [r3, #8]
   206b0:	4281      	cmp	r1, r0
	list->tail = node;
   206b2:	bf08      	it	eq
   206b4:	609c      	streq	r4, [r3, #8]
}
   206b6:	e7f2      	b.n	2069e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   206b8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   206ba:	4604      	mov	r4, r0
   206bc:	2d00      	cmp	r5, #0
   206be:	d1f3      	bne.n	206a8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   206c0:	b13a      	cbz	r2, 206d2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   206c2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   206c4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   206c6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   206c8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   206ca:	2800      	cmp	r0, #0
   206cc:	d1ea      	bne.n	206a4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   206ce:	6099      	str	r1, [r3, #8]
}
   206d0:	e7e9      	b.n	206a6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   206d2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   206d6:	e7e6      	b.n	206a6 <gpio_nrfx_manage_callback+0x24>

000206d8 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   206d8:	6843      	ldr	r3, [r0, #4]
   206da:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   206dc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   206e0:	05d2      	lsls	r2, r2, #23
   206e2:	d518      	bpl.n	20716 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   206e4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   206e8:	b1aa      	cbz	r2, 20716 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   206ea:	f04f 0140 	mov.w	r1, #64	; 0x40
   206ee:	f3ef 8211 	mrs	r2, BASEPRI
   206f2:	f381 8811 	msr	BASEPRI, r1
   206f6:	f3bf 8f6f 	isb	sy
   206fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   206fe:	b131      	cbz	r1, 2070e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20700:	2100      	movs	r1, #0
   20702:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20706:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2070a:	2101      	movs	r1, #1
   2070c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2070e:	f382 8811 	msr	BASEPRI, r2
   20712:	f3bf 8f6f 	isb	sy
}
   20716:	4770      	bx	lr

00020718 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   20718:	68c2      	ldr	r2, [r0, #12]
{
   2071a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2071c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   20720:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20724:	2000      	movs	r0, #0
   20726:	4770      	bx	lr

00020728 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   20728:	6843      	ldr	r3, [r0, #4]
   2072a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2072c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20730:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   20734:	4770      	bx	lr

00020736 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   20736:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   20738:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2073a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2073e:	b938      	cbnz	r0, 20750 <is_tx_ready+0x1a>
   20740:	7992      	ldrb	r2, [r2, #6]
   20742:	b932      	cbnz	r2, 20752 <is_tx_ready+0x1c>
   20744:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   20748:	3800      	subs	r0, #0
   2074a:	bf18      	it	ne
   2074c:	2001      	movne	r0, #1
   2074e:	4770      	bx	lr
   20750:	2001      	movs	r0, #1
}
   20752:	4770      	bx	lr

00020754 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   20754:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   20756:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   20758:	681b      	ldr	r3, [r3, #0]
   2075a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2075e:	b148      	cbz	r0, 20774 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   20760:	7b52      	ldrb	r2, [r2, #13]
   20762:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20764:	2000      	movs	r0, #0
   20766:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2076a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2076e:	2201      	movs	r2, #1
   20770:	601a      	str	r2, [r3, #0]
	return 0;
   20772:	4770      	bx	lr
		return -1;
   20774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20778:	4770      	bx	lr

0002077a <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   2077a:	07db      	lsls	r3, r3, #31
{
   2077c:	b570      	push	{r4, r5, r6, lr}
   2077e:	460e      	mov	r6, r1
   20780:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   20782:	d40f      	bmi.n	207a4 <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   20784:	2000      	movs	r0, #0
   20786:	2100      	movs	r1, #0
   20788:	f7f9 fbde 	bl	19f48 <multithreading_lock_acquire>
		if (!errcode) {
   2078c:	4604      	mov	r4, r0
   2078e:	b938      	cbnz	r0, 207a0 <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   20790:	4629      	mov	r1, r5
   20792:	4630      	mov	r0, r6
   20794:	f7ee fc83 	bl	f09e <sdc_soc_rand_vector_poll>
   20798:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   2079a:	f7f9 fbdd 	bl	19f58 <multithreading_lock_release>
	if (!errcode) {
   2079e:	b184      	cbz	r4, 207c2 <rng_driver_get_entropy_isr+0x48>
}
   207a0:	4620      	mov	r0, r4
   207a2:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   207a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   207ac:	f7f9 fbcc 	bl	19f48 <multithreading_lock_acquire>
		if (!errcode) {
   207b0:	4604      	mov	r4, r0
   207b2:	2800      	cmp	r0, #0
   207b4:	d1f4      	bne.n	207a0 <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   207b6:	4629      	mov	r1, r5
   207b8:	4630      	mov	r0, r6
   207ba:	f7ee fc57 	bl	f06c <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   207be:	f7f9 fbcb 	bl	19f58 <multithreading_lock_release>
		return len;
   207c2:	462c      	mov	r4, r5
   207c4:	e7ec      	b.n	207a0 <rng_driver_get_entropy_isr+0x26>

000207c6 <rng_driver_get_entropy>:
{
   207c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   207ca:	68c7      	ldr	r7, [r0, #12]
{
   207cc:	460e      	mov	r6, r1
	uint32_t bytes_left = len;
   207ce:	4614      	mov	r4, r2
	while (bytes_left > 0) {
   207d0:	b1c4      	cbz	r4, 20804 <rng_driver_get_entropy+0x3e>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   207d2:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   207d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   207de:	f7f9 fbb3 	bl	19f48 <multithreading_lock_acquire>
			if (errcode) {
   207e2:	b980      	cbnz	r0, 20806 <rng_driver_get_entropy+0x40>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   207e4:	4641      	mov	r1, r8
   207e6:	4630      	mov	r0, r6
   207e8:	f7ee fc59 	bl	f09e <sdc_soc_rand_vector_poll>
   207ec:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   207ee:	f7f9 fbb3 	bl	19f58 <multithreading_lock_release>
			if (!bytes_read) {
   207f2:	b955      	cbnz	r5, 2080a <rng_driver_get_entropy+0x44>
	return z_impl_k_sem_take(sem, timeout);
   207f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   207f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207fc:	4638      	mov	r0, r7
   207fe:	f7fa ff99 	bl	1b734 <z_impl_k_sem_take>
		while (bytes_read == 0) {
   20802:	e7e8      	b.n	207d6 <rng_driver_get_entropy+0x10>
	return 0;
   20804:	4620      	mov	r0, r4
}
   20806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   2080a:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   2080c:	1b64      	subs	r4, r4, r5
   2080e:	e7df      	b.n	207d0 <rng_driver_get_entropy+0xa>

00020810 <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   20810:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);

	k_sem_init(&rng_dev->sem_sync, 0, 1);
   20812:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   20814:	2201      	movs	r2, #1
   20816:	2100      	movs	r1, #0
   20818:	f000 faef 	bl	20dfa <z_impl_k_sem_init>

	IRQ_CONNECT(RNG_IRQn,
   2081c:	2200      	movs	r2, #0
   2081e:	2105      	movs	r1, #5
   20820:	200d      	movs	r0, #13
   20822:	f7f3 fb43 	bl	13eac <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   20826:	2000      	movs	r0, #0
   20828:	bd08      	pop	{r3, pc}

0002082a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2082a:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   2082c:	2000      	movs	r0, #0
   2082e:	f7f3 fea3 	bl	14578 <sys_arch_reboot>

00020832 <sdc_assertion_handler>:
	k_oops();
   20832:	4040      	eors	r0, r0
   20834:	f380 8811 	msr	BASEPRI, r0
   20838:	f04f 0003 	mov.w	r0, #3
   2083c:	df02      	svc	2
}
   2083e:	4770      	bx	lr

00020840 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   20840:	b5f0      	push	{r4, r5, r6, r7, lr}
   20842:	b08d      	sub	sp, #52	; 0x34
   20844:	4615      	mov	r5, r2
   20846:	466a      	mov	r2, sp
   20848:	f100 0310 	add.w	r3, r0, #16
   2084c:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2084e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   20852:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   20856:	4298      	cmp	r0, r3
   20858:	d1f9      	bne.n	2084e <bt_encrypt_le+0xe>
   2085a:	aa04      	add	r2, sp, #16
   2085c:	f101 0310 	add.w	r3, r1, #16
   20860:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   20862:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   20866:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2086a:	428b      	cmp	r3, r1
   2086c:	d1f9      	bne.n	20862 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2086e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20872:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20876:	f7f9 fb67 	bl	19f48 <multithreading_lock_acquire>

	if (!errcode) {
   2087a:	4604      	mov	r4, r0
   2087c:	b990      	cbnz	r0, 208a4 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2087e:	aa08      	add	r2, sp, #32
   20880:	4639      	mov	r1, r7
   20882:	4630      	mov	r0, r6
   20884:	f7ee fbd5 	bl	f032 <sdc_soc_ecb_block_encrypt>
   20888:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2088a:	f7f9 fb65 	bl	19f58 <multithreading_lock_release>
	}

	if (!errcode) {
   2088e:	b94c      	cbnz	r4, 208a4 <bt_encrypt_le+0x64>
   20890:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   20892:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   20896:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   20898:	f812 1901 	ldrb.w	r1, [r2], #-1
   2089c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   208a0:	429d      	cmp	r5, r3
   208a2:	d1f9      	bne.n	20898 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   208a4:	4620      	mov	r0, r4
   208a6:	b00d      	add	sp, #52	; 0x34
   208a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000208aa <m_assert_handler>:
	k_oops();
   208aa:	4040      	eors	r0, r0
   208ac:	f380 8811 	msr	BASEPRI, r0
   208b0:	f04f 0003 	mov.w	r0, #3
   208b4:	df02      	svc	2
}
   208b6:	4770      	bx	lr

000208b8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   208b8:	4668      	mov	r0, sp
   208ba:	f020 0107 	bic.w	r1, r0, #7
   208be:	468d      	mov	sp, r1
   208c0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   208c2:	f7e2 f9b9 	bl	2c38 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   208c6:	f7f3 fb0b 	bl	13ee0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   208ca:	f7f3 fc27 	bl	1411c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   208ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   208d2:	4685      	mov	sp, r0
   208d4:	4770      	bx	lr

000208d6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   208d6:	4668      	mov	r0, sp
   208d8:	f020 0107 	bic.w	r1, r0, #7
   208dc:	468d      	mov	sp, r1
   208de:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   208e0:	f7e2 f95c 	bl	2b9c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   208e4:	f7f3 fafc 	bl	13ee0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   208e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   208ec:	4685      	mov	sp, r0
   208ee:	4770      	bx	lr

000208f0 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   208f0:	4668      	mov	r0, sp
   208f2:	f020 0107 	bic.w	r1, r0, #7
   208f6:	468d      	mov	sp, r1
   208f8:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   208fa:	f7ee f9c8 	bl	ec8e <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   208fe:	f7f3 faef 	bl	13ee0 <_arch_isr_direct_pm>
   20902:	f7f3 fc0b 	bl	1411c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20906:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2090a:	4685      	mov	sp, r0
   2090c:	4770      	bx	lr

0002090e <nrfx_clock_stop>:
	switch (domain) {
   2090e:	2801      	cmp	r0, #1
   20910:	d101      	bne.n	20916 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   20912:	f7e2 bf77 	b.w	3804 <mpsl_clock_hfclk_release>
}
   20916:	4770      	bx	lr

00020918 <nrfx_clock_enable>:
}
   20918:	4770      	bx	lr

0002091a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2091a:	f7e2 bdc1 	b.w	34a0 <MPSL_IRQ_CLOCK_Handler>

0002091e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2091e:	4700      	bx	r0

00020920 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20920:	f000 ba81 	b.w	20e26 <z_impl_k_busy_wait>

00020924 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20926:	4605      	mov	r5, r0
   20928:	460e      	mov	r6, r1
	__asm__ volatile(
   2092a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2092e:	f3ef 8711 	mrs	r7, BASEPRI
   20932:	f383 8811 	msr	BASEPRI, r3
   20936:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2093a:	f7fa fecf 	bl	1b6dc <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2093e:	4631      	mov	r1, r6
   20940:	4604      	mov	r4, r0
   20942:	4628      	mov	r0, r5
   20944:	f7ff ff71 	bl	2082a <k_sys_fatal_error_handler>
	__asm__ volatile(
   20948:	f387 8811 	msr	BASEPRI, r7
   2094c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20950:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   20952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20956:	f7f3 bcdb 	b.w	14310 <z_impl_k_thread_abort>

0002095a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2095a:	f7fb bffc 	b.w	1c956 <z_clock_idle_exit>

0002095e <k_heap_init>:
{
   2095e:	b410      	push	{r4}
   20960:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20964:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   20968:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2096a:	f7fb be91 	b.w	1c690 <sys_heap_init>

0002096e <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2096e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20972:	4604      	mov	r4, r0
   20974:	b085      	sub	sp, #20
   20976:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   20978:	4610      	mov	r0, r2
   2097a:	4619      	mov	r1, r3
   2097c:	f000 fb1e 	bl	20fbc <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20980:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   20984:	4605      	mov	r5, r0
   20986:	460f      	mov	r7, r1
	__asm__ volatile(
   20988:	f04f 0240 	mov.w	r2, #64	; 0x40
   2098c:	f3ef 8311 	mrs	r3, BASEPRI
   20990:	f382 8811 	msr	BASEPRI, r2
   20994:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20998:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2099c:	4631      	mov	r1, r6
   2099e:	4620      	mov	r0, r4
   209a0:	9303      	str	r3, [sp, #12]
   209a2:	f7fb fe41 	bl	1c628 <sys_heap_alloc>
   209a6:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   209a8:	f7fb f980 	bl	1bcac <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   209ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   209b0:	b13a      	cbz	r2, 209c2 <k_heap_alloc+0x54>
	__asm__ volatile(
   209b2:	f383 8811 	msr	BASEPRI, r3
   209b6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   209ba:	4610      	mov	r0, r2
   209bc:	b005      	add	sp, #20
   209be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   209c2:	ebb5 0800 	subs.w	r8, r5, r0
   209c6:	eb67 0901 	sbc.w	r9, r7, r1
   209ca:	f1b8 0f01 	cmp.w	r8, #1
   209ce:	f179 0100 	sbcs.w	r1, r9, #0
   209d2:	dbee      	blt.n	209b2 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   209d4:	e9cd 8900 	strd	r8, r9, [sp]
   209d8:	465a      	mov	r2, fp
   209da:	4619      	mov	r1, r3
   209dc:	4650      	mov	r0, sl
   209de:	f7fa fdc1 	bl	1b564 <z_pend_curr>
	__asm__ volatile(
   209e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   209e6:	f3ef 8311 	mrs	r3, BASEPRI
   209ea:	f382 8811 	msr	BASEPRI, r2
   209ee:	f3bf 8f6f 	isb	sy
   209f2:	e7d3      	b.n	2099c <k_heap_alloc+0x2e>

000209f4 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   209f4:	b538      	push	{r3, r4, r5, lr}
   209f6:	4604      	mov	r4, r0
   209f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   209fc:	f3ef 8511 	mrs	r5, BASEPRI
   20a00:	f383 8811 	msr	BASEPRI, r3
   20a04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20a08:	f7fb fdbb 	bl	1c582 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   20a0c:	f104 000c 	add.w	r0, r4, #12
   20a10:	f000 f9e3 	bl	20dda <z_unpend_all>
   20a14:	b130      	cbz	r0, 20a24 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20a16:	4629      	mov	r1, r5
   20a18:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   20a20:	f7fa bb58 	b.w	1b0d4 <z_reschedule>
	__asm__ volatile(
   20a24:	f385 8811 	msr	BASEPRI, r5
   20a28:	f3bf 8f6f 	isb	sy
}
   20a2c:	bd38      	pop	{r3, r4, r5, pc}

00020a2e <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   20a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a30:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   20a34:	6800      	ldr	r0, [r0, #0]
   20a36:	6048      	str	r0, [r1, #4]
{
   20a38:	4614      	mov	r4, r2
   20a3a:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   20a3c:	4632      	mov	r2, r6
   20a3e:	463b      	mov	r3, r7
   20a40:	4621      	mov	r1, r4
   20a42:	f7ff ff94 	bl	2096e <k_heap_alloc>
   20a46:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   20a48:	b144      	cbz	r4, 20a5c <k_mem_pool_alloc+0x2e>
   20a4a:	b938      	cbnz	r0, 20a5c <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   20a4c:	ea56 0307 	orrs.w	r3, r6, r7
   20a50:	bf0c      	ite	eq
   20a52:	f06f 000b 	mvneq.w	r0, #11
   20a56:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   20a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   20a5c:	2000      	movs	r0, #0
   20a5e:	e7fc      	b.n	20a5a <k_mem_pool_alloc+0x2c>

00020a60 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   20a60:	e9d0 1000 	ldrd	r1, r0, [r0]
   20a64:	f7ff bfc6 	b.w	209f4 <k_heap_free>

00020a68 <queue_insert>:
{
   20a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a6c:	4699      	mov	r9, r3
   20a6e:	4604      	mov	r4, r0
   20a70:	f89d 3020 	ldrb.w	r3, [sp, #32]
   20a74:	460d      	mov	r5, r1
   20a76:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20a78:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20a7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20a80:	f3ef 8711 	mrs	r7, BASEPRI
   20a84:	f382 8811 	msr	BASEPRI, r2
   20a88:	f3bf 8f6f 	isb	sy
	if (is_append) {
   20a8c:	b103      	cbz	r3, 20a90 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   20a8e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20a90:	4630      	mov	r0, r6
   20a92:	f000 f97d 	bl	20d90 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20a96:	b160      	cbz	r0, 20ab2 <queue_insert+0x4a>
   20a98:	2400      	movs	r4, #0
   20a9a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   20a9e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20aa2:	f000 f91a 	bl	20cda <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20aa6:	4630      	mov	r0, r6
   20aa8:	4639      	mov	r1, r7
   20aaa:	f7fa fb13 	bl	1b0d4 <z_reschedule>
	return 0;
   20aae:	2000      	movs	r0, #0
   20ab0:	e00c      	b.n	20acc <queue_insert+0x64>
	if (alloc) {
   20ab2:	f1b9 0f00 	cmp.w	r9, #0
   20ab6:	d01b      	beq.n	20af0 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   20ab8:	2008      	movs	r0, #8
   20aba:	f7fb fa17 	bl	1beec <z_thread_malloc>
		if (anode == NULL) {
   20abe:	b938      	cbnz	r0, 20ad0 <queue_insert+0x68>
	__asm__ volatile(
   20ac0:	f387 8811 	msr	BASEPRI, r7
   20ac4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20ac8:	f06f 000b 	mvn.w	r0, #11
}
   20acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   20ad0:	2301      	movs	r3, #1
		anode->data = data;
   20ad2:	f8c0 8004 	str.w	r8, [r0, #4]
   20ad6:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20ad8:	6803      	ldr	r3, [r0, #0]
   20ada:	f003 0203 	and.w	r2, r3, #3
   20ade:	b95d      	cbnz	r5, 20af8 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ae0:	6823      	ldr	r3, [r4, #0]
   20ae2:	4313      	orrs	r3, r2
   20ae4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20ae6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20ae8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20aea:	b973      	cbnz	r3, 20b0a <queue_insert+0xa2>
	list->tail = node;
   20aec:	6060      	str	r0, [r4, #4]
}
   20aee:	e00c      	b.n	20b0a <queue_insert+0xa2>
	node->next_and_flags = flags;
   20af0:	f8c8 9000 	str.w	r9, [r8]
}
   20af4:	4640      	mov	r0, r8
   20af6:	e7ef      	b.n	20ad8 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20af8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20afa:	f033 0303 	bics.w	r3, r3, #3
   20afe:	d110      	bne.n	20b22 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b00:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20b02:	6862      	ldr	r2, [r4, #4]
   20b04:	b93a      	cbnz	r2, 20b16 <queue_insert+0xae>
	list->head = node;
   20b06:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20b0a:	2104      	movs	r1, #4
   20b0c:	f104 0010 	add.w	r0, r4, #16
   20b10:	f000 fbe3 	bl	212da <z_handle_obj_poll_events>
   20b14:	e7c7      	b.n	20aa6 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b16:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b18:	f003 0303 	and.w	r3, r3, #3
   20b1c:	4303      	orrs	r3, r0
   20b1e:	6013      	str	r3, [r2, #0]
   20b20:	e7e4      	b.n	20aec <queue_insert+0x84>
   20b22:	4313      	orrs	r3, r2
   20b24:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b26:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b28:	f003 0303 	and.w	r3, r3, #3
   20b2c:	4303      	orrs	r3, r0
   20b2e:	602b      	str	r3, [r5, #0]
}
   20b30:	e7eb      	b.n	20b0a <queue_insert+0xa2>

00020b32 <z_queue_node_peek>:
{
   20b32:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20b34:	4604      	mov	r4, r0
   20b36:	b130      	cbz	r0, 20b46 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b38:	6802      	ldr	r2, [r0, #0]
   20b3a:	0793      	lsls	r3, r2, #30
   20b3c:	d003      	beq.n	20b46 <z_queue_node_peek+0x14>
		ret = anode->data;
   20b3e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20b40:	b109      	cbz	r1, 20b46 <z_queue_node_peek+0x14>
			k_free(anode);
   20b42:	f000 fbf0 	bl	21326 <k_free>
}
   20b46:	4620      	mov	r0, r4
   20b48:	bd10      	pop	{r4, pc}

00020b4a <z_impl_k_queue_init>:
	list->head = NULL;
   20b4a:	2300      	movs	r3, #0
	list->tail = NULL;
   20b4c:	e9c0 3300 	strd	r3, r3, [r0]
   20b50:	f100 0308 	add.w	r3, r0, #8
   20b54:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   20b58:	f100 0310 	add.w	r3, r0, #16
   20b5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   20b60:	4770      	bx	lr

00020b62 <k_queue_append>:
{
   20b62:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   20b64:	2301      	movs	r3, #1
   20b66:	9300      	str	r3, [sp, #0]
   20b68:	2300      	movs	r3, #0
{
   20b6a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   20b6c:	4619      	mov	r1, r3
   20b6e:	f7ff ff7b 	bl	20a68 <queue_insert>
}
   20b72:	b003      	add	sp, #12
   20b74:	f85d fb04 	ldr.w	pc, [sp], #4

00020b78 <k_queue_prepend>:
{
   20b78:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   20b7a:	2300      	movs	r3, #0
{
   20b7c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   20b7e:	9300      	str	r3, [sp, #0]
   20b80:	4619      	mov	r1, r3
   20b82:	f7ff ff71 	bl	20a68 <queue_insert>
}
   20b86:	b003      	add	sp, #12
   20b88:	f85d fb04 	ldr.w	pc, [sp], #4

00020b8c <k_queue_append_list>:
{
   20b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20b90:	4605      	mov	r5, r0
   20b92:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   20b94:	460c      	mov	r4, r1
   20b96:	b391      	cbz	r1, 20bfe <k_queue_append_list+0x72>
   20b98:	b38a      	cbz	r2, 20bfe <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20b9a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   20b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ba2:	f3ef 8811 	mrs	r8, BASEPRI
   20ba6:	f383 8811 	msr	BASEPRI, r3
   20baa:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   20bae:	4638      	mov	r0, r7
   20bb0:	f000 f8ee 	bl	20d90 <z_unpend_first_thread>
   20bb4:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   20bb8:	b920      	cbnz	r0, 20bc4 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20bba:	686b      	ldr	r3, [r5, #4]
   20bbc:	b9cb      	cbnz	r3, 20bf2 <k_queue_append_list+0x66>
	list->head = node;
   20bbe:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20bc0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20bc2:	e00a      	b.n	20bda <k_queue_append_list+0x4e>
   20bc4:	6144      	str	r4, [r0, #20]
   20bc6:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   20bca:	f000 f886 	bl	20cda <z_ready_thread>
		head = *(void **)head;
   20bce:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   20bd0:	4638      	mov	r0, r7
   20bd2:	f000 f8dd 	bl	20d90 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20bd6:	2c00      	cmp	r4, #0
   20bd8:	d1ee      	bne.n	20bb8 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20bda:	2104      	movs	r1, #4
   20bdc:	f105 0010 	add.w	r0, r5, #16
   20be0:	f000 fb7b 	bl	212da <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20be4:	4638      	mov	r0, r7
   20be6:	4641      	mov	r1, r8
   20be8:	f7fa fa74 	bl	1b0d4 <z_reschedule>
	return 0;
   20bec:	2000      	movs	r0, #0
}
   20bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20bf2:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20bf4:	f001 0103 	and.w	r1, r1, #3
   20bf8:	430c      	orrs	r4, r1
   20bfa:	601c      	str	r4, [r3, #0]
}
   20bfc:	e7e0      	b.n	20bc0 <k_queue_append_list+0x34>
		return -EINVAL;
   20bfe:	f06f 0015 	mvn.w	r0, #21
   20c02:	e7f4      	b.n	20bee <k_queue_append_list+0x62>

00020c04 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   20c04:	f990 000e 	ldrsb.w	r0, [r0, #14]
   20c08:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   20c0c:	4298      	cmp	r0, r3
   20c0e:	bfac      	ite	ge
   20c10:	2000      	movge	r0, #0
   20c12:	2001      	movlt	r0, #1
   20c14:	4770      	bx	lr

00020c16 <z_find_first_thread_to_unpend>:
{
   20c16:	b510      	push	{r4, lr}
   20c18:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c1c:	f3ef 8411 	mrs	r4, BASEPRI
   20c20:	f383 8811 	msr	BASEPRI, r3
   20c24:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20c28:	f000 f84d 	bl	20cc6 <z_priq_dumb_best>
	__asm__ volatile(
   20c2c:	f384 8811 	msr	BASEPRI, r4
   20c30:	f3bf 8f6f 	isb	sy
}
   20c34:	bd10      	pop	{r4, pc}

00020c36 <z_unpend_thread_no_timeout>:
{
   20c36:	b510      	push	{r4, lr}
	__asm__ volatile(
   20c38:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c3c:	f3ef 8411 	mrs	r4, BASEPRI
   20c40:	f383 8811 	msr	BASEPRI, r3
   20c44:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20c48:	f000 f81b 	bl	20c82 <unpend_thread_no_timeout>
	__asm__ volatile(
   20c4c:	f384 8811 	msr	BASEPRI, r4
   20c50:	f3bf 8f6f 	isb	sy
}
   20c54:	bd10      	pop	{r4, pc}

00020c56 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20c56:	4603      	mov	r3, r0
   20c58:	b920      	cbnz	r0, 20c64 <z_reschedule_irqlock+0xe>
   20c5a:	f3ef 8205 	mrs	r2, IPSR
   20c5e:	b90a      	cbnz	r2, 20c64 <z_reschedule_irqlock+0xe>
   20c60:	f7f3 b8f8 	b.w	13e54 <arch_swap>
   20c64:	f383 8811 	msr	BASEPRI, r3
   20c68:	f3bf 8f6f 	isb	sy
}
   20c6c:	4770      	bx	lr

00020c6e <z_reschedule_unlocked>:
	__asm__ volatile(
   20c6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c72:	f3ef 8011 	mrs	r0, BASEPRI
   20c76:	f383 8811 	msr	BASEPRI, r3
   20c7a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20c7e:	f7ff bfea 	b.w	20c56 <z_reschedule_irqlock>

00020c82 <unpend_thread_no_timeout>:
{
   20c82:	4601      	mov	r1, r0
   20c84:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20c86:	6880      	ldr	r0, [r0, #8]
   20c88:	f7fa fa4a 	bl	1b120 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20c8c:	7b4b      	ldrb	r3, [r1, #13]
   20c8e:	f023 0302 	bic.w	r3, r3, #2
   20c92:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   20c94:	2300      	movs	r3, #0
   20c96:	608b      	str	r3, [r1, #8]
}
   20c98:	bd08      	pop	{r3, pc}

00020c9a <z_unpend_thread>:
{
   20c9a:	b538      	push	{r3, r4, r5, lr}
   20c9c:	4604      	mov	r4, r0
   20c9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ca2:	f3ef 8511 	mrs	r5, BASEPRI
   20ca6:	f383 8811 	msr	BASEPRI, r3
   20caa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20cae:	f7ff ffe8 	bl	20c82 <unpend_thread_no_timeout>
	__asm__ volatile(
   20cb2:	f385 8811 	msr	BASEPRI, r5
   20cb6:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   20cba:	f104 0018 	add.w	r0, r4, #24
}
   20cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20cc2:	f000 b937 	b.w	20f34 <z_abort_timeout>

00020cc6 <z_priq_dumb_best>:
{
   20cc6:	4603      	mov	r3, r0
	return list->head == list;
   20cc8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20cca:	4283      	cmp	r3, r0
   20ccc:	d003      	beq.n	20cd6 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   20cce:	2800      	cmp	r0, #0
   20cd0:	bf38      	it	cc
   20cd2:	2000      	movcc	r0, #0
   20cd4:	4770      	bx	lr
	struct k_thread *thread = NULL;
   20cd6:	2000      	movs	r0, #0
}
   20cd8:	4770      	bx	lr

00020cda <z_ready_thread>:
{
   20cda:	b510      	push	{r4, lr}
	__asm__ volatile(
   20cdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ce0:	f3ef 8411 	mrs	r4, BASEPRI
   20ce4:	f383 8811 	msr	BASEPRI, r3
   20ce8:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   20cec:	f7fa fa72 	bl	1b1d4 <ready_thread>
	__asm__ volatile(
   20cf0:	f384 8811 	msr	BASEPRI, r4
   20cf4:	f3bf 8f6f 	isb	sy
}
   20cf8:	bd10      	pop	{r4, pc}

00020cfa <z_thread_timeout>:
{
   20cfa:	b570      	push	{r4, r5, r6, lr}
   20cfc:	4604      	mov	r4, r0
	__asm__ volatile(
   20cfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d02:	f3ef 8611 	mrs	r6, BASEPRI
   20d06:	f383 8811 	msr	BASEPRI, r3
   20d0a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   20d0e:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   20d12:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   20d16:	b113      	cbz	r3, 20d1e <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   20d18:	4628      	mov	r0, r5
   20d1a:	f7ff ffb2 	bl	20c82 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20d1e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   20d22:	f023 0314 	bic.w	r3, r3, #20
   20d26:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   20d2a:	4628      	mov	r0, r5
   20d2c:	f7fa fa52 	bl	1b1d4 <ready_thread>
	__asm__ volatile(
   20d30:	f386 8811 	msr	BASEPRI, r6
   20d34:	f3bf 8f6f 	isb	sy
}
   20d38:	bd70      	pop	{r4, r5, r6, pc}

00020d3a <add_to_waitq_locked>:
{
   20d3a:	b538      	push	{r3, r4, r5, lr}
   20d3c:	4604      	mov	r4, r0
   20d3e:	460d      	mov	r5, r1
	unready_thread(thread);
   20d40:	f7fa fbd0 	bl	1b4e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20d44:	7b63      	ldrb	r3, [r4, #13]
   20d46:	f043 0302 	orr.w	r3, r3, #2
   20d4a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20d4c:	b1c5      	cbz	r5, 20d80 <add_to_waitq_locked+0x46>
	return list->head == list;
   20d4e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   20d50:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d52:	429d      	cmp	r5, r3
   20d54:	bf08      	it	eq
   20d56:	2300      	moveq	r3, #0
   20d58:	2b00      	cmp	r3, #0
   20d5a:	bf38      	it	cc
   20d5c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20d5e:	b183      	cbz	r3, 20d82 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   20d60:	f994 100e 	ldrsb.w	r1, [r4, #14]
   20d64:	f993 200e 	ldrsb.w	r2, [r3, #14]
   20d68:	4291      	cmp	r1, r2
   20d6a:	db04      	blt.n	20d76 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   20d6c:	686a      	ldr	r2, [r5, #4]
   20d6e:	429a      	cmp	r2, r3
   20d70:	d007      	beq.n	20d82 <add_to_waitq_locked+0x48>
   20d72:	681b      	ldr	r3, [r3, #0]
   20d74:	e7f3      	b.n	20d5e <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   20d76:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20d78:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20d7c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20d7e:	605c      	str	r4, [r3, #4]
}
   20d80:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   20d82:	686b      	ldr	r3, [r5, #4]
   20d84:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20d86:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   20d88:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   20d8a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20d8c:	606c      	str	r4, [r5, #4]
   20d8e:	e7f7      	b.n	20d80 <add_to_waitq_locked+0x46>

00020d90 <z_unpend_first_thread>:
{
   20d90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20d92:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d96:	f3ef 8211 	mrs	r2, BASEPRI
   20d9a:	f383 8811 	msr	BASEPRI, r3
   20d9e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20da2:	f7ff ff90 	bl	20cc6 <z_priq_dumb_best>
   20da6:	4604      	mov	r4, r0
	__asm__ volatile(
   20da8:	f382 8811 	msr	BASEPRI, r2
   20dac:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   20db0:	b188      	cbz	r0, 20dd6 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   20db2:	f04f 0340 	mov.w	r3, #64	; 0x40
   20db6:	f3ef 8511 	mrs	r5, BASEPRI
   20dba:	f383 8811 	msr	BASEPRI, r3
   20dbe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20dc2:	f7ff ff5e 	bl	20c82 <unpend_thread_no_timeout>
	__asm__ volatile(
   20dc6:	f385 8811 	msr	BASEPRI, r5
   20dca:	f3bf 8f6f 	isb	sy
   20dce:	f104 0018 	add.w	r0, r4, #24
   20dd2:	f000 f8af 	bl	20f34 <z_abort_timeout>
}
   20dd6:	4620      	mov	r0, r4
   20dd8:	bd38      	pop	{r3, r4, r5, pc}

00020dda <z_unpend_all>:
{
   20dda:	b538      	push	{r3, r4, r5, lr}
   20ddc:	4605      	mov	r5, r0
	int need_sched = 0;
   20dde:	2000      	movs	r0, #0
	return list->head == list;
   20de0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20de2:	42a5      	cmp	r5, r4
   20de4:	d000      	beq.n	20de8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20de6:	b904      	cbnz	r4, 20dea <z_unpend_all+0x10>
}
   20de8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20dea:	4620      	mov	r0, r4
   20dec:	f7ff ff55 	bl	20c9a <z_unpend_thread>
		z_ready_thread(thread);
   20df0:	4620      	mov	r0, r4
   20df2:	f7ff ff72 	bl	20cda <z_ready_thread>
		need_sched = 1;
   20df6:	2001      	movs	r0, #1
   20df8:	e7f2      	b.n	20de0 <z_unpend_all+0x6>

00020dfa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   20dfa:	b15a      	cbz	r2, 20e14 <z_impl_k_sem_init+0x1a>
   20dfc:	428a      	cmp	r2, r1
   20dfe:	d309      	bcc.n	20e14 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20e00:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   20e04:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   20e08:	e9c0 0000 	strd	r0, r0, [r0]
   20e0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20e10:	2000      	movs	r0, #0
   20e12:	4770      	bx	lr
		return -EINVAL;
   20e14:	f06f 0015 	mvn.w	r0, #21
}
   20e18:	4770      	bx	lr

00020e1a <k_is_in_isr>:
   20e1a:	f3ef 8005 	mrs	r0, IPSR
}
   20e1e:	3800      	subs	r0, #0
   20e20:	bf18      	it	ne
   20e22:	2001      	movne	r0, #1
   20e24:	4770      	bx	lr

00020e26 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   20e26:	b108      	cbz	r0, 20e2c <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   20e28:	f7f3 bbbc 	b.w	145a4 <arch_busy_wait>
}
   20e2c:	4770      	bx	lr

00020e2e <z_impl_k_thread_name_set>:
}
   20e2e:	f06f 0046 	mvn.w	r0, #70	; 0x46
   20e32:	4770      	bx	lr

00020e34 <k_work_submit_to_queue>:
{
   20e34:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20e36:	f101 0308 	add.w	r3, r1, #8
   20e3a:	f3bf 8f5b 	dmb	ish
   20e3e:	e853 2f00 	ldrex	r2, [r3]
   20e42:	f042 0c01 	orr.w	ip, r2, #1
   20e46:	e843 ce00 	strex	lr, ip, [r3]
   20e4a:	f1be 0f00 	cmp.w	lr, #0
   20e4e:	d1f6      	bne.n	20e3e <k_work_submit_to_queue+0xa>
   20e50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20e54:	07d3      	lsls	r3, r2, #31
   20e56:	d403      	bmi.n	20e60 <k_work_submit_to_queue+0x2c>
}
   20e58:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   20e5c:	f7ff be81 	b.w	20b62 <k_queue_append>
}
   20e60:	f85d fb04 	ldr.w	pc, [sp], #4

00020e64 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   20e64:	f1a0 0110 	sub.w	r1, r0, #16
   20e68:	6980      	ldr	r0, [r0, #24]
   20e6a:	f7ff bfe3 	b.w	20e34 <k_work_submit_to_queue>

00020e6e <work_cancel>:
{
   20e6e:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20e70:	f3bf 8f5b 	dmb	ish
   20e74:	6883      	ldr	r3, [r0, #8]
   20e76:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   20e7a:	07db      	lsls	r3, r3, #31
{
   20e7c:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   20e7e:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   20e82:	d532      	bpl.n	20eea <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20e84:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20e86:	6813      	ldr	r3, [r2, #0]
   20e88:	2100      	movs	r1, #0
   20e8a:	b913      	cbnz	r3, 20e92 <work_cancel+0x24>
			return -EINVAL;
   20e8c:	f06f 0015 	mvn.w	r0, #21
}
   20e90:	bd70      	pop	{r4, r5, r6, pc}
   20e92:	429c      	cmp	r4, r3
   20e94:	d124      	bne.n	20ee0 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   20e96:	6823      	ldr	r3, [r4, #0]
   20e98:	6856      	ldr	r6, [r2, #4]
   20e9a:	f023 0003 	bic.w	r0, r3, #3
   20e9e:	b9b1      	cbnz	r1, 20ece <work_cancel+0x60>
   20ea0:	42b4      	cmp	r4, r6
	list->head = node;
   20ea2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20ea4:	d100      	bne.n	20ea8 <work_cancel+0x3a>
	list->tail = node;
   20ea6:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20ea8:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20eaa:	f003 0303 	and.w	r3, r3, #3
   20eae:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   20eb0:	2000      	movs	r0, #0
   20eb2:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20eb4:	f3bf 8f5b 	dmb	ish
   20eb8:	e855 3f00 	ldrex	r3, [r5]
   20ebc:	f023 0301 	bic.w	r3, r3, #1
   20ec0:	e845 3200 	strex	r2, r3, [r5]
   20ec4:	2a00      	cmp	r2, #0
   20ec6:	d1f7      	bne.n	20eb8 <work_cancel+0x4a>
   20ec8:	f3bf 8f5b 	dmb	ish
   20ecc:	e7e0      	b.n	20e90 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20ece:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ed0:	f003 0303 	and.w	r3, r3, #3
   20ed4:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   20ed6:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ed8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20eda:	bf08      	it	eq
   20edc:	6051      	streq	r1, [r2, #4]
}
   20ede:	e7e3      	b.n	20ea8 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20ee0:	6818      	ldr	r0, [r3, #0]
   20ee2:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20ee4:	f020 0303 	bic.w	r3, r0, #3
   20ee8:	e7cf      	b.n	20e8a <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   20eea:	3010      	adds	r0, #16
   20eec:	f000 f822 	bl	20f34 <z_abort_timeout>
		if (err) {
   20ef0:	2800      	cmp	r0, #0
   20ef2:	d0dd      	beq.n	20eb0 <work_cancel+0x42>
			return -EALREADY;
   20ef4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   20ef8:	e7ca      	b.n	20e90 <work_cancel+0x22>

00020efa <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20efa:	2300      	movs	r3, #0
   20efc:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   20f00:	e9c0 3304 	strd	r3, r3, [r0, #16]
   20f04:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   20f06:	6283      	str	r3, [r0, #40]	; 0x28
}
   20f08:	4770      	bx	lr

00020f0a <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   20f0a:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f0c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20f10:	f3ef 8411 	mrs	r4, BASEPRI
   20f14:	f382 8811 	msr	BASEPRI, r2
   20f18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   20f1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   20f1e:	b133      	cbz	r3, 20f2e <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   20f20:	f7ff ffa5 	bl	20e6e <work_cancel>
	__asm__ volatile(
   20f24:	f384 8811 	msr	BASEPRI, r4
   20f28:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   20f2c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20f2e:	f06f 0015 	mvn.w	r0, #21
   20f32:	e7f7      	b.n	20f24 <k_delayed_work_cancel+0x1a>

00020f34 <z_abort_timeout>:
{
   20f34:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f36:	f04f 0240 	mov.w	r2, #64	; 0x40
   20f3a:	f3ef 8411 	mrs	r4, BASEPRI
   20f3e:	f382 8811 	msr	BASEPRI, r2
   20f42:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20f46:	6803      	ldr	r3, [r0, #0]
   20f48:	b13b      	cbz	r3, 20f5a <z_abort_timeout+0x26>
			remove_timeout(to);
   20f4a:	f7fa fd75 	bl	1ba38 <remove_timeout>
			ret = 0;
   20f4e:	2000      	movs	r0, #0
	__asm__ volatile(
   20f50:	f384 8811 	msr	BASEPRI, r4
   20f54:	f3bf 8f6f 	isb	sy
}
   20f58:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20f5a:	f06f 0015 	mvn.w	r0, #21
   20f5e:	e7f7      	b.n	20f50 <z_abort_timeout+0x1c>

00020f60 <z_get_next_timeout_expiry>:
{
   20f60:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f62:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f66:	f3ef 8411 	mrs	r4, BASEPRI
   20f6a:	f383 8811 	msr	BASEPRI, r3
   20f6e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20f72:	f7fa fd7b 	bl	1ba6c <next_timeout>
	__asm__ volatile(
   20f76:	f384 8811 	msr	BASEPRI, r4
   20f7a:	f3bf 8f6f 	isb	sy
}
   20f7e:	bd10      	pop	{r4, pc}

00020f80 <z_set_timeout_expiry>:
{
   20f80:	b570      	push	{r4, r5, r6, lr}
   20f82:	4604      	mov	r4, r0
   20f84:	460d      	mov	r5, r1
	__asm__ volatile(
   20f86:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f8a:	f3ef 8611 	mrs	r6, BASEPRI
   20f8e:	f383 8811 	msr	BASEPRI, r3
   20f92:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20f96:	f7fa fd69 	bl	1ba6c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20f9a:	2801      	cmp	r0, #1
   20f9c:	dd05      	ble.n	20faa <z_set_timeout_expiry+0x2a>
   20f9e:	42a0      	cmp	r0, r4
   20fa0:	dd03      	ble.n	20faa <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   20fa2:	4629      	mov	r1, r5
   20fa4:	4620      	mov	r0, r4
   20fa6:	f7f2 fd13 	bl	139d0 <z_clock_set_timeout>
	__asm__ volatile(
   20faa:	f386 8811 	msr	BASEPRI, r6
   20fae:	f3bf 8f6f 	isb	sy
}
   20fb2:	bd70      	pop	{r4, r5, r6, pc}

00020fb4 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   20fb4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   20fb6:	f7fa fe79 	bl	1bcac <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20fba:	bd08      	pop	{r3, pc}

00020fbc <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   20fbc:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20fbe:	1c4b      	adds	r3, r1, #1
   20fc0:	bf08      	it	eq
   20fc2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20fc6:	4604      	mov	r4, r0
   20fc8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20fca:	d013      	beq.n	20ff4 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20fcc:	ea54 0105 	orrs.w	r1, r4, r5
   20fd0:	d103      	bne.n	20fda <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   20fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   20fd6:	f7fa be69 	b.w	1bcac <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20fda:	f06f 0101 	mvn.w	r1, #1
   20fde:	1a0a      	subs	r2, r1, r0
   20fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20fe4:	eb61 0305 	sbc.w	r3, r1, r5
   20fe8:	2a00      	cmp	r2, #0
   20fea:	f173 0100 	sbcs.w	r1, r3, #0
   20fee:	db02      	blt.n	20ff6 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   20ff0:	4610      	mov	r0, r2
   20ff2:	4619      	mov	r1, r3
}
   20ff4:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   20ff6:	f7fa fe59 	bl	1bcac <z_tick_get>
   20ffa:	2c01      	cmp	r4, #1
   20ffc:	f175 0300 	sbcs.w	r3, r5, #0
   21000:	bfbc      	itt	lt
   21002:	2401      	movlt	r4, #1
   21004:	2500      	movlt	r5, #0
   21006:	1820      	adds	r0, r4, r0
   21008:	eb45 0101 	adc.w	r1, r5, r1
   2100c:	e7f2      	b.n	20ff4 <z_timeout_end_calc+0x38>

0002100e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2100e:	b510      	push	{r4, lr}
   21010:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   21012:	f7ff ff8f 	bl	20f34 <z_abort_timeout>

	if (inactive) {
   21016:	b9d8      	cbnz	r0, 21050 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   21018:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2101a:	b10b      	cbz	r3, 21020 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2101c:	4620      	mov	r0, r4
   2101e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   21020:	f104 0018 	add.w	r0, r4, #24
   21024:	2100      	movs	r1, #0
   21026:	f7ff fdf6 	bl	20c16 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2102a:	4604      	mov	r4, r0
   2102c:	b180      	cbz	r0, 21050 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2102e:	f7ff fe02 	bl	20c36 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   21032:	4620      	mov	r0, r4
   21034:	f7ff fe51 	bl	20cda <z_ready_thread>
	__asm__ volatile(
   21038:	f04f 0340 	mov.w	r3, #64	; 0x40
   2103c:	f3ef 8011 	mrs	r0, BASEPRI
   21040:	f383 8811 	msr	BASEPRI, r3
   21044:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   21048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2104c:	f7ff be03 	b.w	20c56 <z_reschedule_irqlock>
   21050:	bd10      	pop	{r4, pc}

00021052 <clear_event_registrations>:
	while (num_events--) {
   21052:	2314      	movs	r3, #20
{
   21054:	b530      	push	{r4, r5, lr}
   21056:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2105a:	2400      	movs	r4, #0
	while (num_events--) {
   2105c:	4281      	cmp	r1, r0
   2105e:	d100      	bne.n	21062 <clear_event_registrations+0x10>
}
   21060:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   21062:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   21066:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2106a:	f003 030f 	and.w	r3, r3, #15
   2106e:	2b02      	cmp	r3, #2
   21070:	d80a      	bhi.n	21088 <clear_event_registrations+0x36>
   21072:	b15b      	cbz	r3, 2108c <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   21074:	f851 3c14 	ldr.w	r3, [r1, #-20]
   21078:	b143      	cbz	r3, 2108c <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2107a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2107e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   21080:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   21082:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   21086:	e001      	b.n	2108c <clear_event_registrations+0x3a>
	switch (event->type) {
   21088:	2b04      	cmp	r3, #4
   2108a:	d0f3      	beq.n	21074 <clear_event_registrations+0x22>
	__asm__ volatile(
   2108c:	f382 8811 	msr	BASEPRI, r2
   21090:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21094:	f04f 0340 	mov.w	r3, #64	; 0x40
   21098:	f3ef 8211 	mrs	r2, BASEPRI
   2109c:	f383 8811 	msr	BASEPRI, r3
   210a0:	f3bf 8f6f 	isb	sy
   210a4:	3914      	subs	r1, #20
   210a6:	e7d9      	b.n	2105c <clear_event_registrations+0xa>

000210a8 <k_work_submit_to_queue>:
{
   210a8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   210aa:	f101 0308 	add.w	r3, r1, #8
   210ae:	f3bf 8f5b 	dmb	ish
   210b2:	e853 2f00 	ldrex	r2, [r3]
   210b6:	f042 0c01 	orr.w	ip, r2, #1
   210ba:	e843 ce00 	strex	lr, ip, [r3]
   210be:	f1be 0f00 	cmp.w	lr, #0
   210c2:	d1f6      	bne.n	210b2 <k_work_submit_to_queue+0xa>
   210c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   210c8:	07d3      	lsls	r3, r2, #31
   210ca:	d403      	bmi.n	210d4 <k_work_submit_to_queue+0x2c>
}
   210cc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   210d0:	f7ff bd47 	b.w	20b62 <k_queue_append>
}
   210d4:	f85d fb04 	ldr.w	pc, [sp], #4

000210d8 <signal_poll_event>:
{
   210d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   210dc:	6884      	ldr	r4, [r0, #8]
{
   210de:	4605      	mov	r5, r0
   210e0:	460e      	mov	r6, r1
	if (poller) {
   210e2:	b144      	cbz	r4, 210f6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   210e4:	7863      	ldrb	r3, [r4, #1]
   210e6:	2b01      	cmp	r3, #1
   210e8:	d138      	bne.n	2115c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   210ea:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   210ee:	f013 0302 	ands.w	r3, r3, #2
   210f2:	d10a      	bne.n	2110a <signal_poll_event+0x32>
		poller->is_polling = false;
   210f4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   210f6:	68eb      	ldr	r3, [r5, #12]
   210f8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   210fc:	430e      	orrs	r6, r1
	event->poller = NULL;
   210fe:	2000      	movs	r0, #0
	event->state |= state;
   21100:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   21104:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   21106:	60eb      	str	r3, [r5, #12]
	return retcode;
   21108:	e00d      	b.n	21126 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2110a:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2110e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21112:	f06f 0001 	mvn.w	r0, #1
   21116:	428b      	cmp	r3, r1
   21118:	bf08      	it	eq
   2111a:	4282      	cmpeq	r2, r0
   2111c:	d105      	bne.n	2112a <signal_poll_event+0x52>
		poller->is_polling = false;
   2111e:	2300      	movs	r3, #0
   21120:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   21122:	f06f 000a 	mvn.w	r0, #10
}
   21126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2112a:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   2112e:	4640      	mov	r0, r8
   21130:	f7ff fdb3 	bl	20c9a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   21134:	2e08      	cmp	r6, #8
   21136:	bf0c      	ite	eq
   21138:	f06f 0303 	mvneq.w	r3, #3
   2113c:	2300      	movne	r3, #0
   2113e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21140:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   21144:	06db      	lsls	r3, r3, #27
   21146:	d102      	bne.n	2114e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   21148:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   2114c:	b10f      	cbz	r7, 21152 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2114e:	2300      	movs	r3, #0
   21150:	e7d0      	b.n	210f4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   21152:	4640      	mov	r0, r8
   21154:	f7ff fdc1 	bl	20cda <z_ready_thread>
		poller->is_polling = false;
   21158:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2115a:	e7cc      	b.n	210f6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2115c:	2b02      	cmp	r3, #2
   2115e:	d1f6      	bne.n	2114e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   21160:	7823      	ldrb	r3, [r4, #0]
   21162:	2b00      	cmp	r3, #0
   21164:	d0c7      	beq.n	210f6 <signal_poll_event+0x1e>
   21166:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2116a:	2f00      	cmp	r7, #0
   2116c:	d0f4      	beq.n	21158 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2116e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   21172:	f1a4 0910 	sub.w	r9, r4, #16
   21176:	f104 0010 	add.w	r0, r4, #16
   2117a:	f7ff fedb 	bl	20f34 <z_abort_timeout>
		twork->poll_result = 0;
   2117e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   21182:	4649      	mov	r1, r9
   21184:	4638      	mov	r0, r7
   21186:	f7ff ff8f 	bl	210a8 <k_work_submit_to_queue>
		poller->is_polling = false;
   2118a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2118e:	e7b2      	b.n	210f6 <signal_poll_event+0x1e>

00021190 <add_event>:
{
   21190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21192:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21194:	e9d0 2300 	ldrd	r2, r3, [r0]
   21198:	4290      	cmp	r0, r2
   2119a:	4604      	mov	r4, r0
   2119c:	460d      	mov	r5, r1
   2119e:	d106      	bne.n	211ae <add_event+0x1e>
	node->prev = list->tail;
   211a0:	6863      	ldr	r3, [r4, #4]
   211a2:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   211a4:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   211a6:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   211a8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   211aa:	6065      	str	r5, [r4, #4]
}
   211ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   211ae:	2b00      	cmp	r3, #0
   211b0:	d0f6      	beq.n	211a0 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   211b2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   211b4:	b100      	cbz	r0, 211b8 <add_event+0x28>
   211b6:	3864      	subs	r0, #100	; 0x64
   211b8:	b107      	cbz	r7, 211bc <add_event+0x2c>
   211ba:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   211bc:	4639      	mov	r1, r7
   211be:	f7ff fd21 	bl	20c04 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   211c2:	2800      	cmp	r0, #0
   211c4:	d1ec      	bne.n	211a0 <add_event+0x10>
	return list->head == list;
   211c6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211c8:	42b4      	cmp	r4, r6
   211ca:	d0e9      	beq.n	211a0 <add_event+0x10>
   211cc:	2e00      	cmp	r6, #0
   211ce:	bf38      	it	cc
   211d0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   211d2:	2e00      	cmp	r6, #0
   211d4:	d0e4      	beq.n	211a0 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   211d6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   211d8:	b101      	cbz	r1, 211dc <add_event+0x4c>
   211da:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   211dc:	4638      	mov	r0, r7
   211de:	f7ff fd11 	bl	20c04 <z_is_t1_higher_prio_than_t2>
   211e2:	b128      	cbz	r0, 211f0 <add_event+0x60>
	node->prev = successor->prev;
   211e4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   211e6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   211ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   211ec:	6075      	str	r5, [r6, #4]
			return;
   211ee:	e7dd      	b.n	211ac <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   211f0:	6863      	ldr	r3, [r4, #4]
   211f2:	42b3      	cmp	r3, r6
   211f4:	d0d4      	beq.n	211a0 <add_event+0x10>
   211f6:	6836      	ldr	r6, [r6, #0]
   211f8:	e7eb      	b.n	211d2 <add_event+0x42>

000211fa <register_events>:
{
   211fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   211fe:	f04f 0a00 	mov.w	sl, #0
{
   21202:	460e      	mov	r6, r1
   21204:	4614      	mov	r4, r2
   21206:	461f      	mov	r7, r3
   21208:	4683      	mov	fp, r0
	int events_registered = 0;
   2120a:	4655      	mov	r5, sl
	event->poller = NULL;
   2120c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2120e:	45b2      	cmp	sl, r6
   21210:	db02      	blt.n	21218 <register_events+0x1e>
}
   21212:	4628      	mov	r0, r5
   21214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21218:	f04f 0340 	mov.w	r3, #64	; 0x40
   2121c:	f3ef 8911 	mrs	r9, BASEPRI
   21220:	f383 8811 	msr	BASEPRI, r3
   21224:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   21228:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2122c:	f002 020f 	and.w	r2, r2, #15
   21230:	2a02      	cmp	r2, #2
   21232:	d006      	beq.n	21242 <register_events+0x48>
   21234:	2a04      	cmp	r2, #4
   21236:	d008      	beq.n	2124a <register_events+0x50>
   21238:	2a01      	cmp	r2, #1
   2123a:	d120      	bne.n	2127e <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2123c:	f8db 3010 	ldr.w	r3, [fp, #16]
   21240:	e001      	b.n	21246 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   21242:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   21246:	689b      	ldr	r3, [r3, #8]
   21248:	e002      	b.n	21250 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2124a:	f8db 3010 	ldr.w	r3, [fp, #16]
   2124e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   21250:	b1ab      	cbz	r3, 2127e <register_events+0x84>
	event->state |= state;
   21252:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   21256:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2125a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2125e:	430a      	orrs	r2, r1
   21260:	f362 3310 	bfi	r3, r2, #12, #5
   21264:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   21268:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2126c:	f389 8811 	msr	BASEPRI, r9
   21270:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21274:	f10a 0a01 	add.w	sl, sl, #1
   21278:	f10b 0b14 	add.w	fp, fp, #20
   2127c:	e7c7      	b.n	2120e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2127e:	2f00      	cmp	r7, #0
   21280:	d1f4      	bne.n	2126c <register_events+0x72>
   21282:	7823      	ldrb	r3, [r4, #0]
   21284:	2b00      	cmp	r3, #0
   21286:	d0f1      	beq.n	2126c <register_events+0x72>
	switch (event->type) {
   21288:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2128c:	f003 030f 	and.w	r3, r3, #15
   21290:	2b02      	cmp	r3, #2
   21292:	d008      	beq.n	212a6 <register_events+0xac>
   21294:	2b04      	cmp	r3, #4
   21296:	d006      	beq.n	212a6 <register_events+0xac>
   21298:	2b01      	cmp	r3, #1
   2129a:	d10b      	bne.n	212b4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2129c:	f8db 0010 	ldr.w	r0, [fp, #16]
   212a0:	4622      	mov	r2, r4
   212a2:	4659      	mov	r1, fp
   212a4:	e004      	b.n	212b0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   212a6:	f8db 0010 	ldr.w	r0, [fp, #16]
   212aa:	4622      	mov	r2, r4
   212ac:	4659      	mov	r1, fp
   212ae:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   212b0:	f7ff ff6e 	bl	21190 <add_event>
	event->poller = poller;
   212b4:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   212b8:	3501      	adds	r5, #1
   212ba:	e7d7      	b.n	2126c <register_events+0x72>

000212bc <k_poll_event_init>:
{
   212bc:	b510      	push	{r4, lr}
	event->type = type;
   212be:	0452      	lsls	r2, r2, #17
   212c0:	0209      	lsls	r1, r1, #8
   212c2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   212c6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   212ca:	430a      	orrs	r2, r1
   212cc:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   212ce:	2400      	movs	r4, #0
	event->type = type;
   212d0:	430a      	orrs	r2, r1
	event->obj = obj;
   212d2:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   212d6:	6084      	str	r4, [r0, #8]
}
   212d8:	bd10      	pop	{r4, pc}

000212da <z_handle_obj_poll_events>:
{
   212da:	4603      	mov	r3, r0
	return list->head == list;
   212dc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   212de:	4283      	cmp	r3, r0
   212e0:	d008      	beq.n	212f4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   212e2:	e9d0 3200 	ldrd	r3, r2, [r0]
   212e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   212e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   212ea:	2300      	movs	r3, #0
	node->prev = NULL;
   212ec:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   212f0:	f7ff bef2 	b.w	210d8 <signal_poll_event>
}
   212f4:	4770      	bx	lr

000212f6 <k_mem_pool_malloc>:
{
   212f6:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   212f8:	2408      	movs	r4, #8
   212fa:	190a      	adds	r2, r1, r4
   212fc:	d208      	bcs.n	21310 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   212fe:	2600      	movs	r6, #0
   21300:	2700      	movs	r7, #0
   21302:	e9cd 6700 	strd	r6, r7, [sp]
   21306:	eb0d 0104 	add.w	r1, sp, r4
   2130a:	f7ff fb90 	bl	20a2e <k_mem_pool_alloc>
   2130e:	b110      	cbz	r0, 21316 <k_mem_pool_malloc+0x20>
		return NULL;
   21310:	2000      	movs	r0, #0
}
   21312:	b004      	add	sp, #16
   21314:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   21316:	9802      	ldr	r0, [sp, #8]
   21318:	4622      	mov	r2, r4
   2131a:	a902      	add	r1, sp, #8
   2131c:	f7fc fc28 	bl	1db70 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   21320:	9802      	ldr	r0, [sp, #8]
   21322:	3008      	adds	r0, #8
   21324:	e7f5      	b.n	21312 <k_mem_pool_malloc+0x1c>

00021326 <k_free>:
	if (ptr != NULL) {
   21326:	b110      	cbz	r0, 2132e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   21328:	3808      	subs	r0, #8
   2132a:	f7ff bb99 	b.w	20a60 <k_mem_pool_free_id>
}
   2132e:	4770      	bx	lr

00021330 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   21330:	4770      	bx	lr
